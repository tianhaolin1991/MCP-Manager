{"name": "AgentQL", "description": "Extract structured data from a given URL using a prompt to describe the data and fields to extract", "tools": [{"name": "extract-web-data", "server": "AgentQL", "description": "Extracts structured data from a given URL using a prompt to describe the data and fields to extract.", "parameter": {"url": "(string) The URL of the web page to extract data from.", "prompt": "(string) A description of the actual data and its fields to extract."}, "task": {"category": "AgentQL", "query": "Extract structured data from web pages"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Aiven", "description": "1.列出Aiven账户中的所有项目 2.列出特定Aiven项目中的所有服务 3.获取特定Aiven项目中服务的详细信息", "tools": [{"name": "list_projects", "server": "Aiven", "description": "List all projects on your Aiven account.", "parameter": {}, "task": {"category": "Aiven", "query": "List all projects in account"}}, {"name": "list_services", "server": "Aiven", "description": "List all services in a specific Aiven project.", "parameter": {}, "task": {"category": "Aiven", "query": "List all services in a project"}}, {"name": "get_service_details", "server": "Aiven", "description": "Get the detail of your service in a specific Aiven project.", "parameter": {}, "task": {"category": "Aiven", "query": "Retrieve service details in a project"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Alibaba Cloud AnalyticDB for MySQL", "description": "1.在AnalyticDB for MySQL集群中执行SQL查询 2.获取SQL查询的执行计划 3.获取带运行时统计信息的实际执行计划", "tools": [{"name": "execute_sql", "server": "Alibaba Cloud AnalyticDB for MySQL", "description": "Execute a SQL query in the AnalyticDB for MySQL Cluster", "parameter": {}, "task": {"category": "AnalyticDB for MySQL", "query": "Execute SQL queries on database cluster"}}, {"name": "get_query_plan", "server": "Alibaba Cloud AnalyticDB for MySQL", "description": "Get the query plan for a SQL query", "parameter": {}, "task": {"category": "Alibaba Cloud AnalyticDB for MySQL", "query": "Retrieve query execution plan"}}, {"name": "get_execution_plan", "server": "Alibaba Cloud AnalyticDB for MySQL", "description": "Get the actual execution plan with runtime statistics for a SQL query", "parameter": {}, "task": {"category": "Alibaba Cloud AnalyticDB for MySQL", "query": "Retrieve execution plan for SQL queries"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Apache IoTDB", "description": "Database metadata and data query operations, including: SHOW/COUNT queries, SELECT queries, listing tables, and viewing table schema", "tools": [{"name": "metadata_query", "server": "Apache IoTDB", "description": "Execute SHOW/COUNT queries to read metadata from the database", "parameter": {"query_sql": "(string) The SHOW/COUNT SQL query to execute"}, "task": {"category": "Apache IoTDB", "query": "Read metadata from the database"}}, {"name": "select_query", "server": "Apache IoTDB", "description": "Execute SELECT queries to read data from the database", "parameter": {"query_sql": "(string) The SELECT SQL query to execute"}, "task": {"category": "Apache IoTDB", "query": "Read data from the database"}}, {"name": "read_query", "server": "Apache IoTDB", "description": "Execute SELECT queries to read data from the database", "parameter": {"query": "(string) The SELECT SQL query to execute"}, "task": {"category": "Apache IoTDB", "query": "Read data from database using SELECT queries"}}, {"name": "list_tables", "server": "Apache IoTDB", "description": "Get a list of all tables in the database", "parameter": {}, "task": {"category": "Apache IoTDB", "query": "Retrieve all tables from the database"}}, {"name": "describe-table", "server": "Apache IoTDB", "description": "View schema information for a specific table", "parameter": {"table_name": "(string) Name of table to describe"}, "task": {"category": "Apache IoTDB", "query": "View schema information for a table"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Apify", "description": "1.检索特定Actor的文档、输入模式和详细信息 2.通过关键词搜索相关Actor并返回详细信息 3.将Actor添加到可用工具列表 4.从可用工具列表中移除Actor", "tools": [{"name": "get-actor-details", "server": "Apify", "description": "Retrieves documentation, input schema, and details about a specific Actor.", "parameter": {}, "task": {"category": "Apify", "query": "Retrieve details and documentation for an Actor"}}, {"name": "discover-actors", "server": "Apify", "description": "Searches for relevant Actors using keywords and returns their details.", "parameter": {}, "task": {"category": "Apify", "query": "Search for relevant actors by keywords"}}, {"name": "add-actor-as-tool", "server": "Apify", "description": "Adds an Actor by name to the available tools list without executing it, requiring user consent to run later.", "parameter": {}, "task": {"category": "Apify", "query": "Add an Actor to the tools list"}}, {"name": "remove-actor-from-tool", "server": "Apify", "description": "Removes an Actor by name from the available tools list when it's no longer needed.", "parameter": {}, "task": {"category": "Apify", "query": "Remove an Actor from the tools list"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "APIMatic MCP", "description": "Validate OpenAPI files using APIMatic's API", "tools": [{"name": "validate-openapi-using-apimatic", "server": "APIMatic MCP", "description": "Validates an OpenAPI file using APIMatic’s API and returns a validation summary.", "parameter": {}, "task": {"category": "APIMatic", "query": "Validate OpenAPI specifications"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Arize Phoenix", "description": "1.提供围绕OpenTelemetry原语的轻量级包装 2.通过OpenAPI REST接口与Phoenix服务器交互的轻量级客户端 3.评估LLM应用程序的工具 4.Arize Phoenix API的客户端 5.Arize Phoenix的MCP服务器实现", "tools": [{"name": "arize-phoenix-otel", "server": "Arize Phoenix", "description": "Provides a lightweight wrapper around OpenTelemetry primitives with Phoenix-aware defaults", "parameter": {}, "task": {"category": "Arize Phoenix", "query": "Wrapper for OpenTelemetry with Phoenix defaults"}}, {"name": "arize-phoenix-client", "server": "Arize Phoenix", "description": "Lightweight client for interacting with the Phoenix server via its OpenAPI REST interface", "parameter": {}, "task": {"category": "Arize Phoenix", "query": "Interact with Phoenix server via REST"}}, {"name": "arize-phoenix-evals", "server": "Arize Phoenix", "description": "Tooling to evaluate LLM applications including RAG relevance, answer relevance, and more", "parameter": {}, "task": {"category": "Arize Phoenix", "query": "Evaluate LLM applications"}}, {"name": "@arizeai/phoenix-client", "server": "Arize Phoenix", "description": "Client for the Arize Phoenix API", "parameter": {}, "task": {"category": "Arize Phoenix", "query": "Client for API interactions"}}, {"name": "@arizeai/phoenix-mcp", "server": "Arize Phoenix", "description": "MCP server implementation for Arize Phoenix providing a unified interface to Phoenix's capabilities", "parameter": {}, "task": {"category": "Arize Phoenix", "query": "Access unified interface for Phoenix capabilities"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Astra DB", "description": "Astra DB operations, including: collection management (create/update/delete), record CRUD operations, bulk operations, document count estimation, and client setup assistance", "tools": [{"name": "GetCollections", "server": "Astra DB", "description": "Get all collections in the database", "parameter": {}, "task": {"category": "Astra DB", "query": "Retrieve all collections from the database"}}, {"name": "CreateCollection", "server": "Astra DB", "description": "Create a new collection in the database", "parameter": {}, "task": {"category": "Astra DB", "query": "Create a new database collection"}}, {"name": "UpdateCollection", "server": "Astra DB", "description": "Update an existing collection in the database", "parameter": {}, "task": {"category": "Astra DB", "query": "Update an existing collection"}}, {"name": "DeleteCollection", "server": "Astra DB", "description": "Delete a collection from the database", "parameter": {}, "task": {"category": "Astra DB", "query": "Delete a collection from the database"}}, {"name": "ListRecords", "server": "Astra DB", "description": "List records from a collection in the database", "parameter": {}, "task": {"category": "Astra DB", "query": "List records from a database collection"}}, {"name": "GetRecord", "server": "Astra DB", "description": "Get a specific record from a collection by ID", "parameter": {}, "task": {"category": "Astra DB", "query": "Retrieve a record from a collection"}}, {"name": "CreateRecord", "server": "Astra DB", "description": "Create a new record in a collection", "parameter": {}, "task": {"category": "Astra DB", "query": "Create a new record in a database collection"}}, {"name": "UpdateRecord", "server": "Astra DB", "description": "Update an existing record in a collection", "parameter": {}, "task": {"category": "Astra DB", "query": "Update existing records in a collection"}}, {"name": "DeleteRecord", "server": "Astra DB", "description": "Delete a record from a collection", "parameter": {}, "task": {"category": "Astra DB", "query": "Delete a record from a collection"}}, {"name": "FindRecord", "server": "Astra DB", "description": "Find records in a collection by field value", "parameter": {}, "task": {"category": "Astra DB", "query": "Search for records in a collection"}}, {"name": "BulkCreateRecords", "server": "Astra DB", "description": "Create multiple records in a collection at once", "parameter": {}, "task": {"category": "Astra DB", "query": "Bulk create records in a collection"}}, {"name": "BulkUpdateRecords", "server": "Astra DB", "description": "Update multiple records in a collection at once", "parameter": {}, "task": {"category": "Astra DB", "query": "Update multiple records in a collection"}}, {"name": "BulkDeleteRecords", "server": "Astra DB", "description": "Delete multiple records from a collection at once", "parameter": {}, "task": {"category": "Astra DB", "query": "Delete multiple records in bulk"}}, {"name": "OpenBrowser", "server": "Astra DB", "description": "Open a web browser for authentication and setup", "parameter": {}, "task": {"category": "Astra DB", "query": "Open web browser for authentication"}}, {"name": "HelpAddToClient", "server": "Astra DB", "description": "Get assistance with adding Astra DB client to your MCP client", "parameter": {}, "task": {"category": "Astra DB", "query": "Assistance with adding client to MCP"}}, {"name": "EstimateDocumentCount", "server": "Astra DB", "description": "Get estimate of the number of documents in a collection", "parameter": {}, "task": {"category": "Astra DB", "query": "Estimate document count in a collection"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Audiense Insights", "description": "Audiense insights reports operations, including: retrieving reports list, fetching detailed report information, getting audience insights, retrieving baseline audiences, fetching affinity categories, comparing audience influencers, getting audience content engagement, and generating comprehensive report summaries", "tools": [{"name": "get-reports", "server": "Audiense Insights", "description": "Retrieves the list of Audiense insights reports owned by the authenticated user.", "parameter": {}, "task": {"category": "Audiense", "query": "Retrieve insights reports for authenticated user"}}, {"name": "get-report-info", "server": "Audiense Insights", "description": "Fetches detailed information about a specific intelligence report, including status, segmentation type, audience size, segments, and access links.", "parameter": {"report_id": "(string) The ID of the intelligence report."}, "task": {"category": "Audiense Insights", "query": "Fetch detailed information about an intelligence report"}}, {"name": "get-audience-insights", "server": "Audiense Insights", "description": "Retrieves aggregated insights for a given audience, including demographics, behavioral traits, psychographics, and socioeconomic factors.", "parameter": {"audience_insights_id": "(string) The ID of the audience insights.", "insights": "(array of strings, optional) List of specific insight names to filter."}, "task": {"category": "Audiense Insights", "query": "Retrieve aggregated audience insights"}}, {"name": "get-baselines", "server": "Audiense Insights", "description": "Retrieves available baseline audiences, optionally filtered by country.", "parameter": {"country": "(string, optional) ISO country code to filter by."}, "task": {"category": "Audiense Insights", "query": "Retrieve baseline audiences with optional country filter"}}, {"name": "get-categories", "server": "Audiense Insights", "description": "Retrieves the list of available affinity categories that can be used in influencer comparisons.", "parameter": {}, "task": {"category": "Audiense Insights", "query": "Retrieve available affinity categories for influencer comparisons"}}, {"name": "compare-audience-influencers", "server": "Audiense Insights", "description": "Compares influencers of a given audience with a baseline audience, providing affinity scores, baseline comparisons, and uniqueness scores.", "parameter": {"audience_influencers_id": "(string) ID of the audience influencers.", "baseline_audience_influencers_id": "(string) ID of the baseline audience influencers.", "cursor": "(number, optional) Pagination cursor.", "count": "(number, optional) Number of items per page (default: 200).", "bio_keyword": "(string, optional) Filter influencers by bio keyword.", "entity_type": "(enum: person | brand, optional) Filter by entity type.", "followers_min": "(number, optional) Minimum number of followers.", "followers_max": "(number, optional) Maximum number of followers.", "categories": "(array of strings, optional) Filter influencers by categories.", "countries": "(array of strings, optional) Filter influencers by country ISO codes."}, "task": {"category": "Audiense Insights", "query": "Compare influencers between two audiences"}}, {"name": "get-audience-content", "server": "Audiense Insights", "description": "Retrieves audience content engagement details, including liked, shared, and influential content.", "parameter": {"audience_content_id": "(string) The ID of the audience content."}, "task": {"category": "Audiense Insights", "query": "Retrieve engagement details for audience content"}}, {"name": "report-summary", "server": "Audiense Insights", "description": "Generates a comprehensive summary of an Audiense report, including metadata, audience size, segment information, top insights, and top influencers with comparison metrics.", "parameter": {"report_id": "(string) The ID of the intelligence report to summarize."}, "task": {"category": "Audiense Insights", "query": "Generate a summary of an intelligence report"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "AWS", "description": "1.搜索AWS文档和最佳实践 2.获取AWS文档内容推荐 3.将AWS文档转换为Markdown格式 4.发现和查询Amazon Bedrock知识库 5.分析AWS CDK项目并提供构造建议 6.提供基础设施即代码最佳实践 7.分析和可视化AWS成本 8.使用自然语言查询成本数据 9.生成详细成本报告和见解 10.基于文本和颜色生成图像 11.生成专业图表 12.运行AWS Lambda函数 13.实施安全优先的开发工作流程 14.集成Checkov进行安全检查 15.提供AWS和AWSCC提供者文档 16.使用AWS-IA GenAI模块 17.执行Terraform工作流 18.使用地理编码搜索地点 19.获取特定地点的详细信息 20.反向地理编码坐标到地址 21.搜索指定位置附近的地点 22.搜索当前开放的地点 23.计算位置之间的路线 24.优化路线点以提高路由效率 25.使用FAISS和Amazon Bedrock嵌入索引Git仓库 26.在仓库内执行语义搜索 27.分析仓库结构 28.在AWS组织中搜索GitHub仓库 29.支持文本和二进制的文件访问", "tools": [{"name": "Search Documentation", "server": "AWS", "description": "Search AWS documentation and best practices using the official AWS search API.", "parameter": {}, "task": {"category": "AWS", "query": "Search AWS documentation and best practices"}}, {"name": "Get Content Recommendations", "server": "AWS", "description": "Get content recommendations for AWS documentation pages.", "parameter": {}, "task": {"category": "AWS", "query": "Retrieve content recommendations for documentation"}}, {"name": "Convert Documentation to Markdown", "server": "AWS", "description": "Convert AWS documentation to markdown format.", "parameter": {}, "task": {"category": "AWS", "query": "Convert documentation to markdown format"}}, {"name": "Discover Knowledge Bases", "server": "AWS", "description": "Discover Amazon Bedrock Knowledge Bases and their data sources.", "parameter": {}, "task": {"category": "AWS", "query": "Discover knowledge bases and their data sources"}}, {"name": "Query Knowledge Bases", "server": "AWS", "description": "Query Amazon Bedrock Knowledge Bases with natural language.", "parameter": {}, "task": {"category": "AWS", "query": "Query knowledge bases with natural language"}}, {"name": "Filter Results by Data Source", "server": "AWS", "description": "Filter query results by data source.", "parameter": {}, "task": {"category": "AWS", "query": "Filter query results based on data source"}}, {"name": "Rerank Results", "server": "AWS", "description": "Rerank query results.", "parameter": {}, "task": {"category": "AWS", "query": "Rerank search or query results"}}, {"name": "AWS CDK Project Analysis", "server": "AWS", "description": "Analyze and assist with AWS CDK projects.", "parameter": {}, "task": {"category": "AWS", "query": "Analyze and assist with AWS CDK projects"}}, {"name": "CDK Construct Recommendations", "server": "AWS", "description": "Provide recommendations for CDK constructs.", "parameter": {}, "task": {"category": "AWS", "query": "Get recommendations for CDK constructs"}}, {"name": "Infrastructure as Code Best Practices", "server": "AWS", "description": "Provide best practices for infrastructure as code.", "parameter": {}, "task": {"category": "AWS", "query": "Best practices for infrastructure as code"}}, {"name": "Analyze and Visualize Costs", "server": "AWS", "description": "Analyze and visualize AWS costs.", "parameter": {}, "task": {"category": "AWS", "query": "Analyze and visualize cloud costs"}}, {"name": "Query Cost Data with Natural Language", "server": "AWS", "description": "Query cost data using natural language.", "parameter": {}, "task": {"category": "AWS", "query": "Query cost data using natural language"}}, {"name": "Generate Cost Reports and Insights", "server": "AWS", "description": "Generate detailed cost reports and insights.", "parameter": {}, "task": {"category": "AWS", "query": "Generate cost reports and insights"}}, {"name": "Text-Based Image Generation", "server": "AWS", "description": "Generate images using text with customizable parameters.", "parameter": {}, "task": {"category": "AWS", "query": "Generate images from text"}}, {"name": "Color-Guided Image Generation", "server": "AWS", "description": "Generate images with specific color palettes.", "parameter": {}, "task": {"category": "AWS", "query": "Generate images based on color palettes"}}, {"name": "Save Generated Images", "server": "AWS", "description": "Save generated images to the workspace.", "parameter": {}, "task": {"category": "AWS", "query": "Save images to workspace"}}, {"name": "Generate Professional Diagrams", "server": "AWS", "description": "Generate professional diagrams using Python code.", "parameter": {}, "task": {"category": "AWS", "query": "Generate diagrams using Python"}}, {"name": "Customize Diagram Appearance", "server": "AWS", "description": "Customize the appearance, layout, and styling of diagrams.", "parameter": {}, "task": {"category": "AWS", "query": "Customize diagram appearance and styling"}}, {"name": "Code Scanning for Secure Diagram Generation", "server": "AWS", "description": "Scan code to ensure secure diagram generation.", "parameter": {}, "task": {"category": "AWS", "query": "Scan code for security in diagram generation"}}, {"name": "Run AWS Lambda Functions", "server": "AWS", "description": "Select and run AWS Lambda functions as MCP tools without code changes.", "parameter": {}, "task": {"category": "AWS", "query": "Run Lambda functions without code changes"}}, {"name": "Security-First Development Workflow", "server": "AWS", "description": "Implement a security-first development workflow.", "parameter": {}, "task": {"category": "AWS", "query": "Implement security-first development practices"}}, {"name": "Checkov Integration", "server": "AWS", "description": "Integrate Checkov for security checks.", "parameter": {}, "task": {"category": "AWS", "query": "Perform security checks using Checkov"}}, {"name": "AWS and AWSCC Provider Documentation", "server": "AWS", "description": "Provide documentation for AWS and AWSCC providers.", "parameter": {}, "task": {"category": "AWS", "query": "Access documentation for AWS and AWSCC providers"}}, {"name": "AWS-IA GenAI Modules", "server": "AWS", "description": "Use AWS-IA GenAI modules.", "parameter": {}, "task": {"category": "AWS", "query": "Use generative AI modules"}}, {"name": "Terraform Workflow Execution", "server": "AWS", "description": "Execute Terraform workflows.", "parameter": {}, "task": {"category": "AWS", "query": "Execute Terraform workflows"}}, {"name": "Search for Places Using Geocoding", "server": "AWS", "description": "Search for places using geocoding.", "parameter": {}, "task": {"category": "AWS", "query": "Search for places using geocoding"}}, {"name": "Get Details for Specific Places", "server": "AWS", "description": "Get details for specific places by PlaceId.", "parameter": {}, "task": {"category": "AWS", "query": "Retrieve details for specific places"}}, {"name": "Reverse Geocode Coordinates to Addresses", "server": "AWS", "description": "Reverse geocode coordinates to addresses.", "parameter": {}, "task": {"category": "AWS", "query": "Convert coordinates to addresses"}}, {"name": "Search for Places Near a Location", "server": "AWS", "description": "Search for places near a specified location.", "parameter": {}, "task": {"category": "AWS", "query": "Find nearby places based on location"}}, {"name": "Search for Places That Are Currently Open", "server": "AWS", "description": "Search for places that are currently open.", "parameter": {}, "task": {"category": "AWS", "query": "Find currently open places"}}, {"name": "Calculate Routes Between Locations", "server": "AWS", "description": "Calculate routes between locations with turn-by-turn directions.", "parameter": {}, "task": {"category": "AWS", "query": "Calculate routes with turn-by-turn directions"}}, {"name": "Optimize Waypoints for Efficient Routing", "server": "AWS", "description": "Optimize waypoints for efficient routing.", "parameter": {}, "task": {"category": "AWS", "query": "Optimize routing waypoints"}}, {"name": "Repository Indexing", "server": "AWS", "description": "Index Git repositories using FAISS and Amazon Bedrock embeddings.", "parameter": {}, "task": {"category": "AWS", "query": "Index Git repositories with embeddings"}}, {"name": "Semantic Search Within Repositories", "server": "AWS", "description": "Perform semantic search within repositories.", "parameter": {}, "task": {"category": "AWS", "query": "Search within repositories using semantic analysis"}}, {"name": "Repository Structure Analysis", "server": "AWS", "description": "Analyze the structure of repositories.", "parameter": {}, "task": {"category": "AWS", "query": "Analyze repository structures"}}, {"name": "GitHub Repository Search in AWS Organizations", "server": "AWS", "description": "Search GitHub repositories within AWS organizations.", "parameter": {}, "task": {"category": "AWS", "query": "Search repositories in AWS organizations on GitHub"}}, {"name": "File Access with Text and Binary Support", "server": "AWS", "description": "Access files with text and binary support.", "parameter": {}, "task": {"category": "AWS", "query": "Access files with text and binary support"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}, {"name": "Location & Environmental Service", "description": "位置与环境服务,包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Axiom", "description": "1. Execute APL queries against Axiom datasets 2. List available Axiom datasets", "tools": [{"name": "queryApl", "server": "Axiom", "description": "Execute APL queries against Axiom datasets", "parameter": {}, "task": {"category": "Axiom", "query": "Execute APL queries on datasets"}}, {"name": "listDatasets", "server": "Axiom", "description": "List available Axiom datasets", "parameter": {}, "task": {"category": "Axiom", "query": "List available datasets"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Azure", "description": "1. List and manage Azure AI Search services, indexes, and queries 2. List and manage Cosmos DB accounts, databases, containers, and items 3. Execute SQL queries against Cosmos DB containers 4. List and manage Azure Database for PostgreSQL - Flexible Server databases, tables, and servers 5. List and manage Kusto clusters, databases, tables, and schemas 6. Query Kusto databases using KQL 7. List and manage Storage accounts, blob containers, blobs, and tables 8. Query logs using KQL in Log Analytics workspaces 9. List and manage App Configuration stores, key-value pairs, and labeled configurations 10. Lock/unlock configuration settings in App Configuration stores 11. List, create, and manage keys in Azure Key Vault 12. List and manage resource groups 13. Execute Azure CLI and Azure Developer CLI commands 14. Support for all Azure CLI functionality, JSON output formatting, and cross-platform compatibility 15. Support for template discovery, initialization, provisioning, and deployment", "tools": [{"name": "List Azure AI Search services", "server": "Azure", "description": "Lists all Azure AI Search services.", "parameter": {}, "task": {"category": "Azure", "query": "List all AI Search services"}}, {"name": "List indexes and look at their schema and configuration", "server": "Azure", "description": "Lists indexes and provides details about their schema and configuration.", "parameter": {}, "task": {"category": "Azure", "query": "List and view details of indexes"}}, {"name": "Query search indexes", "server": "Azure", "description": "Queries search indexes for specific data.", "parameter": {}, "task": {"category": "Azure", "query": "Search for specific data in indexes"}}, {"name": "List Cosmos DB accounts", "server": "Azure", "description": "Lists all Cosmos DB accounts.", "parameter": {}, "task": {"category": "Azure", "query": "List all Cosmos DB accounts"}}, {"name": "List and query databases", "server": "Azure", "description": "Lists and queries databases within a Cosmos DB account.", "parameter": {}, "task": {"category": "Azure", "query": "List and query databases in Cosmos DB"}}, {"name": "Manage containers and items", "server": "Azure", "description": "Manages containers and items within a Cosmos DB database.", "parameter": {}, "task": {"category": "Azure", "query": "Manage containers and items in Cosmos DB"}}, {"name": "Execute SQL queries against containers", "server": "Azure", "description": "Executes SQL queries against containers within a Cosmos DB database.", "parameter": {}, "task": {"category": "Azure Cosmos DB", "query": "Execute SQL queries on database containers"}}, {"name": "List and query databases", "server": "Azure", "description": "Lists and queries databases within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}, "task": {"category": "Azure", "query": "List and query databases in PostgreSQL Flexible Server"}}, {"name": "List and get schema for tables", "server": "Azure", "description": "Lists and retrieves the schema for tables within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}, "task": {"category": "Azure", "query": "Retrieve schema information for PostgreSQL tables"}}, {"name": "List, get configuration and get parameters for servers", "server": "Azure", "description": "Lists, retrieves configuration, and retrieves parameters for servers within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}, "task": {"category": "Azure", "query": "Manage PostgreSQL Flexible Server configurations"}}, {"name": "List Kusto clusters", "server": "Azure", "description": "Lists all Kusto clusters.", "parameter": {}, "task": {"category": "Azure", "query": "List all available clusters"}}, {"name": "List databases in a Kusto cluster", "server": "Azure", "description": "Lists databases within a Kusto cluster.", "parameter": {}, "task": {"category": "Azure", "query": "List databases in a Kusto cluster"}}, {"name": "List tables in a Kusto database", "server": "Azure", "description": "Lists tables within a Kusto database.", "parameter": {}, "task": {"category": "Azure", "query": "List tables in a database"}}, {"name": "Get schema for a Kusto table", "server": "Azure", "description": "Retrieves the schema for a Kusto table.", "parameter": {}, "task": {"category": "Azure", "query": "Retrieve schema for Kusto tables"}}, {"name": "Sample rows from a Kusto table", "server": "Azure", "description": "Samples rows from a Kusto table.", "parameter": {}, "task": {"category": "Azure", "query": "Sample rows from a table"}}, {"name": "Query Kusto databases using KQL", "server": "Azure", "description": "Queries Kusto databases using KQL.", "parameter": {}, "task": {"category": "Azure", "query": "Query databases using KQL"}}, {"name": "List Storage accounts", "server": "Azure", "description": "Lists all Storage accounts.", "parameter": {}, "task": {"category": "Azure", "query": "List all storage accounts"}}, {"name": "Manage blob containers and blobs", "server": "Azure", "description": "Manages blob containers and blobs within a Storage account.", "parameter": {}, "task": {"category": "Azure", "query": "Manage blob containers and blobs in storage"}}, {"name": "List and query Storage tables", "server": "Azure", "description": "Lists and queries tables within a Storage account.", "parameter": {}, "task": {"category": "Azure", "query": "List and query tables in Storage account"}}, {"name": "Get container properties and metadata", "server": "Azure", "description": "Retrieves properties and metadata for a Storage container.", "parameter": {}, "task": {"category": "Azure", "query": "Retrieve storage container properties and metadata"}}, {"name": "List Log Analytics workspaces", "server": "Azure", "description": "Lists all Log Analytics workspaces.", "parameter": {}, "task": {"category": "Azure", "query": "List all Log Analytics workspaces"}}, {"name": "Query logs using KQL", "server": "Azure", "description": "Queries logs using KQL.", "parameter": {}, "task": {"category": "Azure", "query": "Query logs with KQL"}}, {"name": "List available tables", "server": "Azure", "description": "Lists available tables within a Log Analytics workspace.", "parameter": {}, "task": {"category": "Azure", "query": "List tables in Log Analytics workspace"}}, {"name": "Configure monitoring options", "server": "Azure", "description": "Configures monitoring options within a Log Analytics workspace.", "parameter": {}, "task": {"category": "Azure", "query": "Configure monitoring settings in Log Analytics"}}, {"name": "List App Configuration stores", "server": "Azure", "description": "Lists all App Configuration stores.", "parameter": {}, "task": {"category": "Azure", "query": "List all App Configuration stores"}}, {"name": "Manage key-value pairs", "server": "Azure", "description": "Manages key-value pairs within an App Configuration store.", "parameter": {}, "task": {"category": "Azure", "query": "Manage key-value pairs in App Configuration"}}, {"name": "Handle labeled configurations", "server": "Azure", "description": "Handles labeled configurations within an App Configuration store.", "parameter": {}, "task": {"category": "Azure", "query": "Manage labeled configurations in App Configuration store"}}, {"name": "Lock/unlock configuration settings", "server": "Azure", "description": "Locks or unlocks configuration settings within an App Configuration store.", "parameter": {}, "task": {"category": "Azure", "query": "Manage configuration settings in App Configuration store"}}, {"name": "List, create, and get keys", "server": "Azure", "description": "Lists, creates, and retrieves keys within an Azure Key Vault.", "parameter": {}, "task": {"category": "Azure", "query": "Manage keys in Azure Key Vault"}}, {"name": "List resource groups", "server": "Azure", "description": "Lists all resource groups.", "parameter": {}, "task": {"category": "Azure", "query": "List all resource groups"}}, {"name": "Resource group management operations", "server": "Azure", "description": "Performs management operations on resource groups.", "parameter": {}, "task": {"category": "Azure", "query": "Manage resource groups"}}, {"name": "Execute Azure CLI commands directly", "server": "Azure", "description": "Executes Azure CLI commands directly.", "parameter": {}, "task": {"category": "Azure", "query": "Execute Azure CLI commands"}}, {"name": "Support for all Azure CLI functionality", "server": "Azure", "description": "Supports all Azure CLI functionality.", "parameter": {}, "task": {"category": "Azure", "query": "Access all Azure CLI functionalities"}}, {"name": "JSON output formatting", "server": "Azure", "description": "Formats output in JSON.", "parameter": {}, "task": {"category": "Azure", "query": "Format output in JSON"}}, {"name": "Cross-platform compatibility", "server": "Azure", "description": "Ensures cross-platform compatibility.", "parameter": {}, "task": {"category": "Azure", "query": "Ensure compatibility across different platforms"}}, {"name": "Execute Azure Developer CLI commands directly", "server": "Azure", "description": "Executes Azure Developer CLI commands directly.", "parameter": {}, "task": {"category": "Azure", "query": "Execute Azure Developer CLI commands"}}, {"name": "Support for template discovery, template initialization, provisioning and deployment", "server": "Azure", "description": "Supports template discovery, template initialization, provisioning, and deployment.", "parameter": {}, "task": {"category": "Azure", "query": "Manage templates for provisioning and deployment"}}, {"name": "Cross-platform compatibility", "server": "Azure", "description": "Ensures cross-platform compatibility.", "parameter": {}, "task": {"category": "Azure", "query": "Ensure compatibility across different platforms"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Bankless Onchain", "description": "1.从各种区块链网络读取智能合约状态 2.检索代理实现合约地址 3.根据主题获取合约事件日志 4.从事件名称和参数类型生成事件主题签名", "tools": [{"name": "read_contract", "server": "Bankless Onchain", "description": "Read state from smart contracts on various blockchain networks.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'polygon')", "contract": "(string, required) The contract address", "method": "(string, required) The contract method to call", "inputs": "(array, required) Input parameters for the method call, each containing: { type (string), value (any) }", "outputs": "(array, required) Expected output types, each containing: { type (string) }"}, "task": {"category": "Blockchain", "query": "Read state from smart contracts"}}, {"name": "get_proxy", "server": "Bankless Onchain", "description": "Retrieve proxy implementation contract addresses.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "contract": "(string, required) The contract address"}, "task": {"category": "Blockchain", "query": "Retrieve proxy contract addresses"}}, {"name": "get_events", "server": "Bankless Onchain", "description": "Fetch event logs for a contract based on topics.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "addresses": "(array, required) List of contract addresses to filter events", "topic": "(string, required) Primary topic to filter events", "optionalTopics": "(array, optional) Optional additional topics (can include null values)"}, "task": {"category": "Bankless Onchain", "query": "Fetch event logs for contracts on blockchain"}}, {"name": "build_event_topic", "server": "Bankless Onchain", "description": "Generate an event topic signature from event name and argument types.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "name": "(string, required) Event name (e.g., 'Transfer(address,address,uint256)')", "arguments": "(array, required) Event arguments types, each containing: { type (string) }"}, "task": {"category": "Blockchain", "query": "Generate event topic signatures for blockchain events"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}]}
{"name": "Bitrise", "description": "Bitrise CI/CD平台操作,包括:应用管理、构建触发与监控、工作流配置、Webhook管理、缓存管理、流水线管理、工作区管理、用户与成员管理、发布管理(测试构建与测试者管理)", "tools": [{"name": "list_apps", "server": "Bitrise", "description": "List all the apps available for the authenticated account", "parameter": {"sort_by": "(Optional, string) Order of the apps: last_build_at (default) or created_at", "next": "(Optional, string) Slug of the first app in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}, "task": {"category": "Bitrise", "query": "List available applications for an account"}}, {"name": "register_app", "server": "Bitrise", "description": "Add a new app to Bitrise", "parameter": {"repo_url": "(string) Repository URL", "is_public": "(boolean) Whether the app's builds visibility is 'public'", "organization_slug": "(string) The organization (aka workspace) the app to add to", "project_type": "(Optional, string) Type of project (ios, android, etc.)", "provider": "(Optional, string) github"}, "task": {"category": "Bitrise", "query": "Register a new application"}}, {"name": "finish_bitrise_app", "server": "Bitrise", "description": "Finish the setup of a Bitrise app", "parameter": {"app_slug": "(string) The slug of the Bitrise app to finish setup for", "project_type": "(Optional, string) The type of project (e.g., android, ios, flutter, etc.)", "stack_id": "(Optional, string) The stack ID to use for the app", "mode": "(Optional, string) The mode of setup", "config": "(Optional, string) The configuration to use for the app"}, "task": {"category": "Bitrise", "query": "Complete the setup for a Bitrise application"}}, {"name": "get_app", "server": "Bitrise", "description": "Get the details of a specific app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "Retrieve details of a specific application"}}, {"name": "delete_app", "server": "Bitrise", "description": "Delete an app from Bitrise", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "Delete an application from the platform"}}, {"name": "update_app", "server": "Bitrise", "description": "Update an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "is_public": "(boolean) Whether the app's builds visibility is 'public'", "project_type": "(string) Type of project", "provider": "(string) Repository provider", "repo_url": "(string) Repository URL"}, "task": {"category": "Bitrise", "query": "Update app settings and repository information"}}, {"name": "get_bitrise_yml", "server": "Bitrise", "description": "Get the current Bitrise YML config file of a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "Retrieve YML configuration for an app"}}, {"name": "update_bitrise_yml", "server": "Bitrise", "description": "Update the Bitrise YML config file of a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "bitrise_yml_as_json": "(string) The new Bitrise YML config file content"}, "task": {"category": "Bitrise", "query": "Update YML configuration for an app"}}, {"name": "list_branches", "server": "Bitrise", "description": "List the branches with existing builds of an app's repository", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "List branches with existing builds"}}, {"name": "register_ssh_key", "server": "Bitrise", "description": "Add an SSH-key to a specific app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "auth_ssh_private_key": "(string) Private SSH key", "auth_ssh_public_key": "(string) Public SSH key", "is_register_key_into_provider_service": "(boolean) Register the key in the provider service"}, "task": {"category": "Bitrise", "query": "Add SSH key to an application"}}, {"name": "register_webhook", "server": "Bitrise", "description": "Register an incoming webhook for a specific application", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "Register incoming webhook for an application"}}, {"name": "list_builds", "server": "Bitrise", "description": "List all the builds of a specified Bitrise app or all accessible builds", "parameter": {"app_slug": "(Optional, string) Identifier of the Bitrise app", "sort_by": "(Optional, string) Order of builds: created_at (default), running_first", "branch": "(Optional, string) Filter builds by branch", "workflow": "(Optional, string) Filter builds by workflow", "status": "(Optional, integer) Filter builds by status (0: not finished, 1: successful, 2: failed, 3: aborted, 4: in-progress)", "next": "(Optional, string) Slug of the first build in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}, "task": {"category": "Bitrise", "query": "List and filter builds for a Bitrise app"}}, {"name": "trigger_bitrise_build", "server": "Bitrise", "description": "Trigger a new build/pipeline for a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "branch": "(Optional, string) The branch to build (default: main)", "workflow_id": "(Optional, string) The workflow to build", "commit_message": "(Optional, string) The commit message for the build", "commit_hash": "(Optional, string) The commit hash for the build"}, "task": {"category": "Bitrise", "query": "Trigger a new build or pipeline"}}, {"name": "get_build", "server": "Bitrise", "description": "Get a specific build of a given app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build"}, "task": {"category": "Bitrise", "query": "Retrieve specific build details for an app"}}, {"name": "abort_build", "server": "Bitrise", "description": "Abort a specific build", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "reason": "(Optional, string) Reason for aborting the build"}, "task": {"category": "Bitrise", "query": "Abort a specific build in Bitrise"}}, {"name": "get_build_log", "server": "Bitrise", "description": "Get the build log of a specified build of a Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the Bitrise build"}, "task": {"category": "Bitrise", "query": "Retrieve build logs for a Bitrise application"}}, {"name": "get_build_bitrise_yml", "server": "Bitrise", "description": "Get the bitrise.yml of a build", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build"}, "task": {"category": "Bitrise", "query": "Retrieve build configuration file"}}, {"name": "list_build_workflows", "server": "Bitrise", "description": "List the workflows of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "List workflows for an application"}}, {"name": "list_artifacts", "server": "Bitrise", "description": "Get a list of all build artifacts", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "next": "(Optional, string) Slug of the first artifact in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}, "task": {"category": "Bitrise", "query": "Retrieve build artifacts list"}}, {"name": "get_artifact", "server": "Bitrise", "description": "Get a specific build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact"}, "task": {"category": "Bitrise", "query": "Retrieve build artifacts"}}, {"name": "delete_artifact", "server": "Bitrise", "description": "Delete a build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact"}, "task": {"category": "Bitrise", "query": "Remove build artifacts"}}, {"name": "update_artifact", "server": "Bitrise", "description": "Update a build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact", "is_public_page_enabled": "(boolean) Enable public page for the artifact"}, "task": {"category": "Bitrise", "query": "Update build artifacts"}}, {"name": "list_outgoing_webhooks", "server": "Bitrise", "description": "List the outgoing webhooks of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "List outgoing webhooks for an application"}}, {"name": "delete_outgoing_webhook", "server": "Bitrise", "description": "Delete the outgoing webhook of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "webhook_slug": "(string) Identifier of the webhook"}, "task": {"category": "Bitrise", "query": "Remove outgoing webhook from an app"}}, {"name": "update_outgoing_webhook", "server": "Bitrise", "description": "Update an outgoing webhook for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "webhook_slug": "(string) Identifier of the webhook", "events": "(array) List of events to trigger the webhook", "url": "(string) URL of the webhook", "headers": "(Optional, array) Headers to be sent with the webhook"}, "task": {"category": "Bitrise", "query": "Update outgoing webhooks for an app"}}, {"name": "create_outgoing_webhook", "server": "Bitrise", "description": "Create an outgoing webhook for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "events": "(array) List of events to trigger the webhook", "url": "(string) URL of the webhook", "headers": "(Optional, array) Headers to be sent with the webhook"}, "task": {"category": "Bitrise", "query": "Create an outgoing webhook for an application"}}, {"name": "list_cache_items", "server": "Bitrise", "description": "List the key-value cache items belonging to an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "List cache items for an app"}}, {"name": "delete_all_cache_items", "server": "Bitrise", "description": "Delete all key-value cache items belonging to an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "Delete all cache items for an app"}}, {"name": "delete_cache_item", "server": "Bitrise", "description": "Delete a key-value cache item", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "cache_item_id": "(string) Identifier of the cache item"}, "task": {"category": "Bitrise", "query": "Remove a cache item from the app"}}, {"name": "get_cache_item_download_url", "server": "Bitrise", "description": "Get the download URL of a key-value cache item", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "cache_item_id": "(string) Identifier of the cache item"}, "task": {"category": "Bitrise", "query": "Retrieve download URL for cache item"}}, {"name": "list_pipelines", "server": "Bitrise", "description": "List all pipelines and standalone builds of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": {"category": "Bitrise", "query": "List all pipelines and builds for an app"}}, {"name": "get_pipeline", "server": "Bitrise", "description": "Get a pipeline of a given app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline"}, "task": {"category": "Bitrise", "query": "Retrieve pipeline details for an app"}}, {"name": "abort_pipeline", "server": "Bitrise", "description": "Abort a pipeline", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline", "reason": "(Optional, string) Reason for aborting the pipeline"}, "task": {"category": "Bitrise", "query": "Abort a running pipeline"}}, {"name": "rebuild_pipeline", "server": "Bitrise", "description": "Rebuild a pipeline", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline"}, "task": {"category": "Bitrise", "query": "Rebuild a specified pipeline"}}, {"name": "list_group_roles", "server": "Bitrise", "description": "List group roles for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "role_name": "(string) Name of the role"}, "task": {"category": "Bitrise", "query": "List roles for an application"}}, {"name": "replace_group_roles", "server": "Bitrise", "description": "Replace group roles for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "role_name": "(string) Name of the role", "group_slugs": "(array) List of group slugs"}, "task": {"category": "Bitrise", "query": "Manage group roles for an application"}}, {"name": "list_workspaces", "server": "Bitrise", "description": "List the workspaces the user has access to", "parameter": {}, "task": {"category": "Bitrise", "query": "List accessible workspaces"}}, {"name": "get_workspace", "server": "Bitrise", "description": "Get details for one workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}, "task": {"category": "Bitrise", "query": "Retrieve workspace details"}}, {"name": "get_workspace_groups", "server": "Bitrise", "description": "Get the groups in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}, "task": {"category": "Bitrise", "query": "Retrieve groups within a workspace"}}, {"name": "create_workspace_group", "server": "Bitrise", "description": "Create a group in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace", "group_name": "(string) Name of the group"}, "task": {"category": "Bitrise", "query": "Create a group within a workspace"}}, {"name": "get_workspace_members", "server": "Bitrise", "description": "Get the members in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}, "task": {"category": "Bitrise", "query": "Retrieve workspace members"}}, {"name": "invite_member_to_workspace", "server": "Bitrise", "description": "Invite a member to a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace", "email": "(string) Email address of the user"}, "task": {"category": "Bitrise", "query": "Invite a user to a workspace"}}, {"name": "add_member_to_group", "server": "Bitrise", "description": "Add a member to a group", "parameter": {"group_slug": "(string) Slug of the group", "user_slug": "(string) Slug of the user"}, "task": {"category": "Bitrise", "query": "Add a user to a group"}}, {"name": "me", "server": "Bitrise", "description": "Get info from the currently authenticated user account", "parameter": {}, "task": {"category": "Bitrise", "query": "Retrieve authenticated user information"}}, {"name": "create_connected_app", "server": "Bitrise", "description": "Add a new Release Management connected app to Bitrise", "parameter": {"platform": "(string) The mobile platform for the connected app (ios/android)", "store_app_id": "(string) The app store identifier for the connected app", "workspace_slug": "(string) Identifier of the Bitrise workspace", "id": "(Optional, string) An uuidV4 identifier for your new connected app", "manual_connection": "(Optional, boolean) Indicates a manual connection", "project_id": "(Optional, string) Specifies which Bitrise Project to associate with", "store_app_name": "(Optional, string) App name for manual connections", "store_credential_id": "(Optional, string) Selection of credentials added on Bitrise"}, "task": {"category": "Bitrise", "query": "Add a new connected app for release management"}}, {"name": "list_connected_apps", "server": "Bitrise", "description": "List Release Management connected apps available for the authenticated account within a workspace", "parameter": {"workspace_slug": "(string) Identifier of the Bitrise workspace", "items_per_page": "(Optional, integer) Maximum number of connected apps per page", "page": "(Optional, integer) Page number to return", "platform": "(Optional, string) Filter for a specific mobile platform", "project_id": "(Optional, string) Filter for a specific Bitrise Project", "search": "(Optional, string) Search by bundle ID, package name, or app title"}, "task": {"category": "Bitrise", "query": "List connected apps in a workspace"}}, {"name": "get_connected_app", "server": "Bitrise", "description": "Gives back a Release Management connected app for the authenticated account", "parameter": {"id": "(string) Identifier of the Release Management connected app"}, "task": {"category": "Bitrise", "query": "Retrieve connected app details"}}, {"name": "update_connected_app", "server": "Bitrise", "description": "Updates a connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier for your connected app", "store_app_id": "(string) The store identifier for your app", "connect_to_store": "(Optional, boolean) Check validity against the App Store or Google Play", "store_credential_id": "(Optional, string) Selection of credentials added on Bitrise"}, "task": {"category": "Bitrise", "query": "Update connected app details"}}, {"name": "list_installable_artifacts", "server": "Bitrise", "description": "List Release Management installable artifacts of a connected app", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "after_date": "(Optional, string) Start of the interval for artifact creation/upload", "artifact_type": "(Optional, string) Filter for a specific artifact type", "before_date": "(Optional, string) End of the interval for artifact creation/upload", "branch": "(Optional, string) Filter for the Bitrise CI branch", "distribution_ready": "(Optional, boolean) Filter for distribution ready artifacts", "items_per_page": "(Optional, integer) Maximum number of artifacts per page", "page": "(Optional, integer) Page number to return", "platform": "(Optional, string) Filter for a specific mobile platform", "search": "(Optional, string) Search by version, filename or build number", "source": "(Optional, string) Filter for the source of installable artifacts", "store_signed": "(Optional, boolean) Filter for store ready installable artifacts", "version": "(Optional, string) Filter for a specific version", "workflow": "(Optional, string) Filter for a specific Bitrise CI workflow"}, "task": {"category": "Bitrise", "query": "List installable artifacts for a connected app"}}, {"name": "generate_installable_artifact_upload_url", "server": "Bitrise", "description": "Generates a signed upload URL for an installable artifact to be uploaded to Bitrise", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) An uuidv4 identifier for the installable artifact", "file_name": "(string) The name of the installable artifact file", "file_size_bytes": "(integer) The byte size of the installable artifact file", "branch": "(Optional, string) Name of the CI branch", "with_public_page": "(Optional, boolean) Enable public install page", "workflow": "(Optional, string) Name of the CI workflow"}, "task": {"category": "Bitrise", "query": "Generate signed upload URL for installable artifacts"}}, {"name": "get_installable_artifact_upload_and_processing_status", "server": "Bitrise", "description": "Gets the processing and upload status of an installable artifact", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) The uuidv4 identifier for the installable artifact"}, "task": {"category": "Bitrise", "query": "Check status of installable artifact processing and upload"}}, {"name": "set_installable_artifact_public_install_page", "server": "Bitrise", "description": "Changes whether public install page should be available for the installable artifact", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) The uuidv4 identifier for the installable artifact", "with_public_page": "(boolean) Boolean flag for enabling/disabling public install page"}, "task": {"category": "Bitrise", "query": "Manage public install page for artifacts"}}, {"name": "list_build_distribution_versions", "server": "Bitrise", "description": "Lists Build Distribution versions available for testers", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "items_per_page": "(Optional, integer) Maximum number of versions per page", "page": "(Optional, integer) Page number to return"}, "task": {"category": "Bitrise", "query": "List available build distribution versions for testers"}}, {"name": "list_build_distribution_version_test_builds", "server": "Bitrise", "description": "Gives back a list of test builds for the given build distribution version", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "version": "(string) The version of the build distribution", "items_per_page": "(Optional, integer) Maximum number of test builds per page", "page": "(Optional, integer) Page number to return"}, "task": {"category": "Bitrise", "query": "List test builds for a specific build distribution version"}}, {"name": "create_tester_group", "server": "Bitrise", "description": "Creates a tester group for a Release Management connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "name": "(string) The name for the new tester group", "auto_notify": "(Optional, boolean) Indicates automatic notifications for the group"}, "task": {"category": "Bitrise", "query": "Create a tester group for release management"}}, {"name": "notify_tester_group", "server": "Bitrise", "description": "Notifies a tester group about a new test build", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "test_build_id": "(string) The unique identifier of the test build"}, "task": {"category": "Bitrise", "query": "Notify tester group about new build"}}, {"name": "add_testers_to_tester_group", "server": "Bitrise", "description": "Adds testers to a tester group of a connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "user_slugs": "(array) The list of users identified by slugs to be added"}, "task": {"category": "Bitrise", "query": "Manage testers in a tester group"}}, {"name": "update_tester_group", "server": "Bitrise", "description": "Updates the given tester group settings", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "auto_notify": "(Optional, boolean) Setting for automatic email notifications", "name": "(Optional, string) The new name for the tester group"}, "task": {"category": "Bitrise", "query": "Modify tester group configurations"}}, {"name": "list_tester_groups", "server": "Bitrise", "description": "Gives back a list of tester groups related to a specific connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "items_per_page": "(Optional, integer) Maximum number of tester groups per page", "page": "(Optional, integer) Page number to return"}, "task": {"category": "Bitrise", "query": "List tester groups for a connected app"}}, {"name": "get_tester_group", "server": "Bitrise", "description": "Gives back the details of the selected tester group", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group"}, "task": {"category": "Bitrise", "query": "Retrieve details of a tester group"}}, {"name": "get_potential_testers", "server": "Bitrise", "description": "Gets a list of potential testers who can be added to a specific tester group", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "items_per_page": "(Optional, integer) Maximum number of potential testers per page", "page": "(Optional, integer) Page number to return", "search": "(Optional, string) Search for testers by email or username"}, "task": {"category": "Bitrise", "query": "Retrieve potential testers for a tester group"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Box", "description": "Box云存储服务操作,包括:用户信息获取、文件搜索与读取、AI文件分析、文件夹管理、文件上传下载、文档生成模板管理及作业跟踪", "tools": [{"name": "box_who_am_i", "server": "Box", "description": "Get your current user information and check connection status.", "parameter": {}, "task": {"category": "Box", "query": "Retrieve current user information and connection status"}}, {"name": "box_authorize_app_tool", "server": "Box", "description": "Start the Box application authorization process.", "parameter": {}, "task": {"category": "Box", "query": "Authorize application access"}}, {"name": "box_search_tool", "server": "Box", "description": "Search for files in Box.", "parameter": {"query": "(str) The query to search for.", "file_extensions": "(List[str], optional) File extensions to filter results.", "where_to_look_for_query": "(List[str], optional) Locations to search (e.g. NAME, DESCRIPTION, FILE_CONTENT, COMMENTS, TAG).", "ancestor_folder_ids": "(List[str], optional) List of folder IDs in which to search."}, "task": {"category": "Box", "query": "Search for files with specific criteria"}}, {"name": "box_read_tool", "server": "Box", "description": "Read the text content of a Box file.", "parameter": {"file_id": "(str) ID of the file to read"}, "task": {"category": "Box", "query": "Read text content from a file"}}, {"name": "box_ask_ai_tool", "server": "Box", "description": "Ask Box AI about a file.", "parameter": {"file_id": "(str) ID of the file", "prompt": "(str) Question for the AI"}, "task": {"category": "Box", "query": "Ask AI about a file"}}, {"name": "box_hubs_ask_ai_tool", "server": "Box", "description": "Ask Box AI about a hub. There is currently no way via API to discover a hub ID, so you must know the ID to use this tool. We will fix this in the future.", "parameter": {"hubs_id": "(str) ID of the hub", "prompt": "(str) Question for the AI"}, "task": {"category": "Box", "query": "Ask AI about a specific hub"}}, {"name": "box_search_folder_by_name", "server": "Box", "description": "Locate a folder by name.", "parameter": {"folder_name": "(str) Name of the folder"}, "task": {"category": "Box", "query": "Search for a folder by name"}}, {"name": "box_ai_extract_data", "server": "Box", "description": "Extract data from a file using AI.", "parameter": {"file_id": "(str) ID of the file", "fields": "(str) Fields to extract"}, "task": {"category": "Box", "query": "Extract data from files using AI"}}, {"name": "box_list_folder_content_by_folder_id", "server": "Box", "description": "List folder contents.", "parameter": {"folder_id": "(str) ID of the folder", "is_recursive": "(bool) Whether to list recursively"}, "task": {"category": "Box", "query": "List contents of a folder"}}, {"name": "box_manage_folder_tool", "server": "Box", "description": "Create, update, or delete folders in Box.", "parameter": {"action": "(str) Action to perform: 'create', 'delete', or 'update'", "folder_id": "(str, optional) ID of the folder (required for delete/update)", "name": "(str, optional) Folder name (required for create, optional for update)", "parent_id": "(str, optional) Parent folder ID (required for create, optional for update)", "description": "(str, optional) Folder description (optional for update)", "recursive": "(bool, optional) Whether to delete recursively (optional for delete)"}, "task": {"category": "Box", "query": "Manage folders in Box"}}, {"name": "box_upload_file_from_path_tool", "server": "Box", "description": "Upload a file to Box from a local filesystem path.", "parameter": {"file_path": "(str) Local file path", "folder_id": "(str, optional) Destination folder ID (defaults to '0')", "new_file_name": "(str, optional) New file name (if not provided, uses the original file name)"}, "task": {"category": "Box", "query": "Upload files from local path to cloud storage"}}, {"name": "box_upload_file_from_content_tool", "server": "Box", "description": "Upload content as a file to Box.", "parameter": {"content": "(str | bytes) Content to upload (text or binary)", "file_name": "(str) The name to assign the file", "folder_id": "(str, optional) Destination folder ID (defaults to '0')", "is_base64": "(bool, optional) Indicates if the provided content is base64 encoded"}, "task": {"category": "Box", "query": "Upload content as a file to a specified folder"}}, {"name": "box_download_file_tool", "server": "Box", "description": "Download a file from Box.", "parameter": {"file_id": "(str) The ID of the file to download", "save_file": "(bool, optional) Whether to save the file locally", "save_path": "(str, optional) The local path where the file should be saved"}, "task": {"category": "Box", "query": "Download files from cloud storage"}}, {"name": "box_docgen_create_batch_tool", "server": "Box", "description": "Generate documents using a Box Doc Gen template and a local JSON file.", "parameter": {"file_id": "(str) Template file ID", "destination_folder_id": "(str) Folder ID where generated documents should be stored", "user_input_file_path": "(str) Path to a JSON file with input data", "output_type": "(str, optional) Output format (default is 'pdf')"}, "task": {"category": "Box", "query": "Generate documents from a template and JSON input"}}, {"name": "box_docgen_get_job_tool", "server": "Box", "description": "Fetch a single Doc Gen job by its ID.", "parameter": {"job_id": "(str) The job identifier"}, "task": {"category": "Box", "query": "Retrieve a document generation job by ID"}}, {"name": "box_docgen_list_jobs_tool", "server": "Box", "description": "List all Doc Gen jobs associated with the current user.", "parameter": {"marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to return"}, "task": {"category": "Box", "query": "List document generation jobs for current user"}}, {"name": "box_docgen_list_jobs_by_batch_tool", "server": "Box", "description": "List Doc Gen jobs belonging to a specific batch.", "parameter": {"batch_id": "(str) The batch identifier", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to return"}, "task": {"category": "Box", "query": "List document generation jobs by batch"}}, {"name": "box_docgen_template_create_tool", "server": "Box", "description": "Mark a file as a Box Doc Gen template.", "parameter": {"file_id": "(str) File ID to mark as a template"}, "task": {"category": "Box", "query": "Mark a file as a template"}}, {"name": "box_docgen_template_list_tool", "server": "Box", "description": "List all available Box Doc Gen templates.", "parameter": {"marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of templates to list"}, "task": {"category": "Box", "query": "List available document generation templates"}}, {"name": "box_docgen_template_delete_tool", "server": "Box", "description": "Remove the Doc Gen template marking from a file.", "parameter": {"template_id": "(str) The template identifier"}, "task": {"category": "Box", "query": "Remove template marking from a file"}}, {"name": "box_docgen_template_get_by_id_tool", "server": "Box", "description": "Retrieve details of a specific Doc Gen template.", "parameter": {"template_id": "(str) The template identifier"}, "task": {"category": "Box", "query": "Retrieve details of a document generation template"}}, {"name": "box_docgen_template_list_tags_tool", "server": "Box", "description": "List all tags associated with a Box Doc Gen template.", "parameter": {"template_id": "(str) The template ID", "template_version_id": "(str | None, optional) Specific version ID", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of tags to return"}, "task": {"category": "Box", "query": "List tags for a document generation template"}}, {"name": "box_docgen_template_list_jobs_tool", "server": "Box", "description": "List all Doc Gen jobs that used a specific template.", "parameter": {"template_id": "(str) The template identifier", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to list"}, "task": {"category": "Box", "query": "List document generation jobs by template"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Chroma", "description": "Chroma collection management, including: listing, creating, peeking, getting info, counting, modifying, and deleting collections. Also includes document operations like adding, querying, retrieving, updating, and deleting documents with semantic search and filtering.", "tools": [{"name": "chroma_list_collections", "server": "Chroma", "description": "List all collections with pagination support", "parameter": {}, "task": {"category": "Chroma", "query": "List collections with pagination"}}, {"name": "chroma_create_collection", "server": "Chroma", "description": "Create a new collection with optional HNSW configuration", "parameter": {}, "task": {"category": "Chroma", "query": "Create a new collection with optional configuration"}}, {"name": "chroma_peek_collection", "server": "Chroma", "description": "View a sample of documents in a collection", "parameter": {}, "task": {"category": "Chroma", "query": "View sample documents from a collection"}}, {"name": "chroma_get_collection_info", "server": "Chroma", "description": "Get detailed information about a collection", "parameter": {}, "task": {"category": "Chroma", "query": "Retrieve collection details"}}, {"name": "chroma_get_collection_count", "server": "Chroma", "description": "Get the number of documents in a collection", "parameter": {}, "task": {"category": "Chroma", "query": "Retrieve document count in a collection"}}, {"name": "chroma_modify_collection", "server": "Chroma", "description": "Update a collection's name or metadata", "parameter": {}, "task": {"category": "Chroma", "query": "Modify collection details"}}, {"name": "chroma_delete_collection", "server": "Chroma", "description": "Delete a collection", "parameter": {}, "task": {"category": "Chroma", "query": "Delete a collection from the database"}}, {"name": "chroma_add_documents", "server": "Chroma", "description": "Add documents with optional metadata and custom IDs", "parameter": {}, "task": {"category": "Chroma", "query": "Add documents with metadata and custom IDs"}}, {"name": "chroma_query_documents", "server": "Chroma", "description": "Query documents using semantic search with advanced filtering", "parameter": {}, "task": {"category": "Chroma", "query": "Perform semantic search on documents with advanced filtering"}}, {"name": "chroma_get_documents", "server": "Chroma", "description": "Retrieve documents by IDs or filters with pagination", "parameter": {}, "task": {"category": "Chroma", "query": "Retrieve documents by IDs or filters"}}, {"name": "chroma_update_documents", "server": "Chroma", "description": "Update existing documents' content, metadata, or embeddings", "parameter": {}, "task": {"category": "Chroma", "query": "Update document content, metadata, or embeddings"}}, {"name": "chroma_delete_documents", "server": "Chroma", "description": "Delete specific documents from a collection", "parameter": {}, "task": {"category": "Chroma", "query": "Remove documents from a collection"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "CircleCI", "description": "1. Retrieve CircleCI build failure logs 2. Identify flaky tests in CircleCI projects 3. Get latest pipeline status for a branch 4. Retrieve test metadata for CircleCI jobs 5. Assist with CircleCI configuration tasks 6. Generate structured prompt templates for AI applications 7. Generate test cases for prompt templates", "tools": [{"name": "get_build_failure_logs", "server": "CircleCI", "description": "Retrieves detailed failure logs from CircleCI builds. Can be used with CircleCI URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI URL or a combination of workspace root path, Git remote URL, and branch name"}, "task": {"category": "CircleCI", "query": "Retrieve detailed failure logs from builds"}}, {"name": "find_flaky_tests", "server": "CircleCI", "description": "Identifies flaky tests in a CircleCI project by analyzing test execution history. Can be used with CircleCI project URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI project URL or a combination of workspace root path and Git remote URL"}, "task": {"category": "CircleCI", "query": "Identify flaky tests in a project"}}, {"name": "get_latest_pipeline_status", "server": "CircleCI", "description": "Retrieves the status of the latest pipeline for a given branch. Can be used with CircleCI project URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI project URL or a combination of workspace root path, Git remote URL, and branch name"}, "task": {"category": "CircleCI", "query": "Retrieve the status of the latest pipeline for a branch"}}, {"name": "get_job_test_results", "server": "CircleCI", "description": "Retrieves test metadata for CircleCI jobs. Can be used with CircleCI URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI URL (job, workflow, or pipeline) or a combination of workspace root path, Git remote URL, and branch name"}, "task": {"category": "CircleCI", "query": "Retrieve test metadata for jobs"}}, {"name": "config_helper", "server": "CircleCI", "description": "Assists with CircleCI configuration tasks by providing guidance and validation. Can validate CircleCI config files.", "parameter": {"config_path": "(string) Path to the .circleci/config.yml file"}, "task": {"category": "CircleCI", "query": "Assist with CircleCI configuration tasks"}}, {"name": "create_prompt_template", "server": "CircleCI", "description": "Helps generate structured prompt templates for AI-enabled applications based on feature requirements.", "parameter": {"requirements": "(string) User requirements for the prompt template"}, "task": {"category": "CircleCI", "query": "Generate structured prompt templates for AI applications"}}, {"name": "recommend_prompt_template_tests", "server": "CircleCI", "description": "Generates test cases for prompt templates to ensure they produce expected results.", "parameter": {"template": "(string) The prompt template to generate tests for"}, "task": {"category": "CircleCI", "query": "Generate test cases for prompt templates"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "ClickHouse", "description": "1.在ClickHouse集群上执行SQL查询 2.列出ClickHouse集群中的所有数据库 3.列出数据库中的所有表", "tools": [{"name": "run_select_query", "server": "ClickHouse", "description": "Execute SQL queries on your ClickHouse cluster.", "parameter": {"sql": "(string) The SQL query to execute."}, "task": {"category": "ClickHouse", "query": "Execute SQL queries on a database cluster"}}, {"name": "list_databases", "server": "ClickHouse", "description": "List all databases on your ClickHouse cluster.", "parameter": {}, "task": {"category": "ClickHouse", "query": "List all databases in a cluster"}}, {"name": "list_tables", "server": "ClickHouse", "description": "List all tables in a database.", "parameter": {"database": "(string) The name of the database."}, "task": {"category": "ClickHouse", "query": "List all tables in a specified database"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Codacy", "description": "Codacy代码质量分析工具集，包括：组织与仓库管理、代码质量指标分析（Grade, Issues, Duplication, Complexity, Coverage）、安全风险管理（SRM）、Pull Request分析、代码分析工具管理、本地CLI分析", "tools": [{"name": "codacy_list_organizations", "server": "Codacy", "description": "List organizations with pagination support.", "parameter": {}, "task": {"category": "Codacy", "query": "List organizations with pagination"}}, {"name": "codacy_list_organization_repositories", "server": "Codacy", "description": "List repositories in an organization with pagination support.", "parameter": {}, "task": {"category": "Codacy", "query": "List organization repositories with pagination"}}, {"name": "codacy_get_repository_with_analysis", "server": "Codacy", "description": "Get repository with analysis information, including metrics for Grade, Issues, Duplication, Complexity, and Coverage.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve repository analysis metrics"}}, {"name": "codacy_list_repository_issues", "server": "Codacy", "description": "Lists and filters code quality issues in a repository. This is the primary tool for investigating general code quality concerns (e.g., best practices, performance, complexity, style) but NOT security issues. For security-related issues, use the SRM items tool instead.", "parameter": {"severity": "(Optional, string) Filter by issue severity", "category": "(Optional, string) Filter by issue category", "language": "(Optional, string) Filter by programming language", "author": "(Optional, string) Filter by author", "branch": "(Optional, string) Specify the branch for analysis", "pattern": "(Optional, string) Pattern-based searching"}, "task": {"category": "Codacy", "query": "List and filter code quality issues in a repository"}}, {"name": "codacy_list_files", "server": "Codacy", "description": "List files in a repository with pagination support.", "parameter": {}, "task": {"category": "Codacy", "query": "List repository files with pagination"}}, {"name": "codacy_get_file_issues", "server": "Codacy", "description": "Get the issue list for a file in a repository.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve issues for a specific file in a repository"}}, {"name": "codacy_get_file_coverage", "server": "Codacy", "description": "Get coverage information for a file in the head commit of a repository branch.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve file coverage details in a repository branch"}}, {"name": "codacy_get_file_clones", "server": "Codacy", "description": "Get the list of duplication clones (identical or very similar code segments) for a file in a repository.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve duplication clones for a repository file"}}, {"name": "codacy_get_file_with_analysis", "server": "Codacy", "description": "Get detailed analysis information for a file, including metrics for Grade, Issues, Duplication, Complexity, and Coverage.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve detailed file analysis metrics"}}, {"name": "codacy_search_organization_srm_items", "server": "Codacy", "description": "Primary tool to list security items/issues/vulnerabilities/findings across an organization. Results are related to the organization's security and risk management (SRM) dashboard on Codacy.", "parameter": {}, "task": {"category": "Codacy", "query": "List security items and vulnerabilities for an organization"}}, {"name": "codacy_search_repository_srm_items", "server": "Codacy", "description": "List security items/issues/vulnerabilities/findings for a specific repository.", "parameter": {}, "task": {"category": "Codacy", "query": "List security issues for a repository"}}, {"name": "codacy_list_repository_pull_requests", "server": "Codacy", "description": "List pull requests from a repository that the user has access to.", "parameter": {}, "task": {"category": "Codacy", "query": "List accessible repository pull requests"}}, {"name": "codacy_get_repository_pull_request", "server": "Codacy", "description": "Get detailed information about a specific pull request.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve pull request details"}}, {"name": "codacy_list_pull_request_issues", "server": "Codacy", "description": "Returns a list of issues found in a pull request (new or fixed issues).", "parameter": {}, "task": {"category": "Codacy", "query": "List issues in a pull request"}}, {"name": "codacy_get_pull_request_files_coverage", "server": "Codacy", "description": "Get diff coverage information for all files in a pull request.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve coverage details for pull request files"}}, {"name": "codacy_get_pull_request_git_diff", "server": "Codacy", "description": "Returns the human-readable Git diff of a pull request.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve Git diff for a pull request"}}, {"name": "codacy_list_tools", "server": "Codacy", "description": "List all code analysis tools available in Codacy.", "parameter": {}, "task": {"category": "Codacy", "query": "List available code analysis tools"}}, {"name": "codacy_list_repository_tools", "server": "Codacy", "description": "Get analysis tools settings and available tools for a repository.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve repository analysis tools settings"}}, {"name": "codacy_get_pattern", "server": "Codacy", "description": "Get the definition of a specific pattern.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve pattern definitions"}}, {"name": "codacy_list_repository_tool_patterns", "server": "Codacy", "description": "List the patterns of a tool available for a repository.", "parameter": {}, "task": {"category": "Codacy", "query": "List available tool patterns for a repository"}}, {"name": "codacy_get_issue", "server": "Codacy", "description": "Get detailed information about a specific issue.", "parameter": {}, "task": {"category": "Codacy", "query": "Retrieve detailed issue information"}}, {"name": "codacy_cli_analyze", "server": "Codacy", "description": "Run quality analysis locally using Codacy CLI. Features include analyzing specific files or entire directories, using specific tools or all available tools, getting immediate results without waiting for scheduled analysis, and applying fixes based on Codacy configuration.", "parameter": {}, "task": {"category": "Codacy", "query": "Run local quality analysis on code"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "CodeLogic", "description": "1.从CodeLogic服务器API获取指定代码方法和类的影响评估 2.分析代码和数据库实体之间的影响", "tools": [{"name": "codelogic-method-impact", "server": "CodeLogic", "description": "Pulls an impact assessment from the CodeLogic server's APIs for the specified code method and class.", "parameter": {"method": "(string) The method that you're working on", "class": "(string) The class associated with the method"}, "task": {"category": "CodeLogic", "query": "Assess impact of code methods and classes"}}, {"name": "codelogic-database-impact", "server": "CodeLogic", "description": "Analyzes impacts between code and database entities.", "parameter": {"entity_type": "(string) The type of database entity (column, table, or view)", "entity_name": "(string) The name of the database entity"}, "task": {"category": "CodeLogic", "query": "Analyze impacts between code and database entities"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Comet Opik", "description": "1.管理提示词（创建、列表、更新、删除） 2.组织和管理项目/工作区 3.跟踪和分析追踪数据 4.收集和查询指标数据", "tools": [{"name": "Prompts Management", "server": "Comet Opik", "description": "Create, list, update, and delete prompts", "parameter": {}, "task": {"category": "Comet Opik", "query": "Manage prompts"}}, {"name": "Projects/Workspaces Management", "server": "Comet Opik", "description": "Organize and manage projects", "parameter": {}, "task": {"category": "Comet Opik", "query": "Manage and organize projects and workspaces"}}, {"name": "Traces", "server": "Comet Opik", "description": "Track and analyze trace data", "parameter": {}, "task": {"category": "Comet Opik", "query": "Track and analyze trace data"}}, {"name": "Metrics", "server": "Comet Opik", "description": "Gather and query metrics data", "parameter": {}, "task": {"category": "Comet Opik", "query": "Gather and query metrics data"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Couchbase", "description": "Couchbase数据库操作,包括:获取作用域和集合列表、获取集合结构、通过ID获取/更新/删除文档、执行SQL++查询", "tools": [{"name": "get_scopes_and_collections", "server": "Couchbase", "description": "Get a list of all the scopes and collections in the specified bucket.", "parameter": {}, "task": {"category": "Couchbase", "query": "Retrieve scopes and collections from a bucket"}}, {"name": "get_collection_structure", "server": "Couchbase", "description": "Get the structure for a collection.", "parameter": {}, "task": {"category": "Couchbase", "query": "Retrieve collection structure details"}}, {"name": "get_document_by_id", "server": "Couchbase", "description": "Get a document by ID from a specified scope and collection.", "parameter": {}, "task": {"category": "Couchbase", "query": "Retrieve document by ID from a specified scope and collection"}}, {"name": "upsert_document_by_id", "server": "Couchbase", "description": "Upsert a document by ID to a specified scope and collection.", "parameter": {}, "task": {"category": "Couchbase", "query": "Upsert document by ID in a specified scope and collection"}}, {"name": "delete_document_by_id", "server": "Couchbase", "description": "Delete a document by ID from a specified scope and collection.", "parameter": {}, "task": {"category": "Couchbase", "query": "Delete document by ID from a collection"}}, {"name": "run_sqlpp_query", "server": "Couchbase", "description": "Run a SQL++ query on a specified scope. The `READ_ONLY_QUERY_MODE` environment variable controls whether data-modifying queries are allowed.", "parameter": {}, "task": {"category": "Couchbase", "query": "Execute SQL++ queries on a specified scope"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Dart", "description": "1. Get user space configuration 2. List, create, retrieve, update, and delete tasks with filtering options 3. List, create, retrieve, update, and delete docs with filtering options", "tools": [{"name": "get_config", "server": "Dart", "description": "Get information about the user's space, including available assignees, dartboards, folders, statuses, tags, priorities, and sizes", "parameter": {}, "task": {"category": "Dart", "query": "Retrieve user space information"}}, {"name": "list_tasks", "server": "Dart", "description": "List tasks with optional filtering by assignee, status, dartboard, priority, due date, and more", "parameter": {}, "task": {"category": "Dart", "query": "List tasks with optional filters"}}, {"name": "create_task", "server": "Dart", "description": "Create a new task with title, description, status, priority, size, dates, dartboard, assignees, tags, and parent task", "parameter": {}, "task": {"category": "Dart", "query": "Create a new task with various attributes"}}, {"name": "get_task", "server": "Dart", "description": "Retrieve an existing task by its ID", "parameter": {}, "task": {"category": "Dart", "query": "Retrieve a task by ID"}}, {"name": "update_task", "server": "Dart", "description": "Update an existing task's properties", "parameter": {}, "task": {"category": "Dart", "query": "Modify properties of an existing task"}}, {"name": "delete_task", "server": "Dart", "description": "Move a task to the trash (recoverable)", "parameter": {}, "task": {"category": "Dart", "query": "Move a task to trash"}}, {"name": "list_docs", "server": "Dart", "description": "List docs with optional filtering by folder, title, text content, and more", "parameter": {}, "task": {"category": "Dart", "query": "List documents with filtering options"}}, {"name": "create_doc", "server": "Dart", "description": "Create a new doc with title, text content, and folder", "parameter": {}, "task": {"category": "Dart", "query": "Create a new document with specified details"}}, {"name": "get_doc", "server": "Dart", "description": "Retrieve an existing doc by its ID", "parameter": {}, "task": {"category": "Dart", "query": "Retrieve document by ID"}}, {"name": "update_doc", "server": "Dart", "description": "Update an existing doc's properties", "parameter": {}, "task": {"category": "Dart", "query": "Update document properties"}}, {"name": "delete_doc", "server": "Dart", "description": "Move a doc to the trash (recoverable)", "parameter": {}, "task": {"category": "Dart", "query": "Move document to trash"}}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}, {"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "DevHub", "description": "1.获取DevHub账户中的所有业务信息 2.获取特定业务的所有位置信息 3.获取DevHub位置的营业时间 4.更新DevHub位置的营业时间 5.根据地理坐标查找最近的DevHub位置 6.从URL获取DevHub站点ID和详细信息 7.按ID检索博客文章 8.创建新的博客文章 9.更新现有博客文章的标题和/或内容 10.将图像上传到DevHub媒体库", "tools": [{"name": "get_businesses", "server": "DevHub", "description": "Gets all businesses within the DevHub account. Returns a list of businesses with their IDs and names.", "parameter": {}, "task": {"category": "DevHub", "query": "Retrieve all businesses in the account"}}, {"name": "get_locations", "server": "DevHub", "description": "Gets all locations for a specific business. Returns detailed location information including address, coordinates, and URLs.", "parameter": {"business_id": "(string) The ID of the business."}, "task": {"category": "DevHub", "query": "Retrieve business location details"}}, {"name": "get_hours_of_operation", "server": "DevHub", "description": "Gets the hours of operation for a specific DevHub location. Returns a structured list of time ranges for each day of the week.", "parameter": {"location_id": "(string) The ID of the location.", "hours_type": "(Optional, string) The type of hours to retrieve, default is 'primary'."}, "task": {"category": "DevHub", "query": "Retrieve operating hours for a location"}}, {"name": "update_hours", "server": "DevHub", "description": "Updates the hours of operation for a DevHub location.", "parameter": {"location_id": "(string) The ID of the location.", "new_hours": "(dict) The new hours of operation.", "hours_type": "(Optional, string) The type of hours to update, default is 'primary'."}, "task": {"category": "DevHub", "query": "Update operating hours for a location"}}, {"name": "get_nearest_location", "server": "DevHub", "description": "Finds the nearest DevHub location based on geographic coordinates.", "parameter": {"business_id": "(string) The ID of the business.", "latitude": "(float) The latitude coordinate.", "longitude": "(float) The longitude coordinate."}, "task": {"category": "DevHub", "query": "Find nearest location based on coordinates"}}, {"name": "site_from_url", "server": "DevHub", "description": "Gets the DevHub site ID and details from a URL. Returns site ID, URL, and associated location IDs.", "parameter": {"url": "(string) The URL of the DevHub site."}, "task": {"category": "DevHub", "query": "Retrieve site details from URL"}}, {"name": "get_blog_post", "server": "DevHub", "description": "Retrieves a single blog post by ID, including its title, date, and HTML content.", "parameter": {"post_id": "(string) The ID of the blog post."}, "task": {"category": "DevHub", "query": "Retrieve blog post details by ID"}}, {"name": "create_blog_post", "server": "DevHub", "description": "Creates a new blog post. The content should be in HTML format and should not include an H1 tag.", "parameter": {"site_id": "(string) The ID of the site where the blog post will be created.", "title": "(string) The title of the blog post.", "content": "(string) The HTML content of the blog post."}, "task": {"category": "DevHub", "query": "Create a new blog post with HTML content"}}, {"name": "update_blog_post", "server": "DevHub", "description": "Updates an existing blog post's title and/or content.", "parameter": {"post_id": "(string) The ID of the blog post.", "title": "(Optional, string) The new title of the blog post.", "content": "(Optional, string) The new HTML content of the blog post."}, "task": {"category": "DevHub", "query": "Update blog post details"}}, {"name": "upload_image", "server": "DevHub", "description": "Uploads an image to the DevHub media gallery. Supports webp, jpeg, and png formats. The image must be provided as a base64-encoded string.", "parameter": {"base64_image_content": "(string) The base64-encoded content of the image.", "filename": "(string) The filename of the image."}, "task": {"category": "DevHub", "query": "Upload an image to the media gallery"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Dynatrace", "description": "1.列出Kubernetes等服务的问题详情 2.列出和检索安全问题和漏洞详情 3.执行DQL查询获取事件或日志 4.使用Slack Connector发送Slack消息 5.使用Dynatrace Automation Engine设置通知工作流 6.检索实体的所有权信息", "tools": [{"name": "list_problems", "server": "Dynatrace", "description": "Lists problem details from your services, such as Kubernetes.", "parameter": {}, "task": {"category": "Dynatrace", "query": "List problem details from services"}}, {"name": "get_security_problems", "server": "Dynatrace", "description": "Lists and retrieves security problems or vulnerability details.", "parameter": {}, "task": {"category": "Dynatrace", "query": "Retrieve security problems or vulnerability details"}}, {"name": "execute_dql", "server": "Dynatrace", "description": "Executes DQL (Dynatrace Query Language) queries to fetch events or logs.", "parameter": {}, "task": {"category": "Dynatrace", "query": "Fetch events or logs using DQL"}}, {"name": "send_slack_message", "server": "Dynatrace", "description": "Sends Slack messages using the Slack Connector.", "parameter": {}, "task": {"category": "Dynatrace", "query": "Send messages via Slack"}}, {"name": "set_up_notification_workflow", "server": "Dynatrace", "description": "Sets up notification workflows using the Dynatrace Automation Engine.", "parameter": {}, "task": {"category": "Dynatrace", "query": "Configure notification workflows"}}, {"name": "get_ownership", "server": "Dynatrace", "description": "Retrieves ownership information of an entity.", "parameter": {}, "task": {"category": "Dynatrace", "query": "Retrieve entity ownership details"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "EduBase", "description": "Retrieve user information from the EduBase platform", "tools": [{"name": "edubase_get_user", "server": "EduBase", "description": "Retrieves user information from the EduBase platform.", "parameter": {}, "task": {"category": "EduBase", "query": "Retrieve user information"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Elasticsearch", "description": "Elasticsearch operations, including: listing indices, getting field mappings, performing searches with query DSL, and retrieving shard information", "tools": [{"name": "list_indices", "server": "Elasticsearch", "description": "List all available Elasticsearch indices", "parameter": {}, "task": {"category": "Elasticsearch", "query": "List all available indices"}}, {"name": "get_mappings", "server": "Elasticsearch", "description": "Get field mappings for a specific Elasticsearch index", "parameter": {}, "task": {"category": "Elasticsearch", "query": "Retrieve field mappings for an index"}}, {"name": "search", "server": "Elasticsearch", "description": "Perform an Elasticsearch search with the provided query DSL", "parameter": {}, "task": {"category": "Elasticsearch", "query": "Perform a search using query DSL"}}, {"name": "get_shards", "server": "Elasticsearch", "description": "Get shard information for all or specific indices", "parameter": {}, "task": {"category": "Elasticsearch", "query": "Retrieve shard details for indices"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "eSignatures", "description": "Contract management operations including: create/query/withdraw/delete contracts, create/update/query/delete templates, and manage template collaborators", "tools": [{"name": "create_contract", "server": "eSignatures", "description": "Draft for review or send contract", "parameter": {}, "task": {"category": "eSignatures", "query": "Draft or send contracts for electronic signatures"}}, {"name": "query_contract", "server": "eSignatures", "description": "Retrieve contract info", "parameter": {}, "task": {"category": "eSignatures", "query": "Retrieve contract information"}}, {"name": "withdraw_contract", "server": "eSignatures", "description": "Withdraw an unsigned contract", "parameter": {}, "task": {"category": "eSignatures", "query": "Withdraw unsigned contracts"}}, {"name": "delete_contract", "server": "eSignatures", "description": "Delete a draft or test contract", "parameter": {}, "task": {"category": "eSignatures", "query": "Delete draft or test contracts"}}, {"name": "list_recent_contracts", "server": "eSignatures", "description": "List the recent contracts", "parameter": {}, "task": {"category": "eSignatures", "query": "List recent contracts"}}, {"name": "create_template", "server": "eSignatures", "description": "Create a new contract template", "parameter": {}, "task": {"category": "eSignatures", "query": "Create a new contract template"}}, {"name": "update_template", "server": "eSignatures", "description": "Update an existing template", "parameter": {}, "task": {"category": "eSignatures", "query": "Modify an existing template"}}, {"name": "query_template", "server": "eSignatures", "description": "Retrieve template content and info", "parameter": {}, "task": {"category": "eSignatures", "query": "Retrieve template details"}}, {"name": "delete_template", "server": "eSignatures", "description": "Delete a template", "parameter": {}, "task": {"category": "eSignatures", "query": "Remove a template"}}, {"name": "list_templates", "server": "eSignatures", "description": "List all your templates", "parameter": {}, "task": {"category": "eSignatures", "query": "Retrieve all available templates"}}, {"name": "add_template_collaborator", "server": "eSignatures", "description": "Invite someone to edit a template", "parameter": {}, "task": {"category": "eSignatures", "query": "Invite collaborators to edit templates"}}, {"name": "remove_template_collaborator", "server": "eSignatures", "description": "Revoke template editing rights", "parameter": {}, "task": {"category": "eSignatures", "query": "Revoke template editing permissions"}}, {"name": "list_template_collaborators", "server": "eSignatures", "description": "View who can edit a template", "parameter": {}, "task": {"category": "eSignatures", "query": "List collaborators for a template"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Exa", "description": "1.实时网页搜索与内容提取 2.学术论文与研究内容搜索 3.公司信息爬取与研究 4.特定URL内容提取 5.竞争对手查找 6.LinkedIn公司及人员搜索 7.Wikipedia信息检索 8.GitHub仓库搜索", "tools": [{"name": "web_search_exa", "server": "Exa", "description": "Performs real-time web searches with optimized results and content extraction.", "parameter": {}, "task": {"category": "Exa", "query": "Perform real-time web searches with optimized results"}}, {"name": "research_paper_search", "server": "Exa", "description": "Specialized search focused on academic papers and research content.", "parameter": {}, "task": {"category": "Exa", "query": "Search for academic papers and research content"}}, {"name": "company_research", "server": "Exa", "description": "Comprehensive company research tool that crawls company websites to gather detailed information about businesses.", "parameter": {}, "task": {"category": "Exa", "query": "Gather detailed information about businesses"}}, {"name": "crawling", "server": "Exa", "description": "Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL.", "parameter": {}, "task": {"category": "Exa", "query": "Extract content from specific URLs"}}, {"name": "competitor_finder", "server": "Exa", "description": "Identifies competitors of a company by searching for businesses offering similar products or services.", "parameter": {}, "task": {"category": "Exa", "query": "Find competitors for a company"}}, {"name": "linkedin_search", "server": "Exa", "description": "Search LinkedIn for companies and people using Exa AI. Simply include company names, person names, or specific LinkedIn URLs in your query.", "parameter": {}, "task": {"category": "Exa", "query": "Search for companies and people on LinkedIn"}}, {"name": "wikipedia_search_exa", "server": "Exa", "description": "Search and retrieve information from Wikipedia articles on specific topics, giving you accurate, structured knowledge from the world's largest encyclopedia.", "parameter": {}, "task": {"category": "Wikipedia", "query": "Retrieve structured information from articles"}}, {"name": "github_search", "server": "Exa", "description": "Search GitHub repositories using Exa AI - performs real-time searches on GitHub.com to find relevant repositories, issues, and GitHub accounts.", "parameter": {}, "task": {"category": "GitHub", "query": "Search for repositories, issues, and accounts on GitHub"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Fewsats", "description": "1. Retrieve the balance of the user's wallet 2. Retrieve the user's payment methods 3. Pay an offer with the specified ID from the l402_offers 4. Retrieve the details of a payment", "tools": [{"name": "balance", "server": "Fewsats", "description": "Retrieve the balance of the user's wallet", "parameter": {}, "task": {"category": "Fewsats", "query": "Retrieve wallet balance"}}, {"name": "payment_methods", "server": "Fewsats", "description": "Retrieve the user's payment methods", "parameter": {}, "task": {"category": "Fewsats", "query": "Get user payment methods"}}, {"name": "pay_offer", "server": "Fewsats", "description": "Pays an offer with the specified ID from the l402_offers", "parameter": {"offer_id": "(string) String identifier for the offer", "l402_offer": "(object) Offer details containing: offers (Array of offer objects with ID, amount, currency, description, title), payment_context_token (Payment context token string), payment_request_url (URL for payment request), version (API version string)"}, "task": {"category": "Fewsats", "query": "Pay for a specified offer using L402 protocol"}}, {"name": "payment_info", "server": "Fewsats", "description": "Retrieve the details of a payment", "parameter": {"pid": "(string) Payment ID to retrieve information for"}, "task": {"category": "Fewsats", "query": "Retrieve payment details"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Fibery", "description": "Fibery workspace operations, including: list databases, describe database structure, query database, create/update entities", "tools": [{"name": "list_databases", "server": "Fibery", "description": "Retrieves a list of all databases available in your Fibery workspace.", "parameter": {}, "task": {"category": "Fibery", "query": "List all available databases in workspace"}}, {"name": "describe_database", "server": "Fibery", "description": "Provides a detailed breakdown of a specific database's structure, showing all fields with their titles, names, and types.", "parameter": {}, "task": {"category": "Fibery", "query": "Get detailed structure of a database"}}, {"name": "query_database", "server": "Fibery", "description": "Offers powerful, flexible access to your Fibery data through the Fibery API.", "parameter": {}, "task": {"category": "Fibery", "query": "Access and query data via API"}}, {"name": "create_entity", "server": "Fibery", "description": "Creates new entities in your Fibery workspace with specified field values.", "parameter": {}, "task": {"category": "Fibery", "query": "Create new entities in workspace"}}, {"name": "create_entities_batch", "server": "Fibery", "description": "Creates multiple new entities in your Fibery workspace with specified field values.", "parameter": {}, "task": {"category": "Fibery", "query": "Create multiple entities in workspace"}}, {"name": "update_entity", "server": "Fibery", "description": "Updates existing entities in your Fibery workspace with new field values.", "parameter": {}, "task": {"category": "Fibery", "query": "Update entities in workspace"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Financial Datasets", "description": "1.获取公司财务报表（收入、资产负债表、现金流量表） 2.获取公司股票价格（当前和历史） 3.获取公司新闻 4.获取加密货币行情（当前和历史价格）", "tools": [{"name": "get_income_statements", "server": "Financial Datasets", "description": "Get income statements for a company.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve income statements for companies"}}, {"name": "get_balance_sheets", "server": "Financial Datasets", "description": "Get balance sheets for a company.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve balance sheets for companies"}}, {"name": "get_cash_flow_statements", "server": "Financial Datasets", "description": "Get cash flow statements for a company.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve cash flow statements"}}, {"name": "get_current_stock_price", "server": "Financial Datasets", "description": "Get the current / latest price of a company.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve latest stock price"}}, {"name": "get_historical_stock_prices", "server": "Financial Datasets", "description": "Gets historical stock prices for a company.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve historical stock price data"}}, {"name": "get_company_news", "server": "Financial Datasets", "description": "Get news for a company.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve news related to companies"}}, {"name": "get_available_crypto_tickers", "server": "Financial Datasets", "description": "Gets all available crypto tickers.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve available cryptocurrency tickers"}}, {"name": "get_crypto_prices", "server": "Financial Datasets", "description": "Gets historical prices for a crypto currency.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve historical cryptocurrency prices"}}, {"name": "get_historical_crypto_prices", "server": "Financial Datasets", "description": "Gets historical prices for a crypto currency.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve historical cryptocurrency prices"}}, {"name": "get_current_crypto_price", "server": "Financial Datasets", "description": "Get the current / latest price of a crypto currency.", "parameter": {}, "task": {"category": "Financial Datasets", "query": "Retrieve latest cryptocurrency prices"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Firecrawl", "description": "Firecrawl web data acquisition tools, including: single URL scraping, batch URL scraping with rate limiting, batch operation status checking, web search with content extraction, asynchronous crawling, structured information extraction using LLM, deep web research with LLM analysis, and llms.txt file generation", "tools": [{"name": "firecrawl_scrape", "server": "Firecrawl", "description": "Scrape content from a single URL with advanced options.", "parameter": {"url": "(string) The URL to scrape", "formats": "(array) List of formats to return (e.g., ['markdown'])", "onlyMainContent": "(boolean) Whether to only return the main content", "waitFor": "(number) Time to wait for page elements to load (in milliseconds)", "timeout": "(number) Maximum time to wait for the scrape to complete (in milliseconds)", "mobile": "(boolean) Whether to simulate a mobile device", "includeTags": "(array) List of tags to include in the scrape", "excludeTags": "(array) List of tags to exclude from the scrape", "skipTlsVerification": "(boolean) Whether to skip TLS verification"}, "task": {"category": "Firecrawl", "query": "Scrape content from a URL with customizable options"}}, {"name": "firecrawl_batch_scrape", "server": "Firecrawl", "description": "Scrape multiple URLs efficiently with built-in rate limiting and parallel processing.", "parameter": {"urls": "(array) List of URLs to scrape", "options": "(object) Additional options for the scrape"}, "task": {"category": "Firecrawl", "query": "Scrape multiple URLs efficiently"}}, {"name": "firecrawl_check_batch_status", "server": "Firecrawl", "description": "Check the status of a batch operation.", "parameter": {"id": "(string) The ID of the batch operation to check"}, "task": {"category": "Firecrawl", "query": "Check status of batch operations"}}, {"name": "firecrawl_search", "server": "Firecrawl", "description": "Search the web and optionally extract content from search results.", "parameter": {"query": "(string) The search query", "limit": "(number) Maximum number of results to return", "lang": "(string) Language of the search results", "country": "(string) Country code for the search results", "scrapeOptions": "(object) Additional options for scraping the search results"}, "task": {"category": "Firecrawl", "query": "Search and extract web content"}}, {"name": "firecrawl_crawl", "server": "Firecrawl", "description": "Start an asynchronous crawl with advanced options.", "parameter": {"url": "(string) The starting URL for the crawl", "maxDepth": "(number) Maximum recursive depth for the crawl", "limit": "(number) Maximum number of URLs to crawl", "allowExternalLinks": "(boolean) Whether to follow external links", "deduplicateSimilarURLs": "(boolean) Whether to deduplicate similar URLs"}, "task": {"category": "Firecrawl", "query": "Start an asynchronous web crawl with advanced options"}}, {"name": "firecrawl_extract", "server": "Firecrawl", "description": "Extract structured information from web pages using LLM capabilities.", "parameter": {"urls": "(array) List of URLs to extract information from", "prompt": "(string) Custom prompt for the LLM extraction", "systemPrompt": "(string) System prompt to guide the LLM", "schema": "(object) JSON schema for structured data extraction", "allowExternalLinks": "(boolean) Allow extraction from external links", "enableWebSearch": "(boolean) Enable web search for additional context", "includeSubdomains": "(boolean) Include subdomains in extraction"}, "task": {"category": "Firecrawl", "query": "Extract structured data from web pages using LLM"}}, {"name": "firecrawl_deep_research", "server": "Firecrawl", "description": "Conduct deep web research on a query using intelligent crawling, search, and LLM analysis.", "parameter": {"query": "(string, required) The research question or topic to explore", "maxDepth": "(number, optional) Maximum recursive depth for crawling/search (default: 3)", "timeLimit": "(number, optional) Time limit in seconds for the research session (default: 120)", "maxUrls": "(number, optional) Maximum number of URLs to analyze (default: 50)"}, "task": {"category": "Firecrawl", "query": "Perform deep web research on a topic"}}, {"name": "firecrawl_generate_llmstxt", "server": "Firecrawl", "description": "Generate a standardized llms.txt (and optionally llms-full.txt) file for a given domain.", "parameter": {"url": "(string, required) The base URL of the website to analyze", "maxUrls": "(number, optional) Max number of URLs to include (default: 10)", "showFullText": "(boolean, optional) Whether to include llms-full.txt contents in the response"}, "task": {"category": "Firecrawl", "query": "Generate standardized llms.txt files for a domain"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Gitee", "description": "GitHub/Gitee repository operations, including: listing user repositories, getting file content, creating repositories (user/org/enterprise), forking repositories, managing releases, searching open source repositories, managing pull requests (listing, creating, updating, merging, commenting), managing issues (creating, updating, commenting), and user information management (getting user info, searching users, listing notifications)", "tools": [{"name": "list_user_repos", "server": "Gitee", "description": "List user authorized repositories", "parameter": {}, "task": {"category": "Gitee", "query": "List repositories accessible by user"}}, {"name": "get_file_content", "server": "Gitee", "description": "Get the content of a file in a repository", "parameter": {}, "task": {"category": "Gitee", "query": "Retrieve file content from a repository"}}, {"name": "create_user_repo", "server": "Gitee", "description": "Create a user repository", "parameter": {}, "task": {"category": "Gitee", "query": "Create a new repository for a user"}}, {"name": "create_org_repo", "server": "Gitee", "description": "Create an organization repository", "parameter": {}, "task": {"category": "Gitee", "query": "Create a repository for an organization"}}, {"name": "create_enter_repo", "server": "Gitee", "description": "Create an enterprise repository", "parameter": {}, "task": {"category": "Gitee", "query": "Create an enterprise repository"}}, {"name": "fork_repository", "server": "Gitee", "description": "Fork a repository", "parameter": {}, "task": {"category": "Gitee", "query": "Fork a repository"}}, {"name": "create_release", "server": "Gitee", "description": "Create a release for a repository", "parameter": {}, "task": {"category": "Gitee", "query": "Create a release for a repository"}}, {"name": "list_releases", "server": "Gitee", "description": "List repository releases", "parameter": {}, "task": {"category": "Gitee", "query": "List releases for a repository"}}, {"name": "search_open_source_repositories", "server": "Gitee", "description": "Search open source repositories on Gitee", "parameter": {}, "task": {"category": "Gitee", "query": "Search for open source repositories"}}, {"name": "list_repo_pulls", "server": "Gitee", "description": "List pull requests in a repository", "parameter": {}, "task": {"category": "Gitee", "query": "List pull requests in a repository"}}, {"name": "merge_pull", "server": "Gitee", "description": "Merge a pull request", "parameter": {}, "task": {"category": "Gitee", "query": "Merge pull requests"}}, {"name": "create_pull", "server": "Gitee", "description": "Create a pull request", "parameter": {}, "task": {"category": "Gitee", "query": "Create a pull request in a repository"}}, {"name": "update_pull", "server": "Gitee", "description": "Update a pull request", "parameter": {}, "task": {"category": "Gitee", "query": "Update pull requests"}}, {"name": "get_pull_detail", "server": "Gitee", "description": "Get details of a pull request", "parameter": {}, "task": {"category": "Gitee", "query": "Retrieve pull request details"}}, {"name": "comment_pull", "server": "Gitee", "description": "Comment on a pull request", "parameter": {}, "task": {"category": "Gitee", "query": "Add comments to pull requests"}}, {"name": "list_pull_comments", "server": "Gitee", "description": "List all comments for a pull request", "parameter": {}, "task": {"category": "Gitee", "query": "Retrieve comments from a pull request"}}, {"name": "create_issue", "server": "Gitee", "description": "Create an issue", "parameter": {}, "task": {"category": "Gitee", "query": "Create a new issue"}}, {"name": "update_issue", "server": "Gitee", "description": "Update an issue", "parameter": {}, "task": {"category": "Gitee", "query": "Update an issue on Gitee"}}, {"name": "get_repo_issue_detail", "server": "Gitee", "description": "Get details of a repository issue", "parameter": {}, "task": {"category": "Gitee", "query": "Retrieve repository issue details"}}, {"name": "list_repo_issues", "server": "Gitee", "description": "List repository issues", "parameter": {}, "task": {"category": "Gitee", "query": "List issues in a repository"}}, {"name": "comment_issue", "server": "Gitee", "description": "Comment on an issue", "parameter": {}, "task": {"category": "Gitee", "query": "Add comments to issues"}}, {"name": "list_issue_comments", "server": "Gitee", "description": "List comments on an issue", "parameter": {}, "task": {"category": "Gitee", "query": "Retrieve comments from an issue"}}, {"name": "get_user_info", "server": "Gitee", "description": "Get current authenticated user information", "parameter": {}, "task": {"category": "Gitee", "query": "Retrieve authenticated user details"}}, {"name": "search_users", "server": "Gitee", "description": "Search for users", "parameter": {}, "task": {"category": "Gitee", "query": "Search for users on the platform"}}, {"name": "list_user_notifications", "server": "Gitee", "description": "List user notifications", "parameter": {}, "task": {"category": "Gitee", "query": "List user notifications"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Gyazo", "description": "Gyazo图片管理,包括:全文搜索、获取图片内容与元数据、获取最新图片、上传图片", "tools": [{"name": "gyazo_search", "server": "Gyazo", "description": "Full-text search for captures uploaded by users on Gyazo", "parameter": {"keyword": "(string) Search by keyword, title, app, URL, or date range", "pagination": "(Optional, boolean) Supports pagination for browsing multiple results"}, "task": {"category": "Gyazo", "query": "Search user-uploaded captures"}}, {"name": "gyazo_image", "server": "Gyazo", "description": "Fetch image content and metadata from Gyazo", "parameter": {"id_or_url": "(string) Retrieve specific images by ID or URL"}, "task": {"category": "Gyazo", "query": "Retrieve images and their metadata"}}, {"name": "gyazo_latest_image", "server": "Gyazo", "description": "Fetch the most recent image from Gyazo", "parameter": {}, "task": {"category": "Gyazo", "query": "Retrieve the latest uploaded image"}}, {"name": "gyazo_upload", "server": "Gyazo", "description": "Upload an image to Gyazo", "parameter": {"image_data": "(string) Base64 encoded image data", "title": "(Optional, string) Title of the image", "description": "(Optional, string) Description of the image", "referer_url": "(Optional, string) Referer URL", "app_name": "(Optional, string) App name"}, "task": {"category": "Gyazo", "query": "Upload images to a cloud service"}}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "gotoHuman", "description": "1.列出所有可用的审查表单 2.获取给定表单的审查模式 3.请求人工审查", "tools": [{"name": "list-forms", "server": "gotoHuman", "description": "List all available review forms.", "parameter": {}, "task": {"category": "gotoHuman", "query": "List available review forms"}}, {"name": "get-form-schema", "server": "gotoHuman", "description": "Get the schema to use when requesting a human review for a given form.", "parameter": {"formId": "(string) The form ID to fetch the schema for"}, "task": {"category": "gotoHuman", "query": "Retrieve schema for human review request"}}, {"name": "request-human-review-with-form", "server": "gotoHuman", "description": "Request a human review. Will appear in your gotoHuman inbox.", "parameter": {"formId": "(string) The form ID for the review", "fieldData": "(object) Content (AI-output to review, context,...) and configuration for the form's fields. The schema for this needs to be fetched with get-form-schema", "metadata": "(Optional, object) Optional additional data that will be incl. in the webhook response after form submission", "assignToUsers": "(Optional, array) Optional list of user emails to assign the review to"}, "task": {"category": "gotoHuman", "query": "Request a human review with form data"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Grafana", "description": "Grafana相关操作,包括:仪表盘搜索与管理、数据源查询与管理、Prometheus查询与元数据获取、Grafana Incident事件管理、Loki日志查询与统计、告警规则管理、OnCall调度管理、Sift调查分析、错误模式日志查找、慢请求查找", "tools": [{"name": "search_dashboards", "server": "Grafana", "description": "Search for dashboards", "parameter": {}, "task": {"category": "Grafana", "query": "Search for available dashboards"}}, {"name": "get_dashboard_by_uid", "server": "Grafana", "description": "Get a dashboard by uid", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve dashboard information"}}, {"name": "update_dashboard", "server": "Grafana", "description": "Update or create a new dashboard", "parameter": {}, "task": {"category": "Grafana", "query": "Manage dashboards"}}, {"name": "list_datasources", "server": "Grafana", "description": "List datasources", "parameter": {}, "task": {"category": "Grafana", "query": "List available datasources"}}, {"name": "get_datasource_by_uid", "server": "Grafana", "description": "Get a datasource by uid", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve datasource information"}}, {"name": "get_datasource_by_name", "server": "Grafana", "description": "Get a datasource by name", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve datasource information by name"}}, {"name": "query_prometheus", "server": "Grafana", "description": "Execute a query against a Prometheus datasource", "parameter": {}, "task": {"category": "Grafana", "query": "Query Prometheus data source"}}, {"name": "list_prometheus_metric_metadata", "server": "Grafana", "description": "List metric metadata", "parameter": {}, "task": {"category": "Grafana", "query": "List metadata for Prometheus metrics"}}, {"name": "list_prometheus_metric_names", "server": "Grafana", "description": "List available metric names", "parameter": {}, "task": {"category": "Grafana", "query": "List available metrics"}}, {"name": "list_prometheus_label_names", "server": "Grafana", "description": "List label names matching a selector", "parameter": {}, "task": {"category": "Grafana", "query": "List label names for a selector"}}, {"name": "list_prometheus_label_values", "server": "Grafana", "description": "List values for a specific label", "parameter": {}, "task": {"category": "Grafana", "query": "List values for a specific label in Prometheus"}}, {"name": "list_incidents", "server": "Grafana", "description": "List incidents in Grafana Incident", "parameter": {}, "task": {"category": "Grafana", "query": "List incidents in monitoring system"}}, {"name": "create_incident", "server": "Grafana", "description": "Create an incident in Grafana Incident", "parameter": {}, "task": {"category": "Grafana", "query": "Create an incident in Grafana Incident"}}, {"name": "add_activity_to_incident", "server": "Grafana", "description": "Add an activity item to an incident in Grafana Incident", "parameter": {}, "task": {"category": "Grafana", "query": "Add activity to incident"}}, {"name": "resolve_incident", "server": "Grafana", "description": "Resolve an incident in Grafana Incident", "parameter": {}, "task": {"category": "Grafana", "query": "Manage and resolve incidents"}}, {"name": "query_loki_logs", "server": "Grafana", "description": "Query and retrieve logs using LogQL (either log or metric queries)", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve logs using LogQL queries"}}, {"name": "list_loki_label_names", "server": "Grafana", "description": "List all available label names in logs", "parameter": {}, "task": {"category": "Grafana", "query": "List available label names in logs"}}, {"name": "list_loki_label_values", "server": "Grafana", "description": "List values for a specific log label", "parameter": {}, "task": {"category": "Grafana", "query": "List log label values"}}, {"name": "query_loki_stats", "server": "Grafana", "description": "Get statistics about log streams", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve log stream statistics"}}, {"name": "list_alert_rules", "server": "Grafana", "description": "List alert rules", "parameter": {}, "task": {"category": "Grafana", "query": "List alert rules"}}, {"name": "get_alert_rule_by_uid", "server": "Grafana", "description": "Get alert rule by UID", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve alert rule details"}}, {"name": "list_oncall_schedules", "server": "Grafana", "description": "List schedules from Grafana OnCall", "parameter": {}, "task": {"category": "Grafana", "query": "List on-call schedules"}}, {"name": "get_oncall_shift", "server": "Grafana", "description": "Get details for a specific OnCall shift", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve OnCall shift details"}}, {"name": "get_current_oncall_users", "server": "Grafana", "description": "Get users currently on-call for a specific schedule", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve current on-call users for a schedule"}}, {"name": "list_oncall_teams", "server": "Grafana", "description": "List teams from Grafana OnCall", "parameter": {}, "task": {"category": "Grafana", "query": "List teams from on-call service"}}, {"name": "list_oncall_users", "server": "Grafana", "description": "List users from Grafana OnCall", "parameter": {}, "task": {"category": "Grafana", "query": "List users from on-call system"}}, {"name": "get_investigation", "server": "Grafana", "description": "Retrieve an existing Sift investigation by its UUID", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve an investigation by UUID"}}, {"name": "get_analysis", "server": "Grafana", "description": "Retrieve a specific analysis from a Sift investigation", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve analysis from investigation"}}, {"name": "list_investigations", "server": "Grafana", "description": "Retrieve a list of Sift investigations with an optional limit", "parameter": {}, "task": {"category": "Grafana", "query": "Retrieve list of investigations"}}, {"name": "find_error_pattern_logs", "server": "Grafana", "description": "Finds elevated error patterns in Loki logs", "parameter": {}, "task": {"category": "Grafana", "query": "Identify error patterns in logs"}}, {"name": "find_slow_requests", "server": "Grafana", "description": "Finds slow requests from the relevant tempo datasources", "parameter": {}, "task": {"category": "Grafana", "query": "Identify slow requests in tempo datasources"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Graphlit", "description": "1.知识库内容查询与检索（包括内容、集合、订阅源、对话） 2.相关资源检索（文本、图像） 3.图像处理与描述 4.语言模型对话 5.结构化数据提取 6.内容发布（音频、图像） 7.多源数据采集（文件、网页、消息、社交媒体、邮件、问题、文本、短期记忆） 8.平台集成（邮件、项目管理、云存储、社交、团队协作） 9.网络爬虫与搜索 10.通知发送（Slack、邮件、Webhook、Twitter） 11.知识库项目管理（配置、集合操作） 12.平台资源列表查询", "tools": [{"name": "Query Contents", "server": "Graphlit", "description": "Searches and retrieves contents from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Search and retrieve contents from knowledge base"}}, {"name": "Query Collections", "server": "Graphlit", "description": "Searches and retrieves collections from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Search and retrieve collections from knowledge base"}}, {"name": "Query Feeds", "server": "Graphlit", "description": "Searches and retrieves feeds from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Search and retrieve feeds from knowledge base"}}, {"name": "Query Conversations", "server": "Graphlit", "description": "Searches and retrieves conversations from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Search and retrieve conversations"}}, {"name": "Retrieve Relevant Sources", "server": "Graphlit", "description": "Retrieves relevant sources based on a query.", "parameter": {}, "task": {"category": "Graphlit", "query": "Retrieve relevant sources based on a query"}}, {"name": "Retrieve Similar Images", "server": "Graphlit", "description": "Retrieves images similar to a given image.", "parameter": {}, "task": {"category": "Graphlit", "query": "Find images similar to a given image"}}, {"name": "Visually Describe Image", "server": "Graphlit", "description": "Provides a visual description of an image.", "parameter": {}, "task": {"category": "Graphlit", "query": "Generate a visual description of an image"}}, {"name": "Prompt LLM Conversation", "server": "Graphlit", "description": "Initiates a conversation with a language model.", "parameter": {}, "task": {"category": "Graphlit", "query": "Start a conversation with a language model"}}, {"name": "Extract Structured JSON from Text", "server": "Graphlit", "description": "Extracts structured JSON data from text.", "parameter": {}, "task": {"category": "Graphlit", "query": "Extract structured data from text"}}, {"name": "Publish as Audio (ElevenLabs Audio)", "server": "Graphlit", "description": "Publishes content as audio using ElevenLabs.", "parameter": {}, "task": {"category": "Graphlit", "query": "Convert content to audio format"}}, {"name": "Publish as Image (OpenAI Image Generation)", "server": "Graphlit", "description": "Publishes content as an image using OpenAI.", "parameter": {}, "task": {"category": "OpenAI", "query": "Generate images from content"}}, {"name": "Files", "server": "Graphlit", "description": "Ingests files into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest files into knowledge base"}}, {"name": "Web Pages", "server": "Graphlit", "description": "Ingests web pages into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest web pages into knowledge base"}}, {"name": "Messages", "server": "Graphlit", "description": "Ingests messages from communication platforms into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest messages from communication platforms"}}, {"name": "Posts", "server": "Graphlit", "description": "Ingests posts from social media platforms into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest social media posts into knowledge base"}}, {"name": "Emails", "server": "Graphlit", "description": "Ingests emails into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest emails into knowledge base"}}, {"name": "Issues", "server": "Graphlit", "description": "Ingests issues from project management tools into the knowledge base.", "parameter": {}, "task": {"category": "Project Management", "query": "Ingest issues into knowledge base"}}, {"name": "Text", "server": "Graphlit", "description": "Ingests plain text into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest plain text into knowledge base"}}, {"name": "Memory (Short-Term)", "server": "Graphlit", "description": "Ingests short-term memory data into the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Ingest short-term memory data"}}, {"name": "Microsoft Outlook email", "server": "Graphlit", "description": "Connects to Microsoft Outlook to ingest emails.", "parameter": {}, "task": {"category": "Microsoft Outlook", "query": "Connect and ingest emails"}}, {"name": "Google Mail", "server": "Graphlit", "description": "Connects to Google Mail to ingest emails.", "parameter": {}, "task": {"category": "Google Mail", "query": "Connect to email service for data ingestion"}}, {"name": "Notion", "server": "Graphlit", "description": "Connects to Notion to ingest data.", "parameter": {}, "task": {"category": "Notion", "query": "Connect and ingest data from Notion"}}, {"name": "Reddit", "server": "Graphlit", "description": "Connects to Reddit to ingest data.", "parameter": {}, "task": {"category": "Reddit", "query": "Connect to Reddit for data ingestion"}}, {"name": "Linear", "server": "Graphlit", "description": "Connects to Linear to ingest data.", "parameter": {}, "task": {"category": "Graphlit", "query": "Connect to Linear for data ingestion"}}, {"name": "Jira", "server": "Graphlit", "description": "Connects to Jira to ingest data.", "parameter": {}, "task": {"category": "Jira", "query": "Connect to Jira for data ingestion"}}, {"name": "GitHub Issues", "server": "Graphlit", "description": "Connects to GitHub to ingest issues.", "parameter": {}, "task": {"category": "GitHub", "query": "Ingest issues from GitHub"}}, {"name": "Google Drive", "server": "Graphlit", "description": "Connects to Google Drive to ingest files.", "parameter": {}, "task": {"category": "Google Drive", "query": "Connect and ingest files from Google Drive"}}, {"name": "OneDrive", "server": "Graphlit", "description": "Connects to OneDrive to ingest files.", "parameter": {}, "task": {"category": "OneDrive", "query": "Connect and ingest files from cloud storage"}}, {"name": "SharePoint", "server": "Graphlit", "description": "Connects to SharePoint to ingest files.", "parameter": {}, "task": {"category": "SharePoint", "query": "Connect and ingest files from SharePoint"}}, {"name": "Dropbox", "server": "Graphlit", "description": "Connects to Dropbox to ingest files.", "parameter": {}, "task": {"category": "Dropbox", "query": "Connect and ingest files from cloud storage"}}, {"name": "Box", "server": "Graphlit", "description": "Connects to Box to ingest files.", "parameter": {}, "task": {"category": "Box", "query": "Connect to Box for file ingestion"}}, {"name": "GitHub", "server": "Graphlit", "description": "Connects to GitHub to ingest repositories and files.", "parameter": {}, "task": {"category": "GitHub", "query": "Connect and ingest repositories and files"}}, {"name": "Slack", "server": "Graphlit", "description": "Connects to Slack to ingest messages and files.", "parameter": {}, "task": {"category": "Slack", "query": "Connect to ingest messages and files"}}, {"name": "Microsoft Teams", "server": "Graphlit", "description": "Connects to Microsoft Teams to ingest messages and files.", "parameter": {}, "task": {"category": "Microsoft Teams", "query": "Connect to Microsoft Teams for message and file ingestion"}}, {"name": "Discord", "server": "Graphlit", "description": "Connects to Discord to ingest messages and files.", "parameter": {}, "task": {"category": "Discord", "query": "Connect to Discord for message and file ingestion"}}, {"name": "Twitter/X", "server": "Graphlit", "description": "Connects to Twitter/X to ingest tweets and media.", "parameter": {}, "task": {"category": "Twitter/X", "query": "Ingest tweets and media from Twitter/X"}}, {"name": "Podcasts (RSS)", "server": "Graphlit", "description": "Connects to podcast RSS feeds to ingest episodes.", "parameter": {}, "task": {"category": "Graphlit", "query": "Connect to podcast RSS feeds"}}, {"name": "Web Crawling", "server": "Graphlit", "description": "Crawls web pages and ingests the content.", "parameter": {}, "task": {"category": "Graphlit", "query": "Crawl and ingest web page content"}}, {"name": "Web Search (including Podcast Search)", "server": "Graphlit", "description": "Performs web searches and ingests the results.", "parameter": {}, "task": {"category": "Graphlit", "query": "Perform web searches and ingest results"}}, {"name": "Web Mapping", "server": "Graphlit", "description": "Maps and visualizes web content.", "parameter": {}, "task": {"category": "Graphlit", "query": "Visualize web content"}}, {"name": "Screenshot Page", "server": "Graphlit", "description": "Takes screenshots of web pages and ingests them.", "parameter": {}, "task": {"category": "Graphlit", "query": "Capture screenshots of web pages"}}, {"name": "Slack", "server": "Graphlit", "description": "Sends notifications to Slack.", "parameter": {}, "task": {"category": "Slack", "query": "Send notifications to a messaging platform"}}, {"name": "Email", "server": "Graphlit", "description": "Sends notifications via email.", "parameter": {}, "task": {"category": "Graphlit", "query": "Send notifications via email"}}, {"name": "Webhook", "server": "Graphlit", "description": "Sends notifications via webhook.", "parameter": {}, "task": {"category": "Graphlit", "query": "Send notifications using webhooks"}}, {"name": "Twitter/X", "server": "Graphlit", "description": "Sends notifications to Twitter/X.", "parameter": {}, "task": {"category": "Twitter/X", "query": "Send notifications to social media"}}, {"name": "Configure Project", "server": "Graphlit", "description": "Configures a project in the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Set up or modify project configurations"}}, {"name": "Create Collection", "server": "Graphlit", "description": "Creates a new collection in the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Create a new collection in knowledge base"}}, {"name": "Add Contents to Collection", "server": "Graphlit", "description": "Adds contents to an existing collection.", "parameter": {}, "task": {"category": "Graphlit", "query": "Add contents to a collection"}}, {"name": "Remove Contents from Collection", "server": "Graphlit", "description": "Removes contents from an existing collection.", "parameter": {}, "task": {"category": "Graphlit", "query": "Remove contents from a collection"}}, {"name": "Delete Collection(s)", "server": "Graphlit", "description": "Deletes one or more collections from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Remove collections from knowledge base"}}, {"name": "Delete Feed(s)", "server": "Graphlit", "description": "Deletes one or more feeds from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Remove feeds from knowledge base"}}, {"name": "Delete Content(s)", "server": "Graphlit", "description": "Deletes one or more contents from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Remove contents from knowledge base"}}, {"name": "Delete Conversation(s)", "server": "Graphlit", "description": "Deletes one or more conversations from the knowledge base.", "parameter": {}, "task": {"category": "Graphlit", "query": "Remove conversations from knowledge base"}}, {"name": "Is Feed Done?", "server": "Graphlit", "description": "Checks if a feed is done processing.", "parameter": {}, "task": {"category": "Graphlit", "query": "Check feed processing status"}}, {"name": "Is Content Done?", "server": "Graphlit", "description": "Checks if a content item is done processing.", "parameter": {}, "task": {"category": "Graphlit", "query": "Check content processing status"}}, {"name": "List Slack Channels", "server": "Graphlit", "description": "Lists available Slack channels.", "parameter": {}, "task": {"category": "Slack", "query": "List available channels"}}, {"name": "List Microsoft Teams Teams", "server": "Graphlit", "description": "Lists available Microsoft Teams teams.", "parameter": {}, "task": {"category": "Microsoft Teams", "query": "List available teams"}}, {"name": "List Microsoft Teams Channels", "server": "Graphlit", "description": "Lists available channels within a Microsoft Teams team.", "parameter": {}, "task": {"category": "Microsoft Teams", "query": "List available channels in a team"}}, {"name": "List SharePoint Libraries", "server": "Graphlit", "description": "Lists available libraries in SharePoint.", "parameter": {}, "task": {"category": "SharePoint", "query": "List available libraries"}}, {"name": "List SharePoint Folders", "server": "Graphlit", "description": "Lists available folders within a SharePoint library.", "parameter": {}, "task": {"category": "SharePoint", "query": "List available folders in a SharePoint library"}}, {"name": "List Linear Projects", "server": "Graphlit", "description": "Lists available projects in Linear.", "parameter": {}, "task": {"category": "Linear", "query": "List available projects"}}, {"name": "List Notion Databases", "server": "Graphlit", "description": "Lists available databases in Notion.", "parameter": {}, "task": {"category": "Notion", "query": "List available databases"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "GreptimeDB", "description": "1.列出数据库中的表 2.从表中读取数据 3.列出可用工具 4.执行SQL查询 5.列出可用提示 6.按名称获取提示", "tools": [{"name": "list_resources", "server": "GreptimeDB", "description": "Lists tables in the database.", "parameter": {}, "task": {"category": "GreptimeDB", "query": "List database tables"}}, {"name": "read_resource", "server": "GreptimeDB", "description": "Reads data from a table.", "parameter": {}, "task": {"category": "GreptimeDB", "query": "Read data from a database table"}}, {"name": "list_tools", "server": "GreptimeDB", "description": "Lists available tools.", "parameter": {}, "task": {"category": "GreptimeDB", "query": "List available tools"}}, {"name": "call_tool", "server": "GreptimeDB", "description": "Executes an SQL query.", "parameter": {}, "task": {"category": "GreptimeDB", "query": "Execute SQL queries on database"}}, {"name": "list_prompts", "server": "GreptimeDB", "description": "Lists available prompts.", "parameter": {}, "task": {"category": "GreptimeDB", "query": "List available prompts"}}, {"name": "get_prompt", "server": "GreptimeDB", "description": "Gets a prompt by name.", "parameter": {}, "task": {"category": "GreptimeDB", "query": "Retrieve a prompt by its name"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "Heroku", "description": "Heroku平台应用管理,包括:应用列表查询、应用信息获取、应用创建与重命名、应用所有权转移、项目部署、Dyno管理(列表/扩缩容/重启)、Add-on管理(列表/创建/信息获取)、维护模式切换、应用日志查看、Pipeline管理(创建/升级/列表/信息)、团队与空间管理、PostgreSQL数据库操作(查询/信息/进程/锁/性能分析/凭证/维护/备份/升级)", "tools": [{"name": "list_apps", "server": "Heroku", "description": "List all Heroku apps. You can filter apps by personal, collaborator, team, or space.", "parameter": {}, "task": {"category": "Heroku", "query": "List all Heroku apps with filters"}}, {"name": "get_app_info", "server": "Heroku", "description": "Get detailed information about an app, including its configuration, dynos, and add-ons.", "parameter": {}, "task": {"category": "Heroku", "query": "Retrieve detailed information about an application"}}, {"name": "create_app", "server": "Heroku", "description": "Create a new app with customizable settings for region, team, and space.", "parameter": {}, "task": {"category": "Heroku", "query": "Create a new app with customizable settings"}}, {"name": "rename_app", "server": "Heroku", "description": "Rename an existing app.", "parameter": {}, "task": {"category": "Heroku", "query": "Rename an existing application"}}, {"name": "transfer_app", "server": "Heroku", "description": "Transfer ownership of an app to another user or team.", "parameter": {}, "task": {"category": "Heroku", "query": "Transfer app ownership"}}, {"name": "deploy_to_heroku", "server": "Heroku", "description": "Deploy projects to Heroku with an `app.json` configuration, supporting team deployments, private spaces, and environment setups.", "parameter": {}, "task": {"category": "Heroku", "query": "Deploy projects with app.json configuration"}}, {"name": "deploy_one_off_dyno", "server": "Heroku", "description": "Execute code or commands in a sandboxed environment on a Heroku one-off dyno. Supports file creation, network access, environment variables, and automatic cleanup. Ideal for running scripts, tests, or temporary workloads.", "parameter": {}, "task": {"category": "Heroku", "query": "Execute code or commands in a sandboxed environment"}}, {"name": "ps_list", "server": "Heroku", "description": "List all dynos for an app.", "parameter": {}, "task": {"category": "Heroku", "query": "List dynos for an app"}}, {"name": "ps_scale", "server": "Heroku", "description": "Scale the number of dynos up or down, or resize dynos.", "parameter": {}, "task": {"category": "Heroku", "query": "Scale or resize dynos"}}, {"name": "ps_restart", "server": "Heroku", "description": "Restart specific dynos, process types, or all dynos.", "parameter": {}, "task": {"category": "Heroku", "query": "Restart dynos or process types"}}, {"name": "list_addons", "server": "Heroku", "description": "List all add-ons for all apps or for a specific app.", "parameter": {}, "task": {"category": "Heroku", "query": "List add-ons for apps"}}, {"name": "get_addon_info", "server": "Heroku", "description": "Get detailed information about a specific add-on.", "parameter": {}, "task": {"category": "Heroku", "query": "Retrieve details about an add-on"}}, {"name": "create_addon", "server": "Heroku", "description": "Provision a new add-on for an app.", "parameter": {}, "task": {"category": "Heroku", "query": "Provision new add-ons for applications"}}, {"name": "maintenance_on", "server": "Heroku", "description": "Enable maintenance mode for an app.", "parameter": {}, "task": {"category": "Heroku", "query": "Enable maintenance mode for an application"}}, {"name": "maintenance_off", "server": "Heroku", "description": "Disable maintenance mode for an app.", "parameter": {}, "task": {"category": "Heroku", "query": "Disable maintenance mode for an application"}}, {"name": "get_app_logs", "server": "Heroku", "description": "View application logs.", "parameter": {}, "task": {"category": "Heroku", "query": "View application logs"}}, {"name": "pipelines_create", "server": "Heroku", "description": "Create a new pipeline.", "parameter": {}, "task": {"category": "Heroku", "query": "Create a new pipeline"}}, {"name": "pipelines_promote", "server": "Heroku", "description": "Promote apps to the next stage in a pipeline.", "parameter": {}, "task": {"category": "Heroku", "query": "Promote apps in pipeline stages"}}, {"name": "pipelines_list", "server": "Heroku", "description": "List available pipelines.", "parameter": {}, "task": {"category": "Heroku", "query": "List available pipelines"}}, {"name": "pipelines_info", "server": "Heroku", "description": "Get detailed pipeline information.", "parameter": {}, "task": {"category": "Heroku", "query": "Retrieve pipeline details"}}, {"name": "list_teams", "server": "Heroku", "description": "List teams you belong to.", "parameter": {}, "task": {"category": "Heroku", "query": "List teams associated with the user"}}, {"name": "list_private_spaces", "server": "Heroku", "description": "List available spaces.", "parameter": {}, "task": {"category": "Heroku", "query": "List available private spaces"}}, {"name": "pg_psql", "server": "Heroku", "description": "Execute SQL queries against the Heroku PostgreSQL database.", "parameter": {}, "task": {"category": "Heroku", "query": "Execute SQL queries on PostgreSQL database"}}, {"name": "pg_info", "server": "Heroku", "description": "Display detailed database information.", "parameter": {}, "task": {"category": "Heroku", "query": "Retrieve detailed database information"}}, {"name": "pg_ps", "server": "Heroku", "description": "View active queries and execution details.", "parameter": {}, "task": {"category": "Heroku", "query": "View active database queries"}}, {"name": "pg_locks", "server": "Heroku", "description": "View database locks and identify blocking transactions.", "parameter": {}, "task": {"category": "Heroku", "query": "View database locks and blocking transactions"}}, {"name": "pg_outliers", "server": "Heroku", "description": "Identify resource-intensive queries.", "parameter": {}, "task": {"category": "Heroku", "query": "Identify resource-intensive database queries"}}, {"name": "pg_credentials", "server": "Heroku", "description": "Manage database credentials and access.", "parameter": {}, "task": {"category": "Heroku", "query": "Manage database credentials"}}, {"name": "pg_kill", "server": "Heroku", "description": "Terminate specific database processes.", "parameter": {}, "task": {"category": "Heroku", "query": "Terminate database processes"}}, {"name": "pg_maintenance", "server": "Heroku", "description": "Show database maintenance information.", "parameter": {}, "task": {"category": "Heroku", "query": "Display database maintenance details"}}, {"name": "pg_backups", "server": "Heroku", "description": "Manage database backups and schedules.", "parameter": {}, "task": {"category": "Heroku", "query": "Manage database backups and schedules"}}, {"name": "pg_upgrade", "server": "Heroku", "description": "Upgrade PostgreSQL to a newer version.", "parameter": {}, "task": {"category": "Heroku", "query": "Upgrade PostgreSQL version"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Hologres", "description": "Hologres数据库操作,包括:执行SELECT/DML/DDL SQL查询、收集表统计信息、获取查询计划与执行计划", "tools": [{"name": "execute_select_sql", "server": "Hologres", "description": "Execute a SELECT SQL query on the Hologres server", "parameter": {}, "task": {"category": "Hologres", "query": "Execute SELECT queries on database"}}, {"name": "execute_dml_sql", "server": "Hologres", "description": "Execute a DML (INSERT, UPDATE, DELETE) SQL query on the Hologres server", "parameter": {}, "task": {"category": "Hologres", "query": "Execute DML operations on database"}}, {"name": "execute_ddl_sql", "server": "Hologres", "description": "Execute a DDL (CREATE, ALTER, DROP) SQL query on the Hologres server", "parameter": {}, "task": {"category": "Hologres", "query": "Execute DDL SQL queries"}}, {"name": "gather_table_statistics", "server": "Hologres", "description": "Collect table statistics", "parameter": {}, "task": {"category": "Hologres", "query": "Collect statistics for database tables"}}, {"name": "get_query_plan", "server": "Hologres", "description": "Get query plan", "parameter": {}, "task": {"category": "Hologres", "query": "Retrieve query execution plan"}}, {"name": "get_execution_plan", "server": "Hologres", "description": "Get execution plan", "parameter": {}, "task": {"category": "Hologres", "query": "Retrieve execution plan details"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Hyperbrowser", "description": "1. Extract formatted content from webpages 2. Crawl and extract content from linked pages 3. Convert HTML to structured JSON 4. Query the web with Bing search 5. Browser automation with Browser Use agent 6. General-purpose automation with OpenAI’s CUA model 7. Complex browser tasks with Claude computer use 8. Create, delete, and list Hyperbrowser profiles", "tools": [{"name": "scrape_webpage", "server": "Hyperbrowser", "description": "Extract formatted (markdown, screenshot etc) content from any webpage", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "Extract content from webpages"}}, {"name": "crawl_webpages", "server": "Hyperbrowser", "description": "Navigate through multiple linked pages and extract LLM-friendly formatted content", "parameter": {}, "task": {"category": "Web Crawling", "query": "Extract formatted content from linked webpages"}}, {"name": "extract_structured_data", "server": "Hyperbrowser", "description": "Convert messy HTML into structured JSON", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "Convert HTML to structured data"}}, {"name": "search_with_bing", "server": "Hyperbrowser", "description": "Query the web and get results with Bing search", "parameter": {}, "task": {"category": "Bing", "query": "Search the web for information"}}, {"name": "browser_use_agent", "server": "Hyperbrowser", "description": "Fast, lightweight browser automation with the Browser Use agent", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "Browser automation tool"}}, {"name": "openai_computer_use_agent", "server": "Hyperbrowser", "description": "General-purpose automation using OpenAI’s CUA model", "parameter": {}, "task": {"category": "OpenAI", "query": "General-purpose automation tasks"}}, {"name": "claude_computer_use_agent", "server": "Hyperbrowser", "description": "Complex browser tasks using Claude computer use", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "Perform complex browser tasks"}}, {"name": "create_profile", "server": "Hyperbrowser", "description": "Creates a new persistent Hyperbrowser profile", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "Create a new persistent profile"}}, {"name": "delete_profile", "server": "Hyperbrowser", "description": "Deletes an existing persistent Hyperbrowser profile", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "Delete a persistent profile"}}, {"name": "list_profiles", "server": "Hyperbrowser", "description": "Lists existing persistent Hyperbrowser profiles", "parameter": {}, "task": {"category": "Hyperbrowser", "query": "List existing profiles"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Browser Operation", "description": "浏览器操作与自动化控制,如网页元素操控、Cookie 管理、页面截图等"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "ForeverVM", "description": "1. Connect to machines by ID 2. Create new machines with tags and memory limits 3. List all machines with optional tag filtering", "tools": [{"name": "repl", "server": "ForeverVM", "description": "Connects to a new machine or an existing one by ID.", "parameter": {"machine_name": "(Optional, string) The ID of an existing machine to connect to."}, "task": {"category": "ForeverVM", "query": "Connect to a virtual machine"}}, {"name": "createMachine", "server": "ForeverVM", "description": "Creates a new machine with optional tags and memory limits.", "parameter": {"tags": "(Optional, object) Key-value pairs to tag the machine.", "memory_mb": "(Optional, number) Memory limit in megabytes for the machine."}, "task": {"category": "ForeverVM", "query": "Create a new virtual machine with optional configurations"}}, {"name": "listMachines", "server": "ForeverVM", "description": "Lists all machines, optionally filtered by tags.", "parameter": {"tags": "(Optional, object) Key-value pairs to filter the machines by tags."}, "task": {"category": "ForeverVM", "query": "List machines with optional tag filtering"}}], "domains": [{"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "Inkeep", "description": "Retrieve product documentation about Inkeep using conversational queries", "tools": [{"name": "search-product-content", "server": "Inkeep", "description": "Retrieves product documentation about Inkeep. The query should be framed as a conversational question about Inkeep.", "parameter": {}, "task": {"category": "Inkeep", "query": "Find information about Inkeep product features"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Kagi Search", "description": "1.执行网页搜索以查找基于查询的信息 2.基于URL生成内容摘要", "tools": [{"name": "search", "server": "Kagi Search", "description": "Performs a web search to find information based on the query provided.", "parameter": {}, "task": {"category": "Kagi Search", "query": "Find information on the web"}}, {"name": "summarizer", "server": "Kagi Search", "description": "Generates a summary of the content, such as a video, based on the URL provided.", "parameter": {}, "task": {"category": "Kagi Search", "query": "Generate summary from URL"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Keboola", "description": "Keboola平台操作,包括:存储桶和表信息获取与更新、SQL查询与转换创建、组件与转换配置检索、作业管理与启动、文档查询", "tools": [{"name": "get_bucket_detail", "server": "Keboola", "description": "Gets detailed information about a specific bucket.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve detailed information about a bucket"}}, {"name": "get_table_detail", "server": "Keboola", "description": "Gets detailed information about a specific table including its DB identifier and column information.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve detailed information about a table"}}, {"name": "retrieve_bucket_tables", "server": "Keboola", "description": "Retrieves all tables in a specific bucket with their basic information.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve tables from a bucket"}}, {"name": "retrieve_buckets", "server": "Keboola", "description": "Retrieves information about all buckets in the project.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve project bucket information"}}, {"name": "update_bucket_description", "server": "Keboola", "description": "Update the description for a given Keboola bucket.", "parameter": {}, "task": {"category": "Keboola", "query": "Update bucket description"}}, {"name": "update_table_description", "server": "Keboola", "description": "Update the description for a given Keboola table.", "parameter": {}, "task": {"category": "Keboola", "query": "Update table descriptions"}}, {"name": "get_sql_dialect", "server": "Keboola", "description": "Gets the name of the SQL dialect used by Keboola project's underlying database.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve SQL dialect information"}}, {"name": "query_table", "server": "Keboola", "description": "Executes an SQL SELECT query to get the data from the underlying database.", "parameter": {}, "task": {"category": "Keboola", "query": "Execute SQL SELECT queries on database"}}, {"name": "create_sql_transformation", "server": "Keboola", "description": "Creates an SQL transformation using the specified name, SQL query following the current SQL dialect, a detailed description, and optionally a list of created table names if and only if they are generated within the SQL statements.", "parameter": {}, "task": {"category": "Keboola", "query": "Create SQL transformation with specified parameters"}}, {"name": "get_component_details", "server": "Keboola", "description": "Gets detailed information about a specific Keboola component configuration given component/transformation ID and configuration ID.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve detailed information about a component configuration"}}, {"name": "retrieve_components", "server": "Keboola", "description": "Retrieves components configurations in the project, optionally filtered by component types or specific component IDs. If component_ids are supplied, only those components identified by the IDs are retrieved, disregarding component_types.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve project component configurations"}}, {"name": "retrieve_transformations", "server": "Keboola", "description": "Retrieves transformations configurations in the project, optionally filtered by specific transformation IDs.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve transformation configurations"}}, {"name": "get_job_detail", "server": "Keboola", "description": "Retrieves detailed information about a specific job, identified by the job_id, including its status, parameters, results, and any relevant metadata.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve detailed job information"}}, {"name": "retrieve_jobs", "server": "Keboola", "description": "Retrieves all jobs in the project, or filter jobs by a specific component_id or config_id, with optional status filtering.", "parameter": {}, "task": {"category": "Keboola", "query": "Retrieve and filter jobs in a project"}}, {"name": "start_job", "server": "Keboola", "description": "Starts a new job for a given component or transformation.", "parameter": {}, "task": {"category": "Keboola", "query": "Start a new job for a component or transformation"}}, {"name": "docs_query", "server": "Keboola", "description": "Answers a question using the Keboola documentation as a source.", "parameter": {}, "task": {"category": "Keboola", "query": "Find answers in Keboola documentation"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Lara Translate", "description": "1.文本翻译 2.翻译记忆管理，包括：创建、更新、删除翻译记忆 3.翻译单元管理，包括：添加、删除翻译单元 4.TMX文件导入与状态检查", "tools": [{"name": "translate", "server": "Lara Translate", "description": "Translate text between languages", "parameter": {"text": "(array) An array of text blocks to translate, each with: 'text' (string), 'translatable' (boolean)", "source": "(Optional, string) Source language code (e.g., 'en-EN')", "target": "(string) Target language code (e.g., 'it-IT')", "context": "(Optional, string) Additional context to improve translation quality", "instructions": "(Optional, string[]) Instructions to adjust translation behavior", "source_hint": "(Optional, string) Guidance for language detection"}, "task": {"category": "Lara Translate", "query": "Translate text between specified languages"}}, {"name": "list_memories", "server": "Lara Translate", "description": "List saved translation memories", "parameter": {}, "task": {"category": "Lara Translate", "query": "Retrieve saved translation memories"}}, {"name": "create_memory", "server": "Lara Translate", "description": "Create a new translation memory", "parameter": {"name": "(string) Name of the new memory", "external_id": "(Optional, string) ID of the memory to import from MyMemory (e.g., 'ext_my_[MyMemory ID]')"}, "task": {"category": "Lara Translate", "query": "Create a new translation memory"}}, {"name": "update_memory", "server": "Lara Translate", "description": "Update translation memory name", "parameter": {"id": "(string) ID of the memory to update", "name": "(string) The new name for the memory"}, "task": {"category": "Lara Translate", "query": "Update translation memory details"}}, {"name": "delete_memory", "server": "Lara Translate", "description": "Delete a translation memory", "parameter": {"id": "(string) ID of the memory to delete"}, "task": {"category": "Lara Translate", "query": "Delete a translation memory by ID"}}, {"name": "add_translation", "server": "Lara Translate", "description": "Add a translation unit to memory", "parameter": {"id": "(string | string[]) ID or IDs of memories where to add the translation unit", "source": "(string) Source language code", "target": "(string) Target language code", "sentence": "(string) The source sentence", "translation": "(string) The translated sentence", "tuid": "(Optional, string) Translation Unit unique identifier", "sentence_before": "(Optional, string) Context sentence before", "sentence_after": "(Optional, string) Context sentence after"}, "task": {"category": "Lara Translate", "query": "Add translation units to memory"}}, {"name": "delete_translation", "server": "Lara Translate", "description": "Delete a translation unit from memory", "parameter": {"id": "(string) ID of the memory", "source": "(string) Source language code", "target": "(string) Target language code", "sentence": "(string) The source sentence", "translation": "(string) The translated sentence", "tuid": "(Optional, string) Translation Unit unique identifier", "sentence_before": "(Optional, string) Context sentence before", "sentence_after": "(Optional, string) Context sentence after"}, "task": {"category": "Lara Translate", "query": "Delete a translation unit from memory"}}, {"name": "import_tmx", "server": "Lara Translate", "description": "Import a TMX file into a memory", "parameter": {"id": "(string) ID of the memory to update", "tmx": "(file path) The path of the TMX file to upload", "gzip": "(boolean) Indicates if the file is compressed (.gz)"}, "task": {"category": "Lara Translate", "query": "Import translation memory from a TMX file"}}, {"name": "check_import_status", "server": "Lara Translate", "description": "Checks the status of a TMX file import", "parameter": {"id": "(string) The ID of the import job"}, "task": {"category": "Lara Translate", "query": "Check the status of a translation memory import"}}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Logfire", "description": "1.从跟踪数据中获取按文件分组的异常计数 2.获取特定文件中异常的详细跟踪信息 3.在OpenTelemetry跟踪和指标上运行自定义SQL查询 4.获取OpenTelemetry模式以帮助自定义查询", "tools": [{"name": "find_exceptions", "server": "Logfire", "description": "Get exception counts from traces grouped by file", "parameter": {"age": "(int) Number of minutes to look back (e.g., 30 for last 30 minutes, max 7 days)"}, "task": {"category": "Logfire", "query": "Retrieve exception counts from traces"}}, {"name": "find_exceptions_in_file", "server": "Logfire", "description": "Get detailed trace information about exceptions in a specific file", "parameter": {"filepath": "(string) Path to the file to analyze", "age": "(int) Number of minutes to look back (max 7 days)"}, "task": {"category": "Logfire", "query": "Analyze exceptions in a file"}}, {"name": "arbitrary_query", "server": "Logfire", "description": "Run custom SQL queries on your OpenTelemetry traces and metrics", "parameter": {"query": "(string) SQL query to execute", "age": "(int) Number of minutes to look back (max 7 days)"}, "task": {"category": "OpenTelemetry", "query": "Run custom SQL queries on traces and metrics"}}, {"name": "get_logfire_records_schema", "server": "Logfire", "description": "Get the OpenTelemetry schema to help with custom queries", "parameter": {}, "task": {"category": "Logfire", "query": "Retrieve OpenTelemetry schema for custom queries"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Langfuse Prompt Management", "description": "1. List available prompts 2. Retrieve and compile a specific prompt", "tools": [{"name": "get-prompts", "server": "Langfuse Prompt Management", "description": "List available prompts", "parameter": {"cursor": "(Optional, string) Parameter for pagination"}, "task": {"category": "Langfuse", "query": "List available prompts"}}, {"name": "get-prompt", "server": "Langfuse Prompt Management", "description": "Retrieve and compile a specific prompt", "parameter": {"name": "(string) Name of the prompt to retrieve", "arguments": "(Optional, JSON object) Prompt variables"}, "task": {"category": "Langfuse", "query": "Retrieve and compile prompts"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "Lingo.dev", "description": "MCP server management, including: start/stop server, check status, list users, add/remove users", "tools": [{"name": "start-server", "server": "Lingo.dev", "description": "Starts the MCP server.", "parameter": {}, "task": {"category": "Lingo.dev", "query": "Start the MCP server"}}, {"name": "stop-server", "server": "Lingo.dev", "description": "Stops the running MCP server.", "parameter": {}, "task": {"category": "Lingo.dev", "query": "Stop the running server"}}, {"name": "status", "server": "Lingo.dev", "description": "Checks the current status of the MCP server.", "parameter": {}, "task": {"category": "Lingo.dev", "query": "Check server status"}}, {"name": "list-users", "server": "Lingo.dev", "description": "Lists all users registered with the MCP server.", "parameter": {}, "task": {"category": "Lingo.dev", "query": "List all registered users"}}, {"name": "add-user", "server": "Lingo.dev", "description": "Adds a new user to the MCP server.", "parameter": {"username": "(string) The username for the new user.", "password": "(string) The password for the new user."}, "task": {"category": "Lingo.dev", "query": "Add a new user to the server"}}, {"name": "remove-user", "server": "Lingo.dev", "description": "Removes an existing user from the MCP server.", "parameter": {"username": "(string) The username of the user to remove."}, "task": {"category": "Lingo.dev", "query": "Remove a user from the server"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "MCP Toolbox for Databases", "description": "Search for hotels based on name", "tools": [{"name": "search-hotels-by-name", "server": "MCP Toolbox for Databases", "description": "Search for hotels based on name.", "parameter": {"name": "(string) The name of the hotel."}, "task": {"category": "Databases", "query": "Search hotels by name"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务,包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Meilisearch", "description": "Meilisearch操作,包括:连接设置管理、索引创建与列表、文档检索与更新、搜索功能、索引设置管理、API密钥管理、任务管理、健康检查、版本与统计信息获取", "tools": [{"name": "get-connection-settings", "server": "Meilisearch", "description": "View current Meilisearch connection URL and API key status", "parameter": {}, "task": {"category": "Meilisearch", "query": "View connection settings"}}, {"name": "update-connection-settings", "server": "Meilisearch", "description": "Update URL and/or API key to connect to a different instance", "parameter": {"url": "(string) New Meilisearch instance URL", "api_key": "(string) New Meilisearch API key"}, "task": {"category": "Meilisearch", "query": "Update connection settings for Meilisearch instance"}}, {"name": "create-index", "server": "Meilisearch", "description": "Create a new index with optional primary key", "parameter": {"uid": "(string) Unique identifier for the index", "primaryKey": "(Optional, string) Primary key for the index"}, "task": {"category": "Meilisearch", "query": "Create a new search index"}}, {"name": "list-indexes", "server": "Meilisearch", "description": "List all available indexes", "parameter": {}, "task": {"category": "Meilisearch", "query": "List all indexes available"}}, {"name": "get-index-metrics", "server": "Meilisearch", "description": "Get detailed metrics for a specific index", "parameter": {"uid": "(string) Unique identifier for the index"}, "task": {"category": "Meilisearch", "query": "Retrieve metrics for a specific index"}}, {"name": "get-documents", "server": "Meilisearch", "description": "Retrieve documents from an index with pagination", "parameter": {"indexUid": "(string) Unique identifier for the index", "offset": "(Optional, integer) Number of results to skip (default: 0)", "limit": "(Optional, integer) Maximum number of results to return (default: 20)"}, "task": {"category": "Meilisearch", "query": "Retrieve documents from an index with pagination"}}, {"name": "add-documents", "server": "Meilisearch", "description": "Add or update documents in an index", "parameter": {"indexUid": "(string) Unique identifier for the index", "documents": "(array of objects) Documents to add or update"}, "task": {"category": "Meilisearch", "query": "Add or update documents in a search index"}}, {"name": "search", "server": "Meilisearch", "description": "Flexible search across single or multiple indices with filtering and sorting options", "parameter": {"query": "(string) The search query (required)", "indexUid": "(Optional, string) Specific index to search in", "limit": "(Optional, integer) Maximum number of results per index (default: 20)", "offset": "(Optional, integer) Number of results to skip (default: 0)", "filter": "(Optional, string) Filter expression", "sort": "(Optional, array of strings) Sorting rules"}, "task": {"category": "Meilisearch", "query": "Search across indices with filtering and sorting"}}, {"name": "get-settings", "server": "Meilisearch", "description": "View current settings for an index", "parameter": {"uid": "(string) Unique identifier for the index"}, "task": {"category": "Meilisearch", "query": "Retrieve settings for a specific index"}}, {"name": "update-settings", "server": "Meilisearch", "description": "Update index settings (ranking, faceting, etc.)", "parameter": {"uid": "(string) Unique identifier for the index", "settings": "(object) New settings to apply"}, "task": {"category": "Meilisearch", "query": "Modify index configuration settings"}}, {"name": "get-keys", "server": "Meilisearch", "description": "List all API keys", "parameter": {}, "task": {"category": "Meilisearch", "query": "List all API keys"}}, {"name": "create-key", "server": "Meilisearch", "description": "Create new API key with specific permissions", "parameter": {"description": "(string) Description for the API key", "actions": "(array of strings) Actions allowed for the API key", "indexes": "(array of strings) Indexes the API key can access", "expiresAt": "(Optional, string) Expiration date and time for the API key"}, "task": {"category": "Meilisearch", "query": "Generate API keys with custom permissions"}}, {"name": "delete-key", "server": "Meilisearch", "description": "Delete an existing API key", "parameter": {"key": "(string) API key to delete"}, "task": {"category": "Meilisearch", "query": "Delete an API key"}}, {"name": "get-task", "server": "Meilisearch", "description": "Get information about a specific task", "parameter": {"uid": "(string) Unique identifier for the task"}, "task": {"category": "Meilisearch", "query": "Retrieve task details by unique identifier"}}, {"name": "get-tasks", "server": "Meilisearch", "description": "List tasks with optional filters", "parameter": {"limit": "(Optional, integer) Maximum number of tasks to return", "from": "(Optional, integer) Number of tasks to skip", "reverse": "(Optional, boolean) Sort order of tasks", "batchUids": "(Optional, array of strings) Filter by batch UIDs", "uids": "(Optional, array of strings) Filter by task UIDs", "canceledBy": "(Optional, string) Filter by cancellation source", "types": "(Optional, array of strings) Filter by task types", "statuses": "(Optional, array of strings) Filter by task statuses", "indexUids": "(Optional, array of strings) Filter by index UIDs", "afterEnqueuedAt": "(Optional, string) Filter by enqueue time", "beforeEnqueuedAt": "(Optional, string) Filter by enqueue time", "afterStartedAt": "(Optional, string) Filter by start time", "beforeStartedAt": "(Optional, string) Filter by start time", "afterFinishedAt": "(Optional, string) Filter by finish time", "beforeFinishedAt": "(Optional, string) Filter by finish time"}, "task": {"category": "Meilisearch", "query": "List and filter tasks"}}, {"name": "cancel-tasks", "server": "Meilisearch", "description": "Cancel pending or enqueued tasks", "parameter": {"uids": "(array of strings) Task UIDs to cancel", "batchUids": "(Optional, array of strings) Batch UIDs to filter tasks", "types": "(Optional, array of strings) Task types to filter tasks", "statuses": "(Optional, array of strings) Task statuses to filter tasks", "indexUids": "(Optional, array of strings) Index UIDs to filter tasks", "canceledBy": "(Optional, string) Cancellation source"}, "task": {"category": "Meilisearch", "query": "Cancel pending or enqueued tasks"}}, {"name": "delete-tasks", "server": "Meilisearch", "description": "Delete completed tasks", "parameter": {"uids": "(array of strings) Task UIDs to delete", "batchUids": "(Optional, array of strings) Batch UIDs to filter tasks", "types": "(Optional, array of strings) Task types to filter tasks", "statuses": "(Optional, array of strings) Task statuses to filter tasks", "indexUids": "(Optional, array of strings) Index UIDs to filter tasks", "canceledBy": "(Optional, string) Cancellation source"}, "task": {"category": "Meilisearch", "query": "Delete completed tasks based on filters"}}, {"name": "health-check", "server": "Meilisearch", "description": "Basic health check", "parameter": {}, "task": {"category": "Meilisearch", "query": "Perform a basic health check"}}, {"name": "get-health-status", "server": "Meilisearch", "description": "Comprehensive health status", "parameter": {}, "task": {"category": "Meilisearch", "query": "Check the health status of the search service"}}, {"name": "get-version", "server": "Meilisearch", "description": "Get Meilisearch version information", "parameter": {}, "task": {"category": "Meilisearch", "query": "Retrieve version details of the search engine"}}, {"name": "get-stats", "server": "Meilisearch", "description": "Get database statistics", "parameter": {}, "task": {"category": "Meilisearch", "query": "Retrieve database statistics"}}, {"name": "get-system-info", "server": "Meilisearch", "description": "Get system-level information", "parameter": {}, "task": {"category": "Meilisearch", "query": "Retrieve system-level information"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Milvus", "description": "Milvus数据库操作,包括:全文搜索、向量相似性搜索、集合查询、集合管理(创建/加载/释放)、数据插入与删除", "tools": [{"name": "milvus_text_search", "server": "Milvus", "description": "Search for documents using full text search", "parameter": {"collection_name": "(string) Name of collection to search", "query_text": "(string) Text to search for", "limit": "(Optional, int) Maximum results (default: 5)", "output_fields": "(Optional, list) Fields to include in results", "drop_ratio": "(Optional, float) Proportion of low-frequency terms to ignore (0.0-1.0)"}, "task": {"category": "Milvus", "query": "Perform full text search on documents"}}, {"name": "milvus_vector_search", "server": "Milvus", "description": "Perform vector similarity search on a collection", "parameter": {"collection_name": "(string) Name of collection to search", "vector": "(list) Query vector", "vector_field": "(Optional, string) Field containing vectors to search (default: 'vector')", "limit": "(Optional, int) Maximum results (default: 5)", "output_fields": "(Optional, list) Fields to include in results", "metric_type": "(Optional, string) Distance metric (COSINE, L2, IP) (default: 'COSINE')"}, "task": {"category": "Milvus", "query": "Search for similar vectors in a collection"}}, {"name": "milvus_query", "server": "Milvus", "description": "Query collection using filter expressions", "parameter": {"collection_name": "(string) Name of collection to query", "filter_expr": "(string) Filter expression (e.g. 'age > 20')", "output_fields": "(Optional, list) Fields to include in results", "limit": "(Optional, int) Maximum results (default: 10)"}, "task": {"category": "Milvus", "query": "Query data from a collection with filters"}}, {"name": "milvus_list_collections", "server": "Milvus", "description": "List all collections in the database", "parameter": {}, "task": {"category": "Milvus", "query": "List all collections in the database"}}, {"name": "milvus_create_collection", "server": "Milvus", "description": "Create a new collection with specified schema", "parameter": {"collection_name": "(string) Name for the new collection", "collection_schema": "(dict) Collection schema definition", "index_params": "(Optional, dict) Optional index parameters"}, "task": {"category": "Milvus", "query": "Create a new collection with specified schema"}}, {"name": "milvus_load_collection", "server": "Milvus", "description": "Load a collection into memory for search and query", "parameter": {"collection_name": "(string) Name of collection to load", "replica_number": "(Optional, int) Number of replicas (default: 1)"}, "task": {"category": "Milvus", "query": "Load collection into memory for operations"}}, {"name": "milvus_release_collection", "server": "Milvus", "description": "Release a collection from memory", "parameter": {"collection_name": "(string) Name of collection to release"}, "task": {"category": "Milvus", "query": "Release a collection from memory"}}, {"name": "milvus_insert_data", "server": "Milvus", "description": "Insert data into a collection", "parameter": {"collection_name": "(string) Name of collection", "data": "(dict) Dictionary mapping field names to lists of values"}, "task": {"category": "Milvus", "query": "Insert data into a collection"}}, {"name": "milvus_delete_entities", "server": "Milvus", "description": "Delete entities from a collection based on filter expression", "parameter": {"collection_name": "(string) Name of collection", "filter_expr": "(string) Filter expression to select entities to delete"}, "task": {"category": "Milvus", "query": "Delete entities from a collection using filter expression"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Momento", "description": "Momento缓存服务操作，包括：获取缓存值、设置缓存值（带TTL）、列出所有缓存、创建新缓存、删除缓存", "tools": [{"name": "get", "server": "Momento", "description": "Get the cache value stored for the given key.", "parameter": {"key": "string -- the key to look up in the cache.", "cacheName": "(Optional, string) -- the name cache where the key presides"}, "task": {"category": "Momento", "query": "Retrieve cached values by key"}}, {"name": "set", "server": "Momento", "description": "Sets the value in cache with a given Time To Live (TTL) seconds. If a value for this key is already present, it will be replaced by the new value regardless of the previous value's data type.", "parameter": {"key": "string -- the key to set in the cache", "value": "string -- the value to set for the given key", "ttl": "(Optional, integer) -- the number of seconds to keep this value in the cache", "cacheName": "(Optional, string) -- the name of the cache to store the key in"}, "task": {"category": "Momento", "query": "Set a value in cache with optional TTL"}}, {"name": "list-caches", "server": "Momento", "description": "Lists the names of all the caches in your Momento account.", "parameter": {}, "task": {"category": "Momento", "query": "List all caches in the account"}}, {"name": "create-cache", "server": "Momento", "description": "Creates a new cache in your Momento account.", "parameter": {"name": "string -- the name of the cache to create"}, "task": {"category": "Momento", "query": "Create a new cache"}}, {"name": "delete-cache", "server": "Momento", "description": "Deletes a cache from your Momento account.", "parameter": {"name": "string -- the name of the cache to delete"}, "task": {"category": "Momento", "query": "Delete a cache from your account"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "MongoDB", "description": "MongoDB Atlas管理工具集，包括：组织与项目管理、集群创建与连接、访问控制配置、数据库用户管理、数据库操作（查询、聚合、插入、更新、删除）、集合与索引管理、数据库统计信息获取", "tools": [{"name": "atlas-list-orgs", "server": "MongoDB", "description": "Lists MongoDB Atlas organizations", "parameter": {}, "task": {"category": "MongoDB", "query": "List organizations in MongoDB Atlas"}}, {"name": "atlas-list-projects", "server": "MongoDB", "description": "Lists MongoDB Atlas projects", "parameter": {}, "task": {"category": "MongoDB", "query": "List projects in MongoDB Atlas"}}, {"name": "atlas-create-project", "server": "MongoDB", "description": "Creates a new MongoDB Atlas project", "parameter": {}, "task": {"category": "MongoDB", "query": "Create a new project in MongoDB Atlas"}}, {"name": "atlas-list-clusters", "server": "MongoDB", "description": "Lists MongoDB Atlas clusters", "parameter": {}, "task": {"category": "MongoDB", "query": "List MongoDB Atlas clusters"}}, {"name": "atlas-inspect-cluster", "server": "MongoDB", "description": "Inspect a specific MongoDB Atlas cluster", "parameter": {}, "task": {"category": "MongoDB", "query": "Inspect MongoDB Atlas cluster details"}}, {"name": "atlas-create-free-cluster", "server": "MongoDB", "description": "Create a free MongoDB Atlas cluster", "parameter": {}, "task": {"category": "MongoDB", "query": "Create a free cluster"}}, {"name": "atlas-connect-cluster", "server": "MongoDB", "description": "Connects to MongoDB Atlas cluster", "parameter": {}, "task": {"category": "MongoDB", "query": "Connect to MongoDB Atlas cluster"}}, {"name": "atlas-inspect-access-list", "server": "MongoDB", "description": "Inspect IP/CIDR ranges with access to MongoDB Atlas clusters", "parameter": {}, "task": {"category": "MongoDB", "query": "Inspect IP/CIDR access ranges for clusters"}}, {"name": "atlas-create-access-list", "server": "MongoDB", "description": "Configure IP/CIDR access list for MongoDB Atlas clusters", "parameter": {}, "task": {"category": "MongoDB", "query": "Configure access list for MongoDB Atlas clusters"}}, {"name": "atlas-list-db-users", "server": "MongoDB", "description": "List MongoDB Atlas database users", "parameter": {}, "task": {"category": "MongoDB", "query": "List database users in MongoDB Atlas"}}, {"name": "atlas-create-db-user", "server": "MongoDB", "description": "List MongoDB Atlas database users", "parameter": {}, "task": {"category": "MongoDB", "query": "List database users in MongoDB Atlas"}}, {"name": "connect", "server": "MongoDB", "description": "Connect to a MongoDB instance", "parameter": {}, "task": {"category": "MongoDB", "query": "Establish connection to a MongoDB database"}}, {"name": "find", "server": "MongoDB", "description": "Run a find query against a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Query documents in a collection"}}, {"name": "aggregate", "server": "MongoDB", "description": "Run an aggregation against a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Perform aggregation operations on a collection"}}, {"name": "count", "server": "MongoDB", "description": "Get the number of documents in a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Count documents in a collection"}}, {"name": "insert-one", "server": "MongoDB", "description": "Insert a single document into a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Insert a document into a collection"}}, {"name": "insert-many", "server": "MongoDB", "description": "Insert multiple documents into a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Insert multiple documents into a collection"}}, {"name": "create-index", "server": "MongoDB", "description": "Create an index for a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Create indexes for collections"}}, {"name": "update-one", "server": "MongoDB", "description": "Update a single document in a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Update a document in a collection"}}, {"name": "update-many", "server": "MongoDB", "description": "Update multiple documents in a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Update multiple documents in a collection"}}, {"name": "rename-collection", "server": "MongoDB", "description": "Rename a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Rename a collection in the database"}}, {"name": "delete-one", "server": "MongoDB", "description": "Delete a single document from a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Delete a document from a collection"}}, {"name": "delete-many", "server": "MongoDB", "description": "Delete multiple documents from a MongoDB collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Delete multiple documents from a collection"}}, {"name": "drop-collection", "server": "MongoDB", "description": "Remove a collection from a MongoDB database", "parameter": {}, "task": {"category": "MongoDB", "query": "Remove a collection from database"}}, {"name": "drop-database", "server": "MongoDB", "description": "Remove a MongoDB database", "parameter": {}, "task": {"category": "MongoDB", "query": "Remove a database"}}, {"name": "list-databases", "server": "MongoDB", "description": "List all databases for a MongoDB connection", "parameter": {}, "task": {"category": "MongoDB", "query": "List all available databases"}}, {"name": "list-collections", "server": "MongoDB", "description": "List all collections for a given database", "parameter": {}, "task": {"category": "MongoDB", "query": "Retrieve all collections from a database"}}, {"name": "collection-indexes", "server": "MongoDB", "description": "Describe the indexes for a collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Retrieve index information for a collection"}}, {"name": "collection-schema", "server": "MongoDB", "description": "Describe the schema for a collection", "parameter": {}, "task": {"category": "MongoDB", "query": "Describe the schema of a collection"}}, {"name": "collection-storage-size", "server": "MongoDB", "description": "Get the size of a collection in MB", "parameter": {}, "task": {"category": "MongoDB", "query": "Retrieve collection storage size"}}, {"name": "db-stats", "server": "MongoDB", "description": "Return statistics about a MongoDB database", "parameter": {}, "task": {"category": "MongoDB", "query": "Retrieve database statistics"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "MotherDuck", "description": "Execute SQL queries on DuckDB or MotherDuck databases", "tools": [{"name": "query", "server": "MotherDuck", "description": "Execute a SQL query on the DuckDB or MotherDuck database", "parameter": {"query": "(string, required) The SQL query to execute"}, "task": {"category": "MotherDuck", "query": "Execute SQL queries on DuckDB or MotherDuck database"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Neo4j", "description": "1.将自然语言转换为Cypher查询以在Neo4j数据库上执行读写操作 2.在Neo4j实例中管理个人知识图谱 3.提供Neo4j Aura云实例的管理功能", "tools": [{"name": "mcp-neo4j-cypher", "server": "Neo4j", "description": "Converts natural language to Cypher queries for executing read and write operations on a configured Neo4j database.", "parameter": {}, "task": {"category": "Neo4j", "query": "Convert natural language to Cypher queries"}}, {"name": "mcp-neo4j-memory", "server": "Neo4j", "description": "Manages a personal knowledge graph in a Neo4j instance, allowing storage and retrieval of entities and relationships across different sessions and clients.", "parameter": {}, "task": {"category": "Neo4j", "query": "Manage personal knowledge graph"}}, {"name": "mcp-neo4j-cloud-aura-api", "server": "Neo4j", "description": "Provides management capabilities for Neo4j Aura cloud instances, including creating, destroying, finding, scaling, and enabling features.", "parameter": {}, "task": {"category": "Neo4j", "query": "Manage Neo4j Aura cloud instances"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Neon", "description": "Neon数据库项目管理与操作,包括:项目列表检索、项目详情获取、项目创建与删除、分支创建与删除、分支详情获取、数据库连接字符串获取、SQL查询执行、SQL事务执行、数据库表列表获取、表结构详情获取、数据库迁移准备与完成、Neon Auth认证配置", "tools": [{"name": "list_projects", "server": "Neon", "description": "Retrieves a list of your Neon projects, providing a summary of each project associated with your Neon account.", "parameter": {}, "task": {"category": "Neon", "query": "Retrieve a list of projects"}}, {"name": "describe_project", "server": "Neon", "description": "Fetches detailed information about a specific Neon project, including its ID, name, and associated branches and databases.", "parameter": {}, "task": {"category": "Neon", "query": "Fetch detailed information about a project"}}, {"name": "create_project", "server": "Neon", "description": "Creates a new Neon project in your Neon account. A project acts as a container for branches, databases, roles, and computes.", "parameter": {}, "task": {"category": "Neon", "query": "Create a new project in Neon account"}}, {"name": "delete_project", "server": "Neon", "description": "Deletes an existing Neon project and all its associated resources.", "parameter": {}, "task": {"category": "Neon", "query": "Delete a project and its resources"}}, {"name": "create_branch", "server": "Neon", "description": "Creates a new branch within a specified Neon project. Leverages Neon's branching feature for development, testing, or migrations.", "parameter": {}, "task": {"category": "Neon", "query": "Create a new branch for development or testing"}}, {"name": "delete_branch", "server": "Neon", "description": "Deletes an existing branch from a Neon project.", "parameter": {}, "task": {"category": "Neon", "query": "Delete a branch from a project"}}, {"name": "describe_branch", "server": "Neon", "description": "Retrieves details about a specific branch, such as its name, ID, and parent branch.", "parameter": {}, "task": {"category": "Neon", "query": "Retrieve branch details"}}, {"name": "get_connection_string", "server": "Neon", "description": "Returns your database connection string.", "parameter": {}, "task": {"category": "Neon", "query": "Retrieve database connection string"}}, {"name": "run_sql", "server": "Neon", "description": "Executes a single SQL query against a specified Neon database. Supports both read and write operations.", "parameter": {}, "task": {"category": "Neon", "query": "Execute SQL queries on a database"}}, {"name": "run_sql_transaction", "server": "Neon", "description": "Executes a series of SQL queries within a single transaction against a Neon database.", "parameter": {}, "task": {"category": "Neon", "query": "Execute SQL queries in a transaction"}}, {"name": "get_database_tables", "server": "Neon", "description": "Lists all tables within a specified Neon database.", "parameter": {}, "task": {"category": "Neon", "query": "List all tables in a database"}}, {"name": "describe_table_schema", "server": "Neon", "description": "Retrieves the schema definition of a specific table, detailing columns, data types, and constraints.", "parameter": {}, "task": {"category": "Neon", "query": "Retrieve schema definition of a table"}}, {"name": "prepare_database_migration", "server": "Neon", "description": "Initiates a database migration process. Creates a temporary branch to apply and test the migration safely before affecting the main branch.", "parameter": {}, "task": {"category": "Neon", "query": "Initiate a safe database migration process"}}, {"name": "complete_database_migration", "server": "Neon", "description": "Finalizes and applies a prepared database migration to the main branch. Merges changes from the temporary migration branch and cleans up temporary resources.", "parameter": {}, "task": {"category": "Neon", "query": "Finalize and apply database migration"}}, {"name": "provision_neon_auth", "server": "Neon", "description": "Action to provision Neon Auth for a Neon project. It allows developers to easily set up authentication infrastructure by creating an integration with Stack Auth.", "parameter": {}, "task": {"category": "Neon", "query": "Set up authentication infrastructure for a project"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Octagon", "description": "1. Extract information from SEC filings 2. Analyze earnings call transcripts 3. Retrieve financial metrics and ratios 4. Access stock market data 5. Research private company information 6. Research startup funding rounds and venture capital 7. Research M&A and IPO transactions 8. Look up information on investors 9. Analyze private debts, borrowers, and lenders 10. Extract data from any public website 11. Perform comprehensive research on any topic", "tools": [{"name": "octagon-sec-agent", "server": "Octagon", "description": "Extract information from SEC filings.", "parameter": {"prompt": "(string) A natural language query specifying the information to extract from SEC filings."}, "task": {"category": "SEC Filings", "query": "Extract specified information from SEC filings"}}, {"name": "octagon-transcripts-agent", "server": "Octagon", "description": "Analyze earnings call transcripts.", "parameter": {"prompt": "(string) A natural language query specifying the information to extract from earnings call transcripts."}, "task": {"category": "Octagon", "query": "Extract information from earnings call transcripts"}}, {"name": "octagon-financials-agent", "server": "Octagon", "description": "Retrieve financial metrics and ratios.", "parameter": {"prompt": "(string) A natural language query specifying the financial metrics or ratios to retrieve."}, "task": {"category": "Financial", "query": "Retrieve financial metrics and ratios"}}, {"name": "octagon-stock-data-agent", "server": "Octagon", "description": "Access stock market data.", "parameter": {"prompt": "(string) A natural language query specifying the stock market data to access."}, "task": {"category": "Stock Market", "query": "Retrieve stock market data based on a query"}}, {"name": "octagon-companies-agent", "server": "Octagon", "description": "Research private company information.", "parameter": {"prompt": "(string) A natural language query specifying the private company information to research."}, "task": {"category": "Octagon", "query": "Research information about private companies"}}, {"name": "octagon-funding-agent", "server": "Octagon", "description": "Research startup funding rounds and venture capital.", "parameter": {"prompt": "(string) A natural language query specifying the funding rounds or venture capital information to research."}, "task": {"category": "Octagon", "query": "Research startup funding and venture capital information"}}, {"name": "octagon-deals-agent", "server": "Octagon", "description": "Research M&A and IPO transactions.", "parameter": {"prompt": "(string) A natural language query specifying the M&A or IPO transaction information to research."}, "task": {"category": "Octagon", "query": "Research mergers, acquisitions, and IPO transactions"}}, {"name": "octagon-investors-agent", "server": "Octagon", "description": "A specialized database agent for looking up information on investors.", "parameter": {"prompt": "(string) A natural language query specifying the investor information to look up."}, "task": {"category": "Octagon", "query": "Look up investor information"}}, {"name": "octagon-debts-agent", "server": "Octagon", "description": "A specialized database agent for analyzing private debts, borrowers, and lenders.", "parameter": {"prompt": "(string) A natural language query specifying the debt information to analyze."}, "task": {"category": "Octagon", "query": "Analyze private debts and borrower-lender relationships"}}, {"name": "octagon-scraper-agent", "server": "Octagon", "description": "Extract data from any public website.", "parameter": {"prompt": "(string) A natural language query specifying the data to extract from a public website."}, "task": {"category": "Web Scraping", "query": "Extract data from public websites"}}, {"name": "octagon-deep-research-agent", "server": "Octagon", "description": "Perform comprehensive research on any topic.", "parameter": {"prompt": "(string) A natural language query specifying the topic to research."}, "task": {"category": "Octagon", "query": "Conduct in-depth research on a specified topic"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Oxylabs", "description": "1.使用Oxylabs Web Scraper API进行网站爬取，支持JavaScript渲染、结构化数据解析和Markdown格式HTML清理 2.使用Oxylabs Web Unblocker访问难以访问的网站，支持JavaScript渲染和HTML清理", "tools": [{"name": "oxylabs_scraper", "server": "Oxylabs", "description": "Uses Oxylabs Web Scraper API for general website scraping with support for JavaScript rendering, parsed structured data, and cleaned HTML in Markdown format.", "parameter": {"url": "(string) The URL to scrape", "parse": "(Optional, boolean) Enable structured data extraction", "render": "(Optional, string) Use headless browser rendering; values: 'html' or 'None'"}, "task": {"category": "Oxylabs", "query": "Scrape website data with JavaScript rendering and structured data extraction"}}, {"name": "oxylabs_web_unblocker", "server": "Oxylabs", "description": "Uses Oxylabs Web Unblocker for hard-to-access websites with support for JavaScript rendering and cleaned HTML, but does not return parsed data.", "parameter": {"url": "(string) The URL to scrape", "render": "(Optional, string) Use headless browser rendering; values: 'html' or 'None'"}, "task": {"category": "Oxylabs", "query": "Access hard-to-reach websites with JavaScript rendering"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Perplexity", "description": "Engage in live web searches using the Sonar API", "tools": [{"name": "perplexity_ask", "server": "Perplexity", "description": "Engage in a conversation with the Sonar API for live web searches.", "parameter": {"messages": "(array) An array of conversation messages. Each message must include: role (string) The role of the message (e.g., system, user, assistant), content (string) The content of the message."}, "task": {"category": "Perplexity", "query": "Engage in live web searches through conversation"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Pinecone", "description": "Pinecone vector database operations, including: document search, index listing/description/statistics, index creation with integrated inference, record upsert/search, cascading search across indexes, and document reranking", "tools": [{"name": "search-docs", "server": "Pinecone", "description": "Search the official Pinecone documentation.", "parameter": {}, "task": {"category": "Pinecone", "query": "Search official documentation"}}, {"name": "list-indexes", "server": "Pinecone", "description": "Lists all Pinecone indexes.", "parameter": {}, "task": {"category": "Pinecone", "query": "List all available indexes"}}, {"name": "describe-index", "server": "Pinecone", "description": "Describes the configuration of an index.", "parameter": {}, "task": {"category": "Pinecone", "query": "Get configuration details of an index"}}, {"name": "describe-index-stats", "server": "Pinecone", "description": "Provides statistics about the data in the index, including the number of records and available namespaces.", "parameter": {}, "task": {"category": "Pinecone", "query": "Get statistics about the data in the index"}}, {"name": "create-index-for-model", "server": "Pinecone", "description": "Creates a new index that uses an integrated inference model to embed text as vectors.", "parameter": {}, "task": {"category": "Pinecone", "query": "Create a new index with integrated inference model"}}, {"name": "upsert-records", "server": "Pinecone", "description": "Inserts or updates records in an index with integrated inference.", "parameter": {}, "task": {"category": "Pinecone", "query": "Insert or update records in an index"}}, {"name": "search-records", "server": "Pinecone", "description": "Searches for records in an index based on a text query, using integrated inference for embedding. Has options for metadata filtering and reranking.", "parameter": {}, "task": {"category": "Pinecone", "query": "Search for records in an index with text query and metadata filtering"}}, {"name": "cascading-search", "server": "Pinecone", "description": "Searches for records across multiple indexes, deduplicating and reranking the results.", "parameter": {}, "task": {"category": "Pinecone", "query": "Search across multiple indexes with deduplication and reranking"}}, {"name": "rerank-documents", "server": "Pinecone", "description": "Reranks a collection of records or text documents using a specialized reranking model.", "parameter": {}, "task": {"category": "Pinecone", "query": "Rerank a collection of documents"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Redis", "description": "Redis database operations including: string operations with expiration, hash field-value pair storage, list operations for queues, set operations for unique values, sorted set operations for leaderboards, pub/sub for real-time messaging, stream operations for event sourcing, JSON document manipulation, vector search query engine, and server information retrieval", "tools": [{"name": "string", "server": "Redis", "description": "Tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.", "parameter": {}, "task": {"category": "Redis", "query": "Manage string data with expiration"}}, {"name": "hash", "server": "Redis", "description": "Tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.", "parameter": {}, "task": {"category": "Redis", "query": "Store and manage field-value pairs within a single key"}}, {"name": "list", "server": "Redis", "description": "Tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.", "parameter": {}, "task": {"category": "Redis", "query": "Perform list operations for queues or message brokers"}}, {"name": "set", "server": "Redis", "description": "Tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.", "parameter": {}, "task": {"category": "Redis", "query": "Manage set members and perform set operations"}}, {"name": "sorted set", "server": "Redis", "description": "Tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.", "parameter": {}, "task": {"category": "Redis", "query": "Manage score-based ordered data"}}, {"name": "pub/sub", "server": "Redis", "description": "Functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.", "parameter": {}, "task": {"category": "Redis", "query": "Publish and subscribe to messages in real-time"}}, {"name": "streams", "server": "Redis", "description": "Tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.", "parameter": {}, "task": {"category": "Redis", "query": "Manage data streams with consumer groups"}}, {"name": "JSON", "server": "Redis", "description": "Tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.", "parameter": {}, "task": {"category": "Redis", "query": "Manage JSON documents in Redis"}}, {"name": "query engine", "server": "Redis", "description": "Tools to manage vector indexes and perform vector search.", "parameter": {}, "task": {"category": "Redis", "query": "Manage vector indexes and perform searches"}}, {"name": "server management", "server": "Redis", "description": "Tool to retrieve information about the database.", "parameter": {}, "task": {"category": "Redis", "query": "Retrieve database information"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Redis Cloud API", "description": "Redis Cloud account management, including: account details retrieval, payment methods listing, Pro/Essential subscriptions creation/listing/deletion, database modules listing, regions and plans retrieval, task management", "tools": [{"name": "get_current_account", "server": "Redis Cloud API", "description": "Get details about your current Redis Cloud account", "parameter": {}, "task": {"category": "Redis", "query": "Retrieve current account details"}}, {"name": "get_current_payment_methods", "server": "Redis Cloud API", "description": "List all payment methods configured for your account", "parameter": {}, "task": {"category": "Redis", "query": "List payment methods for account"}}, {"name": "get_pro_subscriptions", "server": "Redis Cloud API", "description": "List all Pro subscriptions in your account", "parameter": {}, "task": {"category": "Redis", "query": "List Pro subscriptions in account"}}, {"name": "create_pro_subscription", "server": "Redis Cloud API", "description": "Create a new Pro subscription with advanced configuration options", "parameter": {"multi_cloud_deployment": "(Optional, boolean) Whether to support multi-cloud deployment", "memory": "(Optional, number) Memory configuration", "persistence": "(Optional, boolean) Persistence configuration", "modules": "(Optional, array) List of modules to configure", "active_active_deployments": "(Optional, boolean) Set up Active-Active deployments", "networking_configuration": "(Optional, object) Custom networking configuration"}, "task": {"category": "Redis", "query": "Create a new Pro subscription with advanced options"}}, {"name": "get_essential_subscriptions", "server": "Redis Cloud API", "description": "List all Essential subscriptions (paginated)", "parameter": {}, "task": {"category": "Redis", "query": "List Essential subscriptions"}}, {"name": "get_essential_subscription_by_id", "server": "Redis Cloud API", "description": "Get detailed information about a specific Essential subscription", "parameter": {"subscription_id": "(string) ID of the Essential subscription"}, "task": {"category": "Redis", "query": "Retrieve details of a specific subscription"}}, {"name": "create_essential_subscription", "server": "Redis Cloud API", "description": "Create a new Essential subscription", "parameter": {}, "task": {"category": "Redis", "query": "Create a new Essential subscription"}}, {"name": "delete_essential_subscription", "server": "Redis Cloud API", "description": "Delete an Essential subscription", "parameter": {"subscription_id": "(string) ID of the Essential subscription to delete"}, "task": {"category": "Redis", "query": "Delete a subscription"}}, {"name": "get_database_modules", "server": "Redis Cloud API", "description": "List all available database modules (capabilities) supported in your account", "parameter": {}, "task": {"category": "Redis", "query": "List available database modules"}}, {"name": "get_pro_plans_regions", "server": "Redis Cloud API", "description": "Get available regions across cloud providers", "parameter": {}, "task": {"category": "Redis", "query": "Retrieve available regions for cloud providers"}}, {"name": "get_essentials_plans", "server": "Redis Cloud API", "description": "List available Essential subscription plans (paginated)", "parameter": {}, "task": {"category": "Redis", "query": "List available subscription plans"}}, {"name": "get_tasks", "server": "Redis Cloud API", "description": "List all current tasks in your account", "parameter": {}, "task": {"category": "Redis", "query": "List all tasks in account"}}, {"name": "get_task_by_id", "server": "Redis Cloud API", "description": "Get detailed information about a specific task", "parameter": {"task_id": "(string) ID of the task"}, "task": {"category": "Redis", "query": "Retrieve task details by ID"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Qdrant", "description": "1. Store information in Qdrant database 2. Retrieve information from Qdrant database", "tools": [{"name": "qdrant-store", "server": "Qdrant", "description": "Store some information in the Qdrant database", "parameter": {"information": "(string) Information to store", "metadata": "(Optional, JSON) Optional metadata to store", "collection_name": "(string) Name of the collection to store the information in. Required if there is no default collection name."}, "task": {"category": "Qdrant", "query": "Store data in a vector database"}}, {"name": "qdrant-find", "server": "Qdrant", "description": "Retrieve relevant information from the Qdrant database", "parameter": {"query": "(string) Query to use for searching", "collection_name": "(string) Name of the collection to store the information in. Required if there is no default collection name."}, "task": {"category": "Qdrant", "query": "Search for relevant information in a vector database"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Ramp", "description": "1.数据处理与分析 2.临时数据库查询与表清理 3.财务数据加载（交易、报销、账单等） 4.组织数据加载（部门、用户、供应商等）", "tools": [{"name": "process_data", "server": "Ramp", "description": "Processes data for analysis.", "parameter": {}, "task": {"category": "Ramp", "query": "Process data for analysis"}}, {"name": "execute_query", "server": "Ramp", "description": "Executes a query on the ephemeral database.", "parameter": {}, "task": {"category": "Ramp", "query": "Execute queries on ephemeral database"}}, {"name": "clear_table", "server": "Ramp", "description": "Clears a table in the ephemeral database.", "parameter": {}, "task": {"category": "Ramp", "query": "Clear a table in the database"}}, {"name": "get_ramp_categories", "server": "Ramp", "description": "Fetches Ramp categories.", "parameter": {}, "task": {"category": "Ramp", "query": "Fetch categories"}}, {"name": "get_currencies", "server": "Ramp", "description": "Fetches available currencies.", "parameter": {}, "task": {"category": "Ramp", "query": "Retrieve list of available currencies"}}, {"name": "load_transactions", "server": "Ramp", "description": "Loads transactions data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load transactions data"}}, {"name": "load_reimbursements", "server": "Ramp", "description": "Loads reimbursements data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load reimbursements data"}}, {"name": "load_bills", "server": "Ramp", "description": "Loads bills data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load bills data"}}, {"name": "load_locations", "server": "Ramp", "description": "Loads locations data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load locations data"}}, {"name": "load_departments", "server": "Ramp", "description": "Loads departments data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load departments data"}}, {"name": "load_bank_accounts", "server": "Ramp", "description": "Loads bank accounts data.", "parameter": {}, "task": {"category": "Ramp", "query": "Retrieve bank accounts information"}}, {"name": "load_vendors", "server": "Ramp", "description": "Loads vendors data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load vendors data"}}, {"name": "load_vendor_bank_accounts", "server": "Ramp", "description": "Loads vendor bank accounts data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load vendor bank account details"}}, {"name": "load_entities", "server": "Ramp", "description": "Loads entities data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load entities data"}}, {"name": "load_spend_limits", "server": "Ramp", "description": "Loads spend limits data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load spend limits data"}}, {"name": "load_spend_programs", "server": "Ramp", "description": "Loads spend programs data.", "parameter": {}, "task": {"category": "Ramp", "query": "Load spend programs data"}}, {"name": "load_users", "server": "Ramp", "description": "Loads users data.", "parameter": {}, "task": {"category": "Ramp", "query": "Retrieve user data"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Raygun", "description": "Application monitoring and management, including: application listing and details retrieval, API key regeneration, error group management, deployment operations, customer and session tracking, performance metrics analysis, source map handling, and team invitation management", "tools": [{"name": "list_applications", "server": "Raygun", "description": "List all applications under your account", "parameter": {}, "task": {"category": "Raygun", "query": "List all applications in account"}}, {"name": "get_application", "server": "Raygun", "description": "Get application details by identifier", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve application details"}}, {"name": "get_application_by_api_key", "server": "Raygun", "description": "Get application details by API key", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve application details using API key"}}, {"name": "regenerate_application_api_key", "server": "Raygun", "description": "Generate a new API key for an application", "parameter": {}, "task": {"category": "Raygun", "query": "Generate new API key for application"}}, {"name": "list_error_groups", "server": "Raygun", "description": "List error groups for an application", "parameter": {}, "task": {"category": "Raygun", "query": "List error groups for applications"}}, {"name": "get_error_group", "server": "Raygun", "description": "Get detailed information about an error group", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve detailed error group information"}}, {"name": "resolve_error_group", "server": "Raygun", "description": "Set error group status to resolved", "parameter": {}, "task": {"category": "Raygun", "query": "Resolve error groups"}}, {"name": "activate_error_group", "server": "Raygun", "description": "Set error group status to active", "parameter": {}, "task": {"category": "Raygun", "query": "Activate error group status"}}, {"name": "ignore_error_group", "server": "Raygun", "description": "Set error group status to ignored", "parameter": {}, "task": {"category": "Raygun", "query": "Ignore error groups"}}, {"name": "permanently_ignore_error_group", "server": "Raygun", "description": "Set error group status to permanently ignored", "parameter": {}, "task": {"category": "Raygun", "query": "Manage error group status"}}, {"name": "list_deployments", "server": "Raygun", "description": "List deployments for an application", "parameter": {}, "task": {"category": "Raygun", "query": "List application deployments"}}, {"name": "get_deployment", "server": "Raygun", "description": "Get deployment details by identifier", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve deployment details"}}, {"name": "delete_deployment", "server": "Raygun", "description": "Remove a deployment", "parameter": {}, "task": {"category": "Raygun", "query": "Remove a deployment"}}, {"name": "update_deployment", "server": "Raygun", "description": "Update deployment information", "parameter": {}, "task": {"category": "Raygun", "query": "Update deployment details"}}, {"name": "reprocess_deployment_commits", "server": "Raygun", "description": "Reprocess deployment commit data", "parameter": {}, "task": {"category": "Raygun", "query": "Reprocess deployment commit data"}}, {"name": "list_customers", "server": "Raygun", "description": "List customers for an application", "parameter": {}, "task": {"category": "Raygun", "query": "List application customers"}}, {"name": "list_sessions", "server": "Raygun", "description": "List user sessions for an application", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve user sessions for an application"}}, {"name": "get_session", "server": "Raygun", "description": "Get detailed session information", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve detailed session data"}}, {"name": "list_pages", "server": "Raygun", "description": "List monitored pages for an application", "parameter": {}, "task": {"category": "Raygun", "query": "List monitored pages for applications"}}, {"name": "get_page_metrics_time_series", "server": "Raygun", "description": "Get time-series performance metrics", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve performance metrics over time"}}, {"name": "get_page_metrics_histogram", "server": "Raygun", "description": "Get histogram of performance metrics", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve performance metrics histogram"}}, {"name": "get_error_metrics_time_series", "server": "Raygun", "description": "Get time-series error metrics", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve error metrics over time"}}, {"name": "list_source_maps", "server": "Raygun", "description": "List source maps for an application", "parameter": {}, "task": {"category": "Raygun", "query": "List source maps for applications"}}, {"name": "get_source_map", "server": "Raygun", "description": "Get source map details", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve source map details"}}, {"name": "update_source_map", "server": "Raygun", "description": "Update source map information", "parameter": {}, "task": {"category": "Raygun", "query": "Update source map details"}}, {"name": "delete_source_map", "server": "Raygun", "description": "Remove a source map", "parameter": {}, "task": {"category": "Raygun", "query": "Remove source maps"}}, {"name": "upload_source_map", "server": "Raygun", "description": "Upload a new source map", "parameter": {}, "task": {"category": "Raygun", "query": "Upload source maps"}}, {"name": "delete_all_source_maps", "server": "Raygun", "description": "Remove all source maps", "parameter": {}, "task": {"category": "Raygun", "query": "Remove source maps"}}, {"name": "list_invitations", "server": "Raygun", "description": "List pending team invitations", "parameter": {}, "task": {"category": "Raygun", "query": "List pending team invitations"}}, {"name": "send_invitation", "server": "Raygun", "description": "Send a new team invitation", "parameter": {}, "task": {"category": "Raygun", "query": "Send team invitations"}}, {"name": "get_invitation", "server": "Raygun", "description": "Get invitation details", "parameter": {}, "task": {"category": "Raygun", "query": "Retrieve invitation details"}}, {"name": "revoke_invitation", "server": "Raygun", "description": "Revoke a pending invitation", "parameter": {}, "task": {"category": "Raygun", "query": "Manage user invitations"}}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Rember", "description": "Create flashcards with AI using the Rember API from Claude notes", "tools": [{"name": "create_flashcards", "server": "Rember", "description": "Creates flashcards with AI by taking a list of notes from Claude and generating a few flashcards for each note using the Rember API.", "parameter": {"notes": "(list of strings) A list of notes from Claude to generate flashcards from."}, "task": {"category": "Rember", "query": "Generate flashcards from notes"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Riza", "description": "1. Create new tools using Riza Tools API 2. Fetch and edit saved Riza tools 3. Execute saved tools securely on Riza's code interpreter API 4. List all available saved tools 5. Execute arbitrary code safely on Riza's code interpreter API", "tools": [{"name": "create_tool", "server": "Riza", "description": "Creates a new tool by writing code and saving it using the Riza Tools API.", "parameter": {}, "task": {"category": "Riza", "query": "Create a new tool using API"}}, {"name": "fetch_tool", "server": "Riza", "description": "Fetches saved Riza tools, including their source code, for editing purposes.", "parameter": {}, "task": {"category": "Riza", "query": "Retrieve saved tools for editing"}}, {"name": "execute_tool", "server": "Riza", "description": "Executes a saved tool securely on Riza's code interpreter API.", "parameter": {}, "task": {"category": "Riza", "query": "Execute a saved tool securely"}}, {"name": "edit_tool", "server": "Riza", "description": "Edits an existing saved tool.", "parameter": {}, "task": {"category": "Riza", "query": "Edit an existing saved tool"}}, {"name": "list_tools", "server": "Riza", "description": "Lists all available saved tools.", "parameter": {}, "task": {"category": "Riza", "query": "List all available saved tools"}}, {"name": "execute_code", "server": "Riza", "description": "Executes arbitrary code safely on Riza's code interpreter API without saving it as a tool.", "parameter": {}, "task": {"category": "Riza", "query": "Execute code safely on a code interpreter"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "ScreenshotOne", "description": "Render a screenshot of a website and return it as an image", "tools": [{"name": "render-website-screenshot", "server": "ScreenshotOne", "description": "Render a screenshot of a website and returns it as an image.", "parameter": {}, "task": {"category": "ScreenshotOne", "query": "Capture website screenshots"}}], "domains": [{"name": "Browser Operation", "description": "浏览器操作与自动化控制,如网页元素操控、Cookie 管理、页面截图等"}]}
{"name": "Semgrep", "description": "1.扫描代码安全漏洞 2.使用自定义Semgrep规则扫描代码文件 3.输出代码的抽象语法树(AST) 4.获取Semgrep支持的语言列表 5.获取最新的Semgrep规则JSON Schema", "tools": [{"name": "security_check", "server": "Semgrep", "description": "Scan code for security vulnerabilities", "parameter": {}, "task": {"category": "Semgrep", "query": "Scan code for security issues"}}, {"name": "semgrep_scan", "server": "Semgrep", "description": "Scan code files for security vulnerabilities with a given config string", "parameter": {"code_files": "(list of objects) List of code files to scan, each with 'filename' and 'content' keys"}, "task": {"category": "Semgrep", "query": "Scan code files for security vulnerabilities"}}, {"name": "semgrep_scan_with_custom_rule", "server": "Semgrep", "description": "Scan code files using a custom Semgrep rule", "parameter": {"code_files": "(list of objects) List of code files to scan, each with 'filename' and 'content' keys", "custom_rule": "(string) Custom Semgrep rule to use for scanning"}, "task": {"category": "Semgrep", "query": "Scan code files with custom rules"}}, {"name": "get_abstract_syntax_tree", "server": "Semgrep", "description": "Output the Abstract Syntax Tree (AST) of code", "parameter": {"code": "(string) Code to generate the AST for"}, "task": {"category": "Semgrep", "query": "Generate Abstract Syntax Tree for code"}}, {"name": "supported_languages", "server": "Semgrep", "description": "Return the list of languages Semgrep supports", "parameter": {}, "task": {"category": "Semgrep", "query": "List supported programming languages"}}, {"name": "semgrep_rule_schema", "server": "Semgrep", "description": "Fetches the latest semgrep rule JSON Schema", "parameter": {}, "task": {"category": "Semgrep", "query": "Fetch the latest rule schema"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "SingleStore", "description": "1. Retrieve workspace groups, workspaces, and organization details 2. List regions supporting workspaces 3. Execute SQL operations on workspaces 4. List and create starter workspaces 5. List notebook samples and create notebooks 6. List personal files 7. Create and manage scheduled jobs for notebooks", "tools": [{"name": "workspace_groups_info", "server": "SingleStore", "description": "Retrieve details about the workspace groups accessible to the user", "parameter": {}, "task": {"category": "SingleStore", "query": "Retrieve workspace group details"}}, {"name": "workspaces_info", "server": "SingleStore", "description": "Retrieve details about the workspaces in a specific workspace group", "parameter": {"workspaceGroupID": "(string) ID of the workspace group"}, "task": {"category": "SingleStore", "query": "Retrieve workspace details in a workspace group"}}, {"name": "organization_info", "server": "SingleStore", "description": "Retrieve details about the user's current organization", "parameter": {}, "task": {"category": "SingleStore", "query": "Get organization details"}}, {"name": "list_of_regions", "server": "SingleStore", "description": "Retrieve a list of all regions that support workspaces for the user", "parameter": {}, "task": {"category": "SingleStore", "query": "Get supported regions for workspaces"}}, {"name": "execute_sql", "server": "SingleStore", "description": "Execute SQL operations on a connected workspace", "parameter": {"workspace_group_identifier": "(string) Identifier of the workspace group", "workspace_identifier": "(string) Identifier of the workspace", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "database": "(string) Name of the database", "sql_query": "(string) SQL query to execute"}, "task": {"category": "SingleStore", "query": "Execute SQL operations on a workspace"}}, {"name": "list_virtual_workspaces", "server": "SingleStore", "description": "List all starter workspaces accessible to the user", "parameter": {}, "task": {"category": "SingleStore", "query": "List accessible starter workspaces"}}, {"name": "create_virtual_workspace", "server": "SingleStore", "description": "Create a new starter workspace with a user", "parameter": {"name": "(string) Name of the starter workspace", "database_name": "(string) Name of the database to create", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "workspace_group": "(object) Object containing 'name' (optional) and 'cellID' (mandatory)"}, "task": {"category": "SingleStore", "query": "Create a new workspace with user access"}}, {"name": "execute_sql_on_virtual_workspace", "server": "SingleStore", "description": "Execute SQL operations on a virtual workspace", "parameter": {"virtual_workspace_id": "(string) ID of the virtual workspace", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "sql_query": "(string) SQL query to execute"}, "task": {"category": "SingleStore", "query": "Perform SQL operations on a virtual workspace"}}, {"name": "list_notebook_samples", "server": "SingleStore", "description": "List all notebook samples available in SingleStore Spaces", "parameter": {}, "task": {"category": "SingleStore", "query": "List available notebook samples"}}, {"name": "create_notebook", "server": "SingleStore", "description": "Create a new notebook in the user's personal space", "parameter": {"notebook_name": "(string) Name of the notebook", "content": "(Optional, string) Content of the notebook"}, "task": {"category": "SingleStore", "query": "Create a new notebook in personal space"}}, {"name": "list_personal_files", "server": "SingleStore", "description": "List all files in the user's personal space", "parameter": {}, "task": {"category": "SingleStore", "query": "List files in personal space"}}, {"name": "create_scheduled_job", "server": "SingleStore", "description": "Create a new scheduled job to run a notebook", "parameter": {"name": "(string) Name for the job", "notebook_path": "(string) Path to the notebook to execute", "schedule_mode": "(string) Once or Recurring", "execution_interval_minutes": "(Optional, number) Minutes between executions", "start_at": "(Optional, string) When to start the job", "description": "(Optional, string) Description of the job", "create_snapshot": "(Optional, boolean) Whether to create notebook snapshots", "runtime_name": "(string) Name of the runtime environment", "parameters": "(Optional, object) Parameters for the job", "target_config": "(Optional, object) Target configuration for the job"}, "task": {"category": "SingleStore", "query": "Schedule a notebook job"}}, {"name": "get_job_details", "server": "SingleStore", "description": "Get details about a specific job", "parameter": {"job_id": "(string) ID of the job"}, "task": {"category": "SingleStore", "query": "Retrieve details of a specific job"}}, {"name": "list_job_executions", "server": "SingleStore", "description": "List execution history for a specific job", "parameter": {"job_id": "(string) ID of the job", "start": "(Optional, string) Start date for the execution history", "end": "(Optional, string) End date for the execution history"}, "task": {"category": "SingleStore", "query": "Retrieve execution history for a job"}}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "StarRocks", "description": "StarRocks数据库操作,包括:执行SELECT/DDL/DML查询、生成Plotly图表、获取表和数据库概览信息", "tools": [{"name": "read_query", "server": "StarRocks", "description": "Execute a SELECT query or other commands that return a ResultSet (e.g., SHOW, DESCRIBE).", "parameter": {"query": "(string) SQL query string"}, "task": {"category": "StarRocks", "query": "Execute SQL queries returning ResultSet"}}, {"name": "write_query", "server": "StarRocks", "description": "Execute a DDL (CREATE, ALTER, DROP), DML (INSERT, UPDATE, DELETE), or other StarRocks command that does not return a ResultSet.", "parameter": {"query": "(string) SQL command string"}, "task": {"category": "StarRocks", "query": "Execute SQL commands without returning a ResultSet"}}, {"name": "query_and_plotly_chart", "server": "StarRocks", "description": "Executes a SQL query, loads the results into a Pandas DataFrame, and generates a Plotly chart using a provided Python expression.", "parameter": {"query": "(string) SQL query to fetch data", "plotly_expr": "(string) Python expression string using 'px' (Plotly Express) and 'df' (DataFrame). Example: 'px.scatter(df, x=\"col1\", y=\"col2\")'"}, "task": {"category": "StarRocks", "query": "Execute SQL query and visualize data with Plotly"}}, {"name": "table_overview", "server": "StarRocks", "description": "Get an overview of a specific table: columns (from DESCRIBE), total row count, and sample rows (LIMIT 3). Uses an in-memory cache unless refresh is true.", "parameter": {"table": "(string) Table name, optionally prefixed with database name (e.g., 'db_name.table_name' or 'table_name'). If database is omitted, uses STARROCKS_DB environment variable if set.", "refresh": "(Optional, boolean) Set to true to bypass the cache. Defaults to false."}, "task": {"category": "StarRocks", "query": "Retrieve table metadata and sample data"}}, {"name": "db_overview", "server": "StarRocks", "description": "Get an overview (columns, row count, sample rows) for all tables within a specified database. Uses the table-level cache for each table unless refresh is true.", "parameter": {"db": "(string) Database name. Optional if STARROCKS_DB env var is set.", "refresh": "(Optional, boolean) Set to true to bypass the cache for all tables in the DB. Defaults to false."}, "task": {"category": "StarRocks", "query": "Retrieve database table overview"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Stripe", "description": "Stripe支付服务操作,包括:客户管理、优惠券管理、产品与价格管理、支付链接创建、发票管理、余额查询、订阅管理、退款处理、争议处理", "tools": [{"name": "createCustomer", "server": "Stripe", "description": "Creates a new customer in Stripe.", "parameter": {"name": "(string) The customer's name.", "email": "(string) The customer's email address.", "phone": "(Optional, string) The customer's phone number."}, "task": {"category": "Stripe", "query": "Create a new customer"}}, {"name": "listCustomers", "server": "Stripe", "description": "Lists all customers in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "Retrieve all customer records"}}, {"name": "createCoupon", "server": "Stripe", "description": "Creates a new coupon in Stripe.", "parameter": {"percent_off": "(number) The percentage discount.", "duration": "(string) The duration of the coupon (e.g., 'once', 'repeating').", "duration_in_months": "(Optional, number) The number of months the coupon lasts if the duration is 'repeating'."}, "task": {"category": "Stripe", "query": "Create a new discount coupon"}}, {"name": "listCoupons", "server": "Stripe", "description": "Lists all coupons in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "List all available coupons"}}, {"name": "createProduct", "server": "Stripe", "description": "Creates a new product in Stripe.", "parameter": {"name": "(string) The product's name.", "description": "(string) The product's description.", "unit_label": "(Optional, string) The label for the unit of measure."}, "task": {"category": "Stripe", "query": "Create a new product"}}, {"name": "listProducts", "server": "Stripe", "description": "Lists all products in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "List all available products"}}, {"name": "createPrice", "server": "Stripe", "description": "Creates a new price in Stripe.", "parameter": {"product": "(string) The ID of the product this price is associated with.", "unit_amount": "(number) The unit amount in cents.", "currency": "(string) The currency of the price."}, "task": {"category": "Stripe", "query": "Create a new price for a product"}}, {"name": "listPrices", "server": "Stripe", "description": "Lists all prices in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "List all available prices"}}, {"name": "createPaymentLink", "server": "Stripe", "description": "Creates a new payment link in Stripe.", "parameter": {"line_items": "(array) An array of line items to include in the payment link.", "success_url": "(string) The URL to redirect to after a successful payment.", "cancel_url": "(string) The URL to redirect to if the payment is canceled."}, "task": {"category": "Stripe", "query": "Create a payment link for online transactions"}}, {"name": "createInvoice", "server": "Stripe", "description": "Creates a new invoice in Stripe.", "parameter": {"customer": "(string) The ID of the customer to create the invoice for.", "lines": "(array) An array of line items to include in the invoice."}, "task": {"category": "Stripe", "query": "Create a new invoice for a customer"}}, {"name": "createInvoiceItem", "server": "Stripe", "description": "Creates a new invoice item in Stripe.", "parameter": {"customer": "(string) The ID of the customer to create the invoice item for.", "amount": "(number) The amount of the invoice item in cents.", "currency": "(string) The currency of the invoice item."}, "task": {"category": "Stripe", "query": "Create a new invoice item for a customer"}}, {"name": "finalizeInvoice", "server": "Stripe", "description": "Finalizes an invoice in Stripe.", "parameter": {"invoice": "(string) The ID of the invoice to finalize."}, "task": {"category": "Stripe", "query": "Finalize an invoice"}}, {"name": "retrieveBalance", "server": "Stripe", "description": "Retrieves the current balance in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "Retrieve current balance"}}, {"name": "listSubscriptions", "server": "Stripe", "description": "Lists all subscriptions in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "List all subscriptions"}}, {"name": "updateSubscription", "server": "Stripe", "description": "Updates an existing subscription in Stripe.", "parameter": {"subscription": "(string) The ID of the subscription to update.", "items": "(array) An array of subscription items to update."}, "task": {"category": "Stripe", "query": "Update subscription details"}}, {"name": "cancelSubscription", "server": "Stripe", "description": "Cancels an existing subscription in Stripe.", "parameter": {"subscription": "(string) The ID of the subscription to cancel."}, "task": {"category": "Stripe", "query": "Cancel an existing subscription"}}, {"name": "createRefund", "server": "Stripe", "description": "Creates a new refund in Stripe.", "parameter": {"charge": "(string) The ID of the charge to refund.", "amount": "(Optional, number) The amount to refund in cents."}, "task": {"category": "Stripe", "query": "Create a refund for a charge"}}, {"name": "listDisputes", "server": "Stripe", "description": "Lists all disputes in Stripe.", "parameter": {}, "task": {"category": "Stripe", "query": "List all disputes"}}, {"name": "updateDispute", "server": "Stripe", "description": "Updates an existing dispute in Stripe.", "parameter": {"dispute": "(string) The ID of the dispute to update.", "evidence": "(object) Evidence to submit for the dispute."}, "task": {"category": "Stripe", "query": "Update an existing dispute with new evidence"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Tavily", "description": "1.使用Tavily进行实时网页搜索 2.使用Tavily提取网页内容、图片和元数据", "tools": [{"name": "tavily-search", "server": "Tavily", "description": "Performs real-time web searches with sophisticated filtering options and domain-specific search features.", "parameter": {}, "task": {"category": "Tavily", "query": "Perform real-time web searches with advanced filtering"}}, {"name": "tavily-extract", "server": "Tavily", "description": "Extracts intelligent data from web pages, such as main content, images, and metadata.", "parameter": {}, "task": {"category": "Tavily", "query": "Extract data from web pages"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Thirdweb", "description": "Retrieve a list of tools for AI agents compatible with frameworks like LangChain and OpenAI Agents", "tools": [{"name": "get_tools", "server": "Thirdweb", "description": "Retrieves a list of tools for AI agents, which can be used with different frameworks like LangChain and OpenAI Agents.", "parameter": {"secret_key": "(string) The secret key required for authentication."}, "task": {"category": "Thirdweb", "query": "Retrieve tools for AI agents"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "Tinybird", "description": "Tinybird Workspace operations, including: listing data sources and pipes, getting data source and pipe information, requesting pipe data, running select queries, adding business insights, accessing Tinybird documentation, saving events, analyzing pipe performance, and pushing datafiles", "tools": [{"name": "list-data-sources", "server": "Tinybird", "description": "Lists all Data Sources in the Tinybird Workspace", "parameter": {}, "task": {"category": "Tinybird", "query": "List all available data sources"}}, {"name": "list-pipes", "server": "Tinybird", "description": "Lists all Pipe Endpoints in the Tinybird Workspace", "parameter": {}, "task": {"category": "Tinybird", "query": "List all pipe endpoints in the workspace"}}, {"name": "get-data-source", "server": "Tinybird", "description": "Gets the information of a Data Source given its name, including the schema", "parameter": {"name": "(string) The name of the Data Source"}, "task": {"category": "Tinybird", "query": "Retrieve information about a specific data source"}}, {"name": "get-pipe", "server": "Tinybird", "description": "Gets the information of a Pipe Endpoint given its name, including its nodes and SQL transformation", "parameter": {"name": "(string) The name of the Pipe Endpoint"}, "task": {"category": "Tinybird", "query": "Retrieve details of a Pipe Endpoint"}}, {"name": "request-pipe-data", "server": "Tinybird", "description": "Requests data from a Pipe Endpoint via an HTTP request. Pipe endpoints can have parameters to filter the analytical data", "parameter": {"name": "(string) The name of the Pipe Endpoint", "parameters": "(Optional, object) Parameters to filter the data"}, "task": {"category": "Tinybird", "query": "Request data from a Pipe Endpoint"}}, {"name": "run-select-query", "server": "Tinybird", "description": "Allows to run a select query over a Data Source to extract insights", "parameter": {"query": "(string) The SQL select query"}, "task": {"category": "Tinybird", "query": "Run SQL select queries on a data source"}}, {"name": "append-insight", "server": "Tinybird", "description": "Adds a new business insight to the memo resource", "parameter": {"insight": "(string) The business insight to add"}, "task": {"category": "Tinybird", "query": "Add new business insights"}}, {"name": "llms-tinybird-docs", "server": "Tinybird", "description": "Contains the whole Tinybird product documentation, so you can use it to get context about what Tinybird is, what it does, API reference and more", "parameter": {}, "task": {"category": "Tinybird", "query": "Get product documentation and API reference"}}, {"name": "save-event", "server": "Tinybird", "description": "Sends an event to a Tinybird Data Source. Use it to save a user-generated prompt to the prompts Data Source", "parameter": {"event": "(object) The event data to send"}, "task": {"category": "Tinybird", "query": "Save user-generated events to a data source"}}, {"name": "analyze-pipe", "server": "Tinybird", "description": "Uses the Tinybird analyze API to run a ClickHouse explain on the Pipe Endpoint query and check if indexes, sorting key, and partition key are being used and propose optimization suggestions", "parameter": {"name": "(string) The name of the Pipe Endpoint"}, "task": {"category": "Tinybird", "query": "Analyze and optimize Pipe Endpoint queries"}}, {"name": "push-datafile", "server": "Tinybird", "description": "Creates a remote Data Source or Pipe in the Tinybird Workspace from a local datafile", "parameter": {"file_path": "(string) The path to the local datafile", "data_source_name": "(string) The name of the Data Source to create", "pipe_name": "(Optional, string) The name of the Pipe to create"}, "task": {"category": "Tinybird", "query": "Create or update Data Sources and Pipes from local files"}}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Unstructured", "description": "Unstructured API operations, including: 1. Source connector management (list, create, update, delete) 2. Destination connector management (list, create, update, delete) 3. Workflow management (list, create, run, update, delete) 4. Job management (list, get info, cancel) 5. Firecrawl integration (crawl HTML, check status, generate LLM-optimized text, cancel jobs)", "tools": [{"name": "list_sources", "server": "Unstructured", "description": "Lists available sources from the Unstructured API.", "parameter": {}, "task": {"category": "Unstructured", "query": "List available data sources"}}, {"name": "get_source_info", "server": "Unstructured", "description": "Get detailed information about a specific source connector.", "parameter": {}, "task": {"category": "Unstructured", "query": "Retrieve details of a source connector"}}, {"name": "create_source_connector", "server": "Unstructured", "description": "Create a source connector.", "parameter": {}, "task": {"category": "UNKNOWN", "query": "Create a source connector"}}, {"name": "update_source_connector", "server": "Unstructured", "description": "Update an existing source connector by params.", "parameter": {}, "task": {"category": "Unstructured", "query": "Update an existing source connector"}}, {"name": "delete_source_connector", "server": "Unstructured", "description": "Delete a source connector by source id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Remove a source connector"}}, {"name": "list_destinations", "server": "Unstructured", "description": "Lists available destinations from the Unstructured API.", "parameter": {}, "task": {"category": "Unstructured", "query": "List available destinations"}}, {"name": "get_destination_info", "server": "Unstructured", "description": "Get detailed info about a specific destination connector.", "parameter": {}, "task": {"category": "Unstructured", "query": "Retrieve information about destination connectors"}}, {"name": "create_destination_connector", "server": "Unstructured", "description": "Create a destination connector by params.", "parameter": {}, "task": {"category": "Unstructured", "query": "Create a destination connector"}}, {"name": "update_destination_connector", "server": "Unstructured", "description": "Update an existing destination connector by destination id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Update an existing destination connector"}}, {"name": "delete_destination_connector", "server": "Unstructured", "description": "Delete a destination connector by destination id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Remove a destination connector"}}, {"name": "list_workflows", "server": "Unstructured", "description": "Lists workflows from the Unstructured API.", "parameter": {}, "task": {"category": "Unstructured", "query": "List available workflows"}}, {"name": "get_workflow_info", "server": "Unstructured", "description": "Get detailed information about a specific workflow.", "parameter": {}, "task": {"category": "Unstructured", "query": "Retrieve workflow details"}}, {"name": "create_workflow", "server": "Unstructured", "description": "Create a new workflow with source, destination id, etc.", "parameter": {}, "task": {"category": "Unstructured", "query": "Set up a new workflow configuration"}}, {"name": "run_workflow", "server": "Unstructured", "description": "Run a specific workflow with workflow id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Execute a workflow by its ID"}}, {"name": "update_workflow", "server": "Unstructured", "description": "Update an existing workflow by params.", "parameter": {}, "task": {"category": "Unstructured", "query": "Modify an existing workflow"}}, {"name": "delete_workflow", "server": "Unstructured", "description": "Delete a specific workflow by id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Remove a workflow by its identifier"}}, {"name": "list_jobs", "server": "Unstructured", "description": "Lists jobs for a specific workflow from the Unstructured API.", "parameter": {}, "task": {"category": "Unstructured", "query": "List jobs for a workflow"}}, {"name": "get_job_info", "server": "Unstructured", "description": "Get detailed information about a specific job by job id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Retrieve job details by ID"}}, {"name": "cancel_job", "server": "Unstructured", "description": "Delete a specific job by id.", "parameter": {}, "task": {"category": "Unstructured", "query": "Delete a specific job by ID"}}, {"name": "list_workflows_with_finished_jobs", "server": "Unstructured", "description": "Lists all workflows that have any completed job, together with information about source and destination details.", "parameter": {}, "task": {"category": "Unstructured", "query": "List workflows with completed jobs"}}, {"name": "invoke_firecrawl_crawlhtml", "server": "Unstructured", "description": "Starts a crawl job using Firecrawl to retrieve HTML content.", "parameter": {}, "task": {"category": "Firecrawl", "query": "Start a crawl job to retrieve HTML content"}}, {"name": "check_crawlhtml_status", "server": "Unstructured", "description": "Checks the status of a crawl job.", "parameter": {}, "task": {"category": "Unstructured", "query": "Check status of a crawl job"}}, {"name": "invoke_firecrawl_llmtxt", "server": "Unstructured", "description": "Generates LLM-optimized text from crawled pages.", "parameter": {}, "task": {"category": "Unstructured", "query": "Generate LLM-optimized text from web pages"}}, {"name": "check_llmtxt_status", "server": "Unstructured", "description": "Retrieves the results of an LLM-optimized text generation job.", "parameter": {}, "task": {"category": "Unstructured", "query": "Retrieve results of text generation job"}}, {"name": "cancel_crawlhtml_job", "server": "Unstructured", "description": "Cancels a crawl job.", "parameter": {}, "task": {"category": "Unstructured", "query": "Cancel a web crawling job"}}, {"name": "cancel_llmtxt_job", "server": "Unstructured", "description": "Cancels an LLM-optimized text generation job.", "parameter": {}, "task": {"category": "Unstructured", "query": "Cancel a text generation job"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Vectorize", "description": "1.执行向量搜索和文档检索 2.从文档中提取文本并分块为Markdown格式 3.从管道生成私有深度研究", "tools": [{"name": "retrieve", "server": "Vectorize", "description": "Performs vector search and retrieves documents.", "parameter": {"question": "(string) The query to search for.", "k": "(integer) The number of results to return."}, "task": {"category": "Vectorize", "query": "Search and retrieve documents using vector similarity"}}, {"name": "extract", "server": "Vectorize", "description": "Extracts text from a document and chunks it into Markdown format.", "parameter": {"base64document": "(string) The base64-encoded document to extract text from.", "contentType": "(string) The content type of the document."}, "task": {"category": "Vectorize", "query": "Extract and chunk text from documents"}}, {"name": "deep-research", "server": "Vectorize", "description": "Generates a Private Deep Research from your pipeline.", "parameter": {"query": "(string) The query to generate the research report.", "webSearch": "(boolean, optional) Whether to include web search results."}, "task": {"category": "Vectorize", "query": "Generate a private deep research report"}}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Verodat", "description": "1. Retrieve available accounts 2. List workspaces within an account 3. List datasets in a workspace 4. Retrieve actual data from a dataset 5. Retrieve field definitions for a dataset 6. Retrieve existing AI queries 7. Get workspace context and data structure 8. Execute AI-powered queries on datasets 9. Create a new dataset with defined schema 10. Upload data rows to existing datasets", "tools": [{"name": "get-accounts", "server": "Verodat", "description": "Retrieve available accounts", "parameter": {}, "task": {"category": "Verodat", "query": "Retrieve available accounts"}}, {"name": "get-workspaces", "server": "Verodat", "description": "List workspaces within an account", "parameter": {}, "task": {"category": "Verodat", "query": "List available workspaces"}}, {"name": "get-datasets", "server": "Verodat", "description": "List datasets in a workspace", "parameter": {}, "task": {"category": "Verodat", "query": "List available datasets in a workspace"}}, {"name": "get-dataset-output", "server": "Verodat", "description": "Retrieve actual data from a dataset", "parameter": {}, "task": {"category": "Verodat", "query": "Retrieve data from a dataset"}}, {"name": "get-dataset-targetfields", "server": "Verodat", "description": "Retrieve field definitions for a dataset", "parameter": {}, "task": {"category": "Verodat", "query": "Retrieve dataset field definitions"}}, {"name": "get-queries", "server": "Verodat", "description": "Retrieve existing AI queries", "parameter": {}, "task": {"category": "Verodat", "query": "Retrieve existing AI queries"}}, {"name": "get-ai-context", "server": "Verodat", "description": "Get workspace context and data structure", "parameter": {}, "task": {"category": "Verodat", "query": "Retrieve workspace context and data structure"}}, {"name": "execute-ai-query", "server": "Verodat", "description": "Execute AI-powered queries on datasets", "parameter": {}, "task": {"category": "Verodat", "query": "Perform AI-powered data analysis"}}, {"name": "create-dataset", "server": "Verodat", "description": "Create a new dataset with defined schema", "parameter": {}, "task": {"category": "Verodat", "query": "Create a new dataset with schema"}}, {"name": "upload-dataset-rows", "server": "Verodat", "description": "Upload data rows to existing datasets", "parameter": {}, "task": {"category": "Verodat", "query": "Upload data to existing datasets"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}]}
{"name": "Xero", "description": "Xero财务软件操作,包括:账户/联系人/发票/信用票据/报价单/税务信息/付款记录查询与创建,工资单员工管理,财务报告生成(利润损失/试算平衡/应收应付账龄),以及工资单时间表审批与修改", "tools": [{"name": "list-accounts", "server": "Xero", "description": "Retrieve a list of accounts", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve account list"}}, {"name": "list-contacts", "server": "Xero", "description": "Retrieve a list of contacts from Xero", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve contacts list"}}, {"name": "list-credit-notes", "server": "Xero", "description": "Retrieve a list of credit notes", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve credit notes"}}, {"name": "list-invoices", "server": "Xero", "description": "Retrieve a list of invoices", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve a list of invoices"}}, {"name": "list-items", "server": "Xero", "description": "Retrieve a list of items", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve a list of items"}}, {"name": "list-organisation-details", "server": "Xero", "description": "Retrieve details about an organisation", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve organization details"}}, {"name": "list-profit-and-loss", "server": "Xero", "description": "Retrieve a profit and loss report", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve financial reports"}}, {"name": "list-quotes", "server": "Xero", "description": "Retrieve a list of quotes", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve a list of quotes"}}, {"name": "list-tax-rates", "server": "Xero", "description": "Retrieve a list of tax rates", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve tax rates"}}, {"name": "list-payments", "server": "Xero", "description": "Retrieve a list of payments", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve payment records"}}, {"name": "list-trial-balance", "server": "Xero", "description": "Retrieve a trial balance report", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve financial reports"}}, {"name": "list-payroll-employees", "server": "Xero", "description": "Retrieve a list of Payroll Employees", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve payroll employee list"}}, {"name": "list-payroll-employee-leave", "server": "Xero", "description": "Retrieve a Payroll Employee's leave records", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve employee leave records"}}, {"name": "list-payroll-employee-leave-balances", "server": "Xero", "description": "Retrieve a Payroll Employee's leave balances", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve employee leave balances"}}, {"name": "list-payroll-employee-leave-types", "server": "Xero", "description": "Retrieve a list of Payroll leave types", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve payroll leave types"}}, {"name": "list-payroll-leave-periods", "server": "Xero", "description": "Retrieve a list of a Payroll Employee's leave periods", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve employee leave periods"}}, {"name": "list-aged-receivables-by-contact", "server": "Xero", "description": "Retrieves aged receivables for a contact", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve aged receivables for contacts"}}, {"name": "list-aged-payables-by-contact", "server": "Xero", "description": "Retrieves aged payables for a contact", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve aged payables for contacts"}}, {"name": "list-contact-groups", "server": "Xero", "description": "Retrieve a list of contact groups", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve contact groups"}}, {"name": "create-contact", "server": "Xero", "description": "Create a new contact", "parameter": {}, "task": {"category": "Xero", "query": "Create a new contact"}}, {"name": "create-credit-note", "server": "Xero", "description": "Create a new credit note", "parameter": {}, "task": {"category": "Xero", "query": "Create a new credit note"}}, {"name": "create-invoice", "server": "Xero", "description": "Create a new invoice", "parameter": {}, "task": {"category": "Xero", "query": "Create a new invoice"}}, {"name": "create-payment", "server": "Xero", "description": "Create a new payment", "parameter": {}, "task": {"category": "Xero", "query": "Create a new payment"}}, {"name": "create-quote", "server": "Xero", "description": "Create a new quote", "parameter": {}, "task": {"category": "Xero", "query": "Create a new quote"}}, {"name": "update-contact", "server": "Xero", "description": "Update an existing contact", "parameter": {}, "task": {"category": "Xero", "query": "Modify contact details"}}, {"name": "update-invoice", "server": "Xero", "description": "Update an existing draft invoice", "parameter": {}, "task": {"category": "Xero", "query": "Modify draft invoices"}}, {"name": "update-quote", "server": "Xero", "description": "Update an existing draft quote", "parameter": {}, "task": {"category": "Xero", "query": "Update draft quotes"}}, {"name": "update-credit-note", "server": "Xero", "description": "Update an existing draft credit note", "parameter": {}, "task": {"category": "Xero", "query": "Update draft credit notes"}}, {"name": "update-payroll-timesheet-line", "server": "Xero", "description": "Update a line on an existing Payroll Timesheet", "parameter": {}, "task": {"category": "Xero", "query": "Modify payroll timesheet entries"}}, {"name": "approve-payroll-timesheet", "server": "Xero", "description": "Approve a Payroll Timesheet", "parameter": {}, "task": {"category": "Xero", "query": "Approve payroll timesheets"}}, {"name": "revert-payroll-timesheet", "server": "Xero", "description": "Revert an approved Payroll Timesheet", "parameter": {}, "task": {"category": "Xero", "query": "Revert an approved payroll timesheet"}}, {"name": "add-payroll-timesheet-line", "server": "Xero", "description": "Add new line on an existing Payroll Timesheet", "parameter": {}, "task": {"category": "Xero", "query": "Add new line to payroll timesheet"}}, {"name": "delete-payroll-timesheet", "server": "Xero", "description": "Delete an existing Payroll Timesheet", "parameter": {}, "task": {"category": "Xero", "query": "Delete payroll timesheet"}}, {"name": "get-payroll-timesheet", "server": "Xero", "description": "Retrieve an existing Payroll Timesheet", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve payroll timesheet"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Airbnb", "description": "1. Search for Airbnb listings 2. Get detailed information about a specific Airbnb listing", "tools": [{"name": "airbnb_search", "server": "Airbnb", "description": "Search for Airbnb listings", "parameter": {"location": "(string) The location to search for listings", "placeId": "(Optional, string) The place ID", "checkin": "(Optional, string, YYYY-MM-DD) Check-in date", "checkout": "(Optional, string, YYYY-MM-DD) Check-out date", "adults": "(Optional, number) Number of adults", "children": "(Optional, number) Number of children", "infants": "(Optional, number) Number of infants", "pets": "(Optional, number) Number of pets", "minPrice": "(Optional, number) Minimum price", "maxPrice": "(Optional, number) Maximum price", "cursor": "(Optional, string) Cursor for pagination", "ignoreRobotsText": "(Optional, boolean) Ignore robots.txt rules"}, "task": {"category": "Airbnb", "query": "Search for rental listings"}}, {"name": "airbnb_listing_details", "server": "Airbnb", "description": "Get detailed information about a specific Airbnb listing", "parameter": {"id": "(string) The ID of the listing", "checkin": "(Optional, string, YYYY-MM-DD) Check-in date", "checkout": "(Optional, string, YYYY-MM-DD) Check-out date", "adults": "(Optional, number) Number of adults", "children": "(Optional, number) Number of children", "infants": "(Optional, number) Number of infants", "pets": "(Optional, number) Number of pets", "ignoreRobotsText": "(Optional, boolean) Ignore robots.txt rules"}, "task": {"category": "Airbnb", "query": "Retrieve detailed information for a specific listing"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "AI Agent Marketplace Index", "description": "General search of AI Agents for information, websites, content, and metric statistics of web traffic", "tools": [{"name": "search_ai_agent", "server": "AI Agent Marketplace Index", "description": "General search of AI Agents for information, websites, content, and metric statistics of web traffic, etc.", "parameter": {"q": "(str) Query string for searching AI agents", "limit": "(Optional, int) Maximum number of results to return (default is 100)", "timeout": "(Optional, int) Timeout for the search request in seconds (default is 5)"}, "task": {"category": "AI Agent Marketplace", "query": "Search for AI agents and related information"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Airflow", "description": "Apache Airflow DAG and task management, including DAG operations (list, create, update, delete), task operations (list, update, clear), variable and connection management, dataset operations, and server health monitoring", "tools": [{"name": "List DAGs", "server": "Airflow", "description": "Lists all DAGs.", "parameter": {}, "task": {"category": "Airflow", "query": "List all DAGs"}}, {"name": "Get DAG Details", "server": "Airflow", "description": "Gets details of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Retrieve details of a specific DAG"}}, {"name": "Pause DAG", "server": "Airflow", "description": "Pauses a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Pause a specific DAG"}}, {"name": "Unpause DAG", "server": "Airflow", "description": "Unpauses a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Unpause a DAG"}}, {"name": "Update DAG", "server": "Airflow", "description": "Updates a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Update a specific DAG"}}, {"name": "Delete DAG", "server": "Airflow", "description": "Deletes a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Delete a specific DAG"}}, {"name": "Get DAG Source", "server": "Airflow", "description": "Gets the source code of a specific DAG.", "parameter": {"file_token": "(string) The token of the DAG source file."}, "task": {"category": "Airflow", "query": "Retrieve source code for a DAG"}}, {"name": "Patch Multiple DAGs", "server": "Airflow", "description": "Patches multiple DAGs.", "parameter": {}, "task": {"category": "Airflow", "query": "Patch multiple DAGs"}}, {"name": "Reparse DAG File", "server": "Airflow", "description": "Reparses a specific DAG file.", "parameter": {"file_token": "(string) The token of the DAG source file."}, "task": {"category": "Airflow", "query": "Reparse a DAG file"}}, {"name": "List DAG Runs", "server": "Airflow", "description": "Lists all runs of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "List runs of a specific DAG"}}, {"name": "Create DAG Run", "server": "Airflow", "description": "Creates a new run for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Create a new run for a DAG"}}, {"name": "Get DAG Run Details", "server": "Airflow", "description": "Gets details of a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "Retrieve details of a specific DAG run"}}, {"name": "Update DAG Run", "server": "Airflow", "description": "Updates a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "Update a specific DAG run"}}, {"name": "Delete DAG Run", "server": "Airflow", "description": "Deletes a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "Delete a specific DAG run"}}, {"name": "Get DAG Runs Batch", "server": "Airflow", "description": "Gets a batch of DAG runs.", "parameter": {}, "task": {"category": "Airflow", "query": "Retrieve multiple DAG runs"}}, {"name": "Clear DAG Run", "server": "Airflow", "description": "Clears a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "Clear a specific DAG run"}}, {"name": "Set DAG Run Note", "server": "Airflow", "description": "Sets a note for a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "Set notes for DAG runs"}}, {"name": "Get Upstream Dataset Events", "server": "Airflow", "description": "Gets upstream dataset events for a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "Retrieve upstream dataset events for a DAG run"}}, {"name": "List DAG Tasks", "server": "Airflow", "description": "Lists all tasks of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "List tasks for a specific DAG"}}, {"name": "Get Task Details", "server": "Airflow", "description": "Gets details of a specific task.", "parameter": {"dag_id": "(string) The ID of the DAG.", "task_id": "(string) The ID of the task."}, "task": {"category": "Airflow", "query": "Retrieve details of a specific task in a DAG"}}, {"name": "Get Task Instance", "server": "Airflow", "description": "Gets a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}, "task": {"category": "Airflow", "query": "Retrieve a specific task instance details"}}, {"name": "List Task Instances", "server": "Airflow", "description": "Lists all task instances of a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": {"category": "Airflow", "query": "List task instances for a DAG run"}}, {"name": "Update Task Instance", "server": "Airflow", "description": "Updates a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}, "task": {"category": "Airflow", "query": "Update a task instance in a DAG"}}, {"name": "Clear Task Instances", "server": "Airflow", "description": "Clears task instances.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Clear task instances for a DAG"}}, {"name": "Set Task Instances State", "server": "Airflow", "description": "Sets the state of task instances.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Modify task instance states"}}, {"name": "List Variables", "server": "Airflow", "description": "Lists all variables.", "parameter": {}, "task": {"category": "Airflow", "query": "List all variables in the system"}}, {"name": "Create Variable", "server": "Airflow", "description": "Creates a new variable.", "parameter": {}, "task": {"category": "Airflow", "query": "Create a new variable"}}, {"name": "Get Variable", "server": "Airflow", "description": "Gets a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}, "task": {"category": "Airflow", "query": "Retrieve a specific variable"}}, {"name": "Update Variable", "server": "Airflow", "description": "Updates a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}, "task": {"category": "Airflow", "query": "Update a specific variable"}}, {"name": "Delete Variable", "server": "Airflow", "description": "Deletes a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}, "task": {"category": "Airflow", "query": "Delete a variable from the system"}}, {"name": "List Connections", "server": "Airflow", "description": "Lists all connections.", "parameter": {}, "task": {"category": "Airflow", "query": "List all connections"}}, {"name": "Create Connection", "server": "Airflow", "description": "Creates a new connection.", "parameter": {}, "task": {"category": "Airflow", "query": "Create a new connection"}}, {"name": "Get Connection", "server": "Airflow", "description": "Gets a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}, "task": {"category": "Airflow", "query": "Retrieve a specific connection"}}, {"name": "Update Connection", "server": "Airflow", "description": "Updates a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}, "task": {"category": "Airflow", "query": "Update a connection in Airflow"}}, {"name": "Delete Connection", "server": "Airflow", "description": "Deletes a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}, "task": {"category": "Airflow", "query": "Delete a connection in Airflow"}}, {"name": "Test Connection", "server": "Airflow", "description": "Tests a specific connection.", "parameter": {}, "task": {"category": "Airflow", "query": "Test a specific connection"}}, {"name": "List Pools", "server": "Airflow", "description": "Lists all pools.", "parameter": {}, "task": {"category": "Airflow", "query": "List all available pools"}}, {"name": "Create Pool", "server": "Airflow", "description": "Creates a new pool.", "parameter": {}, "task": {"category": "Airflow", "query": "Create a new pool"}}, {"name": "Get Pool", "server": "Airflow", "description": "Gets a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}, "task": {"category": "Airflow", "query": "Retrieve details of a specific pool"}}, {"name": "Update Pool", "server": "Airflow", "description": "Updates a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}, "task": {"category": "Airflow", "query": "Update a specific pool in the system"}}, {"name": "Delete Pool", "server": "Airflow", "description": "Deletes a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}, "task": {"category": "Airflow", "query": "Delete a specific pool"}}, {"name": "List XComs", "server": "Airflow", "description": "Lists all XCom entries for a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}, "task": {"category": "Airflow", "query": "List XCom entries for a task instance"}}, {"name": "Get XCom Entry", "server": "Airflow", "description": "Gets a specific XCom entry.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task.", "xcom_key": "(string) The key of the XCom entry."}, "task": {"category": "Airflow", "query": "Retrieve specific XCom entry from DAG run"}}, {"name": "List Datasets", "server": "Airflow", "description": "Lists all datasets.", "parameter": {}, "task": {"category": "Airflow", "query": "List all datasets"}}, {"name": "Get Dataset", "server": "Airflow", "description": "Gets a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}, "task": {"category": "Airflow", "query": "Retrieve a specific dataset"}}, {"name": "Get Dataset Events", "server": "Airflow", "description": "Gets events for a specific dataset.", "parameter": {}, "task": {"category": "Airflow", "query": "Retrieve events related to a dataset"}}, {"name": "Create Dataset Event", "server": "Airflow", "description": "Creates a new dataset event.", "parameter": {}, "task": {"category": "Airflow", "query": "Create a new dataset event"}}, {"name": "Get DAG Dataset Queued Event", "server": "Airflow", "description": "Gets a queued dataset event for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG.", "uri": "(string) The URI of the dataset."}, "task": {"category": "Airflow", "query": "Retrieve queued dataset event for a DAG"}}, {"name": "Get DAG Dataset Queued Events", "server": "Airflow", "description": "Gets queued dataset events for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Retrieve queued dataset events for a DAG"}}, {"name": "Delete DAG Dataset Queued Event", "server": "Airflow", "description": "Deletes a queued dataset event for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG.", "uri": "(string) The URI of the dataset."}, "task": {"category": "Airflow", "query": "Delete queued dataset event for a DAG"}}, {"name": "Delete DAG Dataset Queued Events", "server": "Airflow", "description": "Deletes queued dataset events for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": {"category": "Airflow", "query": "Delete queued dataset events for a DAG"}}, {"name": "Get Dataset Queued Events", "server": "Airflow", "description": "Gets queued dataset events for a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}, "task": {"category": "Airflow", "query": "Retrieve queued events for a dataset"}}, {"name": "Delete Dataset Queued Events", "server": "Airflow", "description": "Deletes queued dataset events for a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}, "task": {"category": "Airflow", "query": "Delete queued events for a dataset"}}, {"name": "Get Health", "server": "Airflow", "description": "Gets the health status of the server.", "parameter": {}, "task": {"category": "Airflow", "query": "Check server health status"}}, {"name": "Get DAG Stats", "server": "Airflow", "description": "Gets statistics for all DAGs.", "parameter": {}, "task": {"category": "Airflow", "query": "Retrieve statistics for DAGs"}}, {"name": "Get Config", "server": "Airflow", "description": "Gets the configuration of the server.", "parameter": {}, "task": {"category": "Airflow", "query": "Retrieve server configuration"}}, {"name": "Get Plugins", "server": "Airflow", "description": "Gets a list of plugins.", "parameter": {}, "task": {"category": "Airflow", "query": "Retrieve list of plugins"}}, {"name": "List Providers", "server": "Airflow", "description": "Lists all providers.", "parameter": {}, "task": {"category": "Airflow", "query": "List all available providers"}}, {"name": "List Event Logs", "server": "Airflow", "description": "Lists all event logs.", "parameter": {}, "task": {"category": "Airflow", "query": "List event logs"}}, {"name": "Get Event Log", "server": "Airflow", "description": "Gets a specific event log.", "parameter": {"event_log_id": "(string) The ID of the event log."}, "task": {"category": "Airflow", "query": "Retrieve specific event log details"}}, {"name": "Get Import Errors", "server": "Airflow", "description": "Lists all import errors.", "parameter": {}, "task": {"category": "Airflow", "query": "List import errors in workflows"}}, {"name": "Get Import Error Details", "server": "Airflow", "description": "Gets details of a specific import error.", "parameter": {"import_error_id": "(string) The ID of the import error."}, "task": {"category": "Airflow", "query": "Retrieve details of import errors"}}, {"name": "Get Health Status", "server": "Airflow", "description": "Gets the health status of the server.", "parameter": {}, "task": {"category": "Airflow", "query": "Check server health status"}}, {"name": "Get Version", "server": "Airflow", "description": "Gets the version of the server.", "parameter": {}, "task": {"category": "Airflow", "query": "Retrieve server version information"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}, {"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Airtable", "description": "Airtable operations, including: listing/searching records, managing bases/tables/fields, and performing CRUD operations on records", "tools": [{"name": "list_records", "server": "Airtable", "description": "Lists records from a specified Airtable table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to query", "maxRecords": "(number, optional) Maximum number of records to return. Defaults to 100.", "filterByFormula": "(string, optional) Airtable formula to filter records"}, "task": {"category": "Airtable", "query": "Retrieve records from a table"}}, {"name": "search_records", "server": "Airtable", "description": "Search for records containing specific text", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to query", "searchTerm": "(string, required) Text to search for in records", "fieldIds": "(array, optional) Specific field IDs to search in. If not provided, searches all text-based fields.", "maxRecords": "(number, optional) Maximum number of records to return. Defaults to 100."}, "task": {"category": "Airtable", "query": "Search for records in a table"}}, {"name": "list_bases", "server": "Airtable", "description": "Lists all accessible Airtable bases", "parameter": {}, "task": {"category": "Airtable", "query": "List all accessible bases"}}, {"name": "list_tables", "server": "Airtable", "description": "Lists all tables in a specific base", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "detailLevel": "(string, optional) The amount of detail to get about the tables (tableIdentifiersOnly, identifiersOnly, or full)"}, "task": {"category": "Airtable", "query": "List all tables in a base"}}, {"name": "describe_table", "server": "Airtable", "description": "Gets detailed information about a specific table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to describe", "detailLevel": "(string, optional) The amount of detail to get about the table (tableIdentifiersOnly, identifiersOnly, or full)"}, "task": {"category": "Airtable", "query": "Retrieve detailed information about a table"}}, {"name": "get_record", "server": "Airtable", "description": "Gets a specific record by ID", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "recordId": "(string, required) The ID of the record to retrieve"}, "task": {"category": "Airtable", "query": "Retrieve a specific record by ID"}}, {"name": "create_record", "server": "Airtable", "description": "Creates a new record in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "fields": "(object, required) The fields and values for the new record"}, "task": {"category": "Airtable", "query": "Create a new record in a table"}}, {"name": "update_records", "server": "Airtable", "description": "Updates one or more records in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "records": "(array, required) Array of objects containing record ID and fields to update"}, "task": {"category": "Airtable", "query": "Update records in a table"}}, {"name": "delete_records", "server": "Airtable", "description": "Deletes one or more records from a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "recordIds": "(array, required) Array of record IDs to delete"}, "task": {"category": "Airtable", "query": "Delete records from a table"}}, {"name": "create_table", "server": "Airtable", "description": "Creates a new table in a base", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "name": "(string, required) Name of the new table", "description": "(string, optional) Description of the table", "fields": "(array, required) Array of field definitions (name, type, description, options)"}, "task": {"category": "Airtable", "query": "Create a new table in a base"}}, {"name": "update_table", "server": "Airtable", "description": "Updates a table's name or description", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "name": "(string, optional) New name for the table", "description": "(string, optional) New description for the table"}, "task": {"category": "Airtable", "query": "Update table details in Airtable"}}, {"name": "create_field", "server": "Airtable", "description": "Creates a new field in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "name": "(string, required) Name of the new field", "type": "(string, required) Type of the field", "description": "(string, optional) Description of the field", "options": "(object, optional) Field-specific options"}, "task": {"category": "Airtable", "query": "Create a new field in a table"}}, {"name": "update_field", "server": "Airtable", "description": "Updates a field's name or description", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "fieldId": "(string, required) The ID of the field", "name": "(string, optional) New name for the field", "description": "(string, optional) New description for the field"}, "task": {"category": "Airtable", "query": "Update field details in a table"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Anki", "description": "1.标记卡片为已回答并评分 2.在默认Anki牌组中创建新卡片 3.获取待复习卡片 4.获取新卡片", "tools": [{"name": "update_cards", "server": "Anki", "description": "Marks cards with given card IDs as answered and gives them an ease score between 1 (Again) and 4 (Easy)", "parameter": {"answers": "(array) Array of objects with `cardId` (number) and `ease` (number) fields"}, "task": {"category": "Anki", "query": "Update card answers with ease scores"}}, {"name": "add_card", "server": "Anki", "description": "Creates a new card in the Default Anki deck", "parameter": {"front": "(string) Front of card", "back": "(string) Back of card"}, "task": {"category": "Anki", "query": "Create a new flashcard"}}, {"name": "get_due_cards", "server": "Anki", "description": "Returns n number of cards currently due for review", "parameter": {"num": "(number) Number of cards"}, "task": {"category": "Anki", "query": "Retrieve due cards for review"}}, {"name": "get_new_cards", "server": "Anki", "description": "Returns n number of cards from new", "parameter": {"num": "(number) Number of cards"}, "task": {"category": "Anki", "query": "Retrieve new flashcards"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Any Chat Completions", "description": "Relay questions to a configured AI Chat Provider", "tools": [{"name": "chat", "server": "Any Chat Completions", "description": "Relays a question to a configured AI Chat Provider.", "parameter": {}, "task": {"category": "AI Chat", "query": "Relay questions to an AI chat provider"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Apache Gravitino(incubating)", "description": "1.获取目录、模式、表和标签的基本信息列表 2.通过完全限定名称获取表和列的详细信息 3.将标签关联到表或列 4.获取与标签关联的对象列表 5.获取角色和用户的基本信息列表 6.授予或撤销用户的角色", "tools": [{"name": "get_list_of_catalogs", "server": "Apache Gravitino(incubating)", "description": "Get a list of catalogs with basic information", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve list of catalogs"}}, {"name": "get_list_of_schemas", "server": "Apache Gravitino(incubating)", "description": "Get a list of schemas with basic information", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve schema information"}}, {"name": "get_list_of_tables", "server": "Apache Gravitino(incubating)", "description": "Get a paginated list of tables with basic information", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve a list of tables with basic information"}}, {"name": "get_table_by_fqn", "server": "Apache Gravitino(incubating)", "description": "Get detailed table information by fully qualified name", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve table details using fully qualified name"}}, {"name": "get_table_columns_by_fqn", "server": "Apache Gravitino(incubating)", "description": "Get table columns information by fully qualified name", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve table columns details"}}, {"name": "get_list_of_tags", "server": "Apache Gravitino(incubating)", "description": "Get a list of tags with basic information", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve basic information about tags"}}, {"name": "associate_tag_to_table", "server": "Apache Gravitino(incubating)", "description": "Associate a tag to a table", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Manage table metadata"}}, {"name": "associate_tag_to_column", "server": "Apache Gravitino(incubating)", "description": "Associate a tag to a column", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Manage metadata tags for columns"}}, {"name": "list_objects_by_tag", "server": "Apache Gravitino(incubating)", "description": "Get a list of objects associated with a tag", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve objects linked to a specific tag"}}, {"name": "get_list_of_roles", "server": "Apache Gravitino(incubating)", "description": "Get a list of roles with basic information", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve role information"}}, {"name": "get_list_of_users", "server": "Apache Gravitino(incubating)", "description": "Get a list of users with basic information", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Retrieve user information list"}}, {"name": "grant_role_to_user", "server": "Apache Gravitino(incubating)", "description": "Grant a role to a user", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Assign roles to users"}}, {"name": "revoke_role_from_user", "server": "Apache Gravitino(incubating)", "description": "Revoke a role from a user", "parameter": {}, "task": {"category": "Apache Gravitino", "query": "Manage user roles"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "Apple Calendar", "description": "1.基于自然语言创建日历事件 2.提供用户日程信息并查找会议可用时间 3.基于自然语言更新现有日历事件 4.管理并提供可用日历信息", "tools": [{"name": "Event Creation", "server": "Apple Calendar", "description": "Creates calendar events based on natural language input.", "parameter": {"calendar": "(Optional, string) The calendar to add the event to.", "location": "(Optional, string) The location of the event.", "notes": "(Optional, string) Additional notes for the event.", "reminder": "(Optional, string) Reminder settings for the event.", "recurring": "(Optional, string) Recurrence pattern for the event."}, "task": {"category": "Apple Calendar", "query": "Create calendar events with natural language input"}}, {"name": "Smart Schedule Management & Availability", "server": "Apple Calendar", "description": "Provides information about the user's schedule and finds available time slots for meetings.", "parameter": {}, "task": {"category": "Apple Calendar", "query": "Find available time slots for meetings"}}, {"name": "Intelligent Event Updates", "server": "Apple Calendar", "description": "Updates existing calendar events based on natural language input.", "parameter": {"time": "(Optional, string) New time for the event.", "date": "(Optional, string) New date for the event.", "calendar": "(Optional, string) New calendar for the event.", "location": "(Optional, string) New location for the event.", "notes": "(Optional, string) Additional notes to add to the event.", "reminder": "(Optional, string) New reminder settings for the event.", "recurring": "(Optional, string) New recurrence pattern for the event."}, "task": {"category": "Apple Calendar", "query": "Update calendar events with natural language input"}}, {"name": "Calendar Management", "server": "Apple Calendar", "description": "Manages and provides information about available calendars.", "parameter": {}, "task": {"category": "Apple Calendar", "query": "Manage and retrieve calendar information"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Aranet4", "description": "1.配置Aranet4设备 2.扫描附近的蓝牙Aranet4设备 3.获取当前配置和数据库统计信息 4.设置配置文件中的值 5.从配置的Aranet4设备获取新数据并保存到本地数据库 6.从本地数据库获取最近的测量数据 7.从本地数据库获取特定时间范围内的数据", "tools": [{"name": "init_aranet4_config", "server": "Aranet4", "description": "Assisted configuration of the Aranet4 device.", "parameter": {}, "task": {"category": "Aranet4", "query": "Configure Aranet4 device settings"}}, {"name": "scan_devices", "server": "Aranet4", "description": "Scan for nearby Bluetooth Aranet4 devices.", "parameter": {}, "task": {"category": "Bluetooth", "query": "Scan for nearby devices"}}, {"name": "get_configuration_and_db_stats", "server": "Aranet4", "description": "Get the current configuration and database statistics.", "parameter": {}, "task": {"category": "Aranet4", "query": "Retrieve current configuration and database statistics"}}, {"name": "set_configuration", "server": "Aranet4", "description": "Set values in the configuration file.", "parameter": {}, "task": {"category": "Aranet4", "query": "Modify configuration settings"}}, {"name": "fetch_new_data", "server": "Aranet4", "description": "Fetch new data from the configured nearby Aranet4 device and save it to the local database.", "parameter": {}, "task": {"category": "Aranet4", "query": "Retrieve data from nearby device"}}, {"name": "get_recent_data", "server": "Aranet4", "description": "Get recent data from the local database. Can specify the number of measurements.", "parameter": {"measurements": "(Optional, int) Number of recent measurements to retrieve."}, "task": {"category": "Aranet4", "query": "Retrieve recent measurements from local database"}}, {"name": "get_data_by_timerange", "server": "Aranet4", "description": "Get data within a specific time range from the local database. Can specify the number of measurements.", "parameter": {"start_time": "(str) Start time of the range.", "end_time": "(str) End time of the range.", "measurements": "(Optional, int) Number of measurements to retrieve."}, "task": {"category": "Aranet4", "query": "Retrieve data within a specified time range"}}], "domains": [{"name": "Healthcare Service", "description": "医疗健康服务,包括在线问诊、电子病历、健康数据记录及医疗资源预约"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "ArangoDB", "description": "ArangoDB数据库操作,包括：执行AQL查询、文档插入、更新、删除、备份集合、列出所有集合、创建新集合", "tools": [{"name": "arango_query", "server": "ArangoDB", "description": "Execute AQL queries", "parameter": {"query": "(string) AQL query string", "bindVariables": "(Optional, object) Bind variables for parameterized queries"}, "task": {"category": "ArangoDB", "query": "Execute AQL queries with optional bind variables"}}, {"name": "arango_insert", "server": "ArangoDB", "description": "Insert documents into collections", "parameter": {"collection": "(string) Collection name", "document": "(object) Document object"}, "task": {"category": "ArangoDB", "query": "Insert documents into database collections"}}, {"name": "arango_update", "server": "ArangoDB", "description": "Update existing documents", "parameter": {"collection": "(string) Collection name", "key": "(string) Document key", "update": "(object) Update object"}, "task": {"category": "ArangoDB", "query": "Update documents in a collection"}}, {"name": "arango_remove", "server": "ArangoDB", "description": "Remove documents from collections", "parameter": {"collection": "(string) Collection name", "key": "(string) Document key"}, "task": {"category": "ArangoDB", "query": "Remove documents from a specified collection"}}, {"name": "arango_backup", "server": "ArangoDB", "description": "Backup all collections to JSON files", "parameter": {"outputDir": "(string) Output directory path", "collection": "(Optional, string) Collection name to backup", "docLimit": "(Optional, number) Maximum number of documents to backup per collection"}, "task": {"category": "ArangoDB", "query": "Backup collections to JSON files"}}, {"name": "arango_list_collections", "server": "ArangoDB", "description": "List all collections in the database", "parameter": {}, "task": {"category": "ArangoDB", "query": "List all collections in the database"}}, {"name": "arango_create_collection", "server": "ArangoDB", "description": "Create a new collection in the database", "parameter": {"name": "(string) Collection name", "type": "(Optional, string) Collection type (document or edge collection)", "waitForSync": "(Optional, boolean) Configure waitForSync behavior for write operations"}, "task": {"category": "ArangoDB", "query": "Create a new database collection"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Atlassian", "description": "Jira and Confluence operations, including: issue management (get, search, create, update, transition, comment), page management (search, get, create, update)", "tools": [{"name": "jira_get_issue", "server": "Atlassian", "description": "Get details of a specific issue", "parameter": {}, "task": {"category": "Atlassian", "query": "Retrieve issue details"}}, {"name": "jira_search", "server": "Atlassian", "description": "Search issues using JQL", "parameter": {}, "task": {"category": "Atlassian", "query": "Search issues in Jira"}}, {"name": "jira_create_issue", "server": "Atlassian", "description": "Create a new issue", "parameter": {}, "task": {"category": "Atlassian", "query": "Create a new issue in Jira"}}, {"name": "jira_update_issue", "server": "Atlassian", "description": "Update an existing issue", "parameter": {}, "task": {"category": "Atlassian", "query": "Update an existing issue in Jira"}}, {"name": "jira_transition_issue", "server": "Atlassian", "description": "Transition an issue to a new status", "parameter": {}, "task": {"category": "Atlassian", "query": "Change the status of an issue"}}, {"name": "jira_add_comment", "server": "Atlassian", "description": "Add a comment to an issue", "parameter": {}, "task": {"category": "Atlassian", "query": "Add comments to issues"}}, {"name": "confluence_search", "server": "Atlassian", "description": "Search Confluence content using CQL", "parameter": {}, "task": {"category": "Atlassian", "query": "Search content in Confluence"}}, {"name": "confluence_get_page", "server": "Atlassian", "description": "Get content of a specific page", "parameter": {}, "task": {"category": "Atlassian", "query": "Retrieve content from a specific page"}}, {"name": "confluence_create_page", "server": "Atlassian", "description": "Create a new page", "parameter": {}, "task": {"category": "Atlassian", "query": "Create a new page in Confluence"}}, {"name": "confluence_update_page", "server": "Atlassian", "description": "Update an existing page", "parameter": {}, "task": {"category": "Atlassian", "query": "Update an existing page in Confluence"}}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "AWS Athena", "description": "AWS Athena operations including: executing SQL queries, checking query status, retrieving query results, listing saved queries, and running saved queries by ID", "tools": [{"name": "run_query", "server": "AWS Athena", "description": "Execute a SQL query using AWS Athena", "parameter": {"database": "(string) The Athena database to query", "query": "(string) SQL query to execute", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000, max: 10000)"}, "task": {"category": "AWS Athena", "query": "Execute SQL queries on AWS Athena database"}}, {"name": "get_status", "server": "AWS Athena", "description": "Check the status of a query execution", "parameter": {"queryExecutionId": "(string) The ID returned from run_query"}, "task": {"category": "AWS Athena", "query": "Check query execution status"}}, {"name": "get_result", "server": "AWS Athena", "description": "Retrieve results for a completed query", "parameter": {"queryExecutionId": "(string) The ID returned from run_query", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000, max: 10000)"}, "task": {"category": "AWS Athena", "query": "Retrieve query results"}}, {"name": "list_saved_queries", "server": "AWS Athena", "description": "List all saved (named) queries in Athena", "parameter": {}, "task": {"category": "AWS Athena", "query": "List saved queries in Athena"}}, {"name": "run_saved_query", "server": "AWS Athena", "description": "Run a previously saved query by its ID", "parameter": {"namedQueryId": "(string) ID of the saved query", "databaseOverride": "(Optional, string) Optional override of the saved query's default database", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000)", "timeoutMs": "(Optional, integer) Timeout in milliseconds (default: 60000)"}, "task": {"category": "AWS Athena", "query": "Execute a saved query by ID"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "AWS Cost Explorer", "description": "1. Retrieve EC2 spending data for the previous day 2. Deliver comprehensive cost analysis by region, service, and instance type 3. Provide daily and hourly breakdown of AWS Bedrock model usage by region and users", "tools": [{"name": "get_ec2_spend_last_day", "server": "AWS Cost Explorer", "description": "Retrieves EC2 spending data for the previous day", "parameter": {}, "task": {"category": "AWS", "query": "Retrieve EC2 spending data"}}, {"name": "get_detailed_breakdown_by_day", "server": "AWS Cost Explorer", "description": "Delivers a comprehensive analysis of costs by region, service, and instance type", "parameter": {"days": "(int) Number of days to analyze (default: 7)"}, "task": {"category": "AWS", "query": "Analyze detailed cost breakdown by day"}}, {"name": "get_bedrock_daily_usage_stats", "server": "AWS Cost Explorer", "description": "Delivers a per-day breakdown of model usage by region and users", "parameter": {"days": "(int) Number of days to analyze (default: 7)", "region": "(str) AWS region (default: 'us-east-1')", "log_group_name": "(str) Name of the CloudWatch Log Group (default: 'BedrockModelInvocationLogGroup')"}, "task": {"category": "AWS", "query": "Get daily usage statistics for AWS Bedrock"}}, {"name": "get_bedrock_hourly_usage_stats", "server": "AWS Cost Explorer", "description": "Delivers a per-day per-hour breakdown of model usage by region and users", "parameter": {"days": "(int) Number of days to analyze (default: 7)", "region": "(str) AWS region (default: 'us-east-1')", "log_group_name": "(str) Name of the CloudWatch Log Group (default: 'BedrockModelInvocationLogGroup')"}, "task": {"category": "AWS", "query": "Analyze hourly usage statistics for AWS Bedrock"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "AWS Resources Operations", "description": "Execute a boto3 code snippet to query or modify AWS resources", "tools": [{"name": "aws_resources_query_or_modify", "server": "AWS Resources Operations", "description": "Execute a boto3 code snippet to query or modify AWS resources", "parameter": {"code_snippet": "(string) Python code using boto3 to query AWS resources. The code must set a `result` variable with the query output."}, "task": {"category": "AWS", "query": "Execute boto3 code to interact with AWS resources"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "AWS S3", "description": "Amazon S3 bucket and object management, including listing buckets, listing objects, and retrieving objects", "tools": [{"name": "ListBuckets", "server": "AWS S3", "description": "Returns a list of all buckets owned by the authenticated sender of the request", "parameter": {}, "task": {"category": "AWS S3", "query": "List all owned buckets"}}, {"name": "ListObjectsV2", "server": "AWS S3", "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request", "parameter": {}, "task": {"category": "AWS S3", "query": "List objects in a bucket"}}, {"name": "GetObject", "server": "AWS S3", "description": "Retrieves an object from Amazon S3. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported", "parameter": {}, "task": {"category": "AWS S3", "query": "Retrieve objects from storage"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Azure ADX", "description": "Azure Data Explorer operations, including: KQL query execution, table listing, schema retrieval, and table data sampling", "tools": [{"name": "execute_query", "server": "Azure ADX", "description": "Execute a KQL query against Azure Data Explorer", "parameter": {"query": "(string) The KQL query to execute"}, "task": {"category": "Azure Data Explorer", "query": "Execute KQL queries on Azure Data Explorer"}}, {"name": "list_tables", "server": "Azure ADX", "description": "List all tables in the configured database", "parameter": {}, "task": {"category": "Azure ADX", "query": "List all tables in the database"}}, {"name": "get_table_schema", "server": "Azure ADX", "description": "Get the schema for a specific table", "parameter": {"table_name": "(string) The name of the table to get the schema for"}, "task": {"category": "Azure ADX", "query": "Retrieve schema for a table"}}, {"name": "sample_table_data", "server": "Azure ADX", "description": "Get sample data from a table with optional sample size", "parameter": {"table_name": "(string) The name of the table to sample data from", "sample_size": "(Optional, int) The number of rows to sample (default is 10)"}, "task": {"category": "Azure ADX", "query": "Retrieve sample data from a table"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Azure DevOps", "description": "Azure DevOps work item management, including: querying work items, creating/updating work items, adding/viewing comments, accessing project/team information, and managing team configurations", "tools": [{"name": "Query Work Items", "server": "Azure DevOps", "description": "Search for work items using WIQL queries", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Search for work items"}}, {"name": "Get Work Item Details", "server": "Azure DevOps", "description": "View complete work item information", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Retrieve detailed work item information"}}, {"name": "Create Work Items", "server": "Azure DevOps", "description": "Add new tasks, bugs, user stories, and other work item types", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Add new work items"}}, {"name": "Update Work Items", "server": "Azure DevOps", "description": "Modify existing work items' fields and properties", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Modify work items' fields and properties"}}, {"name": "Add Comments", "server": "Azure DevOps", "description": "Post comments on work items", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Post comments on work items"}}, {"name": "View Comments", "server": "Azure DevOps", "description": "Retrieve the comment history for a work item", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Retrieve comment history for work items"}}, {"name": "Get Projects", "server": "Azure DevOps", "description": "View all accessible projects in the organization", "parameter": {}, "task": {"category": "Azure DevOps", "query": "List all accessible projects in the organization"}}, {"name": "Get Teams", "server": "Azure DevOps", "description": "List all teams within the organization", "parameter": {}, "task": {"category": "Azure DevOps", "query": "List all teams in the organization"}}, {"name": "Team Members", "server": "Azure DevOps", "description": "View team membership information", "parameter": {}, "task": {"category": "Azure DevOps", "query": "View team membership details"}}, {"name": "Team Area Paths", "server": "Azure DevOps", "description": "Retrieve area paths assigned to teams", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Retrieve team area paths"}}, {"name": "Team Iterations", "server": "Azure DevOps", "description": "Access team iteration/sprint configurations", "parameter": {}, "task": {"category": "Azure DevOps", "query": "Access team iteration configurations"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Baidu AI Search", "description": "1.调用大模型并支持自定义prompt模板和模型参数 2.结合百度搜索和ERNIE模型提供更准确的搜索结果 3.访问和管理百度智能云千帆AppBuilder网页端发布的AI原生应用", "tools": [{"name": "Playground", "server": "Baidu AI Search", "description": "用于调用大模型，支持自定义prompt模板和模型参数。", "parameter": {"prompt_template": "(string) 自定义的prompt模板", "model": "(string) 调用的模型名称", "stream": "(Optional, boolean) 是否以流式方式返回结果", "temperature": "(Optional, float) 模型的温度参数，控制输出的随机性"}, "task": {"category": "Baidu AI", "query": "Customize and call large models with prompt templates and parameters"}}, {"name": "RagWithBaiduSearchPro", "server": "Baidu AI Search", "description": "结合百度搜索的搜索引擎技术和ERNIE模型的语义理解能力，提供更准确的搜索结果。", "parameter": {"message": "(Message) 输入的消息", "instruction": "(Message) 指令消息"}, "task": {"category": "Baidu AI", "query": "Provide accurate search results with semantic understanding"}}, {"name": "AppBuilderClient", "server": "Baidu AI Search", "description": "用于访问和管理在百度智能云千帆AppBuilder网页端发布的AI原生应用，支持创建会话和运行应用。", "parameter": {"app_id": "(string) 应用ID", "conversation_id": "(string) 会话ID"}, "task": {"category": "Baidu AI", "query": "Access and manage AI applications on Baidu's AppBuilder platform"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Base Free USDC Transfer", "description": "1.分析购买物品价值并通过Base链安排USDC转账 2.创建Coinbase MPC钱包地址", "tools": [{"name": "tranfer-usdc", "server": "Base Free USDC Transfer", "description": "Analyzes the value of the purchased items and schedules a USDC transfer to the recipient via the Base chain. Does not wait for the transaction to complete.", "parameter": {"usdc_amount": "(number) USDC amount, greater than 0.", "recipient": "(string) Recipient's on-chain address or ENS domain (e.g., example.eth)."}, "task": {"category": "Base", "query": "Schedule USDC transfer on Base chain"}}, {"name": "create_coinbase_mpc_wallet", "server": "Base Free USDC Transfer", "description": "Creates a new Coinbase MPC wallet address. If a wallet already exists, returns the existing wallet address.", "parameter": {}, "task": {"category": "Coinbase", "query": "Create or retrieve MPC wallet address"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Basic Memory", "description": "1. Create or update notes in the knowledge base 2. Read notes by title or permalink 3. Navigate the knowledge graph via memory:// URLs 4. Search across the knowledge base 5. Find recently updated information 6. Generate knowledge visualizations", "tools": [{"name": "write_note", "server": "Basic Memory", "description": "Create or update notes in the knowledge base.", "parameter": {"title": "(string) The title of the note", "content": "(string) The content of the note", "folder": "(string) The folder where the note should be saved", "tags": "(array) Tags to associate with the note"}, "task": {"category": "Basic Memory", "query": "Manage notes in the knowledge base"}}, {"name": "read_note", "server": "Basic Memory", "description": "Read notes by title or permalink.", "parameter": {"identifier": "(string) The title or permalink of the note", "page": "(integer) The page number for paginated results", "page_size": "(integer) The number of items per page"}, "task": {"category": "Basic Memory", "query": "Retrieve notes by identifier"}}, {"name": "build_context", "server": "Basic Memory", "description": "Navigate the knowledge graph via memory:// URLs.", "parameter": {"url": "(string) The memory:// URL to start from", "depth": "(integer) The depth to traverse the graph", "timeframe": "(string) The timeframe to consider (e.g., 'past week')"}, "task": {"category": "Basic Memory", "query": "Traverse knowledge graph from a specified URL"}}, {"name": "search_notes", "server": "Basic Memory", "description": "Search across the knowledge base.", "parameter": {"query": "(string) The search query", "page": "(integer) The page number for paginated results", "page_size": "(integer) The number of items per page"}, "task": {"category": "Basic Memory", "query": "Search knowledge base entries"}}, {"name": "recent_activity", "server": "Basic Memory", "description": "Find recently updated information.", "parameter": {"type": "(string) The type of activity to filter by (e.g., 'note', 'update')", "depth": "(integer) The depth to traverse the graph", "timeframe": "(string) The timeframe to consider (e.g., 'past week')"}, "task": {"category": "Basic Memory", "query": "Retrieve recent updates or activities"}}, {"name": "canvas", "server": "Basic Memory", "description": "Generate knowledge visualizations.", "parameter": {"nodes": "(array) The nodes to include in the visualization", "edges": "(array) The edges to connect the nodes", "title": "(string) The title of the visualization", "folder": "(string) The folder where the visualization should be saved"}, "task": {"category": "Basic Memory", "query": "Create knowledge visualizations"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "Calculator", "description": "Calculates/evaluates the given expression", "tools": [{"name": "calculate", "server": "Calculator", "description": "Calculates/evaluates the given expression.", "parameter": {"expression": "(string, required) Expression to be calculated"}, "task": {"category": "Calculator", "query": "Evaluate mathematical expressions"}}], "domains": [{"name": "Scientific Computing", "description": "科学计算,支持数值模拟、数学建模、数据分析及学科算法实现"}]}
{"name": "CFBD API", "description": "1. Retrieve game data 2. Get team records 3. Access team game statistics 4. Query play-by-play data 5. Analyze drive information 6. View play statistics 7. Check team rankings 8. See win probabilities 9. Access detailed game statistics and analytics", "tools": [{"name": "get-games", "server": "CFBD API", "description": "Retrieve game data", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve college football game data"}}, {"name": "get-records", "server": "CFBD API", "description": "Get team records", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve team records"}}, {"name": "get-games-teams", "server": "CFBD API", "description": "Access team game statistics", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve team game statistics"}}, {"name": "get-plays", "server": "CFBD API", "description": "Query play-by-play data", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve play-by-play data"}}, {"name": "get-drives", "server": "CFBD API", "description": "Analyze drive information", "parameter": {}, "task": {"category": "CFBD API", "query": "Analyze drive information in football games"}}, {"name": "get-play-stats", "server": "CFBD API", "description": "View play statistics", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve play statistics"}}, {"name": "get-rankings", "server": "CFBD API", "description": "Check team rankings", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve team rankings"}}, {"name": "get-pregame-win-probability", "server": "CFBD API", "description": "See win probabilities", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve pregame win probabilities"}}, {"name": "get-advanced-box-score", "server": "CFBD API", "description": "Access detailed game statistics and analytics", "parameter": {}, "task": {"category": "CFBD API", "query": "Retrieve detailed game statistics and analytics"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "ChatSum", "description": "Query and summarize chat messages based on given parameters", "tools": [{"name": "query_chat_messages", "server": "ChatSum", "description": "Query chat messages with given parameters and summarize chat messages based on the query prompt.", "parameter": {}, "task": {"category": "ChatSum", "query": "Summarize chat messages based on query parameters"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Chess.com", "description": "Chess.com player and club data retrieval, including: player profiles, stats, online status, titled players, ongoing games, monthly games, game archives, PGN downloads, club profiles, and club members", "tools": [{"name": "get_player_profile", "server": "Chess.com", "description": "Get a player's profile from Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve player profile information"}}, {"name": "get_player_stats", "server": "Chess.com", "description": "Get a player's stats from Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve player statistics"}}, {"name": "is_player_online", "server": "Chess.com", "description": "Check if a player is currently online on Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Check player online status"}}, {"name": "get_titled_players", "server": "Chess.com", "description": "Get a list of titled players from Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve titled players list"}}, {"name": "get_player_current_games", "server": "Chess.com", "description": "Get a player's ongoing games on Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve ongoing games for a player"}}, {"name": "get_player_games_by_month", "server": "Chess.com", "description": "Get a player's games for a specific month from Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve player's games for a specific month"}}, {"name": "get_player_game_archives", "server": "Chess.com", "description": "Get a list of available monthly game archives for a player on Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve monthly game archives for a player"}}, {"name": "download_player_games_pgn", "server": "Chess.com", "description": "Download PGN files for all games in a specific month from Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Download player games in PGN format"}}, {"name": "get_club_profile", "server": "Chess.com", "description": "Get information about a club on Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve club information"}}, {"name": "get_club_members", "server": "Chess.com", "description": "Get members of a club on Chess.com", "parameter": {}, "task": {"category": "Chess.com", "query": "Retrieve club members"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "ClickUp", "description": "1.任务管理，包括创建、更新、删除、移动和复制任务 2.列表和文件夹管理，包括创建、更新和删除 3.标签管理，包括创建、更新、删除和关联任务 4.时间跟踪，包括开始、停止和记录时间条目 5.文档管理，包括创建、获取和更新文档页面", "tools": [{"name": "get_workspace_hierarchy", "server": "ClickUp", "description": "Get workspace structure", "parameter": {}, "task": {"category": "ClickUp", "query": "Retrieve workspace hierarchy"}}, {"name": "create_task", "server": "ClickUp", "description": "Create a task", "parameter": {"name": "(string) The name of the task", "listId": "(Optional, string) The ID of the list where the task will be created", "listName": "(Optional, string) The name of the list where the task will be created"}, "task": {"category": "ClickUp", "query": "Create a new task in a list"}}, {"name": "create_bulk_tasks", "server": "ClickUp", "description": "Create multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to create"}, "task": {"category": "ClickUp", "query": "Create multiple tasks in bulk"}}, {"name": "update_task", "server": "ClickUp", "description": "Modify task", "parameter": {"taskId": "(string) The ID of the task to update", "taskName": "(Optional, string) The name of the task to update"}, "task": {"category": "ClickUp", "query": "Modify task details"}}, {"name": "update_bulk_tasks", "server": "ClickUp", "description": "Update multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to update, each containing IDs or names"}, "task": {"category": "ClickUp", "query": "Update multiple tasks in bulk"}}, {"name": "get_tasks", "server": "ClickUp", "description": "Get tasks from list", "parameter": {"listId": "(string) The ID of the list to get tasks from", "listName": "(Optional, string) The name of the list to get tasks from"}, "task": {"category": "ClickUp", "query": "Retrieve tasks from a specified list"}}, {"name": "get_task", "server": "ClickUp", "description": "Get single task details", "parameter": {"taskId": "(string) The ID of the task to get", "taskName": "(Optional, string) The name of the task to get (with smart disambiguation)"}, "task": {"category": "ClickUp", "query": "Retrieve task details"}}, {"name": "get_workspace_tasks", "server": "ClickUp", "description": "Get tasks with filtering", "parameter": {"tags": "(Optional, array) Tags to filter tasks by", "list_ids": "(Optional, array) List IDs to filter tasks by", "space_ids": "(Optional, array) Space IDs to filter tasks by"}, "task": {"category": "ClickUp", "query": "Retrieve tasks with optional filters"}}, {"name": "get_task_comments", "server": "ClickUp", "description": "Get comments on a task", "parameter": {"taskId": "(string) The ID of the task to get comments from", "taskName": "(Optional, string) The name of the task to get comments from"}, "task": {"category": "ClickUp", "query": "Retrieve comments for a specific task"}}, {"name": "create_task_comment", "server": "ClickUp", "description": "Add a comment to a task", "parameter": {"commentText": "(string) The text of the comment", "taskId": "(string) The ID of the task to add the comment to", "taskName": "(Optional, string) The name of the task to add the comment to", "listName": "(Optional, string) The name of the list containing the task"}, "task": {"category": "ClickUp", "query": "Add comments to tasks"}}, {"name": "attach_task_file", "server": "ClickUp", "description": "Attach file to a task", "parameter": {"taskId": "(string) The ID of the task to attach the file to", "taskName": "(Optional, string) The name of the task to attach the file to", "file_data": "(Optional, string) The file data to attach", "file_url": "(Optional, string) The URL of the file to attach"}, "task": {"category": "ClickUp", "query": "Attach files to tasks"}}, {"name": "delete_task", "server": "ClickUp", "description": "Remove task", "parameter": {"taskId": "(string) The ID of the task to delete", "taskName": "(Optional, string) The name of the task to delete"}, "task": {"category": "ClickUp", "query": "Remove a task from the system"}}, {"name": "delete_bulk_tasks", "server": "ClickUp", "description": "Remove multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to delete, each containing IDs or names"}, "task": {"category": "ClickUp", "query": "Delete multiple tasks in bulk"}}, {"name": "move_task", "server": "ClickUp", "description": "Move task", "parameter": {"taskId": "(string) The ID of the task to move", "taskName": "(Optional, string) The name of the task to move", "listId": "(string) The ID of the target list", "listName": "(Optional, string) The name of the target list"}, "task": {"category": "ClickUp", "query": "Move tasks between lists"}}, {"name": "move_bulk_tasks", "server": "ClickUp", "description": "Move multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to move, each containing IDs or names", "targetList": "(string) The ID or name of the target list"}, "task": {"category": "ClickUp", "query": "Move multiple tasks to a different list"}}, {"name": "duplicate_task", "server": "ClickUp", "description": "Copy task", "parameter": {"taskId": "(string) The ID of the task to duplicate", "taskName": "(Optional, string) The name of the task to duplicate", "listId": "(string) The ID of the target list", "listName": "(Optional, string) The name of the target list"}, "task": {"category": "ClickUp", "query": "Duplicate a task in a list"}}, {"name": "create_list", "server": "ClickUp", "description": "Create list in space", "parameter": {"name": "(string) The name of the list to create", "spaceId": "(string) The ID of the space where the list will be created", "spaceName": "(Optional, string) The name of the space where the list will be created"}, "task": {"category": "ClickUp", "query": "Create a new list in a workspace"}}, {"name": "create_folder", "server": "ClickUp", "description": "Create folder", "parameter": {"name": "(string) The name of the folder to create", "spaceId": "(string) The ID of the space where the folder will be created", "spaceName": "(Optional, string) The name of the space where the folder will be created"}, "task": {"category": "ClickUp", "query": "Create a new folder in a specified space"}}, {"name": "create_list_in_folder", "server": "ClickUp", "description": "Create list in folder", "parameter": {"name": "(string) The name of the list to create", "folderId": "(string) The ID of the folder where the list will be created", "folderName": "(Optional, string) The name of the folder where the list will be created"}, "task": {"category": "ClickUp", "query": "Create a new list within a folder"}}, {"name": "get_folder", "server": "ClickUp", "description": "Get folder details", "parameter": {"folderId": "(string) The ID of the folder to get", "folderName": "(Optional, string) The name of the folder to get"}, "task": {"category": "ClickUp", "query": "Retrieve folder details"}}, {"name": "update_folder", "server": "ClickUp", "description": "Update folder properties", "parameter": {"folderId": "(string) The ID of the folder to update", "folderName": "(Optional, string) The name of the folder to update"}, "task": {"category": "ClickUp", "query": "Update properties of a folder"}}, {"name": "delete_folder", "server": "ClickUp", "description": "Delete folder", "parameter": {"folderId": "(string) The ID of the folder to delete", "folderName": "(Optional, string) The name of the folder to delete"}, "task": {"category": "ClickUp", "query": "Delete a folder from the workspace"}}, {"name": "get_list", "server": "ClickUp", "description": "Get list details", "parameter": {"listId": "(string) The ID of the list to get", "listName": "(Optional, string) The name of the list to get"}, "task": {"category": "ClickUp", "query": "Retrieve details of a specific list"}}, {"name": "update_list", "server": "ClickUp", "description": "Update list properties", "parameter": {"listId": "(string) The ID of the list to update", "listName": "(Optional, string) The name of the list to update"}, "task": {"category": "ClickUp", "query": "Update properties of a list"}}, {"name": "delete_list", "server": "ClickUp", "description": "Delete list", "parameter": {"listId": "(string) The ID of the list to delete", "listName": "(Optional, string) The name of the list to delete"}, "task": {"category": "ClickUp", "query": "Delete a list from the workspace"}}, {"name": "get_space_tags", "server": "ClickUp", "description": "Get space tags", "parameter": {"spaceId": "(string) The ID of the space to get tags from", "spaceName": "(Optional, string) The name of the space to get tags from"}, "task": {"category": "ClickUp", "query": "Retrieve tags from a workspace"}}, {"name": "create_space_tag", "server": "ClickUp", "description": "Create tag", "parameter": {"tagName": "(string) The name of the tag to create", "spaceId": "(string) The ID of the space where the tag will be created", "spaceName": "(Optional, string) The name of the space where the tag will be created"}, "task": {"category": "ClickUp", "query": "Create tags in a workspace"}}, {"name": "update_space_tag", "server": "ClickUp", "description": "Update tag", "parameter": {"tagName": "(string) The name of the tag to update", "spaceId": "(string) The ID of the space where the tag exists", "spaceName": "(Optional, string) The name of the space where the tag exists"}, "task": {"category": "ClickUp", "query": "Update tags in a workspace"}}, {"name": "delete_space_tag", "server": "ClickUp", "description": "Delete tag", "parameter": {"tagName": "(string) The name of the tag to delete", "spaceId": "(string) The ID of the space where the tag exists", "spaceName": "(Optional, string) The name of the space where the tag exists"}, "task": {"category": "ClickUp", "query": "Delete a tag from a space"}}, {"name": "add_tag_to_task", "server": "ClickUp", "description": "Add tag to task", "parameter": {"tagName": "(string) The name of the tag to add", "taskId": "(string) The ID of the task to add the tag to", "taskName": "(Optional, string) The name of the task to add the tag to", "listName": "(Optional, string) The name of the list containing the task"}, "task": {"category": "ClickUp", "query": "Add tags to tasks"}}, {"name": "remove_tag_from_task", "server": "ClickUp", "description": "Remove tag from task", "parameter": {"tagName": "(string) The name of the tag to remove", "taskId": "(string) The ID of the task to remove the tag from", "taskName": "(Optional, string) The name of the task to remove the tag from", "listName": "(Optional, string) The name of the list containing the task"}, "task": {"category": "ClickUp", "query": "Remove tags from tasks"}}, {"name": "get_task_time_entries", "server": "ClickUp", "description": "Get time entries for a task", "parameter": {"taskId": "(string) The ID of the task to get time entries for", "taskName": "(Optional, string) The name of the task to get time entries for"}, "task": {"category": "ClickUp", "query": "Retrieve time entries for a specific task"}}, {"name": "start_time_tracking", "server": "ClickUp", "description": "Start time tracking on a task", "parameter": {"taskId": "(string) The ID of the task to start time tracking on", "taskName": "(Optional, string) The name of the task to start time tracking on"}, "task": {"category": "ClickUp", "query": "Start tracking time for tasks"}}, {"name": "stop_time_tracking", "server": "ClickUp", "description": "Stop current time tracking", "parameter": {}, "task": {"category": "ClickUp", "query": "Stop ongoing time tracking"}}, {"name": "add_time_entry", "server": "ClickUp", "description": "Add manual time entry to a task", "parameter": {"taskId": "(string) The ID of the task to add the time entry to", "taskName": "(Optional, string) The name of the task to add the time entry to", "start": "(string) The start time of the time entry", "duration": "(string) The duration of the time entry"}, "task": {"category": "ClickUp", "query": "Add manual time entry to tasks"}}, {"name": "delete_time_entry", "server": "ClickUp", "description": "Delete a time entry", "parameter": {"timeEntryId": "(string) The ID of the time entry to delete"}, "task": {"category": "ClickUp", "query": "Delete a time entry from the system"}}, {"name": "get_current_time_entry", "server": "ClickUp", "description": "Get currently running timer", "parameter": {}, "task": {"category": "ClickUp", "query": "Retrieve active timer"}}, {"name": "create_document", "server": "ClickUp", "description": "Create a document", "parameter": {"workspaceId": "(string) The ID of the workspace where the document will be created", "name": "(string) The name of the document", "parentId": "(Optional, string) The ID of the parent item", "parentType": "(Optional, string) The type of the parent item", "visibility": "(Optional, string) The visibility of the document", "create_pages": "(Optional, boolean) Whether to create initial pages"}, "task": {"category": "ClickUp", "query": "Create a new document in a workspace"}}, {"name": "get_document", "server": "ClickUp", "description": "Get a document", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(Optional, string) The ID of the document", "creator": "(Optional, string) The creator of the document", "deleted": "(Optional, boolean) Whether to include deleted documents", "archived": "(Optional, boolean) Whether to include archived documents", "parent_id": "(Optional, string) The ID of the parent item", "parent_type": "(Optional, string) The type of the parent item", "limit": "(Optional, integer) The maximum number of documents to return", "next_cursor": "(Optional, string) The cursor for pagination"}, "task": {"category": "ClickUp", "query": "Retrieve documents from a workspace"}}, {"name": "list_documents", "server": "ClickUp", "description": "List documents", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(Optional, string) The ID of the document", "creator": "(Optional, string) The creator of the document", "deleted": "(Optional, boolean) Whether to include deleted documents", "archived": "(Optional, boolean) Whether to include archived documents", "parent_id": "(Optional, string) The ID of the parent item", "parent_type": "(Optional, string) The type of the parent item", "limit": "(Optional, integer) The maximum number of documents to return", "next_cursor": "(Optional, string) The cursor for pagination"}, "task": {"category": "ClickUp", "query": "Retrieve a list of documents with optional filters"}}, {"name": "list_document_pages", "server": "ClickUp", "description": "List document pages", "parameter": {"documentId": "(string) The ID of the document", "documentName": "(Optional, string) The name of the document"}, "task": {"category": "ClickUp", "query": "List pages within a document"}}, {"name": "get_document_pages", "server": "ClickUp", "description": "Get document pages", "parameter": {"documentId": "(string) The ID of the document", "documentName": "(Optional, string) The name of the document", "pageIds": "(Optional, array) The IDs of the pages to get"}, "task": {"category": "ClickUp", "query": "Retrieve document pages"}}, {"name": "create_document_pages", "server": "ClickUp", "description": "Create a document page", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(string) The ID of the document", "parent_page_id": "(Optional, string) The ID of the parent page", "name": "(string) The name of the page", "sub_title": "(Optional, string) The subtitle of the page", "content": "(string) The content of the page", "content_format": "(Optional, string) The format of the content"}, "task": {"category": "ClickUp", "query": "Create a document page in a workspace"}}, {"name": "update_document_page", "server": "ClickUp", "description": "Update a document page", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(string) The ID of the document", "name": "(string) The name of the page", "sub_title": "(Optional, string) The subtitle of the page", "content": "(string) The content of the page", "content_edit_mode": "(Optional, string) The edit mode of the content", "content_format": "(Optional, string) The format of the content"}, "task": {"category": "ClickUp", "query": "Update document pages in a workspace"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Cloudinary", "description": "Upload images and videos to Cloudinary", "tools": [{"name": "upload", "server": "Cloudinary", "description": "Upload images and videos to Cloudinary.", "parameter": {"file": "(required) Path to file, URL, or base64 data URI to upload", "resource_type": "(optional) Type of resource ('image', 'video', or 'raw')", "public_id": "(optional) Custom public ID for the uploaded asset", "overwrite": "(optional) Whether to overwrite existing assets with the same public ID", "tags": "(optional) Array of tags to assign to the uploaded asset"}, "task": {"category": "Cloudinary", "query": "Upload media files to cloud storage"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "code-executor", "description": "1.在配置环境中执行Python代码 2.安装Python包 3.检查已安装的包 4.动态更改环境配置 5.获取当前环境配置", "tools": [{"name": "execute_code", "server": "code-executor", "description": "Executes Python code in the configured environment.", "parameter": {"code": "(string) The Python code to execute", "filename": "(string) The filename to store the generated code"}, "task": {"category": "Python", "query": "Execute Python code in a configured environment"}}, {"name": "install_dependencies", "server": "code-executor", "description": "Installs Python packages in the environment.", "parameter": {"packages": "(array) List of package names to install"}, "task": {"category": "Python", "query": "Install Python packages in the environment"}}, {"name": "check_installed_packages", "server": "code-executor", "description": "Checks if packages are already installed in the environment.", "parameter": {"packages": "(array) List of package names to check"}, "task": {"category": "code-executor", "query": "Check installed packages in the environment"}}, {"name": "configure_environment", "server": "code-executor", "description": "Dynamically changes the environment configuration.", "parameter": {"type": "(string) The type of environment (e.g., 'conda', 'venv')", "conda_name": "(string) The name of the Conda environment to use (if applicable)"}, "task": {"category": "code-executor", "query": "Modify environment settings dynamically"}}, {"name": "get_environment_config", "server": "code-executor", "description": "Gets the current environment configuration.", "parameter": {}, "task": {"category": "code-executor", "query": "Retrieve current environment settings"}}], "domains": [{"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "code-sandbox-mcp", "description": "1. Initialize a compute environment with Docker 2. Copy directories/files to sandboxed filesystem 3. Execute commands in sandboxed environment 4. Stop and remove container sandbox", "tools": [{"name": "sandbox_initialize", "server": "code-sandbox-mcp", "description": "Initialize a new compute environment for code execution. Creates a container based on the specified Docker image.", "parameter": {"image": "(string, optional) Docker image to use as the base environment. Default: 'python:3.12-slim-bookworm'"}, "task": {"category": "code-sandbox-mcp", "query": "Initialize a compute environment for code execution"}}, {"name": "copy_project", "server": "code-sandbox-mcp", "description": "Copy a directory to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "local_src_dir": "(string, required) Path to a directory in the local file system", "dest_dir": "(string, optional) Path to save the src directory in the sandbox environment"}, "task": {"category": "code-sandbox-mcp", "query": "Copy directory to sandboxed filesystem"}}, {"name": "write_file", "server": "code-sandbox-mcp", "description": "Write a file to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "file_name": "(string, required) Name of the file to create", "file_contents": "(string, required) Contents to write to the file", "dest_dir": "(string, optional) Directory to create the file in (Default: ${WORKDIR})"}, "task": {"category": "code-sandbox-mcp", "query": "Write a file to a sandboxed filesystem"}}, {"name": "sandbox_exec", "server": "code-sandbox-mcp", "description": "Execute commands in the sandboxed environment.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "commands": "(array, required) List of command(s) to run in the sandboxed environment"}, "task": {"category": "code-sandbox-mcp", "query": "Run commands in a sandboxed environment"}}, {"name": "copy_file", "server": "code-sandbox-mcp", "description": "Copy a single file to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "local_src_file": "(string, required) Path to a file in the local file system", "dest_path": "(string, optional) Path to save the file in the sandbox environment"}, "task": {"category": "code-sandbox-mcp", "query": "Copy a file to sandboxed filesystem"}}, {"name": "sandbox_stop", "server": "code-sandbox-mcp", "description": "Stop and remove a running container sandbox. Gracefully stops the specified container with a 10-second timeout and removes it along with its volumes.", "parameter": {"container_id": "(string, required) ID of the container to stop and remove"}, "task": {"category": "code-sandbox-mcp", "query": "Stop and remove a running container sandbox"}}], "domains": [{"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "consul-mcp", "description": "Consul服务管理,包括:服务注册与注销、健康检查管理、KV存储操作、会话管理、事件处理、查询执行、集群节点信息获取", "tools": [{"name": "List running services", "server": "consul-mcp", "description": "Lists all currently running services.", "parameter": {}, "task": {"category": "Consul", "query": "List active services"}}, {"name": "Register and deregister services", "server": "consul-mcp", "description": "Registers new services and deregisters existing ones.", "parameter": {}, "task": {"category": "Consul", "query": "Manage service registration and deregistration"}}, {"name": "Get service information", "server": "consul-mcp", "description": "Retrieves detailed information about a specific service.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve detailed service information"}}, {"name": "List catalog services", "server": "consul-mcp", "description": "Lists all services in the Consul catalog.", "parameter": {}, "task": {"category": "Consul", "query": "List all services in the catalog"}}, {"name": "Get catalog service information", "server": "consul-mcp", "description": "Retrieves detailed information about a specific service in the Consul catalog.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve service details from catalog"}}, {"name": "Register health checks", "server": "consul-mcp", "description": "Registers new health checks for services.", "parameter": {}, "task": {"category": "Consul", "query": "Register new health checks for services"}}, {"name": "Deregister health checks", "server": "consul-mcp", "description": "Deregisters existing health checks for services.", "parameter": {}, "task": {"category": "Consul", "query": "Remove existing health checks for services"}}, {"name": "Get health checks for services", "server": "consul-mcp", "description": "Retrieves health check information for specific services.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve health check information for services"}}, {"name": "Get values from KV store", "server": "consul-mcp", "description": "Retrieves values from the Consul key-value store.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve values from key-value store"}}, {"name": "List keys in KV store", "server": "consul-mcp", "description": "Lists all keys in the Consul key-value store.", "parameter": {}, "task": {"category": "Consul", "query": "List all keys in key-value store"}}, {"name": "Put values in KV store", "server": "consul-mcp", "description": "Adds or updates values in the Consul key-value store.", "parameter": {}, "task": {"category": "Consul", "query": "Add or update key-value pairs in the store"}}, {"name": "Delete keys from KV store", "server": "consul-mcp", "description": "Deletes keys from the Consul key-value store.", "parameter": {}, "task": {"category": "Consul", "query": "Remove keys from key-value store"}}, {"name": "List sessions", "server": "consul-mcp", "description": "Lists all active sessions.", "parameter": {}, "task": {"category": "Consul", "query": "List active sessions"}}, {"name": "Destroy sessions", "server": "consul-mcp", "description": "Destroys specified sessions.", "parameter": {}, "task": {"category": "Consul", "query": "Destroy specified sessions"}}, {"name": "Fire events", "server": "consul-mcp", "description": "Fires user-defined events.", "parameter": {}, "task": {"category": "Consul", "query": "Trigger custom events"}}, {"name": "List events", "server": "consul-mcp", "description": "Lists all fired events.", "parameter": {}, "task": {"category": "Consul", "query": "List all fired events"}}, {"name": "Create prepared queries", "server": "consul-mcp", "description": "Creates prepared queries for efficient service discovery.", "parameter": {}, "task": {"category": "Consul", "query": "Create efficient service discovery queries"}}, {"name": "Execute prepared queries", "server": "consul-mcp", "description": "Executes previously created prepared queries.", "parameter": {}, "task": {"category": "Consul", "query": "Execute prepared queries"}}, {"name": "Get current leader", "server": "consul-mcp", "description": "Retrieves the current leader node in the Consul cluster.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve the current leader node in the cluster"}}, {"name": "Get current peers", "server": "consul-mcp", "description": "Retrieves the current peer nodes in the Consul cluster.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve current peer nodes in cluster"}}, {"name": "Get agent members", "server": "consul-mcp", "description": "Retrieves information about the members of the local Consul agent.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve local agent member information"}}, {"name": "Get agent self information", "server": "consul-mcp", "description": "Retrieves information about the local Consul agent itself.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve local agent information"}}, {"name": "Get system health service information", "server": "consul-mcp", "description": "Retrieves system health service information.", "parameter": {}, "task": {"category": "Consul", "query": "Retrieve system health service information"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "cognee-mcp", "description": "1.添加文本到cognee系统 2.从添加的数据生成知识图谱 3.用搜索词查询知识图谱", "tools": [{"name": "add", "server": "cognee-mcp", "description": "Adds text to the cognee system.", "parameter": {"text": "(string) The text to be added."}, "task": {"category": "cognee", "query": "Add text to the system"}}, {"name": "cognify", "server": "cognee-mcp", "description": "Generates a knowledge graph from the added data.", "parameter": {}, "task": {"category": "cognee-mcp", "query": "Generate knowledge graph from data"}}, {"name": "search", "server": "cognee-mcp", "description": "Queries the knowledge graph with a given search term.", "parameter": {"query": "(string) The search term to query the knowledge graph."}, "task": {"category": "cognee-mcp", "query": "Search the knowledge graph"}}], "domains": [{"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "coin_api_mcp", "description": "1.Fetch paginated list of all active cryptocurrencies with market data 2.Retrieve detailed information about a specific cryptocurrency 3.Fetch latest market quotes for cryptocurrencies", "tools": [{"name": "listing-coins", "server": "coin_api_mcp", "description": "Fetches a paginated list of all active cryptocurrencies with the latest market data.", "parameter": {"start": "(integer, optional) Offset the start (1-based index) of the paginated list of items to return.", "limit": "(integer, optional) Number of results to return (default: 10, max: 5000).", "price_min": "(number, optional) Minimum USD price to filter results.", "price_max": "(number, optional) Maximum USD price to filter results.", "market_cap_min": "(number, optional) Minimum market cap to filter results.", "market_cap_max": "(number, optional) Maximum market cap to filter results.", "convert": "(string, optional) Calculate market quotes in multiple currencies.", "sort": "(string, optional) Field to sort the list of cryptocurrencies by.", "sort_dir": "(string, optional) Direction to order cryptocurrencies (asc or desc)."}, "task": {"category": "Cryptocurrency", "query": "Fetch active cryptocurrencies with market data"}}, {"name": "get-coin-info", "server": "coin_api_mcp", "description": "Retrieves detailed information about a specific cryptocurrency.", "parameter": {"id": "(string, optional) One or more comma-separated CoinMarketCap cryptocurrency IDs.", "slug": "(string, optional) A comma-separated list of cryptocurrency slugs.", "symbol": "(string, optional) One or more comma-separated cryptocurrency symbols."}, "task": {"category": "Cryptocurrency", "query": "Retrieve detailed information about cryptocurrencies"}}, {"name": "get-coin-quotes", "server": "coin_api_mcp", "description": "Fetches the latest market quotes for one or more cryptocurrencies.", "parameter": {"id": "(string, optional) One or more comma-separated cryptocurrency CoinMarketCap IDs.", "slug": "(string, optional) A comma-separated list of cryptocurrency slugs.", "symbol": "(string, optional) One or more comma-separated cryptocurrency symbols."}, "task": {"category": "Cryptocurrency", "query": "Fetch latest market quotes for cryptocurrencies"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "CoinMarketCap", "description": "Cryptocurrency data services including: cryptocurrency mapping, metadata retrieval, market quotes, categories, exchange information, DEX data, global metrics, price conversion, API key management, Fear & Greed Index, airdrops, historical data, trending analysis, OHLCV data, price performance statistics, market pairs, news and content, community trends, and blockchain statistics", "tools": [{"name": "cryptoCurrencyMap", "server": "CoinMarketCap", "description": "Get mapping of all cryptocurrencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve mapping of all cryptocurrencies"}}, {"name": "getCryptoMetadata", "server": "CoinMarketCap", "description": "Get metadata for one or more cryptocurrencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve metadata for cryptocurrencies"}}, {"name": "allCryptocurrencyListings", "server": "CoinMarketCap", "description": "Get latest market quote for 1-5000 cryptocurrencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Get latest market quotes for cryptocurrencies"}}, {"name": "cryptoQuotesLatest", "server": "CoinMarketCap", "description": "Get latest market quote for 1 or more cryptocurrencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest market quotes for cryptocurrencies"}}, {"name": "cryptoCategories", "server": "CoinMarketCap", "description": "Get list of all cryptocurrency categories", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve cryptocurrency categories"}}, {"name": "cryptoCategory", "server": "CoinMarketCap", "description": "Get metadata about a cryptocurrency category", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve metadata for cryptocurrency categories"}}, {"name": "exchangeMap", "server": "CoinMarketCap", "description": "Get mapping of all exchanges", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve exchange mapping data"}}, {"name": "exchangeInfo", "server": "CoinMarketCap", "description": "Get metadata for one or more exchanges", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve metadata for exchanges"}}, {"name": "exchangeAssets", "server": "CoinMarketCap", "description": "Get list of all assets available on an exchange", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve available assets on an exchange"}}, {"name": "dexInfo", "server": "CoinMarketCap", "description": "Get metadata for one or more decentralised exchanges", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve metadata for decentralised exchanges"}}, {"name": "dexListingsLatest", "server": "CoinMarketCap", "description": "Get latest market data for all DEXes", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest DEX market data"}}, {"name": "dexNetworksList", "server": "CoinMarketCap", "description": "Get list of all networks with unique IDs", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve list of all networks with unique IDs"}}, {"name": "dexSpotPairsLatest", "server": "CoinMarketCap", "description": "Get latest market data for all active DEX spot pairs", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest market data for DEX spot pairs"}}, {"name": "dexPairsQuotesLatest", "server": "CoinMarketCap", "description": "Get latest market quotes for spot pairs", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Get latest market quotes for spot pairs"}}, {"name": "dexPairsOhlcvLatest", "server": "CoinMarketCap", "description": "Get latest OHLCV data for spot pairs", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest OHLCV data for spot trading pairs"}}, {"name": "dexPairsOhlcvHistorical", "server": "CoinMarketCap", "description": "Get historical OHLCV data for spot pairs", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical OHLCV data for spot trading pairs"}}, {"name": "dexPairsTradeLatest", "server": "CoinMarketCap", "description": "Get latest trades for spot pairs", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest trades for spot pairs"}}, {"name": "globalMetricsLatest", "server": "CoinMarketCap", "description": "Get latest global cryptocurrency metrics", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest global cryptocurrency metrics"}}, {"name": "cmc100IndexLatest", "server": "CoinMarketCap", "description": "Get latest CoinMarketCap 100 Index value and constituents", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest index value and constituents"}}, {"name": "cmc100IndexHistorical", "server": "CoinMarketCap", "description": "Get historical CoinMarketCap 100 Index values", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical index values for top 100 cryptocurrencies"}}, {"name": "priceConversion", "server": "CoinMarketCap", "description": "Convert an amount of one cryptocurrency or fiat currency into another", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Convert cryptocurrency or fiat currency amounts"}}, {"name": "getPostmanCollection", "server": "CoinMarketCap", "description": "Get Postman collection for the API", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve Postman collection for API"}}, {"name": "fiatMap", "server": "CoinMarketCap", "description": "Get mapping of all fiat currencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve fiat currency mappings"}}, {"name": "keyInfo", "server": "CoinMarketCap", "description": "Get API key usage and status", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve API key information"}}, {"name": "fearAndGreedLatest", "server": "CoinMarketCap", "description": "Get latest Fear & Greed Index", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve the latest Fear & Greed Index"}}, {"name": "fearAndGreedHistorical", "server": "CoinMarketCap", "description": "Get historical Fear & Greed Index values", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical Fear & Greed Index data"}}, {"name": "cryptoAirdrops", "server": "CoinMarketCap", "description": "Get list of all cryptocurrency airdrops", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve cryptocurrency airdrops list"}}, {"name": "cryptoAirdrop", "server": "CoinMarketCap", "description": "Get metadata about a specific airdrop", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve metadata for cryptocurrency airdrops"}}, {"name": "historicalCryptocurrencyListings", "server": "CoinMarketCap", "description": "Get historical market quotes for any cryptocurrency", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical market data for cryptocurrencies"}}, {"name": "cryptoQuotesHistorical", "server": "CoinMarketCap", "description": "Get historical market quotes for any cryptocurrency", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical market data for cryptocurrencies"}}, {"name": "cryptoQuotesHistoricalV3", "server": "CoinMarketCap", "description": "Get historical market quotes with advanced time-based intervals", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical cryptocurrency market data"}}, {"name": "exchangeQuotesHistorical", "server": "CoinMarketCap", "description": "Get historical quotes for any exchange", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical exchange quotes"}}, {"name": "globalMetricsHistorical", "server": "CoinMarketCap", "description": "Get historical global cryptocurrency metrics", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical cryptocurrency metrics"}}, {"name": "newCryptocurrencyListings", "server": "CoinMarketCap", "description": "Get list of most recently added cryptocurrencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest cryptocurrency listings"}}, {"name": "cryptoTrendingGainersLosers", "server": "CoinMarketCap", "description": "Get biggest gainers and losers in a given time period", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve top cryptocurrency gainers and losers"}}, {"name": "cryptoTrendingLatest", "server": "CoinMarketCap", "description": "Get top cryptocurrencies by search volume", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve trending cryptocurrencies"}}, {"name": "cryptoTrendingMostVisited", "server": "CoinMarketCap", "description": "Get most visited cryptocurrencies", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve trending cryptocurrencies"}}, {"name": "cryptoOhlcvLatest", "server": "CoinMarketCap", "description": "Get latest OHLCV market data for any cryptocurrency", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest OHLCV data for cryptocurrencies"}}, {"name": "cryptoOhlcvHistorical", "server": "CoinMarketCap", "description": "Get historical OHLCV market data for any cryptocurrency", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve historical market data for cryptocurrencies"}}, {"name": "cryptoPricePerformanceStatsLatest", "server": "CoinMarketCap", "description": "Get price performance statistics for any cryptocurrency", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve cryptocurrency price performance statistics"}}, {"name": "cryptoMarketPairsLatest", "server": "CoinMarketCap", "description": "Get latest market pairs for any cryptocurrency", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest market pairs for cryptocurrencies"}}, {"name": "exchangeListingsLatest", "server": "CoinMarketCap", "description": "Get latest market data for all exchanges", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest market data for exchanges"}}, {"name": "exchangeMarketPairsLatest", "server": "CoinMarketCap", "description": "Get latest market pairs for any exchange", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest market pairs for exchanges"}}, {"name": "exchangeQuotesLatest", "server": "CoinMarketCap", "description": "Get latest market quotes for one or more exchanges", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Get latest market quotes for exchanges"}}, {"name": "contentLatest", "server": "CoinMarketCap", "description": "Get latest cryptocurrency news and content", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Get latest cryptocurrency news"}}, {"name": "contentPostsTop", "server": "CoinMarketCap", "description": "Get top cryptocurrency posts", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve top cryptocurrency posts"}}, {"name": "contentPostsLatest", "server": "CoinMarketCap", "description": "Get latest cryptocurrency posts", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest cryptocurrency posts"}}, {"name": "contentPostsComments", "server": "CoinMarketCap", "description": "Get comments for a specific post", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve comments on a post"}}, {"name": "communityTrendingTopic", "server": "CoinMarketCap", "description": "Get trending topics in the cryptocurrency community", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Get trending topics in cryptocurrency"}}, {"name": "communityTrendingToken", "server": "CoinMarketCap", "description": "Get trending tokens in the cryptocurrency community", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve trending cryptocurrency tokens"}}, {"name": "blockchainStatisticsLatest", "server": "CoinMarketCap", "description": "Get latest statistics for one or more blockchains", "parameter": {}, "task": {"category": "CoinMarketCap", "query": "Retrieve latest blockchain statistics"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Computer-Use - Remote MacOS Use", "description": "Remote macOS machine interaction, including: desktop screenshot capture, keyboard input simulation, mouse movement/click/double-click/scroll/drag-and-drop operations, and application launching", "tools": [{"name": "remote_macos_get_screen", "server": "Computer-Use - Remote MacOS Use", "description": "Connect to a remote macOS machine and get a screenshot of the remote desktop.", "parameter": {}, "task": {"category": "Remote MacOS", "query": "Capture screenshot from remote macOS desktop"}}, {"name": "remote_macos_send_keys", "server": "Computer-Use - Remote MacOS Use", "description": "Send keyboard input to a remote macOS machine.", "parameter": {}, "task": {"category": "Remote MacOS", "query": "Send keyboard input to a remote machine"}}, {"name": "remote_macos_mouse_move", "server": "Computer-Use - Remote MacOS Use", "description": "Move the mouse cursor to specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": {"category": "Remote MacOS Use", "query": "Move mouse cursor on remote macOS machine"}}, {"name": "remote_macos_mouse_click", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse click at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": {"category": "Remote MacOS", "query": "Perform mouse click on remote macOS machine"}}, {"name": "remote_macos_mouse_double_click", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse double-click at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": {"category": "Remote MacOS", "query": "Perform mouse double-click on remote macOS"}}, {"name": "remote_macos_mouse_scroll", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse scroll at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": {"category": "Remote MacOS", "query": "Control mouse scroll on remote macOS"}}, {"name": "remote_macos_open_application", "server": "Computer-Use - Remote MacOS Use", "description": "Opens/activates an application and returns its PID for further interactions.", "parameter": {}, "task": {"category": "MacOS", "query": "Open or activate an application remotely"}}, {"name": "remote_macos_mouse_drag_n_drop", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse drag operation from start point and drop to end point on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": {"category": "Remote MacOS", "query": "Perform mouse drag and drop operations on remote macOS"}}], "domains": [{"name": "Remote Desktop Control", "description": "远程桌面控制，包括屏幕捕获、输入模拟（键盘/鼠标）、应用程序控制及自动化操作"}]}
{"name": "Contentful-mcp", "description": "Contentful CMS operations including: entry search, creation, retrieval, update, deletion, publishing, unpublishing, bulk operations; asset listing, upload, retrieval, update, deletion, publishing, unpublishing; space listing and details; environment listing, creation, deletion; content type listing, creation, update, deletion, publishing", "tools": [{"name": "search_entries", "server": "Contentful-mcp", "description": "Search for entries using query parameters", "parameter": {}, "task": {"category": "Contentful", "query": "Search for entries in a CMS"}}, {"name": "create_entry", "server": "Contentful-mcp", "description": "Create new entries", "parameter": {}, "task": {"category": "Contentful", "query": "Create new content entries"}}, {"name": "get_entry", "server": "Contentful-mcp", "description": "Retrieve existing entries", "parameter": {}, "task": {"category": "Contentful", "query": "Retrieve existing entries from Contentful"}}, {"name": "update_entry", "server": "Contentful-mcp", "description": "Update entry fields", "parameter": {}, "task": {"category": "Contentful", "query": "Update content entry fields"}}, {"name": "delete_entry", "server": "Contentful-mcp", "description": "Remove entries", "parameter": {}, "task": {"category": "Contentful", "query": "Remove content entries"}}, {"name": "publish_entry", "server": "Contentful-mcp", "description": "Publish entries", "parameter": {}, "task": {"category": "Contentful", "query": "Publish content entries"}}, {"name": "unpublish_entry", "server": "Contentful-mcp", "description": "Unpublish entries", "parameter": {}, "task": {"category": "Contentful", "query": "Unpublish content entries"}}, {"name": "bulk_publish", "server": "Contentful-mcp", "description": "Publish multiple entries and assets in a single operation. Accepts an array of entities (entries and assets) and processes their publication as a batch.", "parameter": {}, "task": {"category": "Contentful", "query": "Publish multiple entries and assets in bulk"}}, {"name": "bulk_unpublish", "server": "Contentful-mcp", "description": "Unpublish multiple entries and assets in a single operation. Similar to bulk_publish but removes content from the delivery API.", "parameter": {}, "task": {"category": "Contentful", "query": "Unpublish multiple entries and assets"}}, {"name": "bulk_validate", "server": "Contentful-mcp", "description": "Validate multiple entries for content consistency, references, and required fields. Returns validation results without modifying content.", "parameter": {}, "task": {"category": "Contentful", "query": "Validate multiple entries for content consistency"}}, {"name": "list_assets", "server": "Contentful-mcp", "description": "List assets with pagination (3 items per page)", "parameter": {}, "task": {"category": "Contentful", "query": "List assets with pagination"}}, {"name": "upload_asset", "server": "Contentful-mcp", "description": "Upload new assets with metadata", "parameter": {}, "task": {"category": "Contentful", "query": "Upload new assets with metadata"}}, {"name": "get_asset", "server": "Contentful-mcp", "description": "Retrieve asset details and information", "parameter": {}, "task": {"category": "Contentful", "query": "Retrieve asset details"}}, {"name": "update_asset", "server": "Contentful-mcp", "description": "Update asset metadata and files", "parameter": {}, "task": {"category": "Contentful", "query": "Update metadata and files for assets"}}, {"name": "delete_asset", "server": "Contentful-mcp", "description": "Remove assets from space", "parameter": {}, "task": {"category": "Contentful", "query": "Remove assets from a space"}}, {"name": "publish_asset", "server": "Contentful-mcp", "description": "Publish assets to delivery API", "parameter": {}, "task": {"category": "Contentful", "query": "Publish assets to delivery API"}}, {"name": "unpublish_asset", "server": "Contentful-mcp", "description": "Unpublish assets from delivery API", "parameter": {}, "task": {"category": "Contentful", "query": "Unpublish assets from delivery API"}}, {"name": "list_spaces", "server": "Contentful-mcp", "description": "List available spaces", "parameter": {}, "task": {"category": "Contentful", "query": "List available spaces"}}, {"name": "get_space", "server": "Contentful-mcp", "description": "Get space details", "parameter": {}, "task": {"category": "Contentful", "query": "Retrieve space details"}}, {"name": "list_environments", "server": "Contentful-mcp", "description": "List environments in a space", "parameter": {}, "task": {"category": "Contentful", "query": "List environments within a space"}}, {"name": "create_environment", "server": "Contentful-mcp", "description": "Create new environment", "parameter": {}, "task": {"category": "Contentful", "query": "Create a new environment"}}, {"name": "delete_environment", "server": "Contentful-mcp", "description": "Remove environment", "parameter": {}, "task": {"category": "Contentful", "query": "Remove an environment"}}, {"name": "list_content_types", "server": "Contentful-mcp", "description": "List available content types", "parameter": {}, "task": {"category": "Contentful", "query": "List available content types"}}, {"name": "get_content_type", "server": "Contentful-mcp", "description": "Get content type details", "parameter": {}, "task": {"category": "Contentful", "query": "Retrieve content type details"}}, {"name": "create_content_type", "server": "Contentful-mcp", "description": "Create new content type", "parameter": {}, "task": {"category": "Contentful", "query": "Create new content type"}}, {"name": "update_content_type", "server": "Contentful-mcp", "description": "Update content type", "parameter": {}, "task": {"category": "Contentful", "query": "Modify content type structure"}}, {"name": "delete_content_type", "server": "Contentful-mcp", "description": "Remove content type", "parameter": {}, "task": {"category": "Contentful", "query": "Delete content type"}}, {"name": "publish_content_type", "server": "Contentful-mcp", "description": "Publish a content type", "parameter": {}, "task": {"category": "Contentful", "query": "Publish content types"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "crypto-feargreed-mcp", "description": "1. Retrieve the latest Fear & Greed Index value and classification 2. Fetch historical index values for specified days 3. Analyze trends with statistics like average value and trend direction", "tools": [{"name": "get_current_fng_tool", "server": "crypto-feargreed-mcp", "description": "Retrieves the latest Fear & Greed Index value and classification.", "parameter": {}, "task": {"category": "Cryptocurrency", "query": "Retrieve the latest Fear & Greed Index"}}, {"name": "get_historical_fng_tool", "server": "crypto-feargreed-mcp", "description": "Fetches historical index values for a specified number of days.", "parameter": {"days": "(int) Number of days to fetch historical data for."}, "task": {"category": "Cryptocurrency", "query": "Retrieve historical index values"}}, {"name": "analyze_fng_trend", "server": "crypto-feargreed-mcp", "description": "Analyzes trends over time with statistics like average value and trend direction.", "parameter": {"days": "(int) Number of days to analyze the trend for."}, "task": {"category": "Cryptocurrency", "query": "Analyze fear and greed index trends"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "cryptopanic-mcp-server", "description": "Fetch cryptocurrency news, analysis, or videos from CryptoPanic", "tools": [{"name": "get_crypto_news", "server": "cryptopanic-mcp-server", "description": "Fetches cryptocurrency news, analysis, or videos from CryptoPanic.", "parameter": {"kind": "(str) Content type (news, analysis, videos)", "num_pages": "(Optional, int) Number of pages to fetch (default: 1, max: 10)"}, "task": {"category": "CryptoPanic", "query": "Fetch cryptocurrency news, analysis, or videos"}}], "domains": [{"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Databricks", "description": "1.在Databricks SQL仓库上执行SQL查询 2.列出所有Databricks作业 3.通过ID获取特定Databricks作业的状态 4.获取特定Databricks作业的详细信息", "tools": [{"name": "run_sql_query", "server": "Databricks", "description": "Execute SQL queries on your Databricks SQL warehouse", "parameter": {"sql": "(str) The SQL query to execute"}, "task": {"category": "Databricks", "query": "Execute SQL queries on a data warehouse"}}, {"name": "list_jobs", "server": "Databricks", "description": "List all Databricks jobs in your workspace", "parameter": {}, "task": {"category": "Databricks", "query": "List all jobs in workspace"}}, {"name": "get_job_status", "server": "Databricks", "description": "Get the status of a specific Databricks job by ID", "parameter": {"job_id": "(int) The ID of the Databricks job"}, "task": {"category": "Databricks", "query": "Retrieve job status by ID"}}, {"name": "get_job_details", "server": "Databricks", "description": "Get detailed information about a specific Databricks job", "parameter": {"job_id": "(int) The ID of the Databricks job"}, "task": {"category": "Databricks", "query": "Retrieve detailed information about a job"}}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}]}
{"name": "Datadog", "description": "1. Fetch monitors with optional filtering 2. Get details of a specific monitor by ID 3. List all dashboards 4. Get a specific dashboard by ID 5. List available metrics 6. Get metadata for a specific metric 7. Fetch events within a time range 8. List incidents with optional filtering 9. Search logs with advanced query filtering 10. Perform analytics and aggregations on log data", "tools": [{"name": "get-monitors", "server": "Datadog", "description": "Fetch monitors with optional filtering", "parameter": {"groupStates": "(Optional, array) States to filter monitors by", "limit": "(Optional, number) Maximum number of monitors to return"}, "task": {"category": "Datadog", "query": "Retrieve monitors with filtering options"}}, {"name": "get-monitor", "server": "Datadog", "description": "Get details of a specific monitor by ID", "parameter": {"monitorId": "(string) ID of the monitor to fetch"}, "task": {"category": "Datadog", "query": "Retrieve monitor details by ID"}}, {"name": "get-dashboards", "server": "Datadog", "description": "List all dashboards", "parameter": {}, "task": {"category": "Datadog", "query": "List all available dashboards"}}, {"name": "get-dashboard", "server": "Datadog", "description": "Get a specific dashboard by ID", "parameter": {"dashboardId": "(string) ID of the dashboard to fetch"}, "task": {"category": "Datadog", "query": "Retrieve dashboard by ID"}}, {"name": "get-metrics", "server": "Datadog", "description": "List available metrics", "parameter": {}, "task": {"category": "Datadog", "query": "List available metrics"}}, {"name": "get-metric-metadata", "server": "Datadog", "description": "Get metadata for a specific metric", "parameter": {"metricName": "(string) Name of the metric to fetch metadata for"}, "task": {"category": "Datadog", "query": "Retrieve metadata for a specific metric"}}, {"name": "get-events", "server": "Datadog", "description": "Fetch events within a time range", "parameter": {"start": "(number) Start time in milliseconds since epoch", "end": "(number) End time in milliseconds since epoch", "priority": "(Optional, string) Priority of events to fetch", "tags": "(Optional, array) Tags to filter events by"}, "task": {"category": "Datadog", "query": "Retrieve events within a specified time range"}}, {"name": "get-incidents", "server": "Datadog", "description": "List incidents with optional filtering", "parameter": {"includeArchived": "(Optional, boolean) Include archived incidents", "query": "(Optional, string) Query to filter incidents by", "pageSize": "(Optional, number) Number of incidents to return per page"}, "task": {"category": "Datadog", "query": "List and filter incidents"}}, {"name": "search-logs", "server": "Datadog", "description": "Search logs with advanced query filtering", "parameter": {"filter": "(object) Filter object containing query, from, and to", "sort": "(Optional, string) Sorting order (e.g., -timestamp)", "limit": "(Optional, number) Maximum number of logs to return"}, "task": {"category": "Datadog", "query": "Search and filter logs with advanced queries"}}, {"name": "aggregate-logs", "server": "Datadog", "description": "Perform analytics and aggregations on log data", "parameter": {"filter": "(object) Filter object containing query, from, and to", "compute": "(array) Array of compute objects for aggregations", "groupBy": "(array) Array of groupBy objects for grouping results"}, "task": {"category": "Datadog", "query": "Analyze and aggregate log data"}}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Data Exploration", "description": "1. Load CSV files into a DataFrame 2. Execute Python scripts", "tools": [{"name": "load-csv", "server": "Data Exploration", "description": "Loads a CSV file into a DataFrame.", "parameter": {"csv_path": "(string, required) Path to the CSV file", "df_name": "(string, optional) Name for the DataFrame. Defaults to df_1, df_2, etc., if not provided"}, "task": {"category": "Data Exploration", "query": "Load data from a CSV file into a DataFrame"}}, {"name": "run-script", "server": "Data Exploration", "description": "Executes a Python script.", "parameter": {"script": "(string, required) The script to execute"}, "task": {"category": "Python", "query": "Execute a Python script"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "DaVinci Resolve", "description": "DaVinci Resolve操作，包括：获取版本和当前页面信息、切换页面、项目管理（创建、打开、保存、列出）、时间线管理（创建、切换、添加标记）、媒体池操作（列出剪辑、导入媒体文件、创建媒体箱、添加剪辑到时间线）", "tools": [{"name": "get_da_vinci_resolve_version", "server": "DaVinci Resolve", "description": "Gets the version of DaVinci Resolve currently running.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "Check current software version"}}, {"name": "get_current_page", "server": "DaVinci Resolve", "description": "Gets the current page (e.g., Edit, Color, Fusion) in DaVinci Resolve.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "Retrieve the current active page"}}, {"name": "switch_page", "server": "DaVinci Resolve", "description": "Switches the current page in DaVinci Resolve.", "parameter": {"page": "(string) The page to switch to (e.g., 'Edit', 'Color', 'Fusion')."}, "task": {"category": "DaVinci Resolve", "query": "Navigate between different pages in the software"}}, {"name": "list_projects", "server": "DaVinci Resolve", "description": "Lists all available projects in DaVinci Resolve.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "List available projects"}}, {"name": "get_current_project_name", "server": "DaVinci Resolve", "description": "Gets the name of the current project in DaVinci Resolve.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "Retrieve the current project name"}}, {"name": "open_project", "server": "DaVinci Resolve", "description": "Opens a project by name in DaVinci Resolve.", "parameter": {"project_name": "(string) The name of the project to open."}, "task": {"category": "DaVinci Resolve", "query": "Open a project by name"}}, {"name": "create_new_project", "server": "DaVinci Resolve", "description": "Creates a new project in DaVinci Resolve.", "parameter": {"project_name": "(string) The name of the new project."}, "task": {"category": "DaVinci Resolve", "query": "Create a new project"}}, {"name": "save_current_project", "server": "DaVinci Resolve", "description": "Saves the current project in DaVinci Resolve.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "Save the current project"}}, {"name": "list_timelines", "server": "DaVinci Resolve", "description": "Lists all timelines in the current project.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "List all timelines in a project"}}, {"name": "get_current_timeline_info", "server": "DaVinci Resolve", "description": "Gets information about the current timeline.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "Retrieve current timeline details"}}, {"name": "create_new_timeline", "server": "DaVinci Resolve", "description": "Creates a new timeline in the current project.", "parameter": {"timeline_name": "(string) The name of the new timeline."}, "task": {"category": "DaVinci Resolve", "query": "Create a new timeline in a project"}}, {"name": "switch_to_timeline", "server": "DaVinci Resolve", "description": "Switches to a timeline by name.", "parameter": {"timeline_name": "(string) The name of the timeline to switch to."}, "task": {"category": "DaVinci Resolve", "query": "Switch between timelines"}}, {"name": "add_marker_to_timeline", "server": "DaVinci Resolve", "description": "Adds a marker to the current timeline.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "Add markers to video timeline"}}, {"name": "list_media_pool_clips", "server": "DaVinci Resolve", "description": "Lists all clips in the media pool.", "parameter": {}, "task": {"category": "DaVinci Resolve", "query": "List all clips in media pool"}}, {"name": "import_media_file", "server": "DaVinci Resolve", "description": "Imports a media file into the media pool.", "parameter": {"file_path": "(string) The path to the media file to import."}, "task": {"category": "DaVinci Resolve", "query": "Import media files into the media pool"}}, {"name": "create_media_bin", "server": "DaVinci Resolve", "description": "Creates a new media bin in the media pool.", "parameter": {"bin_name": "(string) The name of the new media bin."}, "task": {"category": "DaVinci Resolve", "query": "Create a new media bin in the media pool"}}, {"name": "add_clip_to_timeline", "server": "DaVinci Resolve", "description": "Adds a clip to the current timeline.", "parameter": {"clip_name": "(string) The name of the clip to add."}, "task": {"category": "DaVinci Resolve", "query": "Add media clips to timeline"}}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Dataset Viewer", "description": "1.验证数据集是否存在并可访问 2.获取数据集详细信息 3.获取数据集分页内容 4.获取数据集分割的首行 5.获取数据集分割的统计信息 6.在数据集中搜索文本 7.使用类似SQL的条件过滤行 8.以Parquet格式下载整个数据集", "tools": [{"name": "validate", "server": "Dataset Viewer", "description": "Check if a dataset exists and is accessible", "parameter": {"dataset": "string, Dataset identifier (e.g. 'stanfordnlp/imdb')", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Check dataset accessibility"}}, {"name": "get_info", "server": "Dataset Viewer", "description": "Get detailed information about a dataset", "parameter": {"dataset": "string, Dataset identifier", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Retrieve detailed information about datasets"}}, {"name": "get_rows", "server": "Dataset Viewer", "description": "Get paginated contents of a dataset", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "page": "(Optional, integer) Page number (0-based)", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Retrieve paginated dataset contents"}}, {"name": "get_first_rows", "server": "Dataset Viewer", "description": "Get first rows from a dataset split", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Retrieve initial rows from a dataset"}}, {"name": "get_statistics", "server": "Dataset Viewer", "description": "Get statistics about a dataset split", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Retrieve statistics for a dataset split"}}, {"name": "search_dataset", "server": "Dataset Viewer", "description": "Search for text within a dataset", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "query": "string, Text to search for", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Search text in datasets"}}, {"name": "filter", "server": "Dataset Viewer", "description": "Filter rows using SQL-like conditions", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "where": "string, SQL WHERE clause (e.g. 'score > 0.5')", "orderby": "(Optional, string) SQL ORDER BY clause", "page": "(Optional, integer) Page number (0-based)", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Filter dataset rows with SQL-like conditions"}}, {"name": "get_parquet", "server": "Dataset Viewer", "description": "Download entire dataset in Parquet format", "parameter": {"dataset": "string, Dataset identifier", "auth_token": "(Optional, string) For private datasets"}, "task": {"category": "Dataset Viewer", "query": "Download dataset in Parquet format"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "DBHub", "description": "1.在连接的数据库上执行SQL查询 2.列出可用的数据库连接器 3.根据上下文生成SQL语句 4.解释数据库元素（如表、索引和过程）", "tools": [{"name": "execute_sql", "server": "DBHub", "description": "Executes SQL queries on the connected database.", "parameter": {"dsn": "(string) The database connection string.", "sql": "(string) The SQL query to execute."}, "task": {"category": "DBHub", "query": "Execute SQL queries on a database"}}, {"name": "list_connectors", "server": "DBHub", "description": "Lists available connectors for database connections.", "parameter": {}, "task": {"category": "DBHub", "query": "List available database connectors"}}, {"name": "generate_sql", "server": "DBHub", "description": "Generates SQL statements based on the provided context.", "parameter": {"context": "(string) The context for generating the SQL statement."}, "task": {"category": "DBHub", "query": "Generate SQL statements from context"}}, {"name": "explain_db", "server": "DBHub", "description": "Explains database elements such as tables, indexes, and procedures.", "parameter": {"element_type": "(string) The type of database element to explain (e.g., 'table', 'index', 'procedure').", "element_name": "(string) The name of the database element to explain."}, "task": {"category": "DBHub", "query": "Explain database elements"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Deepseek_R1", "description": "Generate advanced text using the Deepseek R1 model with configurable parameters", "tools": [{"name": "deepseek_r1", "server": "Deepseek_R1", "description": "Generates advanced text using the Deepseek R1 model with configurable parameters.", "parameter": {"prompt": "(string) The input prompt for text generation", "max_tokens": "(number) Maximum tokens to generate", "temperature": "(number) Controls randomness, default is 0.2"}, "task": {"category": "Deepseek", "query": "Generate advanced text with configurable parameters"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "deepseek-thinker-mcp", "description": "Perform reasoning using the Deepseek model", "tools": [{"name": "get-deepseek-thinker", "server": "deepseek-thinker-mcp", "description": "Perform reasoning using the Deepseek model", "parameter": {"originPrompt": "(string) User's original prompt"}, "task": {"category": "deepseek-thinker-mcp", "query": "Perform reasoning tasks"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Descope", "description": "1. Retrieve audit log entries from Descope project 2. Retrieve user records from Descope project 3. Create new user in Descope project 4. Invite new user to Descope project", "tools": [{"name": "search-audits", "server": "Descope", "description": "Retrieves up to 10 audit log entries from your Descope project.", "parameter": {}, "task": {"category": "Descope", "query": "Retrieve audit log entries"}}, {"name": "search-users", "server": "Descope", "description": "Retrieves up to 10 user records from your Descope project.", "parameter": {}, "task": {"category": "Descope", "query": "Retrieve user records from project"}}, {"name": "create-user", "server": "Descope", "description": "Creates a new user in your Descope project.", "parameter": {}, "task": {"category": "Descope", "query": "Create a new user in the project"}}, {"name": "invite-user", "server": "Descope", "description": "Invites a new user to your Descope project.", "parameter": {}, "task": {"category": "Descope", "query": "Invite a new user to a project"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "DevDb", "description": "1. Copy MCP settings for IDE and AI-tool integration 2. Open database tables from external applications via URI", "tools": [{"name": "MCP Configuration", "server": "DevDb", "description": "Allows copying of MCP settings to integrate with IDEs and AI-tools for database access.", "parameter": {}, "task": {"category": "DevDb", "query": "Copy MCP settings for integration with IDEs and AI-tools"}}, {"name": "URI Handler", "server": "DevDb", "description": "Enables opening specific database tables directly from external applications or links.", "parameter": {"connectionId": "(string) The ID of the database connection", "database": "(string) The database name", "table": "(string) The table name to open", "workspace": "(Optional, string) The workspace path", "authority": "(Optional, string) The authority for the URI"}, "task": {"category": "DevDb", "query": "Open database tables from external sources"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "DevRev", "description": "1. Search for information using the DevRev search API 2. Get all information about a DevRev object using its ID", "tools": [{"name": "search", "server": "DevRev", "description": "Search for information using the DevRev search API with the provided query and namespace.", "parameter": {}, "task": {"category": "DevRev", "query": "Search for information using a query and namespace"}}, {"name": "get_object", "server": "DevRev", "description": "Get all information about a DevRev object using its ID.", "parameter": {}, "task": {"category": "DevRev", "query": "Retrieve information about an object by ID"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Dicom", "description": "1.查询患者、研究、系列和实例数据 2.从DICOM实例中提取PDF文本 3.发送DICOM系列或研究到其他节点 4.管理DICOM节点连接和配置 5.获取元数据查询结果的详细级别", "tools": [{"name": "query_patients", "server": "Dicom", "description": "Search for patients based on criteria like name, ID, or birth date.", "parameter": {}, "task": {"category": "Dicom", "query": "Search for patients using specific criteria"}}, {"name": "query_studies", "server": "Dicom", "description": "Find studies using patient ID, date, modality, description, accession number, or Study UID.", "parameter": {}, "task": {"category": "Dicom", "query": "Search for medical studies using various criteria"}}, {"name": "query_series", "server": "Dicom", "description": "Locate series within a specific study using modality, series number/description, or Series UID.", "parameter": {}, "task": {"category": "Dicom", "query": "Find series in a study using various criteria"}}, {"name": "query_instances", "server": "Dicom", "description": "Find individual instances (images/objects) within a series using instance number or SOP Instance UID.", "parameter": {}, "task": {"category": "Dicom", "query": "Find specific instances within a series"}}, {"name": "extract_pdf_text_from_dicom", "server": "Dicom", "description": "Retrieve a specific DICOM instance containing an encapsulated PDF and extract its text content.", "parameter": {}, "task": {"category": "Dicom", "query": "Extract text from PDF in DICOM files"}}, {"name": "move_series", "server": "Dicom", "description": "Send a specific DICOM series to another configured DICOM node using C-MOVE.", "parameter": {}, "task": {"category": "Dicom", "query": "Transfer DICOM series to another node"}}, {"name": "move_study", "server": "Dicom", "description": "Send an entire DICOM study to another configured DICOM node using C-MOVE.", "parameter": {}, "task": {"category": "Dicom", "query": "Transfer DICOM study to another node"}}, {"name": "list_dicom_nodes", "server": "Dicom", "description": "Show the currently active DICOM node and list all configured nodes.", "parameter": {}, "task": {"category": "Dicom", "query": "List active and configured DICOM nodes"}}, {"name": "switch_dicom_node", "server": "Dicom", "description": "Change the active DICOM node for subsequent operations.", "parameter": {}, "task": {"category": "Dicom", "query": "Change active DICOM node"}}, {"name": "verify_connection", "server": "Dicom", "description": "Test the DICOM network connection to the currently active node using C-ECHO.", "parameter": {}, "task": {"category": "DICOM", "query": "Test network connection to DICOM node"}}, {"name": "get_attribute_presets", "server": "Dicom", "description": "List the available levels of detail (minimal, standard, extended) for metadata query results.", "parameter": {}, "task": {"category": "Dicom", "query": "List available metadata detail levels"}}], "domains": [{"name": "Healthcare Service", "description": "医疗健康服务,包括在线问诊、电子病历、健康数据记录及医疗资源预约"}, {"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Discord", "description": "1.向指定Discord频道发送消息 2.从指定Discord频道读取最近消息", "tools": [{"name": "send-message", "server": "Discord", "description": "Sends a message to a specified Discord channel.", "parameter": {"server": "(Optional, string) Server name or ID (required if bot is in multiple servers)", "channel": "(string) Channel name (e.g., 'general') or ID", "message": "(string) Message content to send"}, "task": {"category": "Discord", "query": "Send messages to a channel"}}, {"name": "read-messages", "server": "Discord", "description": "Reads recent messages from a specified Discord channel.", "parameter": {"server": "(Optional, string) Server name or ID (required if bot is in multiple servers)", "channel": "(string) Channel name (e.g., 'general') or ID", "limit": "(Optional, number) Number of messages to fetch (default: 50, max: 100)"}, "task": {"category": "Discord", "query": "Retrieve recent messages from a channel"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Discourse", "description": "Search posts on a Discourse forum", "tools": [{"name": "search_posts", "server": "Discourse", "description": "Searches posts on a Discourse forum.", "parameter": {"query": "(string) The search query to use."}, "task": {"category": "Discourse", "query": "Search for posts on a forum"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Docker", "description": "Docker容器管理,包括:容器列表、创建、运行、重启、启动、日志获取、停止、删除; Docker镜像管理,包括:镜像列表、拉取、推送、构建、删除; Docker网络管理,包括:网络列表、创建、删除; Docker卷管理,包括:卷列表、创建、删除", "tools": [{"name": "list_containers", "server": "Docker", "description": "Lists all existing containers.", "parameter": {}, "task": {"category": "Docker", "query": "List all containers"}}, {"name": "create_container", "server": "Docker", "description": "Creates a new container.", "parameter": {}, "task": {"category": "Docker", "query": "Create a new container"}}, {"name": "run_container", "server": "Docker", "description": "Runs a container.", "parameter": {}, "task": {"category": "Docker", "query": "Run a container"}}, {"name": "recreate_container", "server": "Docker", "description": "Recreates a container.", "parameter": {}, "task": {"category": "Docker", "query": "Recreate a container"}}, {"name": "start_container", "server": "Docker", "description": "Starts a container.", "parameter": {}, "task": {"category": "Docker", "query": "Start a container"}}, {"name": "fetch_container_logs", "server": "Docker", "description": "Fetches logs from a container.", "parameter": {}, "task": {"category": "Docker", "query": "Retrieve logs from a container"}}, {"name": "stop_container", "server": "Docker", "description": "Stops a container.", "parameter": {}, "task": {"category": "Docker", "query": "Stop a running container"}}, {"name": "remove_container", "server": "Docker", "description": "Removes a container.", "parameter": {}, "task": {"category": "Docker", "query": "Remove a container"}}, {"name": "list_images", "server": "Docker", "description": "Lists all Docker images.", "parameter": {}, "task": {"category": "Docker", "query": "List all available Docker images"}}, {"name": "pull_image", "server": "Docker", "description": "Pulls a Docker image from a registry.", "parameter": {}, "task": {"category": "Docker", "query": "Pull images from a registry"}}, {"name": "push_image", "server": "Docker", "description": "Pushes a Docker image to a registry.", "parameter": {}, "task": {"category": "Docker", "query": "Push Docker images to a registry"}}, {"name": "build_image", "server": "Docker", "description": "Builds a Docker image from a Dockerfile.", "parameter": {}, "task": {"category": "Docker", "query": "Build Docker images from Dockerfile"}}, {"name": "remove_image", "server": "Docker", "description": "Removes a Docker image.", "parameter": {}, "task": {"category": "Docker", "query": "Remove a Docker image"}}, {"name": "list_networks", "server": "Docker", "description": "Lists all Docker networks.", "parameter": {}, "task": {"category": "Docker", "query": "List all networks in Docker"}}, {"name": "create_network", "server": "Docker", "description": "Creates a new Docker network.", "parameter": {}, "task": {"category": "Docker", "query": "Create a new network"}}, {"name": "remove_network", "server": "Docker", "description": "Removes a Docker network.", "parameter": {}, "task": {"category": "Docker", "query": "Remove a Docker network"}}, {"name": "list_volumes", "server": "Docker", "description": "Lists all Docker volumes.", "parameter": {}, "task": {"category": "Docker", "query": "List all volumes in Docker"}}, {"name": "create_volume", "server": "Docker", "description": "Creates a new Docker volume.", "parameter": {}, "task": {"category": "Docker", "query": "Create a new volume"}}, {"name": "remove_volume", "server": "Docker", "description": "Removes a Docker volume.", "parameter": {}, "task": {"category": "Docker", "query": "Remove a Docker volume"}}], "domains": [{"name": "Visual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "DPLP", "description": "DBLP学术出版物检索与导出，包括：布尔查询、模糊标题匹配、作者出版物检索、出版物场地信息获取、统计计算及BibTeX导出", "tools": [{"name": "search", "server": "DPLP", "description": "Search DBLP for publications using boolean queries.", "parameter": {"query": "(string, required) A query string that may include boolean operators 'and' and 'or' (case-insensitive)", "max_results": "(number, optional) Maximum number of publications to return. Default is 10", "year_from": "(number, optional) Lower bound for publication year", "year_to": "(number, optional) Upper bound for publication year", "venue_filter": "(string, optional) Case-insensitive substring filter for publication venues (e.g., 'iclr')", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}, "task": {"category": "DBLP", "query": "Search for academic publications with boolean queries"}}, {"name": "fuzzy_title_search", "server": "DPLP", "description": "Search publications with fuzzy title matching.", "parameter": {"title": "(string, required) Full or partial title of the publication (case-insensitive)", "similarity_threshold": "(number, required) A float between 0 and 1 where 1.0 means an exact match", "max_results": "(number, optional) Maximum number of publications to return. Default is 10", "year_from": "(number, optional) Lower bound for publication year", "year_to": "(number, optional) Upper bound for publication year", "venue_filter": "(string, optional) Case-insensitive substring filter for publication venues", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}, "task": {"category": "DPLP", "query": "Search publications by title with fuzzy matching"}}, {"name": "get_author_publications", "server": "DPLP", "description": "Retrieve publication details for a specific author with fuzzy matching.", "parameter": {"author_name": "(string, required) Full or partial author name (case-insensitive)", "similarity_threshold": "(number, required) A float between 0 and 1 where 1.0 means an exact match", "max_results": "(number, optional) Maximum number of publications to return. Default is 20", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}, "task": {"category": "DPLP", "query": "Retrieve publications by author name with fuzzy matching"}}, {"name": "get_venue_info", "server": "DPLP", "description": "Retrieve detailed information about a publication venue.", "parameter": {"venue_name": "(string, required) Venue name or abbreviation (e.g., 'ICLR' or full name)"}, "task": {"category": "DPLP", "query": "Retrieve publication venue details"}}, {"name": "calculate_statistics", "server": "DPLP", "description": "Calculate statistics from a list of publication results.", "parameter": {"results": "(array, required) An array of publication objects, each with at least 'title', 'authors', 'venue', and 'year'"}, "task": {"category": "DPLP", "query": "Calculate statistics from publication data"}}, {"name": "export_bibtex", "server": "DPLP", "description": "Export BibTeX entries directly from DBLP to a local file.", "parameter": {"links": "(string, required) HTML string containing one or more <a href=biburl>key</a> links"}, "task": {"category": "DBLP", "query": "Export BibTeX entries from DBLP"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "dune-analytics-mcp", "description": "1. Retrieve the latest results of a specified Dune query 2. Execute a Dune query and return the results", "tools": [{"name": "get_latest_result", "server": "dune-analytics-mcp", "description": "Retrieves the latest results of a specified Dune query.", "parameter": {"query_id": "(int) The ID of the Dune query."}, "task": {"category": "Dune Analytics", "query": "Retrieve latest query results"}}, {"name": "run_query", "server": "dune-analytics-mcp", "description": "Executes a Dune query and returns the results.", "parameter": {"query_id": "(int) The ID of the Dune query to run."}, "task": {"category": "Dune Analytics", "query": "Execute a query and retrieve results"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "EdgeOne Pages MCP", "description": "Deploy HTML content to EdgeOne Pages and return a publicly accessible URL", "tools": [{"name": "deploy-html", "server": "EdgeOne Pages MCP", "description": "Deploys HTML content to EdgeOne Pages and returns a publicly accessible URL.", "parameter": {}, "task": {"category": "EdgeOne Pages", "query": "Deploy HTML content for public access"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "ElevenLabs", "description": "1.使用默认语音设置从纯文本生成音频 2.从结构化脚本生成多语音和演员的音频 3.按ID删除作业 4.按ID获取音频文件 5.列出所有可用语音 6.获取语音作业历史记录", "tools": [{"name": "generate_audio_simple", "server": "ElevenLabs", "description": "Generate audio from plain text using default voice settings", "parameter": {}, "task": {"category": "ElevenLabs", "query": "Generate audio from text"}}, {"name": "generate_audio_script", "server": "ElevenLabs", "description": "Generate audio from a structured script with multiple voices and actors", "parameter": {}, "task": {"category": "ElevenLabs", "query": "Generate audio from structured scripts"}}, {"name": "delete_job", "server": "ElevenLabs", "description": "Delete a job by its ID", "parameter": {}, "task": {"category": "ElevenLabs", "query": "Delete a specific job"}}, {"name": "get_audio_file", "server": "ElevenLabs", "description": "Get the audio file by its ID", "parameter": {}, "task": {"category": "ElevenLabs", "query": "Retrieve audio file by ID"}}, {"name": "list_voices", "server": "ElevenLabs", "description": "List all available voices", "parameter": {}, "task": {"category": "ElevenLabs", "query": "List available voices"}}, {"name": "get_voiceover_history", "server": "ElevenLabs", "description": "Get voiceover job history. Optionally specify a job ID for a specific job.", "parameter": {"job_id": "(Optional, string) The ID of the specific job to retrieve history for"}, "task": {"category": "ElevenLabs", "query": "Retrieve history of voiceover jobs"}}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "EVM MCP Server", "description": "1.获取ERC20代币元数据 2.检查ERC20代币余额 3.转移ERC20代币 4.批准代币支出 5.获取NFT元数据 6.验证NFT所有权 7.转移NFT 8.计算拥有的NFT数量 9.获取ERC1155元数据 10.检查ERC1155余额 11.转移ERC1155代币 12.获取网络信息 13.获取原生代币余额 14.发送原生代币 15.获取交易详情 16.读取智能合约状态 17.写入智能合约 18.检查地址是否为合约 19.解析ENS名称到地址", "tools": [{"name": "get-token-info", "server": "EVM MCP Server", "description": "Get ERC20 token metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the token", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Retrieve metadata for ERC20 tokens"}}, {"name": "get-token-balance", "server": "EVM MCP Server", "description": "Check ERC20 token balance", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the token", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Check balance of ERC20 tokens"}}, {"name": "transfer-token", "server": "EVM MCP Server", "description": "Transfer ERC20 tokens", "parameter": {"privateKey": "(string) The private key of the sender", "tokenAddress": "(address/ENS) The address or ENS name of the token", "toAddress": "(address/ENS) The address or ENS name of the recipient", "amount": "(number) The amount of tokens to transfer", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Transfer ERC20 tokens between addresses"}}, {"name": "approve-token-spending", "server": "EVM MCP Server", "description": "Approve token allowances", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the token", "spenderAddress": "(address/ENS) The address or ENS name of the spender", "amount": "(number) The amount of tokens to approve", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Approve token spending allowances"}}, {"name": "get-nft-info", "server": "EVM MCP Server", "description": "Get NFT metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Retrieve metadata for NFTs"}}, {"name": "check-nft-ownership", "server": "EVM MCP Server", "description": "Verify NFT ownership", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Verify ownership of an NFT"}}, {"name": "transfer-nft", "server": "EVM MCP Server", "description": "Transfer an NFT", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "toAddress": "(address/ENS) The address or ENS name of the recipient", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Transfer NFT to another address"}}, {"name": "get-nft-balance", "server": "EVM MCP Server", "description": "Count NFTs owned", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Retrieve NFT balance for an owner"}}, {"name": "get-erc1155-token-uri", "server": "EVM MCP Server", "description": "Get ERC1155 metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Retrieve metadata for ERC1155 tokens"}}, {"name": "get-erc1155-balance", "server": "EVM MCP Server", "description": "Check ERC1155 balance", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Check balance of ERC1155 tokens"}}, {"name": "transfer-erc1155", "server": "EVM MCP Server", "description": "Transfer ERC1155 tokens", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "amount": "(number) The amount of tokens to transfer", "toAddress": "(address/ENS) The address or ENS name of the recipient", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Transfer ERC1155 tokens between addresses"}}, {"name": "get-chain-info", "server": "EVM MCP Server", "description": "Get network information", "parameter": {"network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Retrieve network information"}}, {"name": "get-balance", "server": "EVM MCP Server", "description": "Get native token balance", "parameter": {"address": "(address/ENS) The address or ENS name of the account", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Retrieve native token balance for an account"}}, {"name": "transfer-eth", "server": "EVM MCP Server", "description": "Send native tokens", "parameter": {"privateKey": "(string) The private key of the sender", "to": "(address/ENS) The address or ENS name of the recipient", "amount": "(number) The amount of native tokens to transfer", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Transfer native tokens on EVM"}}, {"name": "get-transaction", "server": "EVM MCP Server", "description": "Get transaction details", "parameter": {"txHash": "(string) The transaction hash", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Retrieve transaction details"}}, {"name": "read-contract", "server": "EVM MCP Server", "description": "Read smart contract state", "parameter": {"contractAddress": "(address/ENS) The address or ENS name of the contract", "abi": "(array) The ABI of the contract", "functionName": "(string) The name of the function to call", "args": "(array) The arguments to pass to the function", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Read state from a smart contract"}}, {"name": "write-contract", "server": "EVM MCP Server", "description": "Write to smart contract", "parameter": {"contractAddress": "(address/ENS) The address or ENS name of the contract", "abi": "(array) The ABI of the contract", "functionName": "(string) The name of the function to call", "args": "(array) The arguments to pass to the function", "privateKey": "(string) The private key of the caller", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Interact with smart contracts"}}, {"name": "is-contract", "server": "EVM MCP Server", "description": "Check if address is a contract", "parameter": {"address": "(address/ENS) The address or ENS name to check", "network": "(string) The network identifier"}, "task": {"category": "EVM", "query": "Verify if an address is a contract"}}, {"name": "resolve-ens", "server": "EVM MCP Server", "description": "Resolve ENS name to address", "parameter": {"ensName": "(string) The ENS name to resolve", "network": "(string) The network identifier"}, "task": {"category": "Ethereum", "query": "Resolve ENS names to addresses"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}]}
{"name": "Everything Search", "description": "Search for files and folders across the system", "tools": [{"name": "search", "server": "Everything Search", "description": "Search for files and folders across the system. The search capabilities and syntax support vary by platform.", "parameter": {"query": "(required) Search query string. See platform-specific notes below.", "max_results": "(optional, integer) Maximum number of results to return (default: 100, max: 1000)", "match_path": "(optional, boolean) Match against full path instead of filename only (default: false)", "match_case": "(optional, boolean) Enable case-sensitive search (default: false)", "match_whole_word": "(optional, boolean) Match whole words only (default: false)", "match_regex": "(optional, boolean) Enable regex search (default: false)", "sort_by": "(optional, integer) Sort order for results (default: 1). Available options: 1 (filename A to Z), 2 (filename Z to A), 3 (path A to Z), 4 (path Z to A), 5 (size smallest first), 6 (size largest first), 7 (extension A to Z), 8 (extension Z to A), 11 (creation date oldest first), 12 (creation date newest first), 13 (modification date oldest first), 14 (modification date newest first)"}, "task": {"category": "Everything Search", "query": "Search for files and folders on the system"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Fantasy PL", "description": "Fantasy Premier League (FPL) data analysis and management, including: gameweek status retrieval, player fixture analysis, blank/double gameweek information, player comparison, team viewing, and authentication checks", "tools": [{"name": "get_gameweek_status", "server": "Fantasy PL", "description": "Get precise information about current, previous, and next gameweeks", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Retrieve gameweek details"}}, {"name": "analyze_player_fixtures", "server": "Fantasy PL", "description": "Analyze upcoming fixtures for a player with difficulty ratings", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Analyze player fixtures with difficulty ratings"}}, {"name": "get_blank_gameweeks", "server": "Fantasy PL", "description": "Get information about upcoming blank gameweeks", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Retrieve details on upcoming blank gameweeks"}}, {"name": "get_double_gameweeks", "server": "Fantasy PL", "description": "Get information about upcoming double gameweeks", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Retrieve upcoming double gameweeks information"}}, {"name": "analyze_players", "server": "Fantasy PL", "description": "Filter and analyze FPL players based on multiple criteria", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Filter and analyze players based on criteria"}}, {"name": "analyze_fixtures", "server": "Fantasy PL", "description": "Analyze upcoming fixtures for players, teams, or positions", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Analyze upcoming fixtures for players, teams, or positions"}}, {"name": "compare_players", "server": "Fantasy PL", "description": "Compare multiple players across various metrics", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Compare players based on different metrics"}}, {"name": "check_fpl_authentication", "server": "Fantasy PL", "description": "Check if FPL authentication is working correctly", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Verify FPL authentication status"}}, {"name": "get_my_team", "server": "Fantasy PL", "description": "View your authenticated team (requires authentication)", "parameter": {}, "task": {"category": "Fantasy PL", "query": "View authenticated team details"}}, {"name": "get_team", "server": "Fantasy PL", "description": "View any team with a specific ID (requires authentication)", "parameter": {}, "task": {"category": "Fantasy PL", "query": "View team details by ID"}}, {"name": "get_manager_info", "server": "Fantasy PL", "description": "Get manager details (requires authentication)", "parameter": {}, "task": {"category": "Fantasy PL", "query": "Retrieve manager details"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Fetch", "description": "Fetch website content in various formats including HTML, JSON, plain text, and Markdown", "tools": [{"name": "fetch_html", "server": "Fetch", "description": "Fetch a website and return the content as HTML", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": {"category": "Fetch", "query": "Retrieve website content in HTML format"}}, {"name": "fetch_json", "server": "Fetch", "description": "Fetch a JSON file from a URL", "parameter": {"url": "(string, required): URL of the JSON to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": {"category": "Fetch", "query": "Retrieve JSON data from a specified URL"}}, {"name": "fetch_txt", "server": "Fetch", "description": "Fetch a website and return the content as plain text (no HTML)", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": {"category": "Fetch", "query": "Retrieve website content as plain text"}}, {"name": "fetch_markdown", "server": "Fetch", "description": "Fetch a website and return the content as Markdown", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": {"category": "Fetch", "query": "Convert website content to Markdown"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Firebase", "description": "1.文件上传与管理，包括从文本、base64内容或本地路径上传文件，以及从外部URL导入文件 2.Firestore文档操作，包括添加、列出、获取、更新、删除文档，以及列出根集合和查询子集合 3.文件系统操作，包括列出目录中的文件和获取文件元数据及URL 4.用户认证，包括通过ID或电子邮件获取用户信息", "tools": [{"name": "storage_upload", "server": "Firebase", "description": "Upload files from text, base64 content, or local file paths", "parameter": {"filePath": "(string) The path where the file will be stored in Firebase Storage", "content": "(string) The content of the file to upload, can be a local file path, base64 data URL, or plain text"}, "task": {"category": "Firebase", "query": "Upload files to cloud storage"}}, {"name": "storage_upload_from_url", "server": "Firebase", "description": "Import files directly from external URLs", "parameter": {"filePath": "(string) The path where the file will be stored in Firebase Storage", "url": "(string) The external URL of the file to upload"}, "task": {"category": "Firebase", "query": "Upload files from external URLs to storage"}}, {"name": "firestore_add_document", "server": "Firebase", "description": "Add a document to a collection", "parameter": {"collection": "(string) The name of the collection", "data": "(object) The data to add to the document"}, "task": {"category": "Firebase", "query": "Add data to a Firestore collection"}}, {"name": "firestore_list_documents", "server": "Firebase", "description": "List documents with filtering", "parameter": {"collection": "(string) The name of the collection"}, "task": {"category": "Firebase", "query": "List documents from a Firestore collection"}}, {"name": "firestore_get_document", "server": "Firebase", "description": "Get a specific document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document"}, "task": {"category": "Firebase", "query": "Retrieve a document from Firestore"}}, {"name": "firestore_update_document", "server": "Firebase", "description": "Update an existing document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document", "data": "(object) The data to update in the document"}, "task": {"category": "Firebase", "query": "Update documents in Firestore database"}}, {"name": "firestore_delete_document", "server": "Firebase", "description": "Delete a document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document"}, "task": {"category": "Firebase", "query": "Delete a document from Firestore"}}, {"name": "firestore_list_collections", "server": "Firebase", "description": "List root collections", "parameter": {}, "task": {"category": "Firebase", "query": "List root collections in Firestore"}}, {"name": "firestore_query_collection_group", "server": "Firebase", "description": "Query across subcollections", "parameter": {"collectionId": "(string) The ID of the collection group"}, "task": {"category": "Firebase", "query": "Query across subcollections in Firestore"}}, {"name": "storage_list_files", "server": "Firebase", "description": "List files in a directory", "parameter": {"directoryPath": "(Optional, string) The path of the directory to list files from"}, "task": {"category": "Firebase", "query": "List files in a specified directory"}}, {"name": "storage_get_file_info", "server": "Firebase", "description": "Get file metadata and URL", "parameter": {"filePath": "(string) The path of the file in Firebase Storage"}, "task": {"category": "Firebase", "query": "Retrieve file metadata and URL from storage"}}, {"name": "auth_get_user", "server": "Firebase", "description": "Get user by ID or email", "parameter": {"identifier": "(string) The user ID or email"}, "task": {"category": "Firebase", "query": "Retrieve user information by ID or email"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "FireCrawl", "description": "Firecrawl web content scraping and analysis, including: single URL scraping, batch URL scraping with rate limiting, batch operation status checking, web search with content extraction, asynchronous crawling, structured information extraction using LLM, deep web research with LLM analysis, and llms.txt file generation", "tools": [{"name": "firecrawl_scrape", "server": "FireCrawl", "description": "Scrape content from a single URL with advanced options.", "parameter": {"url": "(string) The URL to scrape.", "formats": "(array) List of formats to return the content in (e.g., ['markdown']).", "onlyMainContent": "(boolean) Whether to only extract the main content.", "waitFor": "(number) Time to wait for page elements to load (in milliseconds).", "timeout": "(number) Maximum time to wait for the scrape operation (in milliseconds).", "mobile": "(boolean) Whether to emulate a mobile device.", "includeTags": "(array) List of HTML tags to include in the scrape.", "excludeTags": "(array) List of HTML tags to exclude from the scrape.", "skipTlsVerification": "(boolean) Whether to skip TLS verification."}, "task": {"category": "FireCrawl", "query": "Scrape content from a URL with customizable options"}}, {"name": "firecrawl_batch_scrape", "server": "FireCrawl", "description": "Scrape multiple URLs efficiently with built-in rate limiting and parallel processing.", "parameter": {"urls": "(array) List of URLs to scrape.", "options": "(object) Additional options for the scrape operation, including 'formats' and 'onlyMainContent'."}, "task": {"category": "FireCrawl", "query": "Scrape multiple URLs efficiently"}}, {"name": "firecrawl_check_batch_status", "server": "FireCrawl", "description": "Check the status of a batch operation.", "parameter": {"id": "(string) The ID of the batch operation to check."}, "task": {"category": "FireCrawl", "query": "Check the status of a batch operation"}}, {"name": "firecrawl_search", "server": "FireCrawl", "description": "Search the web and optionally extract content from search results.", "parameter": {"query": "(string) The search query.", "limit": "(number) Maximum number of results to return.", "lang": "(string) Language for the search.", "country": "(string) Country for the search.", "scrapeOptions": "(object) Additional options for scraping the search results, including 'formats' and 'onlyMainContent'."}, "task": {"category": "FireCrawl", "query": "Search and extract web content"}}, {"name": "firecrawl_crawl", "server": "FireCrawl", "description": "Start an asynchronous crawl with advanced options.", "parameter": {"url": "(string) The starting URL for the crawl.", "maxDepth": "(number) Maximum recursive depth for the crawl.", "limit": "(number) Maximum number of URLs to crawl.", "allowExternalLinks": "(boolean) Whether to follow external links.", "deduplicateSimilarURLs": "(boolean) Whether to deduplicate similar URLs."}, "task": {"category": "FireCrawl", "query": "Start an asynchronous web crawl with advanced options"}}, {"name": "firecrawl_extract", "server": "FireCrawl", "description": "Extract structured information from web pages using LLM capabilities.", "parameter": {"urls": "(array) List of URLs to extract information from.", "prompt": "(string) Custom prompt for the LLM extraction.", "systemPrompt": "(string) System prompt to guide the LLM.", "schema": "(object) JSON schema for structured data extraction.", "allowExternalLinks": "(boolean) Allow extraction from external links.", "enableWebSearch": "(boolean) Enable web search for additional context.", "includeSubdomains": "(boolean) Include subdomains in extraction."}, "task": {"category": "FireCrawl", "query": "Extract structured data from web pages using LLM"}}, {"name": "firecrawl_deep_research", "server": "FireCrawl", "description": "Conduct deep web research on a query using intelligent crawling, search, and LLM analysis.", "parameter": {"query": "(string, required) The research question or topic to explore.", "maxDepth": "(number, optional) Maximum recursive depth for crawling/search (default: 3).", "timeLimit": "(number, optional) Time limit in seconds for the research session (default: 120).", "maxUrls": "(number, optional) Maximum number of URLs to analyze (default: 50)."}, "task": {"category": "FireCrawl", "query": "Perform deep web research on a topic"}}, {"name": "firecrawl_generate_llmstxt", "server": "FireCrawl", "description": "Generate a standardized llms.txt (and optionally llms-full.txt) file for a given domain.", "parameter": {"url": "(string, required) The base URL of the website to analyze.", "maxUrls": "(number, optional) Max number of URLs to include (default: 10).", "showFullText": "(boolean, optional) Whether to include llms-full.txt contents in the response."}, "task": {"category": "FireCrawl", "query": "Generate standardized llms.txt files for a website"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Ghost", "description": "1.管理文章、成员、新闻简报、优惠、邀请、角色、标签、层级、用户和Webhooks的增删改查操作", "tools": [{"name": "Browse Posts", "server": "Ghost", "description": "List posts with optional filters, pagination, and ordering.", "parameter": {}, "task": {"category": "Ghost", "query": "List and filter posts"}}, {"name": "Read Post", "server": "Ghost", "description": "Retrieve a post by ID or slug.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve a post by ID or slug"}}, {"name": "Add Post", "server": "Ghost", "description": "Create a new post with title, content, and status.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new post"}}, {"name": "Edit Post", "server": "Ghost", "description": "Update an existing post by ID.", "parameter": {}, "task": {"category": "Ghost", "query": "Update an existing post"}}, {"name": "Delete Post", "server": "Ghost", "description": "Remove a post by ID.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove a post"}}, {"name": "Browse Members", "server": "Ghost", "description": "List members with filters and pagination.", "parameter": {}, "task": {"category": "Ghost", "query": "List members with filters and pagination"}}, {"name": "Read Member", "server": "Ghost", "description": "Retrieve a member by ID or email.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve member details"}}, {"name": "Add Member", "server": "Ghost", "description": "Create a new member.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new member"}}, {"name": "Edit Member", "server": "Ghost", "description": "Update member details.", "parameter": {}, "task": {"category": "Ghost", "query": "Update member information"}}, {"name": "Delete Member", "server": "Ghost", "description": "Remove a member.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove a member from the platform"}}, {"name": "Browse Newsletters", "server": "Ghost", "description": "List newsletters.", "parameter": {}, "task": {"category": "Ghost", "query": "List available newsletters"}}, {"name": "Read Newsletter", "server": "Ghost", "description": "Retrieve a newsletter by ID.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve newsletters by ID"}}, {"name": "Add Newsletter", "server": "Ghost", "description": "Create a new newsletter.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new newsletter"}}, {"name": "Edit Newsletter", "server": "Ghost", "description": "Update newsletter details.", "parameter": {}, "task": {"category": "Ghost", "query": "Update newsletter details"}}, {"name": "Delete Newsletter", "server": "Ghost", "description": "Remove a newsletter.", "parameter": {}, "task": {"category": "Ghost", "query": "Delete a newsletter"}}, {"name": "Browse Offers", "server": "Ghost", "description": "List offers.", "parameter": {}, "task": {"category": "Ghost", "query": "List available offers"}}, {"name": "Read Offer", "server": "Ghost", "description": "Retrieve an offer by ID.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve an offer by ID"}}, {"name": "Add Offer", "server": "Ghost", "description": "Create a new offer.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new offer"}}, {"name": "Edit Offer", "server": "Ghost", "description": "Update offer details.", "parameter": {}, "task": {"category": "Ghost", "query": "Update details of an offer"}}, {"name": "Delete Offer", "server": "Ghost", "description": "Remove an offer.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove an offer"}}, {"name": "Browse Invites", "server": "Ghost", "description": "List invites.", "parameter": {}, "task": {"category": "Ghost", "query": "List available invites"}}, {"name": "Add Invite", "server": "Ghost", "description": "Create a new invite.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new invite"}}, {"name": "Delete Invite", "server": "Ghost", "description": "Remove an invite.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove an invite"}}, {"name": "Browse Roles", "server": "Ghost", "description": "List roles.", "parameter": {}, "task": {"category": "Ghost", "query": "List available roles"}}, {"name": "Read Role", "server": "Ghost", "description": "Retrieve a role by ID.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve role information"}}, {"name": "Browse Tags", "server": "Ghost", "description": "List tags.", "parameter": {}, "task": {"category": "Ghost", "query": "List available tags"}}, {"name": "Read Tag", "server": "Ghost", "description": "Retrieve a tag by ID or slug.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve tag information"}}, {"name": "Add Tag", "server": "Ghost", "description": "Create a new tag.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new tag"}}, {"name": "Edit Tag", "server": "Ghost", "description": "Update tag details.", "parameter": {}, "task": {"category": "Ghost", "query": "Update tag information"}}, {"name": "Delete Tag", "server": "Ghost", "description": "Remove a tag.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove a tag from the system"}}, {"name": "Browse Tiers", "server": "Ghost", "description": "List tiers.", "parameter": {}, "task": {"category": "Ghost", "query": "List available tiers"}}, {"name": "Read Tier", "server": "Ghost", "description": "Retrieve a tier by ID.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve tier information by ID"}}, {"name": "Add Tier", "server": "Ghost", "description": "Create a new tier.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new tier"}}, {"name": "Edit Tier", "server": "Ghost", "description": "Update tier details.", "parameter": {}, "task": {"category": "Ghost", "query": "Update membership tier details"}}, {"name": "Delete Tier", "server": "Ghost", "description": "Remove a tier.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove a tier"}}, {"name": "Browse Users", "server": "Ghost", "description": "List users.", "parameter": {}, "task": {"category": "Ghost", "query": "List users"}}, {"name": "Read User", "server": "Ghost", "description": "Retrieve a user by ID or slug.", "parameter": {}, "task": {"category": "Ghost", "query": "Retrieve user information"}}, {"name": "Edit User", "server": "Ghost", "description": "Update user details.", "parameter": {}, "task": {"category": "Ghost", "query": "Update user information"}}, {"name": "Delete User", "server": "Ghost", "description": "Remove a user.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove a user from the system"}}, {"name": "Browse Webhooks", "server": "Ghost", "description": "List webhooks.", "parameter": {}, "task": {"category": "Ghost", "query": "List available webhooks"}}, {"name": "Add Webhook", "server": "Ghost", "description": "Create a new webhook.", "parameter": {}, "task": {"category": "Ghost", "query": "Create a new webhook"}}, {"name": "Delete Webhook", "server": "Ghost", "description": "Remove a webhook.", "parameter": {}, "task": {"category": "Ghost", "query": "Remove a webhook"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Git", "description": "Git版本控制操作,包括:状态查看、差异比较、提交记录、分支管理、仓库初始化、推送至远程仓库", "tools": [{"name": "git_status", "server": "Git", "description": "Shows the working tree status", "parameter": {}, "task": {"category": "Git", "query": "Check the status of the working tree"}}, {"name": "git_diff_unstaged", "server": "Git", "description": "Shows changes in the working directory that are not yet staged", "parameter": {}, "task": {"category": "Git", "query": "View unstaged changes in working directory"}}, {"name": "git_diff_staged", "server": "Git", "description": "Shows changes that are staged for commit", "parameter": {}, "task": {"category": "Git", "query": "View staged changes for commit"}}, {"name": "git_diff", "server": "Git", "description": "Shows differences between branches or commits", "parameter": {}, "task": {"category": "Git", "query": "Compare differences between branches or commits"}}, {"name": "git_commit", "server": "Git", "description": "Records changes to the repository", "parameter": {}, "task": {"category": "Git", "query": "Record changes in a repository"}}, {"name": "git_add", "server": "Git", "description": "Adds file contents to the staging area", "parameter": {}, "task": {"category": "Git", "query": "Add files to the staging area"}}, {"name": "git_reset", "server": "Git", "description": "Unstages all staged changes", "parameter": {}, "task": {"category": "Git", "query": "Unstage all staged changes"}}, {"name": "git_log", "server": "Git", "description": "Shows the commit logs", "parameter": {}, "task": {"category": "Git", "query": "View commit history"}}, {"name": "git_create_branch", "server": "Git", "description": "Creates a new branch from an optional base branch", "parameter": {}, "task": {"category": "Git", "query": "Create a new branch in a repository"}}, {"name": "git_checkout", "server": "Git", "description": "Switches branches", "parameter": {}, "task": {"category": "Git", "query": "Switch between branches"}}, {"name": "git_show", "server": "Git", "description": "Shows the contents of a commit", "parameter": {}, "task": {"category": "Git", "query": "Display commit contents"}}, {"name": "git_init", "server": "Git", "description": "Initialize a new Git repository", "parameter": {}, "task": {"category": "Git", "query": "Initialize a new repository"}}, {"name": "git_push", "server": "Git", "description": "Pushes local commits to a remote repository (requires --write-access flag)", "parameter": {}, "task": {"category": "Git", "query": "Push local commits to remote repository"}}, {"name": "git_list_repositories", "server": "Git", "description": "Lists all available Git repositories", "parameter": {}, "task": {"category": "Git", "query": "List all available repositories"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Github Actions", "description": "GitHub workflows management, including: listing workflows, getting workflow details and usage statistics, listing and managing workflow runs, triggering, canceling, and re-running workflows", "tools": [{"name": "list_workflows", "server": "Github Actions", "description": "List workflows in a GitHub repository", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": {"category": "Github Actions", "query": "List workflows in a repository"}}, {"name": "get_workflow", "server": "Github Actions", "description": "Get details of a specific workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename"}, "task": {"category": "Github Actions", "query": "Retrieve workflow details"}}, {"name": "get_workflow_usage", "server": "Github Actions", "description": "Get usage statistics of a workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename"}, "task": {"category": "Github Actions", "query": "Retrieve workflow usage statistics"}}, {"name": "list_workflow_runs", "server": "Github Actions", "description": "List all workflow runs for a repository or a specific workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(optional string or number) The ID of the workflow or filename", "actor": "(optional string) Filter by user who triggered the workflow", "branch": "(optional string) Filter by branch", "event": "(optional string) Filter by event type", "status": "(optional string) Filter by status", "created": "(optional string) Filter by creation date (YYYY-MM-DD)", "excludePullRequests": "(optional boolean) Exclude PR-triggered runs", "checkSuiteId": "(optional number) Filter by check suite ID", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": {"category": "Github Actions", "query": "List workflow runs for a repository"}}, {"name": "get_workflow_run", "server": "Github Actions", "description": "Get details of a specific workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}, "task": {"category": "Github Actions", "query": "Retrieve details of a workflow run"}}, {"name": "get_workflow_run_jobs", "server": "Github Actions", "description": "Get jobs for a specific workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run", "filter": "(optional string) Filter jobs by completion status ('latest', 'all')", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": {"category": "Github Actions", "query": "Retrieve jobs for a workflow run"}}, {"name": "trigger_workflow", "server": "Github Actions", "description": "Trigger a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename", "ref": "(string) The reference to run the workflow on (branch, tag, or SHA)", "inputs": "(optional object) Input parameters for the workflow"}, "task": {"category": "Github Actions", "query": "Trigger a workflow run in a repository"}}, {"name": "cancel_workflow_run", "server": "Github Actions", "description": "Cancel a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}, "task": {"category": "Github Actions", "query": "Cancel a workflow run in a repository"}}, {"name": "rerun_workflow", "server": "Github Actions", "description": "Re-run a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}, "task": {"category": "Github Actions", "query": "Re-run a specific workflow run"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Glean", "description": "1.提供基于查询的搜索结果列表 2.支持与聊天机器人进行问答交互", "tools": [{"name": "Search", "server": "Glean", "description": "Provides a list of search results given a query.", "parameter": {}, "task": {"category": "Glean", "query": "Search for information"}}, {"name": "Chat", "server": "Glean", "description": "Enables Q&A interactions with a chatbot.", "parameter": {}, "task": {"category": "Glean", "query": "Interact with a chatbot for Q&A"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Gmail", "description": "Gmail邮件管理，包括：发送邮件、草稿创建、邮件内容检索、邮件搜索、标签管理（创建/更新/删除）、批量邮件操作（标签修改/删除）", "tools": [{"name": "send_email", "server": "Gmail", "description": "Sends a new email immediately.", "parameter": {"to": "(array) List of recipient email addresses", "subject": "(string) Subject of the email", "body": "(string) Body content of the email", "cc": "(Optional, array) List of CC recipient email addresses", "bcc": "(Optional, array) List of BCC recipient email addresses"}, "task": {"category": "Gmail", "query": "Send an email with recipients, subject, and body"}}, {"name": "draft_email", "server": "Gmail", "description": "Creates a draft email without sending it.", "parameter": {"to": "(array) List of recipient email addresses", "subject": "(string) Subject of the email", "body": "(string) Body content of the email", "cc": "(Optional, array) List of CC recipient email addresses"}, "task": {"category": "Gmail", "query": "Create a draft email"}}, {"name": "read_email", "server": "Gmail", "description": "Retrieves the content of a specific email by its ID.", "parameter": {"messageId": "(string) ID of the email message"}, "task": {"category": "Gmail", "query": "Retrieve email content by ID"}}, {"name": "search_emails", "server": "Gmail", "description": "Searches for emails using Gmail search syntax.", "parameter": {"query": "(string) Gmail search query", "maxResults": "(Optional, integer) Maximum number of results to return"}, "task": {"category": "Gmail", "query": "Search emails using Gmail search syntax"}}, {"name": "modify_email", "server": "Gmail", "description": "Adds or removes labels from emails (move to different folders, archive, etc.).", "parameter": {"messageId": "(string) ID of the email message", "addLabelIds": "(array) List of label IDs to add", "removeLabelIds": "(array) List of label IDs to remove"}, "task": {"category": "Gmail", "query": "Manage email labels and folders"}}, {"name": "delete_email", "server": "Gmail", "description": "Permanently deletes an email.", "parameter": {"messageId": "(string) ID of the email message"}, "task": {"category": "Gmail", "query": "Delete an email permanently"}}, {"name": "list_email_labels", "server": "Gmail", "description": "Retrieves all available Gmail labels.", "parameter": {}, "task": {"category": "Gmail", "query": "Retrieve all email labels"}}, {"name": "create_label", "server": "Gmail", "description": "Creates a new Gmail label.", "parameter": {"name": "(string) Name of the label", "messageListVisibility": "(string) Visibility setting for message list (show or hide)", "labelListVisibility": "(string) Visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}, "task": {"category": "Gmail", "query": "Create a new label in Gmail"}}, {"name": "update_label", "server": "Gmail", "description": "Updates an existing Gmail label.", "parameter": {"id": "(string) ID of the label", "name": "(string) New name of the label", "messageListVisibility": "(string) New visibility setting for message list (show or hide)", "labelListVisibility": "(string) New visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}, "task": {"category": "Gmail", "query": "Modify existing email labels"}}, {"name": "delete_label", "server": "Gmail", "description": "Deletes a Gmail label.", "parameter": {"id": "(string) ID of the label"}, "task": {"category": "Gmail", "query": "Delete a label in Gmail"}}, {"name": "get_or_create_label", "server": "Gmail", "description": "Gets an existing label by name or creates it if it doesn't exist.", "parameter": {"name": "(string) Name of the label", "messageListVisibility": "(string) Visibility setting for message list (show or hide)", "labelListVisibility": "(string) Visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}, "task": {"category": "Gmail", "query": "Manage email labels"}}, {"name": "batch_modify_emails", "server": "Gmail", "description": "Modifies labels for multiple emails in efficient batches.", "parameter": {"messageIds": "(array) List of email message IDs", "addLabelIds": "(array) List of label IDs to add", "removeLabelIds": "(array) List of label IDs to remove", "batchSize": "(Optional, integer) Number of emails to process in each batch"}, "task": {"category": "Gmail", "query": "Modify labels for multiple emails in batches"}}, {"name": "batch_delete_emails", "server": "Gmail", "description": "Permanently deletes multiple emails in efficient batches.", "parameter": {"messageIds": "(array) List of email message IDs", "batchSize": "(Optional, integer) Number of emails to process in each batch"}, "task": {"category": "Gmail", "query": "Delete multiple emails in batches"}}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "Gmail Headless", "description": "Gmail邮件操作,包括:刷新访问令牌、获取最近邮件、获取完整邮件内容、发送邮件", "tools": [{"name": "gmail_refresh_token", "server": "Gmail Headless", "description": "Refreshes the access token using the refresh token, client ID, and client secret.", "parameter": {"google_refresh_token": "(string) The refresh token used to obtain a new access token.", "google_client_id": "(string) The client ID obtained from Google API credentials.", "google_client_secret": "(string) The client secret obtained from Google API credentials."}, "task": {"category": "Gmail", "query": "Refresh access token for Gmail API"}}, {"name": "get_recent_emails", "server": "Gmail Headless", "description": "Retrieves recent emails with the first 1k characters of each email body.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "max_results": "(Optional, integer) The maximum number of emails to retrieve. Default is 5.", "unread_only": "(Optional, boolean) Whether to retrieve only unread emails. Default is false."}, "task": {"category": "Gmail", "query": "Retrieve recent emails from Gmail"}}, {"name": "get_full_email_body_content", "server": "Gmail Headless", "description": "Retrieves the full content of an email in chunks of 1k characters.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "message_id": "(string) The unique identifier of the email message.", "offset": "(integer) The starting point in the email body for the chunk to be retrieved."}, "task": {"category": "Gmail", "query": "Retrieve email content in chunks"}}, {"name": "send_email", "server": "Gmail Headless", "description": "Sends an email through Gmail.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "to": "(string) The recipient's email address.", "subject": "(string) The subject of the email.", "body": "(string) The plain text body of the email.", "html_body": "(Optional, string) The HTML body of the email."}, "task": {"category": "Gmail", "query": "Send an email using Gmail service"}}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "GOAT", "description": "1. Token swapping and liquidity provision on various platforms (0x, Starknet, Balancer, Balmy, Jupiter, KIM, Uniswap) 2. Wallet and token management (1inch, Crossmint, DeBridge, ERC20/ERC721, SPL, Starknet tokens) 3. NFT operations (Crossmint, Magic Eden, OpenSea, Solana NFTs) 4. Financial services (Hedgey rewards, Ionic borrowing/lending, Lulo USDC deposits, Polymarket betting, Pump.fun token launches) 5. Data and insights (Allora price predictions, BirdEye/BMX token insights, CoinGecko/Coinmarketcap coin info, Dexscreener token info, Nansen info, Synth Subnet price data) 6. Blockchain interactions (Cosmos tokens, Irys datachain, JSON RPC, SNS, Zilliqa) 7. Governance and proposals (Mode governance, voting, token spraying) 8. Casino games (BetSwirl) 9. Physical asset purchases (Worldstore) 10. Address management (ENS resolution, ZeroDev global address)", "tools": [{"name": "Get quotes and swap on 0x", "server": "GOAT", "description": "Allows agents to get quotes and perform swaps using the 0x protocol.", "parameter": {}, "task": {"category": "0x Protocol", "query": "Get quotes and perform token swaps"}}, {"name": "Get the balances of a wallet using 1inch API", "server": "GOAT", "description": "Retrieves the balances of a wallet using the 1inch API.", "parameter": {}, "task": {"category": "1inch", "query": "Retrieve wallet balances"}}, {"name": "Get price predictions using Allora API", "server": "GOAT", "description": "Fetches price predictions using the Allora API.", "parameter": {}, "task": {"category": "Allora", "query": "Fetch price predictions"}}, {"name": "Swap tokens on Starknet", "server": "GOAT", "description": "Enables token swapping on the Starknet network.", "parameter": {}, "task": {"category": "Starknet", "query": "Swap tokens on blockchain"}}, {"name": "Swap tokens and provide liquidity on Balancer", "server": "GOAT", "description": "Facilitates token swapping and liquidity provision on Balancer.", "parameter": {}, "task": {"category": "Balancer", "query": "Swap tokens and manage liquidity"}}, {"name": "Swap tokens on Balmy", "server": "GOAT", "description": "Allows token swapping on the Balmy platform.", "parameter": {}, "task": {"category": "Balmy", "query": "Swap tokens on a DeFi platform"}}, {"name": "Play casino games", "server": "GOAT", "description": "Enables agents to play casino games using the BetSwirl platform.", "parameter": {}, "task": {"category": "BetSwirl", "query": "Play casino games"}}, {"name": "Get token insights using BirdEye API", "server": "GOAT", "description": "Provides token insights using the BirdEye API.", "parameter": {}, "task": {"category": "BirdEye", "query": "Retrieve insights for tokens"}}, {"name": "Get token insights using BMX API", "server": "GOAT", "description": "Fetches token insights using the BMX API.", "parameter": {}, "task": {"category": "BMX API", "query": "Retrieve insights for tokens"}}, {"name": "Get coin information using CoinGecko API", "server": "GOAT", "description": "Retrieves coin information using the CoinGecko API.", "parameter": {}, "task": {"category": "CoinGecko", "query": "Retrieve cryptocurrency information"}}, {"name": "Get coin information using Coinmarketcap API", "server": "GOAT", "description": "Fetches coin information using the Coinmarketcap API.", "parameter": {}, "task": {"category": "Coinmarketcap", "query": "Fetch cryptocurrency information"}}, {"name": "Interact with Cosmos tokens", "server": "GOAT", "description": "Enables interaction with Cosmos tokens.", "parameter": {}, "task": {"category": "Cosmos", "query": "Interact with blockchain tokens"}}, {"name": "Purchase any NFT on any chain using Crossmint", "server": "GOAT", "description": "Allows the purchase of NFTs on any supported chain using Crossmint.", "parameter": {}, "task": {"category": "Crossmint", "query": "Purchase NFTs across different blockchains"}}, {"name": "Create a wallet, mint tokens and get test tokens on any chain using Crossmint", "server": "GOAT", "description": "Facilitates the creation of wallets, minting of tokens, and retrieval of test tokens on any supported chain using Crossmint.", "parameter": {}, "task": {"category": "Crossmint", "query": "Create wallets and manage tokens on blockchain"}}, {"name": "Bridge tokens on DeBridge", "server": "GOAT", "description": "Enables token bridging on the DeBridge network.", "parameter": {}, "task": {"category": "DeBridge", "query": "Bridge tokens across networks"}}, {"name": "Get token information using Dexscreener API", "server": "GOAT", "description": "Provides token information using the Dexscreener API.", "parameter": {}, "task": {"category": "Dexscreener", "query": "Retrieve token details"}}, {"name": "Push based real time data streams", "server": "GOAT", "description": "Enables push-based real-time data streams.", "parameter": {}, "task": {"category": "GOAT", "query": "Enable real-time data streaming"}}, {"name": "Resolve ENS names to addresses", "server": "GOAT", "description": "Resolves ENS names to their corresponding addresses.", "parameter": {}, "task": {"category": "Ethereum", "query": "Resolve ENS names to Ethereum addresses"}}, {"name": "Find the most optimal route between tokens", "server": "GOAT", "description": "Finds the most optimal route for token swaps.", "parameter": {}, "task": {"category": "GOAT", "query": "Find optimal token swap routes"}}, {"name": "Interact with any ERC20 token", "server": "GOAT", "description": "Enables interaction with ERC20 tokens.", "parameter": {}, "task": {"category": "Ethereum", "query": "Interact with ERC20 tokens"}}, {"name": "Interact with any ERC721 token", "server": "GOAT", "description": "Enables interaction with ERC721 tokens.", "parameter": {}, "task": {"category": "Ethereum", "query": "Interact with ERC721 tokens"}}, {"name": "Get transaction information using Etherscan API", "server": "GOAT", "description": "Retrieves transaction information using the Etherscan API.", "parameter": {}, "task": {"category": "Ethereum", "query": "Retrieve transaction details"}}, {"name": "Read and post casts on Farcaster", "server": "GOAT", "description": "Enables reading and posting casts on the Farcaster platform.", "parameter": {}, "task": {"category": "Farcaster", "query": "Interact with Farcaster platform"}}, {"name": "Claim rewards on Hedgey", "server": "GOAT", "description": "Allows claiming of rewards on the Hedgey platform.", "parameter": {}, "task": {"category": "Hedgey", "query": "Claim rewards on a platform"}}, {"name": "Borrow and lend on Ionic", "server": "GOAT", "description": "Enables borrowing and lending on the Ionic platform.", "parameter": {}, "task": {"category": "Ionic", "query": "Borrow and lend assets"}}, {"name": "Create positions on Ironclad", "server": "GOAT", "description": "Facilitates the creation of positions on Ironclad.", "parameter": {}, "task": {"category": "Ironclad", "query": "Create positions"}}, {"name": "Interact with Irys datachain", "server": "GOAT", "description": "Enables interaction with the Irys datachain.", "parameter": {}, "task": {"category": "Irys", "query": "Interact with a datachain"}}, {"name": "Call any JSON RPC endpoint", "server": "GOAT", "description": "Allows calling of any JSON RPC endpoint.", "parameter": {}, "task": {"category": "JSON RPC", "query": "Call any JSON RPC endpoint"}}, {"name": "Swap tokens on Jupiter", "server": "GOAT", "description": "Enables token swapping on the Jupiter platform.", "parameter": {}, "task": {"category": "Jupiter", "query": "Swap tokens on a decentralized exchange"}}, {"name": "Swap tokens on KIM", "server": "GOAT", "description": "Allows token swapping on the KIM platform.", "parameter": {}, "task": {"category": "KIM", "query": "Swap tokens on a decentralized platform"}}, {"name": "Deposit USDC on Lulo", "server": "GOAT", "description": "Enables depositing of USDC on the Lulo platform.", "parameter": {}, "task": {"category": "Lulo", "query": "Deposit USDC on a platform"}}, {"name": "Cross-chain token swap using Mayan SDK", "server": "GOAT", "description": "Facilitates cross-chain token swaps using the Mayan SDK.", "parameter": {}, "task": {"category": "GOAT", "query": "Perform cross-chain token swaps"}}, {"name": "Create liquidity pools on Meteora", "server": "GOAT", "description": "Enables the creation of liquidity pools on Meteora.", "parameter": {}, "task": {"category": "Meteora", "query": "Create liquidity pools"}}, {"name": "Create a governance proposal on Mode", "server": "GOAT", "description": "Facilitates the creation of governance proposals on Mode.", "parameter": {}, "task": {"category": "Mode", "query": "Create governance proposals"}}, {"name": "Vote on a governance proposal on Mode", "server": "GOAT", "description": "Enables voting on governance proposals on Mode.", "parameter": {}, "task": {"category": "Mode", "query": "Vote on governance proposals"}}, {"name": "Spray tokens on Mode", "server": "GOAT", "description": "Facilitates the spraying of tokens on Mode.", "parameter": {}, "task": {"category": "Mode", "query": "Spray tokens on a platform"}}, {"name": "Get Nansen information using Nansen API", "server": "GOAT", "description": "Retrieves information using the Nansen API.", "parameter": {}, "task": {"category": "Nansen", "query": "Retrieve information via API"}}, {"name": "Get nft and sales information using OpenSea API", "server": "GOAT", "description": "Provides NFT and sales information using the OpenSea API.", "parameter": {}, "task": {"category": "OpenSea", "query": "Retrieve NFT and sales data"}}, {"name": "Create positions on Orca", "server": "GOAT", "description": "Enables the creation of positions on Orca.", "parameter": {}, "task": {"category": "Orca", "query": "Create positions on a platform"}}, {"name": "Currency exchange on Zilliqa", "server": "GOAT", "description": "Facilitates currency exchange on the Zilliqa network.", "parameter": {}, "task": {"category": "Zilliqa", "query": "Exchange currencies on blockchain"}}, {"name": "Bet on Polymarket", "server": "GOAT", "description": "Enables betting on Polymarket.", "parameter": {}, "task": {"category": "Polymarket", "query": "Place bets on prediction markets"}}, {"name": "Launch a token on Pump.fun", "server": "GOAT", "description": "Facilitates the launch of tokens on Pump.fun.", "parameter": {}, "task": {"category": "Pump.fun", "query": "Launch tokens on a platform"}}, {"name": "Create a position on Renzo", "server": "GOAT", "description": "Enables the creation of positions on Renzo.", "parameter": {}, "task": {"category": "Renzo", "query": "Create positions on a platform"}}, {"name": "Check SPL token validity on Rugcheck", "server": "GOAT", "description": "Checks the validity of SPL tokens using Rugcheck.", "parameter": {}, "task": {"category": "GOAT", "query": "Validate SPL tokens"}}, {"name": "Interact with SNS", "server": "GOAT", "description": "Enables interaction with SNS.", "parameter": {}, "task": {"category": "SNS", "query": "Interact with social networking services"}}, {"name": "Purchase NFTs on Magic Eden", "server": "GOAT", "description": "Facilitates the purchase of NFTs on Magic Eden.", "parameter": {}, "task": {"category": "Magic Eden", "query": "Purchase NFTs on a marketplace"}}, {"name": "Get NFT information using Solana NFTs API", "server": "GOAT", "description": "Provides NFT information using the Solana NFTs API.", "parameter": {}, "task": {"category": "Solana", "query": "Retrieve NFT details"}}, {"name": "Interact with SPL tokens", "server": "GOAT", "description": "Enables interaction with SPL tokens.", "parameter": {}, "task": {"category": "GOAT", "query": "Interact with SPL tokens"}}, {"name": "Interact with Starknet tokens", "server": "GOAT", "description": "Enables interaction with Starknet tokens.", "parameter": {}, "task": {"category": "Starknet", "query": "Interact with tokens on blockchain"}}, {"name": "Create streams with Superfluid", "server": "GOAT", "description": "Facilitates the creation of streams using Superfluid.", "parameter": {}, "task": {"category": "Superfluid", "query": "Create streams"}}, {"name": "Get synthetic price data using Synth Subnet API", "server": "GOAT", "description": "Provides synthetic price data using the Synth Subnet API.", "parameter": {}, "task": {"category": "Synth Subnet API", "query": "Retrieve synthetic price data"}}, {"name": "Purchase tokens on Tensor", "server": "GOAT", "description": "Enables the purchase of tokens on Tensor.", "parameter": {}, "task": {"category": "Tensor", "query": "Purchase tokens on a platform"}}, {"name": "Swap tokens on Uniswap", "server": "GOAT", "description": "Facilitates token swapping on Uniswap.", "parameter": {}, "task": {"category": "Uniswap", "query": "Swap tokens on a decentralized exchange"}}, {"name": "Create a position on Velodrome", "server": "GOAT", "description": "Enables the creation of positions on Velodrome.", "parameter": {}, "task": {"category": "Velodrome", "query": "Create positions on a decentralized finance platform"}}, {"name": "Purchase physical assets on Worldstore", "server": "GOAT", "description": "Facilitates the purchase of physical assets on Worldstore.", "parameter": {}, "task": {"category": "Worldstore", "query": "Purchase physical assets"}}, {"name": "Create a global address on ZeroDev", "server": "GOAT", "description": "Enables the creation of a global address on ZeroDev.", "parameter": {}, "task": {"category": "ZeroDev", "query": "Create a global address"}}, {"name": "Interact with Zilliqa", "server": "GOAT", "description": "Enables interaction with the Zilliqa network.", "parameter": {}, "task": {"category": "Zilliqa", "query": "Interact with blockchain network"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Godot", "description": "Godot游戏引擎操作,包括:项目编辑与执行、调试输出获取、版本查询、项目管理、场景创建与节点操作、资源加载与导出、UID管理", "tools": [{"name": "launch_editor", "server": "Godot", "description": "Open the Godot editor for a specific project", "parameter": {}, "task": {"category": "Godot", "query": "Open the Godot editor for a project"}}, {"name": "run_project", "server": "Godot", "description": "Execute Godot projects in debug mode", "parameter": {}, "task": {"category": "Godot", "query": "Run projects in debug mode"}}, {"name": "get_debug_output", "server": "Godot", "description": "Retrieve console output and error messages", "parameter": {}, "task": {"category": "Godot", "query": "Retrieve console and error messages"}}, {"name": "stop_project", "server": "Godot", "description": "Stop the execution of a Godot project", "parameter": {}, "task": {"category": "Godot", "query": "Stop running Godot project"}}, {"name": "get_godot_version", "server": "Godot", "description": "Retrieve the installed Godot version", "parameter": {}, "task": {"category": "Godot", "query": "Check installed version"}}, {"name": "list_projects", "server": "Godot", "description": "Find Godot projects in a specified directory", "parameter": {}, "task": {"category": "Godot", "query": "Find projects in a directory"}}, {"name": "get_project_info", "server": "Godot", "description": "Get detailed information about project structure", "parameter": {}, "task": {"category": "Godot", "query": "Retrieve project structure details"}}, {"name": "create_scene", "server": "Godot", "description": "Create new scenes with specified root node types", "parameter": {}, "task": {"category": "Godot", "query": "Create new scenes with specified root nodes"}}, {"name": "add_node", "server": "Godot", "description": "Add nodes to existing scenes with customizable properties", "parameter": {}, "task": {"category": "Godot", "query": "Add nodes to scenes with custom properties"}}, {"name": "load_sprite", "server": "Godot", "description": "Load sprites and textures into Sprite2D nodes", "parameter": {}, "task": {"category": "Godot", "query": "Load sprites and textures into nodes"}}, {"name": "export_mesh_library", "server": "Godot", "description": "Export 3D scenes as MeshLibrary resources for GridMap", "parameter": {}, "task": {"category": "Godot", "query": "Export 3D scenes for GridMap"}}, {"name": "save_scene", "server": "Godot", "description": "Save scenes with options for creating variants", "parameter": {}, "task": {"category": "Godot", "query": "Save game scenes with variant options"}}, {"name": "get_uid", "server": "Godot", "description": "Get UID for specific files (for Godot 4.4+)", "parameter": {}, "task": {"category": "Godot", "query": "Retrieve UID for files in Godot engine"}}, {"name": "update_project_uids", "server": "Godot", "description": "Update UID references by resaving resources (for Godot 4.4+)", "parameter": {}, "task": {"category": "Godot", "query": "Update UID references in project resources"}}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Golang Filesystem Server", "description": "File system operations including: reading single/multiple files, writing files, creating directories, listing directory contents, moving/renaming files, searching files/directories, retrieving file metadata, displaying directory structure, and listing accessible directories", "tools": [{"name": "read_file", "server": "Golang Filesystem Server", "description": "Read complete contents of a file", "parameter": {"path": "(string) File path"}, "task": {"category": "Golang", "query": "Read file contents"}}, {"name": "read_multiple_files", "server": "Golang Filesystem Server", "description": "Read multiple files simultaneously", "parameter": {"paths": "(string[]) Array of file paths"}, "task": {"category": "Golang", "query": "Read multiple files at once"}}, {"name": "write_file", "server": "Golang Filesystem Server", "description": "Create new file or overwrite existing", "parameter": {"path": "(string) File location", "content": "(string) File content"}, "task": {"category": "Golang", "query": "Create or overwrite files"}}, {"name": "create_directory", "server": "Golang Filesystem Server", "description": "Create new directory or ensure it exists", "parameter": {"path": "(string) Directory path"}, "task": {"category": "Golang", "query": "Create or ensure directory exists"}}, {"name": "list_directory", "server": "Golang Filesystem Server", "description": "List directory contents with [FILE] or [DIR] prefixes", "parameter": {"path": "(string) Directory path"}, "task": {"category": "Golang", "query": "List contents of a directory"}}, {"name": "move_file", "server": "Golang Filesystem Server", "description": "Move or rename files and directories", "parameter": {"source": "(string) Source path", "destination": "(string) Destination path"}, "task": {"category": "Golang", "query": "Move or rename files and directories"}}, {"name": "search_files", "server": "Golang Filesystem Server", "description": "Recursively search for files/directories", "parameter": {"path": "(string) Starting directory", "pattern": "(string) Search pattern"}, "task": {"category": "Golang", "query": "Search for files and directories recursively"}}, {"name": "get_file_info", "server": "Golang Filesystem Server", "description": "Get detailed file/directory metadata", "parameter": {"path": "(string) File or directory path"}, "task": {"category": "Golang", "query": "Retrieve metadata for files or directories"}}, {"name": "tree", "server": "Golang Filesystem Server", "description": "Returns a hierarchical JSON representation of a directory structure", "parameter": {"path": "(string) Directory to traverse (required)", "depth": "(number) Maximum depth to traverse (default: 3)", "follow_symlinks": "(boolean) Whether to follow symbolic links (default: false)"}, "task": {"category": "Golang", "query": "Get hierarchical directory structure"}}, {"name": "list_allowed_directories", "server": "Golang Filesystem Server", "description": "List all directories the server is allowed to access", "parameter": {}, "task": {"category": "Golang", "query": "List accessible directories on server"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Goodnews", "description": "Fetch and return a list of positive and uplifting news articles", "tools": [{"name": "fetch_list_of_goodnews", "server": "Goodnews", "description": "Fetches and returns a list of good, positive, and uplifting news articles.", "parameter": {}, "task": {"category": "Goodnews", "query": "Retrieve positive and uplifting news articles"}}], "domains": [{"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Google Calendar", "description": "Calendar event operations, including: listing events, creating events, updating events, deleting events, and finding free time slots", "tools": [{"name": "list_events", "server": "Google Calendar", "description": "List calendar events within a specified time range", "parameter": {}, "task": {"category": "Google Calendar", "query": "List events within a time range"}}, {"name": "create_event", "server": "Google Calendar", "description": "Create a new calendar event", "parameter": {}, "task": {"category": "Google Calendar", "query": "Create a new event"}}, {"name": "update_event", "server": "Google Calendar", "description": "Update an existing calendar event", "parameter": {}, "task": {"category": "Google Calendar", "query": "Modify an existing event"}}, {"name": "delete_event", "server": "Google Calendar", "description": "Delete a calendar event", "parameter": {}, "task": {"category": "Google Calendar", "query": "Remove an event from the calendar"}}, {"name": "find_free_time", "server": "Google Calendar", "description": "Find available time slots in the calendar", "parameter": {}, "task": {"category": "Google Calendar", "query": "Find available time slots"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Google Custom Search", "description": "1.使用Google Custom Search API进行网页搜索 2.从任意网页提取内容", "tools": [{"name": "search", "server": "Google Custom Search", "description": "Perform web searches using Google Custom Search API.", "parameter": {"query": "(string) the search query", "num": "(Optional, integer) the number of results to return, default is 5, max is 10"}, "task": {"category": "Google", "query": "Perform web searches"}}, {"name": "read_webpage", "server": "Google Custom Search", "description": "Extract content from any webpage.", "parameter": {"url": "(string) the URL of the webpage to extract content from"}, "task": {"category": "Google Custom Search", "query": "Extract content from a webpage"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Google Sheets", "description": "Google Sheets operations, including: listing spreadsheets, creating spreadsheets, reading/writing data, batch updates, adding rows, managing sheets, fetching multi-sheet data, sharing spreadsheets, and retrieving metadata", "tools": [{"name": "list_spreadsheets", "server": "Google Sheets", "description": "Lists spreadsheets in the configured Drive folder (Service Account) or accessible by the user (OAuth).", "parameter": {}, "task": {"category": "Google Sheets", "query": "List available spreadsheets"}}, {"name": "create_spreadsheet", "server": "Google Sheets", "description": "Creates a new spreadsheet.", "parameter": {"title": "(string) The desired title."}, "task": {"category": "Google Sheets", "query": "Create a new spreadsheet"}}, {"name": "get_sheet_data", "server": "Google Sheets", "description": "Reads data from a range in a sheet.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string) Name of the sheet.", "range": "(Optional, string) A1 notation (e.g., 'A1:C10', 'Sheet1!B2:D'). If omitted, reads the whole sheet."}, "task": {"category": "Google Sheets", "query": "Read data from a specified range in a sheet"}}, {"name": "update_cells", "server": "Google Sheets", "description": "Writes data to a specific range. Overwrites existing data.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "range": "(string) A1 notation.", "data": "(2D array) Values to write."}, "task": {"category": "Google Sheets", "query": "Write data to a specific range in a spreadsheet"}}, {"name": "batch_update_cells", "server": "Google Sheets", "description": "Updates multiple ranges in one API call.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "ranges": "(object) Dictionary mapping range strings (A1 notation) to 2D arrays of values { 'A1:B2': [[1, 2], [3, 4]], 'D5': [['Hello']] }."}, "task": {"category": "Google Sheets", "query": "Update multiple cell ranges in a spreadsheet"}}, {"name": "add_rows", "server": "Google Sheets", "description": "Appends rows to the end of a sheet (after the last row with data).", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "data": "(2D array) Rows to append."}, "task": {"category": "Google Sheets", "query": "Append data to a spreadsheet"}}, {"name": "list_sheets", "server": "Google Sheets", "description": "Lists all sheet names within a spreadsheet.", "parameter": {"spreadsheet_id": "(string)"}, "task": {"category": "Google Sheets", "query": "Retrieve sheet names from a spreadsheet"}}, {"name": "create_sheet", "server": "Google Sheets", "description": "Adds a new sheet (tab) to a spreadsheet.", "parameter": {"spreadsheet_id": "(string)", "title": "(string) Name for the new sheet."}, "task": {"category": "Google Sheets", "query": "Add a new sheet to a spreadsheet"}}, {"name": "get_multiple_sheet_data", "server": "Google Sheets", "description": "Fetches data from multiple ranges across potentially different spreadsheets in one call.", "parameter": {"queries": "(array of objects) Each object needs `spreadsheet_id`, `sheet`, and `range`. [{spreadsheet_id: 'abc', sheet: 'Sheet1', range: 'A1:B2'}, ...]."}, "task": {"category": "Google Sheets", "query": "Retrieve data from multiple ranges in spreadsheets"}}, {"name": "get_multiple_spreadsheet_summary", "server": "Google Sheets", "description": "Gets titles, sheet names, headers, and first few rows for multiple spreadsheets.", "parameter": {"spreadsheet_ids": "(array of strings)", "rows_to_fetch": "(Optional, integer, default 5) How many rows (including header) to preview."}, "task": {"category": "Google Sheets", "query": "Retrieve summary information for multiple spreadsheets"}}, {"name": "share_spreadsheet", "server": "Google Sheets", "description": "Shares a spreadsheet with specified users/emails and roles.", "parameter": {"spreadsheet_id": "(string)", "recipients": "(array of objects) [{email_address: 'user@example.com', role: 'writer'}, ...]. Roles: reader, commenter, writer.", "send_notification": "(Optional, boolean, default True) Send email notifications."}, "task": {"category": "Google Sheets", "query": "Share spreadsheet with users and assign roles"}}, {"name": "spreadsheet_info", "server": "Google Sheets", "description": "Get basic metadata about a Google Spreadsheet.", "parameter": {"spreadsheet_id": "(string)"}, "task": {"category": "Google Sheets", "query": "Retrieve metadata for a spreadsheet"}}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "Google Tasks", "description": "Google Tasks operations, including: search, list, create, update, delete, and clear completed tasks", "tools": [{"name": "search", "server": "Google Tasks", "description": "Search for tasks in Google Tasks", "parameter": {"query": "(string): Search query"}, "task": {"category": "Google Tasks", "query": "Search for tasks"}}, {"name": "list", "server": "Google Tasks", "description": "List all tasks in Google Tasks", "parameter": {"cursor": "(Optional, string): Cursor for pagination"}, "task": {"category": "Google Tasks", "query": "List all tasks"}}, {"name": "create", "server": "Google Tasks", "description": "Create a new task in Google Tasks", "parameter": {"taskListId": "(Optional, string): Task list ID", "title": "(string, required): Task title", "notes": "(Optional, string): Task notes", "due": "(Optional, string): Due date"}, "task": {"category": "Google Tasks", "query": "Create a new task"}}, {"name": "update", "server": "Google Tasks", "description": "Update an existing task in Google Tasks", "parameter": {"taskListId": "(Optional, string): Task list ID", "id": "(string, required): Task ID", "uri": "(string, required): Task URI", "title": "(Optional, string): New task title", "notes": "(Optional, string): New task notes", "status": "(Optional, string): New task status (\"needsAction\" or \"completed\")", "due": "(Optional, string): New due date"}, "task": {"category": "Google Tasks", "query": "Modify an existing task's details"}}, {"name": "delete", "server": "Google Tasks", "description": "Delete a task in Google Tasks", "parameter": {"taskListId": "(string, required): Task list ID", "id": "(string, required): Task ID"}, "task": {"category": "Google Tasks", "query": "Delete a task from a task list"}}, {"name": "clear", "server": "Google Tasks", "description": "Clear completed tasks from a Google Tasks task list", "parameter": {"taskListId": "(string, required): Task list ID"}, "task": {"category": "Google Tasks", "query": "Clear completed tasks from a task list"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Google Vertex AI Search", "description": "Search documents using Vertex AI Search", "tools": [{"name": "search", "server": "Google Vertex AI Search", "description": "Searches documents using Vertex AI Search.", "parameter": {"--config": "(string) Path to the configuration file.", "--query": "(string) The query to search for."}, "task": {"category": "Google Vertex AI", "query": "Search documents using AI"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "GraphQL Schema", "description": "GraphQL schema exploration and documentation, including: listing query/mutation/subscription fields, getting field definitions in SDL format, listing schema types, getting type definitions, and searching schema by name pattern", "tools": [{"name": "list-query-fields", "server": "GraphQL Schema", "description": "Lists all available root-level fields for GraphQL queries", "parameter": {}, "task": {"category": "GraphQL", "query": "List root-level query fields"}}, {"name": "get-query-field", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific query field in SDL format", "parameter": {}, "task": {"category": "GraphQL", "query": "Retrieve detailed definition of a query field"}}, {"name": "list-mutation-fields", "server": "GraphQL Schema", "description": "Lists all available root-level fields for GraphQL mutations", "parameter": {}, "task": {"category": "GraphQL", "query": "List root-level mutation fields"}}, {"name": "get-mutation-field", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific mutation field in SDL format", "parameter": {}, "task": {"category": "GraphQL", "query": "Retrieve mutation field details in SDL format"}}, {"name": "list-subscription-fields", "server": "GraphQL Schema", "description": "Lists all available root-level fields for GraphQL subscriptions (if present in schema)", "parameter": {}, "task": {"category": "GraphQL", "query": "List root-level subscription fields"}}, {"name": "get-subscription-field", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific subscription field (if present in schema)", "parameter": {}, "task": {"category": "GraphQL", "query": "Retrieve detailed definition of a subscription field"}}, {"name": "list-types", "server": "GraphQL Schema", "description": "Lists all types defined in the GraphQL schema (excluding internal types)", "parameter": {}, "task": {"category": "GraphQL", "query": "List all types in a schema"}}, {"name": "get-type", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific GraphQL type in SDL format", "parameter": {}, "task": {"category": "GraphQL", "query": "Retrieve detailed type definitions"}}, {"name": "get-type-fields", "server": "GraphQL Schema", "description": "Gets a simplified list of fields with their types for a specific GraphQL object type", "parameter": {}, "task": {"category": "GraphQL", "query": "Retrieve fields and types for a GraphQL object"}}, {"name": "search-schema", "server": "GraphQL Schema", "description": "Searches for types or fields in the schema by name pattern (case-insensitive regex)", "parameter": {}, "task": {"category": "GraphQL", "query": "Search for types or fields in schema"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "HDW LinkedIn", "description": "LinkedIn用户和公司信息检索与管理，包括：用户搜索、个人资料获取、电子邮件查找、帖子检索、反应获取、聊天消息管理、连接邀请发送、帖子评论、连接列表获取、公司搜索和员工检索", "tools": [{"name": "search_linkedin_users", "server": "HDW LinkedIn", "description": "Search for LinkedIn users with various filters.", "parameter": {"keywords": "(optional) Any keyword for search.", "first_name": "(optional) First name.", "last_name": "(optional) Last name.", "title": "(optional) Job title.", "company_keywords": "(optional) Company keywords.", "school_keywords": "(optional) School keywords.", "current_company": "(optional) Current company.", "past_company": "(optional) Past company.", "location": "(optional) Location.", "industry": "(optional) Industry.", "education": "(optional) Education.", "count": "(optional, default: 10) Maximum number of results (max 1000).", "timeout": "(optional, default: 300) Timeout in seconds (20–1500)."}, "task": {"category": "LinkedIn", "query": "Search for users with various filters"}}, {"name": "get_linkedin_profile", "server": "HDW LinkedIn", "description": "Retrieve detailed profile information about a LinkedIn user.", "parameter": {"user": "(required) User alias, URL, or URN.", "with_experience": "(optional, default: true)", "with_education": "(optional, default: true)", "with_skills": "(optional, default: true)"}, "task": {"category": "LinkedIn", "query": "Retrieve detailed user profile information"}}, {"name": "get_linkedin_email_user", "server": "HDW LinkedIn", "description": "Look up LinkedIn user details by email.", "parameter": {"email": "(required) Email address.", "count": "(optional, default: 5)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve LinkedIn user details by email"}}, {"name": "get_linkedin_user_posts", "server": "HDW LinkedIn", "description": "Retrieve posts for a LinkedIn user by URN.", "parameter": {"urn": "(required) User URN (must include prefix, e.g. fsd_profile:...).", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve user posts from LinkedIn"}}, {"name": "get_linkedin_user_reactions", "server": "HDW LinkedIn", "description": "Retrieve reactions for a LinkedIn user by URN.", "parameter": {"urn": "(required)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve user reactions from LinkedIn"}}, {"name": "get_linkedin_chat_messages", "server": "HDW LinkedIn", "description": "Retrieve top chat messages from the LinkedIn management API.", "parameter": {"user": "(required) User URN (with prefix).", "count": "(optional, default: 20)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve chat messages from LinkedIn"}}, {"name": "send_linkedin_chat_message", "server": "HDW LinkedIn", "description": "Send a chat message using the LinkedIn management API.", "parameter": {"user": "(required) Recipient user URN (with prefix).", "text": "(required) Message text.", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Send chat messages via LinkedIn API"}}, {"name": "send_linkedin_connection", "server": "HDW LinkedIn", "description": "Send a connection invitation to a LinkedIn user.", "parameter": {"user": "(required)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Send connection invitation to LinkedIn users"}}, {"name": "send_linkedin_post_comment", "server": "HDW LinkedIn", "description": "Create a comment on a LinkedIn post or reply.", "parameter": {"text": "(required) Comment text.", "urn": "(required) Activity or comment URN.", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Create or reply to comments on LinkedIn posts"}}, {"name": "get_linkedin_user_connections", "server": "HDW LinkedIn", "description": "Retrieve a list of LinkedIn user connections.", "parameter": {"connected_after": "(optional) Timestamp filter.", "count": "(optional, default: 20)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve user connections list"}}, {"name": "get_linkedin_post_reposts", "server": "HDW LinkedIn", "description": "Retrieve reposts for a LinkedIn post.", "parameter": {"urn": "(required) Post URN (must start with activity:).", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve reposts for a post"}}, {"name": "get_linkedin_post_comments", "server": "HDW LinkedIn", "description": "Retrieve comments for a LinkedIn post.", "parameter": {"urn": "(required)", "sort": "(optional, default: relevance; allowed values: relevance, recent)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve comments from a LinkedIn post"}}, {"name": "get_linkedin_google_company", "server": "HDW LinkedIn", "description": "Search for LinkedIn companies via Google – the first result is typically the best match.", "parameter": {"keywords": "(required) Array of company keywords.", "with_urn": "(optional, default: false)", "count_per_keyword": "(optional, default: 1; range 1–10)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Search for companies on LinkedIn using Google"}}, {"name": "get_linkedin_company", "server": "HDW LinkedIn", "description": "Retrieve detailed information about a LinkedIn company.", "parameter": {"company": "(required) Company alias, URL, or URN.", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve company details from LinkedIn"}}, {"name": "get_linkedin_company_employees", "server": "HDW LinkedIn", "description": "Retrieve employees of a LinkedIn company.", "parameter": {"companies": "(required) Array of company URNs.", "keywords": "(optional)", "first_name": "(optional)", "last_name": "(optional)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": {"category": "LinkedIn", "query": "Retrieve employee information from LinkedIn companies"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Heurist Mesh Agent", "description": "1. Search for token information and market data using CoinGecko ID 2. Get trading pair info and basic token info from DexScreener 3. Search and analyze Twitter accounts and mentions 4. Perform web search and answer operations using Exa's API 5. Fetch security details of blockchain token contracts", "tools": [{"name": "get_coingecko_id", "server": "Heurist Mesh Agent", "description": "Search for a token by name to get its CoinGecko ID", "parameter": {"token_name": "(string) The token name to search for"}, "task": {"category": "CoinGecko", "query": "Search for token by name to get ID"}}, {"name": "get_token_info", "server": "Heurist Mesh Agent", "description": "Get detailed token information and market data using CoinGecko ID (you can't use the token address or name or symbol)", "parameter": {"coingecko_id": "(string) The CoinGecko ID of the token"}, "task": {"category": "CoinGecko", "query": "Retrieve token details and market data"}}, {"name": "get_trending_coins", "server": "Heurist Mesh Agent", "description": "Get the current top trending cryptocurrencies on CoinGecko", "parameter": {}, "task": {"category": "CoinGecko", "query": "Retrieve trending cryptocurrencies"}}, {"name": "get_specific_pair_info", "server": "Heurist Mesh Agent", "description": "Get trading pair info by chain and pair address on DexScreener", "parameter": {"chain": "(string) Chain identifier (e.g., solana, bsc, ethereum, base)", "pair_address": "(string) The pair contract address to look up"}, "task": {"category": "DexScreener", "query": "Retrieve trading pair information by chain and address"}}, {"name": "get_token_pairs", "server": "Heurist Mesh Agent", "description": "Get the trading pairs by chain and token address on DexScreener", "parameter": {"chain": "(string) Chain identifier (e.g., solana, bsc, ethereum, base)", "token_address": "(string) The token contract address to look up all pairs for"}, "task": {"category": "DexScreener", "query": "Retrieve trading pairs for a token on a specific blockchain"}}, {"name": "get_token_profiles", "server": "Heurist Mesh Agent", "description": "Get the basic info of the latest tokens from DexScreener", "parameter": {}, "task": {"category": "DexScreener", "query": "Retrieve latest token information"}}, {"name": "search_pairs", "server": "Heurist Mesh Agent", "description": "Search for trading pairs on DexScreener by token name, symbol, or address", "parameter": {"search_term": "(string) Search term (token name, symbol, or address)"}, "task": {"category": "DexScreener", "query": "Search for trading pairs by token details"}}, {"name": "get_trending_tokens", "server": "Heurist Mesh Agent", "description": "Get current trending tokens on Twitter", "parameter": {"time_window": "(string) Time window to analyze"}, "task": {"category": "Twitter", "query": "Retrieve trending tokens"}}, {"name": "search_account", "server": "Heurist Mesh Agent", "description": "Analyze a Twitter account with both mention search and account stats", "parameter": {"username": "(string) Twitter username to analyze (without @)", "days_ago": "(integer) Number of days to look back for mentions", "limit": "(integer) Maximum number of mention results"}, "task": {"category": "Twitter", "query": "Analyze Twitter account activity and statistics"}}, {"name": "search_mentions", "server": "Heurist Mesh Agent", "description": "Search for mentions of specific tokens or topics on Twitter", "parameter": {"keywords": "(array) List of keywords to search for", "days_ago": "(integer) Number of days to look back", "limit": "(integer) Maximum number of results (minimum: 20)"}, "task": {"category": "Twitter", "query": "Search for mentions of specific topics or keywords"}}, {"name": "answer", "server": "Heurist Mesh Agent", "description": "Get a direct answer to a question using Exa's answer API", "parameter": {"question": "(string) The question to answer"}, "task": {"category": "Exa", "query": "Get direct answers to questions"}}, {"name": "search", "server": "Heurist Mesh Agent", "description": "Search for webpages related to a query", "parameter": {"search_term": "(string) The search term", "limit": "(integer) Maximum number of results to return (default: 10)"}, "task": {"category": "Heurist Mesh Agent", "query": "Search for webpages based on a query term"}}, {"name": "search_and_answer", "server": "Heurist Mesh Agent", "description": "Perform both search and answer operations for a query", "parameter": {"topic": "(string) The topic to search for and answer"}, "task": {"category": "Heurist Mesh Agent", "query": "Search and answer operations for a topic"}}, {"name": "execute_search", "server": "Heurist Mesh Agent", "description": "Execute a web search query by reading the web pages", "parameter": {"search_term": "(string) The search term to execute"}, "task": {"category": "Web Search", "query": "Perform a web search based on a query term"}}, {"name": "generate_queries", "server": "Heurist Mesh Agent", "description": "Generate related search queries for a topic that can expand the research", "parameter": {"topic": "(string) The main topic to research", "num_queries": "(integer) Number of queries to generate"}, "task": {"category": "Heurist", "query": "Generate related search queries for research expansion"}}, {"name": "fetch_security_details", "server": "Heurist Mesh Agent", "description": "Fetch security details of a blockchain token contract", "parameter": {"contract_address": "(string) The token contract address", "chain_id": "(['integer', 'string']) The blockchain chain ID or 'solana' for Solana tokens. Supported chains: Ethereum (1), Optimism (10), Cronos (25), BSC (56), Gnosis (100), HECO (128), Polygon (137), Fantom (250), KCC (321), zkSync Era (324), ETHW (10001), FON (201022), Arbitrum (42161), Avalanche (43114), Linea Mainnet (59144), Base (8453), Tron (tron), Scroll (534352), opBNB (204), Mantle (5000), ZKFair (42766), Blast (81457), Manta Pacific (169), Berachain Artio Testnet (80085), Merlin (4200), Bitlayer Mainnet (200901), zkLink Nova (810180), X Layer Mainnet (196), Solana (solana)"}, "task": {"category": "Blockchain", "query": "Retrieve security details for a token contract"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Holaspirit", "description": "Holaspirit组织管理工具集，包括：任务列表、指标列表、圈子列表与详情、角色列表与详情、域列表、政策列表、会议列表与详情、成员动态获取、会议紧张关系获取、成员搜索", "tools": [{"name": "holaspirit_list_tasks", "server": "Holaspirit", "description": "List all tasks in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List all tasks in an organization"}}, {"name": "holaspirit_list_metrics", "server": "Holaspirit", "description": "List all metrics in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List all organization metrics"}}, {"name": "holaspirit_list_circles", "server": "Holaspirit", "description": "List all circles in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List organizational circles"}}, {"name": "holaspirit_get_circle", "server": "Holaspirit", "description": "Get details of a specific circle", "parameter": {}, "task": {"category": "Holaspirit", "query": "Retrieve details of a specific circle"}}, {"name": "holaspirit_list_roles", "server": "Holaspirit", "description": "List all roles in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List all organizational roles"}}, {"name": "holaspirit_get_role", "server": "Holaspirit", "description": "Get details of a specific role", "parameter": {}, "task": {"category": "Holaspirit", "query": "Retrieve role details"}}, {"name": "holaspirit_list_domains", "server": "Holaspirit", "description": "List all domains in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List all domains in an organization"}}, {"name": "holaspirit_list_policies", "server": "Holaspirit", "description": "List all policies in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List organizational policies"}}, {"name": "holaspirit_list_meetings", "server": "Holaspirit", "description": "List all meetings in the organization", "parameter": {}, "task": {"category": "Holaspirit", "query": "List all meetings in an organization"}}, {"name": "holaspirit_get_meeting", "server": "Holaspirit", "description": "Get details of a specific meeting", "parameter": {}, "task": {"category": "Holaspirit", "query": "Retrieve meeting details"}}, {"name": "holaspirit_get_member_feed", "server": "Holaspirit", "description": "Get member feed", "parameter": {}, "task": {"category": "Holaspirit", "query": "Retrieve member activity feed"}}, {"name": "holaspirit_get_tensions", "server": "Holaspirit", "description": "Get tensions for a meeting or meetings", "parameter": {}, "task": {"category": "Holaspirit", "query": "Retrieve tensions for meetings"}}, {"name": "holaspirit_search_member", "server": "Holaspirit", "description": "Search for a member by email", "parameter": {}, "task": {"category": "Holaspirit", "query": "Search for a member by email"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Home Assistant", "description": "1.控制Home Assistant设备 2.管理Home Assistant插件 3.管理HACS包 4.管理Home Assistant自动化配置 5.执行指定动作 6.批量执行动作", "tools": [{"name": "control", "server": "Home Assistant", "description": "Controls Home Assistant devices with various commands.", "parameter": {"command": "(string) The command to execute (e.g., 'turn_on', 'turn_off', 'toggle')", "entity_id": "(string) The ID of the entity to control", "brightness": "(Optional, number) Brightness level for lights", "color_temp": "(Optional, number) Color temperature for lights", "rgb_color": "(Optional, array) RGB color for lights"}, "task": {"category": "Home Assistant", "query": "Control smart home devices"}}, {"name": "addon", "server": "Home Assistant", "description": "Manages Home Assistant add-ons.", "parameter": {"action": "(string) The action to perform (e.g., 'list', 'install', 'start', 'stop', 'restart')", "slug": "(Optional, string) The slug of the add-on", "version": "(Optional, string) The version of the add-on"}, "task": {"category": "Home Assistant", "query": "Manage add-ons for Home Assistant"}}, {"name": "package", "server": "Home Assistant", "description": "Manages HACS packages.", "parameter": {"action": "(string) The action to perform (e.g., 'list', 'install')", "category": "(string) The category of the package (e.g., 'integration', 'plugin', 'theme', 'python_script', 'appdaemon', 'netdaemon')", "repository": "(Optional, string) The repository of the package", "version": "(Optional, string) The version of the package"}, "task": {"category": "Home Assistant", "query": "Manage HACS packages"}}, {"name": "automation_config", "server": "Home Assistant", "description": "Manages Home Assistant automations.", "parameter": {"action": "(string) The action to perform (e.g., 'create', 'duplicate')", "config": "(Optional, object) Configuration for creating an automation", "automation_id": "(Optional, string) The ID of the automation to duplicate"}, "task": {"category": "Home Assistant", "query": "Manage automations in Home Assistant"}}, {"name": "execute_action", "server": "Home Assistant", "description": "Executes a specified action with given parameters.", "parameter": {"action": "(string) The action to execute", "parameters": "(object) Parameters for the action"}, "task": {"category": "Home Assistant", "query": "Execute specified actions with parameters"}}, {"name": "batch_actions", "server": "Home Assistant", "description": "Executes multiple actions in sequence.", "parameter": {"actions": "(array) An array of action objects, each containing an action and parameters"}, "task": {"category": "Home Assistant", "query": "Execute multiple actions in sequence"}}], "domains": [{"name": "Home Automation", "description": "智能家居自动化控制，包括设备控制、插件管理、自动化配置及批量操作执行"}]}
{"name": "HubSpot", "description": "HubSpot CRM operations, including: contact/company creation with duplicate prevention, retrieving company/contact activity, fetching recent conversations, and semantic search across HubSpot data", "tools": [{"name": "hubspot_create_contact", "server": "HubSpot", "description": "Create contacts with duplicate prevention", "parameter": {}, "task": {"category": "HubSpot", "query": "Create new contacts with duplicate prevention"}}, {"name": "hubspot_create_company", "server": "HubSpot", "description": "Create companies with duplicate prevention", "parameter": {}, "task": {"category": "HubSpot", "query": "Create new companies with duplicate prevention"}}, {"name": "hubspot_get_company_activity", "server": "HubSpot", "description": "Retrieve activity for specific companies", "parameter": {}, "task": {"category": "HubSpot", "query": "Retrieve company activities"}}, {"name": "hubspot_get_active_companies", "server": "HubSpot", "description": "Retrieve most recently active companies", "parameter": {}, "task": {"category": "HubSpot", "query": "Retrieve recently active companies"}}, {"name": "hubspot_get_active_contacts", "server": "HubSpot", "description": "Retrieve most recently active contacts", "parameter": {}, "task": {"category": "HubSpot", "query": "Retrieve active contacts"}}, {"name": "hubspot_get_recent_conversations", "server": "HubSpot", "description": "Retrieve recent conversation threads with messages", "parameter": {}, "task": {"category": "HubSpot", "query": "Retrieve recent conversation threads"}}, {"name": "hubspot_search_data", "server": "HubSpot", "description": "Semantic search across previously retrieved HubSpot data", "parameter": {}, "task": {"category": "HubSpot", "query": "Search across retrieved data"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "HuggingFace Spaces", "description": "1.使用merve/paligemma2-vqav2空间查询图像中的对象或人物 2.使用microsoft/OmniParser空间分析图像并生成带注释的图像 3.使用shuttleai/shuttle-jaguar空间生成图像 4.使用black-forest-labs/FLUX.1-schnell空间生成图像 5.使用hf-audio/whisper-large-v3-turbo空间转录音频 6.使用Qwen/Qwen2.5-72B-Instruct空间提供聊天功能 7.使用DawnC/PawMatchAI空间执行视觉任务", "tools": [{"name": "use paligemma", "server": "HuggingFace Spaces", "description": "Queries an image using the `merve/paligemma2-vqav2` space to identify objects or people in the image.", "parameter": {"filename": "(string) The filename of the image in the working directory.", "url": "(Optional, string) A URL to an image."}, "task": {"category": "HuggingFace", "query": "Identify objects or people in an image"}}, {"name": "use omniparser", "server": "HuggingFace Spaces", "description": "Analyzes an image using the `microsoft/OmniParser` space and produces an annotated image along with descriptions and coordinates.", "parameter": {"filename": "(string) The filename of the image in the working directory."}, "task": {"category": "HuggingFace Spaces", "query": "Analyze and annotate images with descriptions and coordinates"}}, {"name": "use shuttle-jaguar", "server": "HuggingFace Spaces", "description": "Generates images using the `shuttleai/shuttle-jaguar` space.", "parameter": {}, "task": {"category": "HuggingFace Spaces", "query": "Generate images using shuttle-jaguar model"}}, {"name": "use FLUX.1-schnell", "server": "HuggingFace Spaces", "description": "Generates images using the `black-forest-labs/FLUX.1-schnell` space.", "parameter": {}, "task": {"category": "HuggingFace Spaces", "query": "Generate images using a specific model"}}, {"name": "use whisper-large-v3-turbo", "server": "HuggingFace Spaces", "description": "Transcribes audio using the `hf-audio/whisper-large-v3-turbo` space.", "parameter": {"filename": "(string) The filename of the audio file in the working directory."}, "task": {"category": "HuggingFace", "query": "Transcribe audio files"}}, {"name": "use Qwen2.5-72B-Instruct", "server": "HuggingFace Spaces", "description": "Provides chat capabilities using the `Qwen/Qwen2.5-72B-Instruct` space.", "parameter": {}, "task": {"category": "HuggingFace Spaces", "query": "Access chat capabilities with Qwen2.5-72B-Instruct"}}, {"name": "use PawMatchAI", "server": "HuggingFace Spaces", "description": "Performs vision tasks using the `DawnC/PawMatchAI` space, such as finding matches in images.", "parameter": {"filename": "(string) The filename of the image in the working directory."}, "task": {"category": "HuggingFace Spaces", "query": "Perform vision tasks on images"}}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Hyperliquid", "description": "1. Retrieve mid prices for all coins on Hyperliquid 2. Get historical candlestick data for any token 3. Access the L2 order book for any token", "tools": [{"name": "get_all_mids", "server": "Hyperliquid", "description": "Retrieve mid prices for all coins on Hyperliquid", "parameter": {}, "task": {"category": "Hyperliquid", "query": "Retrieve mid prices for all coins"}}, {"name": "get_candle_snapshot", "server": "Hyperliquid", "description": "Get historical candlestick data for any token", "parameter": {"coin": "(string) Token symbol", "interval": "(string) Time interval (e.g., '15m', '1h')", "startTime": "(number) Start time in milliseconds since epoch", "endTime": "(Optional, number) End time in milliseconds since epoch"}, "task": {"category": "Hyperliquid", "query": "Retrieve historical candlestick data for tokens"}}, {"name": "get_l2_book", "server": "Hyperliquid", "description": "Access the L2 order book for any token", "parameter": {"symbol": "(string) Token symbol"}, "task": {"category": "Hyperliquid", "query": "Access L2 order book data"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Image Generation", "description": "Generate images using the Flux model based on text prompts", "tools": [{"name": "generate_image", "server": "Image Generation", "description": "Generates images using the Flux model based on text prompts.", "parameter": {"prompt": "(required) Text description of the image to generate", "seed": "(optional) Random seed for reproducible generation", "aspect_ratio": "(optional) Image aspect ratio (default: '1:1')", "output_format": "(optional) Output format - 'webp', 'jpg', or 'png' (default: 'webp')", "num_outputs": "(optional) Number of images to generate (1-4, default: 1)"}, "task": {"category": "Image Generation", "query": "Generate images from text prompts"}}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "InfluxDB", "description": "1. Write time-series data in line protocol format 2. Execute Flux queries 3. Create a new bucket 4. Create a new organization", "tools": [{"name": "write-data", "server": "InfluxDB", "description": "Write time-series data in line protocol format", "parameter": {"org": "(string) The organization name", "bucket": "(string) The bucket name", "data": "(string) The data in line protocol format", "precision": "(Optional, string) The precision of the timestamps"}, "task": {"category": "InfluxDB", "query": "Write time-series data to a database"}}, {"name": "query-data", "server": "InfluxDB", "description": "Execute Flux queries", "parameter": {"org": "(string) The organization name", "query": "(string) The Flux query to execute"}, "task": {"category": "InfluxDB", "query": "Execute Flux queries on database"}}, {"name": "create-bucket", "server": "InfluxDB", "description": "Create a new bucket", "parameter": {"name": "(string) The name of the new bucket", "orgID": "(string) The ID of the organization", "retentionPeriodSeconds": "(Optional, number) The retention period in seconds"}, "task": {"category": "InfluxDB", "query": "Create a new storage bucket"}}, {"name": "create-org", "server": "InfluxDB", "description": "Create a new organization", "parameter": {"name": "(string) The name of the new organization", "description": "(Optional, string) A description of the organization"}, "task": {"category": "InfluxDB", "query": "Create a new organization in database"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Inoyu", "description": "1.获取个人资料 2.更新个人资料属性 3.通过ID获取特定资料 4.搜索资料 5.创建Unomi范围", "tools": [{"name": "get_my_profile", "server": "Inoyu", "description": "Get your profile using environment variables. Automatically generates a session ID based on the current date.", "parameter": {"requireSegments": "(Optional, boolean) Include segment information", "requireScores": "(Optional, boolean) Include scoring information"}, "task": {"category": "Inoyu", "query": "Retrieve user profile information"}}, {"name": "update_my_profile", "server": "Inoyu", "description": "Update properties of your profile. Takes a properties object with key-value pairs to update.", "parameter": {"properties": "(object) Key-value pairs to update, supporting string, number, boolean, and null values"}, "task": {"category": "Inoyu", "query": "Update user profile properties"}}, {"name": "get_profile", "server": "Inoyu", "description": "Retrieve a specific profile by ID. Returns full profile data from Unomi.", "parameter": {"profileId": "(string) Required parameter to specify the profile ID"}, "task": {"category": "Unomi", "query": "Retrieve profile data by ID"}}, {"name": "search_profiles", "server": "Inoyu", "description": "Search for profiles using a query string and optional limit/offset parameters. Searches across firstName, lastName, and email fields.", "parameter": {"query": "(string) Query string to search for profiles", "limit": "(Optional, number) Limit the number of results", "offset": "(Optional, number) Offset for pagination"}, "task": {"category": "Inoyu", "query": "Search user profiles by name or email"}}, {"name": "create_scope", "server": "Inoyu", "description": "Create a new Unomi scope. Required for event tracking and profile updates.", "parameter": {"scope": "(string) Identifier for the new scope", "name": "(Optional, string) Name of the new scope", "description": "(Optional, string) Description of the new scope"}, "task": {"category": "Unomi", "query": "Create a new scope for event tracking and profile updates"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Intercom", "description": "1. Retrieve conversations within a date range with content filtering 2. Find conversations for a specific customer 3. Retrieve tickets by status 4. Find tickets associated with a specific customer", "tools": [{"name": "list_conversations", "server": "Intercom", "description": "Retrieves all conversations within a date range with content filtering.", "parameter": {"startDate": "(DD/MM/YYYY) Start date (required)", "endDate": "(DD/MM/YYYY) End date (required)", "keyword": "(string) Filter to include conversations with this text", "exclude": "(string) Filter to exclude conversations with this text"}, "task": {"category": "Intercom", "query": "Retrieve conversations within a date range"}}, {"name": "search_conversations_by_customer", "server": "Intercom", "description": "Finds conversations for a specific customer.", "parameter": {"customerIdentifier": "(string) Customer email or Intercom ID (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date", "keywords": "(array) Optional keywords to filter by content"}, "task": {"category": "Intercom", "query": "Search customer conversations"}}, {"name": "search_tickets_by_status", "server": "Intercom", "description": "Retrieves tickets by their status.", "parameter": {"status": "(string) 'open', 'pending', or 'resolved' (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date"}, "task": {"category": "Intercom", "query": "Retrieve tickets based on status"}}, {"name": "search_tickets_by_customer", "server": "Intercom", "description": "Finds tickets associated with a specific customer.", "parameter": {"customerIdentifier": "(string) Customer email or Intercom ID (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date"}, "task": {"category": "Intercom", "query": "Search customer support tickets"}}], "domains": [{"name": "Customer Support Management", "description": "Customer support operations, including conversation retrieval, ticket management, and customer-specific queries"}]}
{"name": "iOS Simulator", "description": "Process natural language instructions and perform corresponding actions on the iOS simulator", "tools": [{"name": "processInstruction", "server": "iOS Simulator", "description": "Processes a natural language instruction and performs the corresponding action on the iOS simulator.", "parameter": {"instruction": "(string) The natural language command to execute."}, "task": {"category": "iOS Simulator", "query": "Execute natural language commands on iOS simulator"}}], "domains": [{"name": "Remote Desktop Control", "description": "远程桌面控制，包括屏幕捕获、输入模拟（键盘/鼠标）、应用程序控制及自动化操作"}]}
{"name": "iTerm MCP", "description": "1.在iTerm终端中写入命令并返回输出行数 2.从iTerm终端读取指定行数的输出 3.向iTerm终端发送控制字符", "tools": [{"name": "write_to_terminal", "server": "iTerm MCP", "description": "Writes to the active iTerm terminal, often used to run a command. Returns the number of lines of output produced by the command.", "parameter": {}, "task": {"category": "iTerm", "query": "Write to terminal and run commands"}}, {"name": "read_terminal_output", "server": "iTerm MCP", "description": "Reads the requested number of lines from the active iTerm terminal.", "parameter": {}, "task": {"category": "iTerm", "query": "Read lines from terminal output"}}, {"name": "send_control_character", "server": "iTerm MCP", "description": "Sends a control character to the active iTerm terminal.", "parameter": {}, "task": {"category": "iTerm", "query": "Send control character to terminal"}}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}]}
{"name": "JDBC", "description": "1.通过JDBC URL存储和检索数据库数据 2.检查运行中的JVM进程 3.从文件系统提供文件服务 4.使用JavaFX创建绘图画布 5.与Kubernetes集群交互 6.使用Docker/Podman/OCI兼容容器引擎 7.通过Wolfram Alpha LLM API进行优化的网络搜索", "tools": [{"name": "jdbc", "server": "JDBC", "description": "A server for storing and retrieving data from a database via a JDBC URL.", "parameter": {}, "task": {"category": "JDBC", "query": "Store and retrieve data from a database"}}, {"name": "jvminsight", "server": "JDBC", "description": "A server for inspecting a running JVM process.", "parameter": {}, "task": {"category": "JDBC", "query": "Inspect running JVM processes"}}, {"name": "filesystem", "server": "JDBC", "description": "A server for serving files from a file system.", "parameter": {"path1": "(string) Path to the first directory to serve", "path2": "(Optional, string) Path to an additional directory to serve"}, "task": {"category": "JDBC", "query": "Serve files from a file system"}}, {"name": "jfx", "server": "JDBC", "description": "A server that exposes a canvas for making drawings using JavaFX.", "parameter": {}, "task": {"category": "JavaFX", "query": "Create drawings on a canvas"}}, {"name": "kubernetes", "server": "JDBC", "description": "A server for interacting with a Kubernetes cluster.", "parameter": {}, "task": {"category": "Kubernetes", "query": "Interact with a Kubernetes cluster"}}, {"name": "containers", "server": "JDBC", "description": "A server for working with Docker/Podman/OCI compatible container engines.", "parameter": {}, "task": {"category": "JDBC", "query": "Manage Docker/Podman/OCI compatible containers"}}, {"name": "wolfram", "server": "JDBC", "description": "A server for performing web searches optimized for use by a large language model through the Wolfram Alpha LLM API.", "parameter": {}, "task": {"category": "Wolfram Alpha", "query": "Perform web searches optimized for LLM"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "JSON", "description": "1. Query JSON data using JSONPath syntax with extended operations 2. Filter JSON data using conditions", "tools": [{"name": "query", "server": "JSON", "description": "Query JSON data using JSONPath syntax with extended operations", "parameter": {"url": "(string) URL of the JSON data source", "jsonPath": "(string) JSONPath expression with optional operations"}, "task": {"category": "JSON", "query": "Query and manipulate JSON data using JSONPath"}}, {"name": "filter", "server": "JSON", "description": "Filter JSON data using conditions", "parameter": {"url": "(string) URL of the JSON data source", "jsonPath": "(string) Base JSONPath expression", "condition": "(string) Filter condition"}, "task": {"category": "JSON", "query": "Filter data from a JSON source based on conditions"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "KiCad MCP", "description": "1. Launch KiCad with a specific project 2. Run design rule checks on a specified PCB project", "tools": [{"name": "open_project", "server": "KiCad MCP", "description": "Launches KiCad with a specific project.", "parameter": {"project_path": "(string) Path to the KiCad project file (.kicad_pro)"}, "task": {"category": "KiCad", "query": "Launch KiCad with a specific project"}}, {"name": "run_drc", "server": "KiCad MCP", "description": "Runs design rule checks on a specified PCB project and compares results.", "parameter": {"project_path": "(string) Path to the KiCad project file (.kicad_pro)", "compare_to": "(Optional, string) Path to the previous DRC report for comparison"}, "task": {"category": "KiCad", "query": "Perform design rule checks on PCB projects"}}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Keycloak MCP", "description": "1.在指定领域创建新用户 2.从指定领域删除用户 3.列出所有可用领域 4.列出指定领域的所有用户", "tools": [{"name": "create-user", "server": "Keycloak MCP", "description": "Creates a new user in a specified realm.", "parameter": {"realm": "(string) The realm name", "username": "(string) Username for the new user", "email": "(string) Email address for the user", "firstName": "(string) User's first name", "lastName": "(string) User's last name"}, "task": {"category": "Keycloak", "query": "Create a new user in a specified realm"}}, {"name": "delete-user", "server": "Keycloak MCP", "description": "Deletes a user from a specified realm.", "parameter": {"realm": "(string) The realm name", "userId": "(string) The ID of the user to delete"}, "task": {"category": "Keycloak", "query": "Remove a user from a realm"}}, {"name": "list-realms", "server": "Keycloak MCP", "description": "Lists all available realms.", "parameter": {}, "task": {"category": "Keycloak", "query": "List all available realms"}}, {"name": "list-users", "server": "Keycloak MCP", "description": "Lists all users in a specified realm.", "parameter": {"realm": "(string) The realm name"}, "task": {"category": "Keycloak", "query": "Retrieve list of users in a realm"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "Kong Konnect", "description": "Kong API Gateway operations, including: querying API requests, analyzing consumer requests, listing services/routes/consumers/plugins/control planes, and checking control plane group memberships", "tools": [{"name": "Query API Requests", "server": "Kong Konnect", "description": "Query and analyze Kong API Gateway requests with customizable filters.", "parameter": {"timeRange": "(string) Time range for data retrieval (15M, 1H, 6H, 12H, 24H, 7D)", "statusCodes": "(array) Filter by specific HTTP status codes", "excludeStatusCodes": "(array) Exclude specific HTTP status codes", "httpMethods": "(array) Filter by HTTP methods", "consumerIds": "(array) Filter by consumer IDs", "serviceIds": "(array) Filter by service IDs", "routeIds": "(array) Filter by route IDs", "maxResults": "(number) Maximum number of results to return"}, "task": {"category": "Kong Konnect", "query": "Analyze API Gateway requests with filters"}}, {"name": "Get Consumer Requests", "server": "Kong Konnect", "description": "Analyze API requests made by a specific consumer.", "parameter": {"consumerId": "(string) ID of the consumer to analyze", "timeRange": "(string) Time range for data retrieval", "successOnly": "(boolean) Show only successful (2xx) requests", "failureOnly": "(boolean) Show only failed (non-2xx) requests", "maxResults": "(number) Maximum number of results to return"}, "task": {"category": "Kong Konnect", "query": "Analyze API requests by consumer"}}, {"name": "List Services", "server": "Kong Konnect", "description": "List all services associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of services to return", "offset": "(string) Pagination offset token"}, "task": {"category": "Kong Konnect", "query": "Retrieve services for a control plane"}}, {"name": "List Routes", "server": "Kong Konnect", "description": "List all routes associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of routes to return", "offset": "(string) Pagination offset token"}, "task": {"category": "Kong Konnect", "query": "Retrieve routes for a control plane"}}, {"name": "List Consumers", "server": "Kong Konnect", "description": "List all consumers associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of consumers to return", "offset": "(string) Pagination offset token"}, "task": {"category": "Kong Konnect", "query": "Retrieve list of consumers for a control plane"}}, {"name": "List Plugins", "server": "Kong Konnect", "description": "List all plugins associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of plugins to return", "offset": "(string) Pagination offset token"}, "task": {"category": "Kong Konnect", "query": "List plugins for a control plane"}}, {"name": "List Control Planes", "server": "Kong Konnect", "description": "List all control planes in your organization.", "parameter": {"pageSize": "(number) Number of control planes per page", "pageNumber": "(number) Page number to retrieve", "filterName": "(string) Filter control planes by name", "filterClusterType": "(string) Filter by cluster type", "filterCloudGateway": "(boolean) Filter by cloud gateway capability", "labels": "(array) Filter by labels", "sort": "(string) Sort field and direction"}, "task": {"category": "Kong Konnect", "query": "List and filter control planes in an organization"}}, {"name": "Get Control Plane", "server": "Kong Konnect", "description": "Get detailed information about a specific control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane to retrieve"}, "task": {"category": "Kong Konnect", "query": "Retrieve control plane details"}}, {"name": "List Control Plane Group Memberships", "server": "Kong Konnect", "description": "List all control planes that are members of a specific group.", "parameter": {"groupId": "(string) Control plane group ID", "pageSize": "(number) Number of members to return per page", "pageAfter": "(string) Cursor for pagination"}, "task": {"category": "Kong Konnect", "query": "List control planes in a group"}}, {"name": "Check Control Plane Group Membership", "server": "Kong Konnect", "description": "Check if a control plane is a member of any group.", "parameter": {"controlPlaneId": "(string) Control plane ID to check"}, "task": {"category": "Kong Konnect", "query": "Verify control plane group membership"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Kubernetes and OpenShift", "description": "Kubernetes集群管理，包括：配置查看、事件列表、命名空间管理、Pod操作（创建/删除/执行命令/获取日志）、资源管理（创建/更新/删除/获取/列表）", "tools": [{"name": "configuration_view", "server": "Kubernetes and OpenShift", "description": "Get the current Kubernetes configuration content as a kubeconfig YAML", "parameter": {"minified": "(Optional, boolean) Return a minified version of the configuration. Default is true."}, "task": {"category": "Kubernetes", "query": "Retrieve Kubernetes configuration in YAML format"}}, {"name": "events_list", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes events in the current cluster from all namespaces", "parameter": {"namespace": "(Optional, string) Namespace to retrieve the events from. If not provided, will list events from all namespaces."}, "task": {"category": "Kubernetes", "query": "List events in Kubernetes cluster"}}, {"name": "namespaces_list", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes namespaces in the current cluster", "parameter": {}, "task": {"category": "Kubernetes", "query": "List all namespaces in the cluster"}}, {"name": "pods_delete", "server": "Kubernetes and OpenShift", "description": "Delete a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod to delete", "namespace": "(Required, string) Namespace to delete the Pod from"}, "task": {"category": "Kubernetes", "query": "Delete a Kubernetes Pod"}}, {"name": "pods_exec", "server": "Kubernetes and OpenShift", "description": "Execute a command in a Kubernetes Pod in the current or provided namespace with the provided name and command", "parameter": {"command": "(Required, string[]) Command to execute in the Pod container. First item is the command, rest are arguments.", "name": "(Required, string) Name of the Pod", "namespace": "(Required, string) Namespace of the Pod", "container": "(Optional, string) Name of the Pod container to get logs from"}, "task": {"category": "Kubernetes", "query": "Execute commands in a Kubernetes Pod"}}, {"name": "pods_get", "server": "Kubernetes and OpenShift", "description": "Get a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod", "namespace": "(Required, string) Namespace to get the Pod from"}, "task": {"category": "Kubernetes", "query": "Retrieve Kubernetes Pod details"}}, {"name": "pods_list", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes pods in the current cluster from all namespaces", "parameter": {}, "task": {"category": "Kubernetes", "query": "List all pods in the cluster"}}, {"name": "pods_list_in_namespace", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes pods in the specified namespace in the current cluster", "parameter": {"namespace": "(Required, string) Namespace to list pods from"}, "task": {"category": "Kubernetes", "query": "List pods in a specific namespace"}}, {"name": "pods_log", "server": "Kubernetes and OpenShift", "description": "Get the logs of a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod to get logs from", "namespace": "(Required, string) Namespace to get the Pod logs from", "container": "(Optional, string) Name of the Pod container to get logs from"}, "task": {"category": "Kubernetes", "query": "Retrieve logs from a Kubernetes Pod"}}, {"name": "pods_run", "server": "Kubernetes and OpenShift", "description": "Run a Kubernetes Pod in the current or provided namespace with the provided container image and optional name", "parameter": {"image": "(Required, string) Container Image to run in the Pod", "namespace": "(Required, string) Namespace to run the Pod in", "name": "(Optional, string) Name of the Pod (random name if not provided)", "port": "(Optional, number) TCP/IP port to expose from the Pod container. No port exposed if not provided."}, "task": {"category": "Kubernetes", "query": "Run a Pod with specified container image in a namespace"}}, {"name": "projects_list", "server": "Kubernetes and OpenShift", "description": "List all the OpenShift projects in the current cluster", "parameter": {}, "task": {"category": "OpenShift", "query": "List all projects in the current cluster"}}, {"name": "resources_create_or_update", "server": "Kubernetes and OpenShift", "description": "Create or update a Kubernetes resource in the current cluster by providing a YAML or JSON representation of the resource", "parameter": {"resource": "(Required, string) A JSON or YAML containing a representation of the Kubernetes resource. Should include top-level fields such as apiVersion, kind, metadata, and spec."}, "task": {"category": "Kubernetes", "query": "Create or update Kubernetes resources"}}, {"name": "resources_delete", "server": "Kubernetes and OpenShift", "description": "Delete a Kubernetes resource in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resource (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resource (e.g., Pod, Service, Deployment, Ingress)", "name": "(Required, string) Name of the resource", "namespace": "(Optional, string) Namespace to delete the namespaced resource from. Ignored for cluster-scoped resources. Uses configured namespace if not provided."}, "task": {"category": "Kubernetes", "query": "Delete a Kubernetes resource"}}, {"name": "resources_get", "server": "Kubernetes and OpenShift", "description": "Get a Kubernetes resource in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resource (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resource (e.g., Pod, Service, Deployment, Ingress)", "name": "(Required, string) Name of the resource", "namespace": "(Optional, string) Namespace to retrieve the namespaced resource from. Ignored for cluster-scoped resources. Uses configured namespace if not provided."}, "task": {"category": "Kubernetes", "query": "Retrieve Kubernetes resources from the cluster"}}, {"name": "resources_list", "server": "Kubernetes and OpenShift", "description": "List Kubernetes resources and objects in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resources (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resources (e.g., Pod, Service, Deployment, Ingress)", "namespace": "(Optional, string) Namespace to retrieve the namespaced resources from. Ignored for cluster-scoped resources. Lists resources from all namespaces if not provided."}, "task": {"category": "Kubernetes", "query": "List resources and objects in a cluster"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Langflow-DOC-QA-SERVER", "description": "Query the document Q&A system", "tools": [{"name": "query_docs", "server": "Langflow-DOC-QA-SERVER", "description": "Query the document Q&A system", "parameter": {"query": "(string) The query string to be sent to the document Q&A system"}, "task": {"category": "Langflow", "query": "Query documents for answers"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Lightdash", "description": "Lightdash organization operations, including: listing projects, getting project details, listing spaces, listing charts, listing dashboards, getting custom metrics, getting catalog, getting metrics catalog, getting charts as code, and getting dashboards as code", "tools": [{"name": "list_projects", "server": "Lightdash", "description": "List all projects in the Lightdash organization", "parameter": {}, "task": {"category": "Lightdash", "query": "List all projects in an organization"}}, {"name": "get_project", "server": "Lightdash", "description": "Get details of a specific project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve project details"}}, {"name": "list_spaces", "server": "Lightdash", "description": "List all spaces in a project", "parameter": {}, "task": {"category": "Lightdash", "query": "List all spaces within a project"}}, {"name": "list_charts", "server": "Lightdash", "description": "List all charts in a project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve all charts in a project"}}, {"name": "list_dashboards", "server": "Lightdash", "description": "List all dashboards in a project", "parameter": {}, "task": {"category": "Lightdash", "query": "List all dashboards in a project"}}, {"name": "get_custom_metrics", "server": "Lightdash", "description": "Get custom metrics for a project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve custom metrics for a project"}}, {"name": "get_catalog", "server": "Lightdash", "description": "Get catalog for a project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve project catalog"}}, {"name": "get_metrics_catalog", "server": "Lightdash", "description": "Get metrics catalog for a project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve metrics catalog for a project"}}, {"name": "get_charts_as_code", "server": "Lightdash", "description": "Get charts as code for a project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve charts in code format"}}, {"name": "get_dashboards_as_code", "server": "Lightdash", "description": "Get dashboards as code for a project", "parameter": {}, "task": {"category": "Lightdash", "query": "Retrieve dashboards in code format"}}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}]}
{"name": "lsp-mcp", "description": "Language Server Protocol (LSP) operations, including: hover information retrieval, code completion suggestions, code actions, document opening/closing, diagnostics retrieval, LSP server start/restart, and log level configuration", "tools": [{"name": "get_info_on_location", "server": "lsp-mcp", "description": "Gets hover information at a specific location in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "line": "(number) Line number", "column": "(number) Column position"}, "task": {"category": "Language Server Protocol", "query": "Retrieve hover information for a specific location in a file"}}, {"name": "get_completions", "server": "lsp-mcp", "description": "Gets completion suggestions at a specific location in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "line": "(number) Line number", "column": "(number) Column position"}, "task": {"category": "lsp-mcp", "query": "Get code completion suggestions for a file"}}, {"name": "get_code_actions", "server": "lsp-mcp", "description": "Gets code actions for a specific range in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "start_line": "(number) Start line number", "start_column": "(number) Start column position", "end_line": "(number) End line number", "end_column": "(number) End column position"}, "task": {"category": "lsp-mcp", "query": "Retrieve code actions for a specific file range"}}, {"name": "open_document", "server": "lsp-mcp", "description": "Opens a file in the LSP server for analysis.", "parameter": {"file_path": "(string) Path to the file to open", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')"}, "task": {"category": "LSP", "query": "Open a file for language server analysis"}}, {"name": "close_document", "server": "lsp-mcp", "description": "Closes a file in the LSP server when you're done working with it.", "parameter": {"file_path": "(string) Path to the file to close"}, "task": {"category": "LSP", "query": "Close a file in the LSP server"}}, {"name": "get_diagnostics", "server": "lsp-mcp", "description": "Gets diagnostic messages (errors, warnings) for one or all open files.", "parameter": {"file_path": "(Optional, string) Path to the file to get diagnostics for. If not provided, returns diagnostics for all open files."}, "task": {"category": "LSP", "query": "Retrieve diagnostic messages for files"}}, {"name": "start_lsp", "server": "lsp-mcp", "description": "Starts the LSP server with a specified root directory. This must be called before using any other LSP-related tools.", "parameter": {"root_dir": "(string) The root directory for the LSP server (absolute path recommended)"}, "task": {"category": "LSP", "query": "Initialize LSP server with root directory"}}, {"name": "restart_lsp_server", "server": "lsp-mcp", "description": "Restarts the LSP server process without restarting the MCP server. This is useful for recovering from LSP server issues or for applying changes to the LSP server configuration.", "parameter": {"root_dir": "(Optional, string) The root directory for the LSP server. If provided, the server will be initialized with this directory after restart."}, "task": {"category": "LSP", "query": "Restart LSP server process"}}, {"name": "set_log_level", "server": "lsp-mcp", "description": "Sets the server's logging level to control verbosity of log messages.", "parameter": {"level": "(string) The logging level to set. One of: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency'."}, "task": {"category": "lsp-mcp", "query": "Configure server logging verbosity"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Linear", "description": "Linear issue management, including: creating, updating, searching, retrieving user-assigned issues, and adding comments", "tools": [{"name": "linear_create_issue", "server": "Linear", "description": "Create a new Linear issue.", "parameter": {"title": "(string) Issue title", "teamId": "(string) Team ID to create issue in", "description": "(Optional, string) Issue description (markdown supported)", "priority": "(Optional, number, 0-4) Priority level (1=urgent, 4=low)", "status": "(Optional, string) Initial status name"}, "task": {"category": "Linear", "query": "Create a new issue in Linear"}}, {"name": "linear_update_issue", "server": "Linear", "description": "Update an existing Linear issue.", "parameter": {"id": "(string) Issue ID to update", "title": "(Optional, string) New title", "description": "(Optional, string) New description", "priority": "(Optional, number, 0-4) New priority", "status": "(Optional, string) New status name"}, "task": {"category": "Linear", "query": "Update an existing issue with new details"}}, {"name": "linear_search_issues", "server": "Linear", "description": "Search Linear issues with flexible filtering.", "parameter": {"query": "(Optional, string) Text to search in title/description", "teamId": "(Optional, string) Filter by team", "status": "(Optional, string) Filter by status", "assigneeId": "(Optional, string) Filter by assignee", "labels": "(Optional, string[]) Filter by labels", "priority": "(Optional, number) Filter by priority", "limit": "(Optional, number, default: 10) Max results"}, "task": {"category": "Linear", "query": "Search and filter issues in Linear"}}, {"name": "linear_get_user_issues", "server": "Linear", "description": "Get issues assigned to a user.", "parameter": {"userId": "(Optional, string) User ID (omit for authenticated user)", "includeArchived": "(Optional, boolean) Include archived issues", "limit": "(Optional, number, default: 50) Max results"}, "task": {"category": "Linear", "query": "Retrieve issues assigned to a user"}}, {"name": "linear_add_comment", "server": "Linear", "description": "Add a comment to a Linear issue.", "parameter": {"issueId": "(string) Issue ID to comment on", "body": "(string) Comment text (markdown supported)", "createAsUser": "(Optional, string) Custom username", "displayIconUrl": "(Optional, string) Custom avatar URL"}, "task": {"category": "Linear", "query": "Add comments to issues"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Linear (Go)", "description": "Linear issue management, including: issue creation, update, search, retrieval by user/ID, comment addition, and team retrieval", "tools": [{"name": "linear_create_issue", "server": "Linear (Go)", "description": "Creates a new Linear issue with specified details. Supports creating sub-issues and assigning labels.", "parameter": {"title": "(required) Issue title", "team": "(required) Team identifier (key, UUID or name)", "description": "Issue description", "priority": "Priority (0-4)", "status": "Issue status", "parentIssue": "(Optional) Optional parent issue ID to create a sub-issue", "labels": "(Optional) Optional comma-separated list of label IDs to assign"}, "task": {"category": "Linear", "query": "Create a new issue with details"}}, {"name": "linear_update_issue", "server": "Linear (Go)", "description": "Updates an existing Linear issue's properties.", "parameter": {"id": "(required) Issue ID", "title": "New title", "description": "New description", "priority": "New priority (0-4)", "status": "New status"}, "task": {"category": "Linear", "query": "Update properties of an existing issue"}}, {"name": "linear_search_issues", "server": "Linear (Go)", "description": "Searches Linear issues using flexible criteria.", "parameter": {"query": "(Optional) Optional text to search in title and description", "teamId": "Filter by team ID", "status": "Filter by status name (e.g., 'In Progress', 'Done')", "assigneeId": "Filter by assignee's user ID", "labels": "Filter by label names (comma-separated)", "priority": "Filter by priority (1=urgent, 2=high, 3=normal, 4=low)", "estimate": "Filter by estimate points", "includeArchived": "Include archived issues in results (default: false)", "limit": "Max results to return (default: 10)"}, "task": {"category": "Linear", "query": "Search for issues with flexible filters"}}, {"name": "linear_get_user_issues", "server": "Linear (Go)", "description": "Retrieves issues assigned to a specific user or the authenticated user.", "parameter": {"userId": "(Optional) Optional user ID. If not provided, returns authenticated user's issues", "includeArchived": "Include archived issues in results", "limit": "Maximum number of issues to return (default: 50)"}, "task": {"category": "Linear", "query": "Retrieve issues assigned to a user"}}, {"name": "linear_get_issue", "server": "Linear (Go)", "description": "Retrieves a single Linear issue by its ID.", "parameter": {"issueId": "(required) ID of the issue to retrieve"}, "task": {"category": "Linear", "query": "Retrieve a single issue by ID"}}, {"name": "linear_add_comment", "server": "Linear (Go)", "description": "Adds a comment to an existing Linear issue.", "parameter": {"issueId": "(required) ID of the issue to comment on", "body": "(required) Comment text in markdown format", "createAsUser": "(Optional) Optional custom username to show for the comment", "displayIconUrl": "(Optional) Optional avatar URL for the comment"}, "task": {"category": "Linear", "query": "Add comments to issues"}}, {"name": "linear_get_teams", "server": "Linear (Go)", "description": "Retrieves Linear teams with an optional name filter.", "parameter": {"name": "(Optional) Optional team name filter. Returns teams whose names contain this string."}, "task": {"category": "Linear", "query": "Retrieve teams with optional name filter"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "llm-context", "description": "1. Initialize project configuration 2. Switch rules 3. Select files for inclusion and outline generation 4. Generate and copy context 5. Generate project instructions for LLMs 6. Process LLM file requests 7. List modified files 8. Generate outlines for code files 9. Extract code implementations requested by LLMs", "tools": [{"name": "lc-init", "server": "llm-context", "description": "Initialize project configuration", "parameter": {}, "task": {"category": "LLM", "query": "Initialize project settings"}}, {"name": "lc-set-rule", "server": "llm-context", "description": "Switch rules", "parameter": {"n": "(integer) The rule number to switch to"}, "task": {"category": "LLM Context", "query": "Switch between different rules"}}, {"name": "lc-sel-files", "server": "llm-context", "description": "Select files for inclusion", "parameter": {}, "task": {"category": "LLM", "query": "Select files for processing"}}, {"name": "lc-sel-outlines", "server": "llm-context", "description": "Select files for outline generation", "parameter": {}, "task": {"category": "LLM", "query": "Select files to generate outlines"}}, {"name": "lc-context", "server": "llm-context", "description": "Generate and copy context", "parameter": {"-p": "(Optional, flag) Include prompt instructions", "-u": "(Optional, flag) Include user notes", "-f FILE": "(Optional, string) Write to output file"}, "task": {"category": "LLM", "query": "Generate and manage context for LLM interactions"}}, {"name": "lc-prompt", "server": "llm-context", "description": "Generate project instructions for LLMs", "parameter": {}, "task": {"category": "LLM", "query": "Generate project instructions"}}, {"name": "lc-clip-files", "server": "llm-context", "description": "Process LLM file requests", "parameter": {}, "task": {"category": "LLM", "query": "Handle file processing requests for LLM"}}, {"name": "lc-changed", "server": "llm-context", "description": "List files modified since last context generation", "parameter": {}, "task": {"category": "LLM", "query": "List recently modified files"}}, {"name": "lc-outlines", "server": "llm-context", "description": "Generate outlines for code files", "parameter": {}, "task": {"category": "LLM", "query": "Generate code file outlines"}}, {"name": "lc-clip-implementations", "server": "llm-context", "description": "Extract code implementations requested by LLMs (doesn't support C/C++)", "parameter": {}, "task": {"category": "LLM", "query": "Extract code implementations for various programming languages"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "lucene-mcp-server", "description": "1.查询服务器状态 2.在Lucene索引中插入或更新文档 3.查询Lucene索引 4.从Lucene索引中删除文档 5.列出Lucene索引中的文档", "tools": [{"name": "GET /mcp/v1/status", "server": "lucene-mcp-server", "description": "Returns the status of the server.", "parameter": {}, "task": {"category": "Lucene", "query": "Check server status"}}, {"name": "POST /mcp/v1/upsert", "server": "lucene-mcp-server", "description": "Upserts (inserts or updates) one or more documents in the Lucene index.", "parameter": {"documents": "(array) An array of documents to upsert. Each document has an 'id', 'text', and optional 'metadata'."}, "task": {"category": "Lucene", "query": "Upsert documents into a Lucene index"}}, {"name": "POST /mcp/v1/query", "server": "lucene-mcp-server", "description": "Queries the Lucene index.", "parameter": {"queries": "(array) An array of query objects. Each query object contains a 'query' string, an optional 'top_k' integer, and an optional 'filter' map."}, "task": {"category": "Lucene", "query": "Search documents in Lucene index"}}, {"name": "POST /mcp/v1/delete", "server": "lucene-mcp-server", "description": "Deletes documents from the Lucene index.", "parameter": {"ids": "(array) An array of document IDs to delete."}, "task": {"category": "Lucene", "query": "Delete documents from index"}}, {"name": "GET /mcp/v1/list", "server": "lucene-mcp-server", "description": "Lists documents from the Lucene index.", "parameter": {"ids": "(array) An array of document IDs to list."}, "task": {"category": "Lucene", "query": "Retrieve documents from index"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "mac-messages-mcp", "description": "1. Retrieve recent messages from macOS Messages app 2. Send new messages through iMessage", "tools": [{"name": "get_recent_messages", "server": "mac-messages-mcp", "description": "Retrieves recent messages from the macOS Messages app.", "parameter": {"hours": "(int) Number of hours to look back for recent messages"}, "task": {"category": "macOS", "query": "Retrieve recent messages from the Messages app"}}, {"name": "send_message", "server": "mac-messages-mcp", "description": "Sends a new message through iMessage.", "parameter": {"recipient": "(str) Phone number or email of the recipient", "message": "(str) Content of the message to be sent"}, "task": {"category": "iMessage", "query": "Send a message to a recipient"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "MariaDB", "description": "Execute read-only operations against MariaDB", "tools": [{"name": "query_database", "server": "MariaDB", "description": "Execute read-only operations against MariaDB", "parameter": {}, "task": {"category": "MariaDB", "query": "Perform read-only database operations"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "MCP Create", "description": "1.从模板创建MCP服务器 2.在服务器上执行工具 3.获取服务器工具列表 4.删除服务器 5.获取运行中的服务器列表", "tools": [{"name": "create-server-from-template", "server": "MCP Create", "description": "Create MCP server from template", "parameter": {"language": "(string) The programming language for the server template"}, "task": {"category": "MCP", "query": "Create server from template"}}, {"name": "execute-tool", "server": "MCP Create", "description": "Execute tool on server", "parameter": {"serverId": "(string) The ID of the server", "toolName": "(string) The name of the tool to execute", "args": "(object) Arguments for the tool"}, "task": {"category": "MCP Create", "query": "Execute a tool on a specified server"}}, {"name": "get-server-tools", "server": "MCP Create", "description": "Get list of server tools", "parameter": {"serverId": "(string) The ID of the server"}, "task": {"category": "MCP", "query": "Retrieve list of server tools"}}, {"name": "delete-server", "server": "MCP Create", "description": "Delete server", "parameter": {"serverId": "(string) The ID of the server to delete"}, "task": {"category": "MCP", "query": "Delete a server"}}, {"name": "list-servers", "server": "MCP Create", "description": "Get list of running servers", "parameter": {}, "task": {"category": "MCP", "query": "Retrieve list of active servers"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "mcp-k8s-go", "description": "Kubernetes资源管理，包括：上下文列表、命名空间列表、资源检索（如pods/services/deployments）、节点列表、事件获取、pod日志检索及pod内命令执行", "tools": [{"name": "List Kubernetes contexts", "server": "mcp-k8s-go", "description": "Lists available Kubernetes contexts.", "parameter": {}, "task": {"category": "Kubernetes", "query": "List available contexts"}}, {"name": "List Kubernetes namespaces", "server": "mcp-k8s-go", "description": "Lists available Kubernetes namespaces.", "parameter": {}, "task": {"category": "Kubernetes", "query": "List available namespaces in a cluster"}}, {"name": "List and get any Kubernetes resources", "server": "mcp-k8s-go", "description": "Lists and retrieves any Kubernetes resources, including custom mappings for pods, services, and deployments.", "parameter": {}, "task": {"category": "Kubernetes", "query": "List and retrieve Kubernetes resources"}}, {"name": "List Kubernetes nodes", "server": "mcp-k8s-go", "description": "Lists available Kubernetes nodes.", "parameter": {}, "task": {"category": "Kubernetes", "query": "List available nodes in a Kubernetes cluster"}}, {"name": "List Kubernetes pods", "server": "mcp-k8s-go", "description": "Lists available Kubernetes pods.", "parameter": {}, "task": {"category": "Kubernetes", "query": "List available pods in a cluster"}}, {"name": "Get Kubernetes events", "server": "mcp-k8s-go", "description": "Retrieves Kubernetes events.", "parameter": {}, "task": {"category": "Kubernetes", "query": "Retrieve events from Kubernetes cluster"}}, {"name": "Get Kubernetes pod logs", "server": "mcp-k8s-go", "description": "Retrieves logs from a specified Kubernetes pod.", "parameter": {}, "task": {"category": "Kubernetes", "query": "Retrieve logs from a pod"}}, {"name": "Run command in Kubernetes pod", "server": "mcp-k8s-go", "description": "Executes a command within a specified Kubernetes pod.", "parameter": {}, "task": {"category": "Kubernetes", "query": "Execute commands inside a pod"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "mcp-local-rag", "description": "Perform web search to fetch latest information for enhancing model responses", "tools": [{"name": "rag_search", "server": "mcp-local-rag", "description": "Performs a web search to fetch the latest information and provides it to the model to enhance its responses.", "parameter": {}, "task": {"category": "RAG", "query": "Perform web search to fetch latest information"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "mcp-proxy", "description": "1.运行代理服务器从stdio连接到远程SSE服务器 2.运行代理服务器暴露SSE服务器连接到本地stdio服务器", "tools": [{"name": "stdio to SSE", "server": "mcp-proxy", "description": "Runs a proxy server from stdio that connects to a remote SSE server, allowing clients to communicate with the remote server over SSE.", "parameter": {"command_or_url": "(string) The MCP server SSE endpoint to connect to", "--headers": "(Optional, string) Headers to use for the MCP server SSE connection"}, "task": {"category": "mcp-proxy", "query": "Proxy server for SSE communication"}}, {"name": "SSE to stdio", "server": "mcp-proxy", "description": "Runs a proxy server exposing a SSE server that connects to a local stdio server, allowing remote connections to the local stdio server.", "parameter": {"command_or_url": "(string) The command to spawn the MCP stdio server", "--sse-port": "(Optional, int) The SSE server port to listen on", "--sse-host": "(Optional, string) The host IP address that the SSE server will listen on", "--env": "(Optional, string) Additional environment variables to pass to the MCP stdio server", "--pass-environment": "(Optional, flag) Pass through all environment variables when spawning the server", "--allow-origin": "(Optional, string) Allowed origins for the SSE server"}, "task": {"category": "mcp-proxy", "query": "Proxy server for connecting SSE to local stdio server"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "mem0-mcp", "description": "1.存储代码片段、实现细节和编码模式 2.检索所有存储的编码偏好 3.语义搜索存储的编码偏好", "tools": [{"name": "add_coding_preference", "server": "mem0-mcp", "description": "Store code snippets, implementation details, and coding patterns with comprehensive context.", "parameter": {"code_snippet": "(string) The complete code snippet with dependencies.", "language_version": "(string) The language or framework version used.", "setup_instructions": "(string) Instructions for setting up the environment.", "documentation": "(string) Additional documentation and comments.", "example_usage": "(string) Example usage of the code snippet.", "best_practices": "(string) Best practices associated with the code."}, "task": {"category": "mem0-mcp", "query": "Store and manage code snippets with context"}}, {"name": "get_all_coding_preferences", "server": "mem0-mcp", "description": "Retrieve all stored coding preferences for analysis and review.", "parameter": {}, "task": {"category": "mem0-mcp", "query": "Retrieve stored coding preferences"}}, {"name": "search_coding_preferences", "server": "mem0-mcp", "description": "Semantically search through stored coding preferences to find relevant information.", "parameter": {"query": "(string) The search query to find relevant coding preferences."}, "task": {"category": "mem0-mcp", "query": "Search for coding preferences"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Membase", "description": "1.获取当前会话ID 2.切换到不同会话 3.保存消息到当前会话 4.获取当前会话的最后n条消息", "tools": [{"name": "get_conversation_id", "server": "Membase", "description": "Get the current conversation id.", "parameter": {}, "task": {"category": "Membase", "query": "Retrieve current conversation identifier"}}, {"name": "switch_conversation", "server": "Membase", "description": "Switch to a different conversation.", "parameter": {}, "task": {"category": "Membase", "query": "Change the current conversation context"}}, {"name": "save_message", "server": "Membase", "description": "Save a message/memory into the current conversation.", "parameter": {}, "task": {"category": "Membase", "query": "Save messages or memories in a conversation"}}, {"name": "get_messages", "server": "Membase", "description": "Get the last n messages from the current conversation.", "parameter": {}, "task": {"category": "Membase", "query": "Retrieve recent messages from conversation"}}], "domains": [{"name": "Customer Support Management", "description": "Customer support operations, including conversation retrieval, ticket management, and customer-specific queries"}]}
{"name": "Markdownify", "description": "Convert various file types (YouTube videos, PDF, Bing search results, web pages, images, audio, DOCX, XLSX, PPTX) to Markdown format and retrieve existing Markdown files", "tools": [{"name": "youtube-to-markdown", "server": "Markdownify", "description": "Convert YouTube videos to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert YouTube videos to Markdown format"}}, {"name": "pdf-to-markdown", "server": "Markdownify", "description": "Convert PDF files to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert PDF files to Markdown format"}}, {"name": "bing-search-to-markdown", "server": "Markdownify", "description": "Convert Bing search results to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert search results to Markdown format"}}, {"name": "webpage-to-markdown", "server": "Markdownify", "description": "Convert web pages to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert web content to Markdown format"}}, {"name": "image-to-markdown", "server": "Markdownify", "description": "Convert images to Markdown with metadata", "parameter": {}, "task": {"category": "Markdown", "query": "Convert images to Markdown format"}}, {"name": "audio-to-markdown", "server": "Markdownify", "description": "Convert audio files to Markdown with transcription", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert audio files to Markdown format"}}, {"name": "docx-to-markdown", "server": "Markdownify", "description": "Convert DOCX files to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert DOCX files to Markdown format"}}, {"name": "xlsx-to-markdown", "server": "Markdownify", "description": "Convert XLSX files to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert spreadsheet files to Markdown format"}}, {"name": "pptx-to-markdown", "server": "Markdownify", "description": "Convert PPTX files to Markdown", "parameter": {}, "task": {"category": "Markdownify", "query": "Convert PowerPoint presentations to Markdown format"}}, {"name": "get-markdown-file", "server": "Markdownify", "description": "Retrieve an existing Markdown file. File extension must end with: *.md, *.markdown.", "parameter": {"MD_SHARE_DIR": "(Optional, string) Restrict the directory from which files can be retrieved."}, "task": {"category": "Markdown", "query": "Retrieve existing Markdown files"}}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "MongoDB Lens", "description": "MongoDB数据库操作,包括:连接管理、数据聚合、查询优化、模式分析、批量操作、缓存清理、文档计数、集合/数据库/索引/用户创建与删除、查询执行计划分析、数据导出、地理空间查询、统计获取、GridFS文件管理、文档插入/更新/删除、实时变更监控等", "tools": [{"name": "add-connection-alias", "server": "MongoDB Lens", "description": "Add a new MongoDB connection alias", "parameter": {}, "task": {"category": "MongoDB", "query": "Add a new connection alias for MongoDB"}}, {"name": "aggregate-data", "server": "MongoDB Lens", "description": "Execute aggregation pipelines", "parameter": {}, "task": {"category": "MongoDB", "query": "Execute data aggregation operations"}}, {"name": "analyze-query-patterns", "server": "MongoDB Lens", "description": "Analyze live queries and suggest optimizations", "parameter": {}, "task": {"category": "MongoDB", "query": "Analyze and optimize live queries"}}, {"name": "analyze-schema", "server": "MongoDB Lens", "description": "Automatically infer collection schemas", "parameter": {}, "task": {"category": "MongoDB", "query": "Infer collection schemas automatically"}}, {"name": "bulk-operations", "server": "MongoDB Lens", "description": "Perform multiple operations efficiently (requires confirmation for destructive operations)", "parameter": {}, "task": {"category": "MongoDB", "query": "Perform bulk operations on database"}}, {"name": "clear-cache", "server": "MongoDB Lens", "description": "Clear memory caches to ensure fresh data", "parameter": {}, "task": {"category": "MongoDB", "query": "Clear memory caches"}}, {"name": "collation-query", "server": "MongoDB Lens", "description": "Find documents with language-specific collation rules", "parameter": {}, "task": {"category": "MongoDB", "query": "Search documents using language-specific collation"}}, {"name": "compare-schemas", "server": "MongoDB Lens", "description": "Compare schemas between two collections", "parameter": {}, "task": {"category": "MongoDB", "query": "Compare schemas of collections"}}, {"name": "connect-mongodb", "server": "MongoDB Lens", "description": "Connect to a different MongoDB URI", "parameter": {}, "task": {"category": "MongoDB", "query": "Connect to a MongoDB database"}}, {"name": "connect-original", "server": "MongoDB Lens", "description": "Connect back to the original MongoDB URI used at startup", "parameter": {}, "task": {"category": "MongoDB", "query": "Connect to the original MongoDB URI"}}, {"name": "count-documents", "server": "MongoDB Lens", "description": "Count documents matching specified criteria", "parameter": {}, "task": {"category": "MongoDB", "query": "Count documents based on criteria"}}, {"name": "create-collection", "server": "MongoDB Lens", "description": "Create new collections with custom options", "parameter": {}, "task": {"category": "MongoDB", "query": "Create new collections with custom options"}}, {"name": "create-database", "server": "MongoDB Lens", "description": "Create a new database with option to switch to it", "parameter": {}, "task": {"category": "MongoDB", "query": "Create a new database"}}, {"name": "create-index", "server": "MongoDB Lens", "description": "Create new indexes for performance optimization", "parameter": {}, "task": {"category": "MongoDB", "query": "Create new indexes for performance optimization"}}, {"name": "create-timeseries", "server": "MongoDB Lens", "description": "Create time series collections for temporal data", "parameter": {}, "task": {"category": "MongoDB", "query": "Create time series collections"}}, {"name": "create-user", "server": "MongoDB Lens", "description": "Create new database users with specific roles", "parameter": {}, "task": {"category": "MongoDB", "query": "Create new database users with roles"}}, {"name": "current-database", "server": "MongoDB Lens", "description": "Show the current database context", "parameter": {}, "task": {"category": "MongoDB", "query": "Display the current database context"}}, {"name": "delete-document", "server": "MongoDB Lens", "description": "Delete documents matching specified criteria (requires confirmation)", "parameter": {}, "task": {"category": "MongoDB", "query": "Delete documents based on criteria"}}, {"name": "distinct-values", "server": "MongoDB Lens", "description": "Extract unique values for any field", "parameter": {}, "task": {"category": "MongoDB", "query": "Extract unique field values from database"}}, {"name": "drop-collection", "server": "MongoDB Lens", "description": "Remove collections from the database (requires confirmation)", "parameter": {}, "task": {"category": "MongoDB", "query": "Remove collections from database"}}, {"name": "drop-database", "server": "MongoDB Lens", "description": "Drop a database (requires confirmation)", "parameter": {}, "task": {"category": "MongoDB", "query": "Delete a database"}}, {"name": "drop-index", "server": "MongoDB Lens", "description": "Remove indexes from collections (requires confirmation)", "parameter": {}, "task": {"category": "MongoDB", "query": "Remove indexes from collections"}}, {"name": "drop-user", "server": "MongoDB Lens", "description": "Remove database users (requires confirmation)", "parameter": {}, "task": {"category": "MongoDB", "query": "Remove database users"}}, {"name": "explain-query", "server": "MongoDB Lens", "description": "Analyze query execution plans", "parameter": {}, "task": {"category": "MongoDB", "query": "Analyze query execution plans"}}, {"name": "export-data", "server": "MongoDB Lens", "description": "Export query results in JSON or CSV format", "parameter": {}, "task": {"category": "MongoDB", "query": "Export data in JSON or CSV format"}}, {"name": "find-documents", "server": "MongoDB Lens", "description": "Run queries with filters, projections, and sorting", "parameter": {}, "task": {"category": "MongoDB", "query": "Query documents with filters and sorting"}}, {"name": "generate-schema-validator", "server": "MongoDB Lens", "description": "Generate JSON Schema validators", "parameter": {}, "task": {"category": "MongoDB", "query": "Generate JSON Schema validators"}}, {"name": "geo-query", "server": "MongoDB Lens", "description": "Perform geospatial queries with various operators", "parameter": {}, "task": {"category": "MongoDB", "query": "Perform geospatial queries"}}, {"name": "get-stats", "server": "MongoDB Lens", "description": "Retrieve database or collection statistics", "parameter": {}, "task": {"category": "MongoDB", "query": "Retrieve statistics for database or collection"}}, {"name": "gridfs-operation", "server": "MongoDB Lens", "description": "Manage large files with GridFS buckets", "parameter": {}, "task": {"category": "MongoDB", "query": "Manage large files using GridFS"}}, {"name": "insert-document", "server": "MongoDB Lens", "description": "Insert one or more documents into collections", "parameter": {}, "task": {"category": "MongoDB", "query": "Insert documents into collections"}}, {"name": "list-collections", "server": "MongoDB Lens", "description": "Explore collections in the current database", "parameter": {}, "task": {"category": "MongoDB", "query": "List collections in the current database"}}, {"name": "list-connections", "server": "MongoDB Lens", "description": "View all available MongoDB connection aliases", "parameter": {}, "task": {"category": "MongoDB", "query": "List available database connections"}}, {"name": "list-databases", "server": "MongoDB Lens", "description": "View all accessible databases", "parameter": {}, "task": {"category": "MongoDB", "query": "List all accessible databases"}}, {"name": "rename-collection", "server": "MongoDB Lens", "description": "Rename existing collections (requires confirmation when dropping targets)", "parameter": {}, "task": {"category": "MongoDB", "query": "Rename existing collections in database"}}, {"name": "shard-status", "server": "MongoDB Lens", "description": "View sharding configuration for databases and collections", "parameter": {}, "task": {"category": "MongoDB", "query": "View sharding configuration"}}, {"name": "text-search", "server": "MongoDB Lens", "description": "Perform full-text search across text-indexed fields", "parameter": {}, "task": {"category": "MongoDB", "query": "Perform full-text search on indexed fields"}}, {"name": "transaction", "server": "MongoDB Lens", "description": "Execute multiple operations in a single ACID transaction", "parameter": {}, "task": {"category": "MongoDB", "query": "Execute multiple operations in a single transaction"}}, {"name": "update-document", "server": "MongoDB Lens", "description": "Update documents matching specified criteria", "parameter": {}, "task": {"category": "MongoDB", "query": "Update documents based on criteria"}}, {"name": "use-database", "server": "MongoDB Lens", "description": "Switch to a specific database context", "parameter": {}, "task": {"category": "MongoDB", "query": "Switch database context"}}, {"name": "validate-collection", "server": "MongoDB Lens", "description": "Check for data inconsistencies", "parameter": {}, "task": {"category": "MongoDB", "query": "Validate data consistency in collections"}}, {"name": "watch-changes", "server": "MongoDB Lens", "description": "Monitor real-time changes to collections", "parameter": {}, "task": {"category": "MongoDB", "query": "Monitor real-time changes in database collections"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Monday.com", "description": "Monday.com平台操作，包括：创建/删除/归档项目、创建/移动项目到组、获取板组/项目/子项目列表、创建/获取文档内容、添加文档块、创建/获取更新评论", "tools": [{"name": "monday-create-item", "server": "Monday.com", "description": "Creates a new item or sub-item in a Monday.com board", "parameter": {}, "task": {"category": "Monday.com", "query": "Create new items in a board"}}, {"name": "monday-get-board-groups", "server": "Monday.com", "description": "Retrieves all groups from a specified Monday.com board", "parameter": {}, "task": {"category": "Monday.com", "query": "Retrieve groups from a board"}}, {"name": "monday-create-update", "server": "Monday.com", "description": "Creates a comment/update on a Monday.com item", "parameter": {}, "task": {"category": "Monday.com", "query": "Create comments or updates on items"}}, {"name": "monday-list-boards", "server": "Monday.com", "description": "Lists all available Monday.com boards", "parameter": {}, "task": {"category": "Monday.com", "query": "List all available boards"}}, {"name": "monday-list-items-in-groups", "server": "Monday.com", "description": "Lists all items in specified groups of a Monday.com board", "parameter": {}, "task": {"category": "Monday.com", "query": "List items in board groups"}}, {"name": "monday-list-subitems-in-items", "server": "Monday.com", "description": "Lists all sub-items for given Monday.com items", "parameter": {}, "task": {"category": "Monday.com", "query": "List sub-items for items"}}, {"name": "monday-create-board", "server": "Monday.com", "description": "Creates a new Monday.com board", "parameter": {}, "task": {"category": "Monday.com", "query": "Create a new board"}}, {"name": "monday-create-board-group", "server": "Monday.com", "description": "Creates a new group in a Monday.com board", "parameter": {}, "task": {"category": "Monday.com", "query": "Create a new group in a board"}}, {"name": "monday-move-item-to-group", "server": "Monday.com", "description": "Moves a Monday.com item to a different group", "parameter": {}, "task": {"category": "Monday.com", "query": "Move item to a different group"}}, {"name": "monday-delete-item", "server": "Monday.com", "description": "Deletes a Monday.com item", "parameter": {}, "task": {"category": "Monday.com", "query": "Delete an item from Monday.com"}}, {"name": "monday-archive-item", "server": "Monday.com", "description": "Archives a Monday.com item", "parameter": {}, "task": {"category": "Monday.com", "query": "Archive items in a project management tool"}}, {"name": "monday-get-item-updates", "server": "Monday.com", "description": "Retrieves updates/comments for a specific item", "parameter": {}, "task": {"category": "Monday.com", "query": "Retrieve updates or comments for an item"}}, {"name": "monday-get-docs", "server": "Monday.com", "description": "Lists documents in Monday.com, optionally filtered by folder", "parameter": {}, "task": {"category": "Monday.com", "query": "List documents in a project management platform"}}, {"name": "monday-get-doc-content", "server": "Monday.com", "description": "Retrieves the content of a specific document", "parameter": {}, "task": {"category": "Monday.com", "query": "Retrieve document content"}}, {"name": "monday-create-doc", "server": "Monday.com", "description": "Creates a new document in Monday.com", "parameter": {}, "task": {"category": "Monday.com", "query": "Create a new document"}}, {"name": "monday-add-doc-block", "server": "Monday.com", "description": "Adds a block to an existing document", "parameter": {}, "task": {"category": "Monday.com", "query": "Add blocks to documents"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Multicluster-MCP-Sever", "description": "1.从中心集群检索资源 2.从托管集群检索资源 3.使用指定ClusterRole连接到托管集群 4.通过Open Cluster Management跨多个Kubernetes集群访问资源", "tools": [{"name": "Retrieve resources from the hub cluster", "server": "Multicluster-MCP-Sever", "description": "Retrieves resources from the current context (hub cluster).", "parameter": {}, "task": {"category": "Multicluster-MCP-Sever", "query": "Retrieve resources from hub cluster"}}, {"name": "Retrieve resources from the managed clusters", "server": "Multicluster-MCP-Sever", "description": "Retrieves resources from managed clusters.", "parameter": {}, "task": {"category": "Multicluster-MCP-Sever", "query": "Retrieve resources from managed clusters"}}, {"name": "Connect to a managed cluster", "server": "Multicluster-MCP-Sever", "description": "Connects to a managed cluster using a specified ClusterRole.", "parameter": {"ClusterRole": "(string) The name of the ClusterRole to use for connecting to the managed cluster."}, "task": {"category": "Multicluster-MCP-Sever", "query": "Connect to a managed cluster using ClusterRole"}}, {"name": "Access resources across multiple Kubernetes clusters", "server": "Multicluster-MCP-Sever", "description": "Accesses resources across multiple Kubernetes clusters via Open Cluster Management.", "parameter": {}, "task": {"category": "Kubernetes", "query": "Access resources in multiple clusters"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "n8n", "description": "1.通过webhook触发工作流 2.工作流管理（创建、更新、删除、激活/停用） 3.工作流执行管理（执行、获取详情、列表查询、停止）", "tools": [{"name": "run_webhook", "server": "n8n", "description": "Triggers a workflow via a webhook, passing the workflow name and optional data.", "parameter": {"workflowName": "(string) The name of the workflow to trigger", "data": "(Optional, object) Additional data to pass to the webhook"}, "task": {"category": "n8n", "query": "Trigger workflows via webhook"}}, {"name": "workflow_list", "server": "n8n", "description": "Lists all workflows.", "parameter": {}, "task": {"category": "n8n", "query": "List all workflows"}}, {"name": "workflow_get", "server": "n8n", "description": "Gets details of a specific workflow.", "parameter": {"id": "(string) The ID of the workflow"}, "task": {"category": "n8n", "query": "Retrieve workflow details"}}, {"name": "workflow_create", "server": "n8n", "description": "Creates a new workflow.", "parameter": {"name": "(string) The name of the new workflow", "data": "(object) The workflow data"}, "task": {"category": "n8n", "query": "Create a new workflow"}}, {"name": "workflow_update", "server": "n8n", "description": "Updates an existing workflow.", "parameter": {"id": "(string) The ID of the workflow to update", "data": "(object) The updated workflow data"}, "task": {"category": "n8n", "query": "Update an existing workflow"}}, {"name": "workflow_delete", "server": "n8n", "description": "Deletes a workflow.", "parameter": {"id": "(string) The ID of the workflow to delete"}, "task": {"category": "n8n", "query": "Delete a workflow by ID"}}, {"name": "workflow_activate", "server": "n8n", "description": "Activates a workflow.", "parameter": {"id": "(string) The ID of the workflow to activate"}, "task": {"category": "n8n", "query": "Activate a workflow"}}, {"name": "workflow_deactivate", "server": "n8n", "description": "Deactivates a workflow.", "parameter": {"id": "(string) The ID of the workflow to deactivate"}, "task": {"category": "n8n", "query": "Deactivate a workflow"}}, {"name": "execution_run", "server": "n8n", "description": "Executes a workflow via the API.", "parameter": {"id": "(string) The ID of the workflow to execute"}, "task": {"category": "n8n", "query": "Execute a workflow using the API"}}, {"name": "execution_get", "server": "n8n", "description": "Gets details of a specific execution.", "parameter": {"id": "(string) The ID of the execution"}, "task": {"category": "n8n", "query": "Retrieve execution details"}}, {"name": "execution_list", "server": "n8n", "description": "Lists executions for a workflow.", "parameter": {"workflowId": "(string) The ID of the workflow"}, "task": {"category": "n8n", "query": "List workflow executions"}}, {"name": "execution_stop", "server": "n8n", "description": "Stops a running execution.", "parameter": {"id": "(string) The ID of the execution to stop"}, "task": {"category": "n8n", "query": "Stop a running execution"}}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "National Parks", "description": "1. Search for national parks based on various criteria 2. Get comprehensive information about a specific national park 3. Get current alerts for national parks including closures, hazards, and important information 4. Get information about visitor centers and their operating hours 5. Get information about available campgrounds and their amenities 6. Find upcoming events at parks", "tools": [{"name": "findParks", "server": "National Parks", "description": "Search for national parks based on various criteria", "parameter": {"stateCode": "(optional string) Filter parks by state code (e.g., 'CA' for California). Multiple states can be comma-separated (e.g., 'CA,OR,WA')", "q": "(optional string) Search term to filter parks by name or description", "limit": "(optional number) Maximum number of parks to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "activities": "(optional string) Filter by available activities (e.g., 'hiking,camping')"}, "task": {"category": "National Parks", "query": "Search for national parks by criteria"}}, {"name": "getParkDetails", "server": "National Parks", "description": "Get comprehensive information about a specific national park", "parameter": {"parkCode": "(string) The park code of the national park (e.g., 'yose' for Yosemite, 'grca' for Grand Canyon)"}, "task": {"category": "National Parks", "query": "Retrieve detailed information about a national park"}}, {"name": "getAlerts", "server": "National Parks", "description": "Get current alerts for national parks including closures, hazards, and important information", "parameter": {"parkCode": "(optional string) Filter alerts by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of alerts to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter alerts by title or description"}, "task": {"category": "National Parks", "query": "Retrieve current alerts for national parks"}}, {"name": "getVisitorCenters", "server": "National Parks", "description": "Get information about visitor centers and their operating hours", "parameter": {"parkCode": "(optional string) Filter visitor centers by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of visitor centers to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter visitor centers by name or description"}, "task": {"category": "National Parks", "query": "Retrieve visitor center details and operating hours"}}, {"name": "getCampgrounds", "server": "National Parks", "description": "Get information about available campgrounds and their amenities", "parameter": {"parkCode": "(optional string) Filter campgrounds by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of campgrounds to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter campgrounds by name or description"}, "task": {"category": "National Parks", "query": "Find campgrounds with amenities"}}, {"name": "getEvents", "server": "National Parks", "description": "Find upcoming events at parks", "parameter": {"parkCode": "(optional string) Filter events by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of events to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "dateStart": "(optional string) Start date for filtering events (format: YYYY-MM-DD)", "dateEnd": "(optional string) End date for filtering events (format: YYYY-MM-DD)", "q": "(optional string) Search term to filter events by title or description"}, "task": {"category": "National Parks", "query": "Find upcoming events at national parks"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "NS Travel Information", "description": "1.提供实时列车信息，包括出发和到达时间、站台号、延误和旅行笔记 2.规划最优旅行路线，包括换乘和实时更新 3.检查服务中断、维护工作和工程活动 4.获取单程和往返旅程的准确票价，包括旅行等级和团体票价 5.访问全面的车站信息，如设施、无障碍功能、站台布局、OV-fiets可用性和位置详情", "tools": [{"name": "Real-time Train Information", "server": "NS Travel Information", "description": "Provides real-time information about train departures and arrivals, including platform numbers, delays, and travel notes.", "parameter": {}, "task": {"category": "NS Travel Information", "query": "Get real-time train departure and arrival details"}}, {"name": "Journey Planning", "server": "NS Travel Information", "description": "Finds optimal travel routes with transfers and real-time updates.", "parameter": {}, "task": {"category": "NS Travel Information", "query": "Find optimal travel routes with real-time updates"}}, {"name": "Service Updates", "server": "NS Travel Information", "description": "Checks for disruptions, maintenance work, and engineering activities.", "parameter": {}, "task": {"category": "NS Travel Information", "query": "Check for travel disruptions and updates"}}, {"name": "Ticket Prices", "server": "NS Travel Information", "description": "Gets accurate pricing for single and return journeys, including travel classes and group pricing.", "parameter": {}, "task": {"category": "NS Travel Information", "query": "Get ticket prices for journeys"}}, {"name": "Station Details", "server": "NS Travel Information", "description": "Accesses comprehensive station information such as facilities, accessibility features, platform layouts, OV-fiets availability, and location details.", "parameter": {}, "task": {"category": "NS Travel Information", "query": "Retrieve detailed station information"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Neovim", "description": "VIM编辑器操作，包括：缓冲区内容获取、命令发送、状态查询、行编辑、窗口操作、标记设置、寄存器设置和视觉选择", "tools": [{"name": "vim_buffer", "server": "Neovim", "description": "Returns the current active buffer content with line numbers shown. The filename parameter is ignored.", "parameter": {"filename": "(string) Ignored, returns a string of numbered lines with the current active buffer content"}, "task": {"category": "Neovim", "query": "Get current active buffer content with line numbers"}}, {"name": "vim_command", "server": "Neovim", "description": "Sends a command to VIM for navigation, spot editing, and line deletion. Multiple commands can be separated by newlines.", "parameter": {"command": "(string) Vim command to execute"}, "task": {"category": "Neovim", "query": "Execute Vim commands for editing and navigation"}}, {"name": "vim_status", "server": "Neovim", "description": "Gets the status of the VIM editor, including cursor position, mode, filename, visual selection, window layout, current tab, marks, registers, and working directory.", "parameter": {}, "task": {"category": "Neovim", "query": "Get VIM editor status information"}}, {"name": "vim_edit", "server": "Neovim", "description": "Edits lines in the VIM editor using insert, replace, or replaceAll modes.", "parameter": {"startLine": "(number) Line number where the edit starts", "mode": "(\"insert\" | \"replace\" | \"replaceAll\") Mode of editing", "lines": "(string) Lines to insert or replace"}, "task": {"category": "Neovim", "query": "Edit lines in VIM editor"}}, {"name": "vim_window", "server": "Neovim", "description": "Manipulates Neovim windows, such as splitting, vertical splitting, closing, navigating, and making the current window the only one.", "parameter": {"command": "(string: \"split\", \"vsplit\", \"only\", \"close\", \"wincmd h/j/k/l\") Window management operation"}, "task": {"category": "Neovim", "query": "Manage Neovim window operations"}}, {"name": "vim_mark", "server": "Neovim", "description": "Sets a mark at a specific position in the VIM editor.", "parameter": {"mark": "(string: a-z) Mark name", "line": "(number) Line number", "column": "(number) Column number"}, "task": {"category": "Neovim", "query": "Set a mark at a specific position in the editor"}}, {"name": "vim_register", "server": "Neovim", "description": "Sets the content of a register in the VIM editor.", "parameter": {"register": "(string: a-z or \") Register name", "content": "(string) Content to set in the register"}, "task": {"category": "Neovim", "query": "Set register content in VIM editor"}}, {"name": "vim_visual", "server": "Neovim", "description": "Creates a visual selection in the VIM editor.", "parameter": {"startLine": "(number) Start line of the selection", "startColumn": "(number) Start column of the selection", "endLine": "(number) End line of the selection", "endColumn": "(number) End column of the selection"}, "task": {"category": "Neovim", "query": "Create a visual selection in the editor"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "nomad-mcp", "description": "1. List variables with filtering and pagination 2. Get details of a specific variable 3. Create a new variable with namespace support 4. Delete a variable with CAS support", "tools": [{"name": "list_variables", "server": "nomad-mcp", "description": "Lists variables with optional filtering and pagination.", "parameter": {"namespace": "(string) The namespace to filter variables by.", "prefix": "(string) The prefix to filter variables by.", "per_page": "(int) The number of results per page."}, "task": {"category": "Nomad", "query": "List and filter variables with pagination"}}, {"name": "get_variable", "server": "nomad-mcp", "description": "Gets details of a specific variable.", "parameter": {"path": "(string) The path of the variable.", "namespace": "(string) The namespace of the variable."}, "task": {"category": "Nomad", "query": "Retrieve variable details"}}, {"name": "create_variable", "server": "nomad-mcp", "description": "Creates a new variable with namespace support.", "parameter": {"path": "(string) The path of the variable.", "key": "(string) The key of the variable.", "value": "(string) The value of the variable.", "namespace": "(string) The namespace of the variable."}, "task": {"category": "Nomad", "query": "Create a new variable with namespace support"}}, {"name": "delete_variable", "server": "nomad-mcp", "description": "Deletes a variable with CAS support.", "parameter": {"path": "(string) The path of the variable.", "namespace": "(string) The namespace of the variable."}, "task": {"category": "Nomad", "query": "Delete a variable with CAS support"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "oatpp-mcp", "description": "A tool for logging purposes", "tools": [{"name": "Logger", "server": "oatpp-mcp", "description": "A tool for logging purposes.", "parameter": {}, "task": {"category": "oatpp", "query": "Logging tool"}}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "obsidian-mcp", "description": "1.笔记内容管理，包括读取、创建、编辑、删除和移动笔记 2.目录创建 3.笔记搜索 4.标签管理，包括添加、删除、重命名和组织标签 5.多库管理，列出所有可用库", "tools": [{"name": "read-note", "server": "obsidian-mcp", "description": "Read the contents of a note", "parameter": {}, "task": {"category": "Obsidian", "query": "Read note contents"}}, {"name": "create-note", "server": "obsidian-mcp", "description": "Create a new note", "parameter": {}, "task": {"category": "Obsidian", "query": "Create a new note"}}, {"name": "edit-note", "server": "obsidian-mcp", "description": "Edit an existing note", "parameter": {}, "task": {"category": "Obsidian", "query": "Edit existing notes"}}, {"name": "delete-note", "server": "obsidian-mcp", "description": "Delete a note", "parameter": {}, "task": {"category": "Obsidian", "query": "Delete a note from the workspace"}}, {"name": "move-note", "server": "obsidian-mcp", "description": "Move a note to a different location", "parameter": {}, "task": {"category": "Obsidian", "query": "Move notes within the application"}}, {"name": "create-directory", "server": "obsidian-mcp", "description": "Create a new directory", "parameter": {}, "task": {"category": "Obsidian", "query": "Create a new directory"}}, {"name": "search-vault", "server": "obsidian-mcp", "description": "Search notes in the vault", "parameter": {}, "task": {"category": "Obsidian", "query": "Search notes within a vault"}}, {"name": "add-tags", "server": "obsidian-mcp", "description": "Add tags to a note", "parameter": {}, "task": {"category": "Obsidian", "query": "Add tags to notes"}}, {"name": "remove-tags", "server": "obsidian-mcp", "description": "Remove tags from a note", "parameter": {}, "task": {"category": "Obsidian", "query": "Remove tags from notes"}}, {"name": "rename-tag", "server": "obsidian-mcp", "description": "Rename a tag across all notes", "parameter": {}, "task": {"category": "Obsidian", "query": "Rename tags in notes"}}, {"name": "manage-tags", "server": "obsidian-mcp", "description": "List and organize tags", "parameter": {}, "task": {"category": "Obsidian", "query": "List and organize tags in notes"}}, {"name": "list-available-vaults", "server": "obsidian-mcp", "description": "List all available vaults (helps with multi-vault setups)", "parameter": {}, "task": {"category": "Obsidian", "query": "List available vaults in multi-vault setups"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Okta", "description": "Okta用户与组管理,包括:用户信息检索、激活/停用/删除用户、用户组管理、批量用户导入、应用访问配置及入职工作流执行", "tools": [{"name": "get_user", "server": "Okta", "description": "Retrieves detailed user information from Okta, including user details, account dates, personal information, employment details, contact information, address, and preferences.", "parameter": {}, "task": {"category": "Okta", "query": "Retrieve detailed user information"}}, {"name": "list_users", "server": "Okta", "description": "Lists users from Okta with optional filtering and pagination, supporting SCIM filter expressions, free-form text search, sorting options, and pagination.", "parameter": {}, "task": {"category": "Okta", "query": "List users with filtering and pagination"}}, {"name": "activate_user", "server": "Okta", "description": "Activates a user in Okta, with an option to send an activation email and update the user's status to active.", "parameter": {}, "task": {"category": "Okta", "query": "Activate a user account"}}, {"name": "suspend_user", "server": "Okta", "description": "Suspends a user in Okta.", "parameter": {}, "task": {"category": "Okta", "query": "Suspend a user account"}}, {"name": "unsuspend_user", "server": "Okta", "description": "Unsuspends a previously suspended user in Okta.", "parameter": {}, "task": {"category": "Okta", "query": "Unsuspend a user account"}}, {"name": "delete_user", "server": "Okta", "description": "Deletes a user from Okta, noting that the user must be deactivated first.", "parameter": {}, "task": {"category": "Okta", "query": "Delete a user from the system"}}, {"name": "get_user_last_location", "server": "Okta", "description": "Retrieves the last known location and login information for a user from Okta system logs.", "parameter": {}, "task": {"category": "Okta", "query": "Retrieve user login and location information"}}, {"name": "list_groups", "server": "Okta", "description": "Lists user groups from Okta with optional filtering and pagination, supporting filter expressions, free-form text search, sorting options, and pagination.", "parameter": {}, "task": {"category": "Okta", "query": "List user groups with filtering and pagination"}}, {"name": "create_group", "server": "Okta", "description": "Creates a new group in Okta with a name and optional description.", "parameter": {}, "task": {"category": "Okta", "query": "Create a new group"}}, {"name": "get_group", "server": "Okta", "description": "Retrieves detailed information about a specific group.", "parameter": {}, "task": {"category": "Okta", "query": "Retrieve group details"}}, {"name": "delete_group", "server": "Okta", "description": "Deletes a group from Okta.", "parameter": {}, "task": {"category": "Okta", "query": "Delete a group from the system"}}, {"name": "assign_user_to_group", "server": "Okta", "description": "Assigns a user to a group in Okta.", "parameter": {}, "task": {"category": "Okta", "query": "Assign user to a group"}}, {"name": "remove_user_from_group", "server": "Okta", "description": "Removes a user from a group in Okta.", "parameter": {}, "task": {"category": "Okta", "query": "Remove user from a group"}}, {"name": "list_group_users", "server": "Okta", "description": "Lists all users in a specific group with pagination support.", "parameter": {}, "task": {"category": "Okta", "query": "Retrieve users from a specific group"}}, {"name": "bulk_user_import", "server": "Okta", "description": "Imports multiple users from a CSV string, creating user accounts based on CSV data, with optional activation of users, email notifications, and assignment to default groups.", "parameter": {}, "task": {"category": "Okta", "query": "Import multiple users from CSV data"}}, {"name": "assign_users_to_groups", "server": "Okta", "description": "Assigns multiple users to groups based on attribute mappings, mapping user attributes (department, title, etc.) to specific groups and performing bulk assignment of users based on attributes.", "parameter": {}, "task": {"category": "Okta", "query": "Bulk assign users to groups based on attributes"}}, {"name": "provision_applications", "server": "Okta", "description": "Provisions application access for multiple users, assigning users to applications and supporting bulk provisioning.", "parameter": {}, "task": {"category": "Okta", "query": "Provision application access for users"}}, {"name": "run_onboarding_workflow", "server": "Okta", "description": "Runs a complete onboarding workflow for multiple users from CSV data, including user import from CSV, automatic activation, group assignment based on attributes, application provisioning, and welcome email configuration.", "parameter": {}, "task": {"category": "Okta", "query": "Run onboarding workflow for multiple users"}}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "OpenAI WebSearch MCP", "description": "Call OpenAI websearch as a tool", "tools": [{"name": "web_search", "server": "OpenAI WebSearch MCP", "description": "Call OpenAI websearch as a tool.", "parameter": {"type": "(string) web_search_preview", "search_context_size": "(string) High level guidance for the amount of context window space to use for the search. One of low, medium, or high. medium is the default.", "user_location": "(object or null) User location details, including type, city, country, region, and timezone."}, "task": {"category": "OpenAI", "query": "Perform web searches using OpenAI"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "OpenAPI AnyApi", "description": "1.获取API端点模式 2.向指定URL发送HTTP请求", "tools": [{"name": "{prefix}_api_request_schema", "server": "OpenAPI AnyApi", "description": "Get API endpoint schemas that match your intent. Returns endpoint details including path, method, parameters, and response formats.", "parameter": {"query": "(string) Describe what you want to do with the API (e.g., 'Get user profile information', 'Create a new job posting')"}, "task": {"category": "OpenAPI", "query": "Retrieve API endpoint schemas based on intent"}}, {"name": "{prefix}_make_request", "server": "OpenAPI AnyApi", "description": "Essential for reliable execution with complex APIs where simplified implementations fail. Provides the ability to make HTTP requests to specified URLs with detailed options.", "parameter": {"method": "(string) HTTP method (GET, POST, PUT, DELETE, PATCH) (Enum: GET, POST, PUT, DELETE, PATCH)", "url": "(string) Fully qualified API URL (e.g., https://api.example.com/users/123)", "headers": "(Optional, object) Request headers", "query_params": "(Optional, object) Query parameters", "body": "(Optional, object) Request body for POST, PUT, PATCH"}, "task": {"category": "OpenAPI", "query": "Make HTTP requests with detailed options"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "OpenAPI Schema", "description": "API开发与测试工具集，包括API路径列表、端点详情、请求/响应模式、参数获取、组件列表与详情、安全方案列表及模式搜索", "tools": [{"name": "list-endpoints", "server": "OpenAPI Schema", "description": "Lists all API paths and their HTTP methods with summaries in a nested object structure", "parameter": {}, "task": {"category": "OpenAPI", "query": "List all API endpoints and their methods"}}, {"name": "get-endpoint", "server": "OpenAPI Schema", "description": "Gets detailed information about a specific endpoint including parameters and responses", "parameter": {}, "task": {"category": "OpenAPI", "query": "Retrieve detailed endpoint information"}}, {"name": "get-request-body", "server": "OpenAPI Schema", "description": "Gets the request body schema for a specific endpoint and method", "parameter": {}, "task": {"category": "OpenAPI", "query": "Retrieve request body schema for an endpoint"}}, {"name": "get-response-schema", "server": "OpenAPI Schema", "description": "Gets the response schema for a specific endpoint, method, and status code", "parameter": {}, "task": {"category": "OpenAPI", "query": "Retrieve response schema for an endpoint"}}, {"name": "get-path-parameters", "server": "OpenAPI Schema", "description": "Gets the parameters for a specific path", "parameter": {}, "task": {"category": "OpenAPI", "query": "Retrieve parameters for a specific API path"}}, {"name": "list-components", "server": "OpenAPI Schema", "description": "Lists all schema components (schemas, responses, parameters, etc.)", "parameter": {}, "task": {"category": "OpenAPI", "query": "List all schema components"}}, {"name": "get-component", "server": "OpenAPI Schema", "description": "Gets detailed definition for a specific component", "parameter": {}, "task": {"category": "OpenAPI", "query": "Retrieve detailed component definitions"}}, {"name": "list-security-schemes", "server": "OpenAPI Schema", "description": "Lists all available security schemes", "parameter": {}, "task": {"category": "OpenAPI", "query": "List available security schemes"}}, {"name": "get-examples", "server": "OpenAPI Schema", "description": "Gets examples for a specific component or endpoint", "parameter": {}, "task": {"category": "OpenAPI", "query": "Retrieve examples for components or endpoints"}}, {"name": "search-schema", "server": "OpenAPI Schema", "description": "Searches across paths, operations, and schemas", "parameter": {}, "task": {"category": "OpenAPI", "query": "Search across API paths and schemas"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "OpenCTI", "description": "1.威胁情报报告检索 2.恶意软件、威胁指标、威胁行为者信息搜索 3.用户、群组、攻击模式、活动、连接器、状态模板、文件、标记定义和标签列表检索", "tools": [{"name": "get_latest_reports", "server": "OpenCTI", "description": "Retrieves the most recent threat intelligence reports.", "parameter": {"first": "(Optional, number) Number of reports to retrieve, defaults to 10"}, "task": {"category": "OpenCTI", "query": "Retrieve recent threat intelligence reports"}}, {"name": "get_report_by_id", "server": "OpenCTI", "description": "Retrieves a specific report by its ID.", "parameter": {"id": "(string) Report ID"}, "task": {"category": "OpenCTI", "query": "Retrieve a report by its ID"}}, {"name": "search_malware", "server": "OpenCTI", "description": "Searches for malware information in the OpenCTI database.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}, "task": {"category": "OpenCTI", "query": "Search for malware information"}}, {"name": "search_indicators", "server": "OpenCTI", "description": "Searches for indicators of compromise.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}, "task": {"category": "OpenCTI", "query": "Search for indicators of compromise"}}, {"name": "search_threat_actors", "server": "OpenCTI", "description": "Searches for threat actor information.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}, "task": {"category": "OpenCTI", "query": "Search for threat actor information"}}, {"name": "get_user_by_id", "server": "OpenCTI", "description": "Retrieves user information by ID.", "parameter": {"id": "(string) User ID"}, "task": {"category": "OpenCTI", "query": "Retrieve user information"}}, {"name": "list_users", "server": "OpenCTI", "description": "Lists all users in the system.", "parameter": {}, "task": {"category": "OpenCTI", "query": "List all system users"}}, {"name": "list_groups", "server": "OpenCTI", "description": "Lists all groups with their members.", "parameter": {"first": "(Optional, number) Number of groups to retrieve, defaults to 10"}, "task": {"category": "OpenCTI", "query": "Retrieve groups and their members"}}, {"name": "list_attack_patterns", "server": "OpenCTI", "description": "Lists all attack patterns in the system.", "parameter": {"first": "(Optional, number) Number of attack patterns to retrieve, defaults to 10"}, "task": {"category": "OpenCTI", "query": "Retrieve attack patterns from the system"}}, {"name": "get_campaign_by_name", "server": "OpenCTI", "description": "Retrieves campaign information by name.", "parameter": {"name": "(string) Campaign name"}, "task": {"category": "OpenCTI", "query": "Retrieve campaign information by name"}}, {"name": "list_connectors", "server": "OpenCTI", "description": "Lists all system connectors.", "parameter": {}, "task": {"category": "OpenCTI", "query": "List all system connectors"}}, {"name": "list_status_templates", "server": "OpenCTI", "description": "Lists all status templates.", "parameter": {}, "task": {"category": "OpenCTI", "query": "List all status templates"}}, {"name": "get_file_by_id", "server": "OpenCTI", "description": "Retrieves file information by ID.", "parameter": {"id": "(string) File ID"}, "task": {"category": "OpenCTI", "query": "Retrieve file information by ID"}}, {"name": "list_files", "server": "OpenCTI", "description": "Lists all files in the system.", "parameter": {}, "task": {"category": "OpenCTI", "query": "List all available files"}}, {"name": "list_marking_definitions", "server": "OpenCTI", "description": "Lists all marking definitions.", "parameter": {}, "task": {"category": "OpenCTI", "query": "List all marking definitions"}}, {"name": "list_labels", "server": "OpenCTI", "description": "Lists all available labels.", "parameter": {}, "task": {"category": "OpenCTI", "query": "Retrieve all available labels"}}], "domains": [{"name": "Threat Intelligence", "description": "威胁情报管理，包括威胁报告检索、恶意软件分析、威胁指标搜索、威胁行为者识别及系统安全信息管理"}, {"name": "User & Access Management", "description": "用户与访问管理，包括用户信息检索、群组成员列表及权限定义管理"}, {"name": "Security Information Management", "description": "安全信息管理，包括攻击模式、活动、连接器、状态模板、文件、标记定义和标签的检索与列表管理"}]}
{"name": "OpenDota", "description": "Dota 2 player and match data retrieval, including player information, recent matches, win/loss statistics, hero stats, professional players/matches, team information, and public matches", "tools": [{"name": "get_player_by_id", "server": "OpenDota", "description": "Retrieve player information by account ID", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve player information by account ID"}}, {"name": "get_player_recent_matches", "server": "OpenDota", "description": "Get recent matches for a player", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve recent matches for a player"}}, {"name": "get_match_data", "server": "OpenDota", "description": "Get detailed data for a specific match", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve detailed match data"}}, {"name": "get_player_win_loss", "server": "OpenDota", "description": "Get win/loss statistics for a player", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve player win/loss statistics"}}, {"name": "get_player_heroes", "server": "OpenDota", "description": "Get a player's most played heroes", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve player's most played heroes"}}, {"name": "get_hero_stats", "server": "OpenDota", "description": "Get statistics for heroes", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve hero statistics"}}, {"name": "search_player", "server": "OpenDota", "description": "Search for players by name", "parameter": {}, "task": {"category": "OpenDota", "query": "Search for players by name"}}, {"name": "get_pro_players", "server": "OpenDota", "description": "Get list of professional players", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve professional players list"}}, {"name": "get_pro_matches", "server": "OpenDota", "description": "Get recent professional matches", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve recent professional matches"}}, {"name": "get_player_peers", "server": "OpenDota", "description": "Get players who have played with a specified player", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve list of players who have played with a specific player"}}, {"name": "get_heroes", "server": "OpenDota", "description": "Get list of all Dota 2 heroes", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve list of Dota 2 heroes"}}, {"name": "get_player_totals", "server": "OpenDota", "description": "Get player's overall stats totals", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve player statistics"}}, {"name": "get_player_rankings", "server": "OpenDota", "description": "Get player hero rankings", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve player hero rankings"}}, {"name": "get_player_wordcloud", "server": "OpenDota", "description": "Get most common words used by player in chat", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve player chat word frequency"}}, {"name": "get_team_info", "server": "OpenDota", "description": "Get information about a team", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve team details"}}, {"name": "get_public_matches", "server": "OpenDota", "description": "Get recent public matches", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve recent public matches data"}}, {"name": "get_match_heroes", "server": "OpenDota", "description": "Get heroes played in a specific match", "parameter": {}, "task": {"category": "OpenDota", "query": "Retrieve heroes played in a match"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "OpenRPC", "description": "1.调用任意JSON-RPC方法 2.发现可用的JSON-RPC方法", "tools": [{"name": "rpc_call", "server": "OpenRPC", "description": "Call arbitrary JSON-RPC methods", "parameter": {"server_url": "(string) URL of the JSON-RPC server", "method_name": "(string) Name of the method to call", "parameters": "(object) Parameters to pass to the method"}, "task": {"category": "JSON-RPC", "query": "Call methods on a JSON-RPC server"}}, {"name": "rpc_discover", "server": "OpenRPC", "description": "Discover available JSON-RPC methods", "parameter": {"server_url": "(string) URL of the JSON-RPC server"}, "task": {"category": "OpenRPC", "query": "Discover available JSON-RPC methods"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Open Strategy Partners Marketing Tools", "description": "1. Generate OSP product value maps 2. Create optimized metadata for web content 3. Apply OSP semantic editing codes for content review 4. Provide systematic approach to technical content creation", "tools": [{"name": "OSP Product Value Map Generator", "server": "Open Strategy Partners Marketing Tools", "description": "Generates structured OSP product value maps that effectively communicate a product's worth and positioning.", "parameter": {"Product Name": "(string) The name of the product", "Target Audience": "(string) The target audience for the product", "Key Features": "(list of strings) Key features of the product"}, "task": {"category": "Marketing", "query": "Generate product value maps"}}, {"name": "OSP Meta Information Generator", "server": "Open Strategy Partners Marketing Tools", "description": "Creates optimized metadata for web content including article titles, meta titles, meta descriptions, SEO-friendly URL slugs, and more.", "parameter": {"Topic": "(string) The topic of the article", "Primary Keyword": "(string) The primary keyword for SEO", "Audience": "(string) The target audience", "Content Type": "(string) The type of content (e.g., technical guide, tutorial)"}, "task": {"category": "Open Strategy Partners Marketing Tools", "query": "Generate optimized metadata for web content"}}, {"name": "OSP Content Editing Codes", "server": "Open Strategy Partners Marketing Tools", "description": "Applies OSP's semantic editing codes for comprehensive content review, including scope, flow, style, and technical accuracy.", "parameter": {"Content": "(string) The content to be reviewed"}, "task": {"category": "Open Strategy Partners Marketing Tools", "query": "Apply semantic editing codes for content review"}}, {"name": "OSP Technical Writing Guide", "server": "Open Strategy Partners Marketing Tools", "description": "Provides a systematic approach to creating high-quality technical content, including narrative structure, flow, style, and technical accuracy.", "parameter": {"Document Type": "(string) The type of document (e.g., tutorial, reference doc)", "Topic": "(string) The topic of the document", "Audience": "(string) The target audience"}, "task": {"category": "Marketing Tools", "query": "Guide for creating technical content"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Outline", "description": "1. Search for documents by keywords 2. List all available collections 3. Get document content by ID 4. Create new document in specified collection 5. Add comment to document 6. Move document to different collection", "tools": [{"name": "Search for Documents", "server": "Outline", "description": "Search for documents by keywords.", "parameter": {}, "task": {"category": "Outline", "query": "Search documents using keywords"}}, {"name": "List Collections", "server": "Outline", "description": "List all available collections.", "parameter": {}, "task": {"category": "Outline", "query": "List available collections"}}, {"name": "Read a Document", "server": "Outline", "description": "Get the content of a document by its ID.", "parameter": {"docId": "(string) The ID of the document to read."}, "task": {"category": "Outline", "query": "Retrieve document content by ID"}}, {"name": "Create a New Document", "server": "Outline", "description": "Create a new document in a specified collection with given content.", "parameter": {"title": "(string) The title of the new document.", "collectionId": "(string) The ID of the collection where the document will be created.", "content": "(string) The content of the new document."}, "task": {"category": "Outline", "query": "Create a new document in a collection"}}, {"name": "Add a Comment", "server": "Outline", "description": "Add a comment to a document.", "parameter": {"docId": "(string) The ID of the document to comment on.", "comment": "(string) The text of the comment."}, "task": {"category": "Outline", "query": "Add comments to documents"}}, {"name": "Move a Document", "server": "Outline", "description": "Move a document to a different collection.", "parameter": {"docId": "(string) The ID of the document to move.", "newCollectionId": "(string) The ID of the target collection."}, "task": {"category": "Outline", "query": "Move document between collections"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Pandoc", "description": "Transform content between supported formats", "tools": [{"name": "convert-contents", "server": "Pandoc", "description": "Transforms content between supported formats", "parameter": {"contents": "(string) Source content to convert (required if input_file not provided)", "input_file": "(string) Complete path to input file (required if contents not provided)", "input_format": "(string) Source format of the content (defaults to markdown)", "output_format": "(string) Target format (defaults to markdown)", "output_file": "(string) Complete path for output file (required for pdf, docx, rst, latex, epub formats)"}, "task": {"category": "Pandoc", "query": "Convert content between different formats"}}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Phone MCP", "description": "1.执行屏幕交互操作（点击、滑动、按键、输入文本、查找元素等） 2.分析屏幕UI元素 3.通过UI自动化创建联系人 4.通过包名和活动名启动应用 5.通过Android intent系统启动活动", "tools": [{"name": "interact_with_screen", "server": "Phone MCP", "description": "Executes various screen interaction actions such as tapping, swiping, pressing keys, inputting text, finding elements, waiting for elements, and scrolling.", "parameter": {"action": "(str) Type of action ('tap', 'swipe', 'key', 'text', 'find', 'wait', 'scroll')", "params": "(Optional, Dict[str, Any]) Dictionary with parameters specific to each action type"}, "task": {"category": "Phone", "query": "Perform screen interactions like tapping, swiping, or inputting text"}}, {"name": "analyze_screen", "server": "Phone MCP", "description": "Analyzes the current screen and provides structured information about UI elements.", "parameter": {"include_screenshot": "(Optional, bool) Whether to include base64-encoded screenshot in result", "max_elements": "(Optional, int) Maximum number of UI elements to process"}, "task": {"category": "Phone MCP", "query": "Analyze UI elements on screen"}}, {"name": "create_contact", "server": "Phone MCP", "description": "Creates a new contact with the given name and phone number using UI automation.", "parameter": {"name": "(str) The contact's full name", "phone": "(str) The phone number for the contact"}, "task": {"category": "Phone", "query": "Create a new contact with name and phone number"}}, {"name": "launch_app_activity", "server": "Phone MCP", "description": "Launches an app using the package name and optionally an activity name.", "parameter": {"package_name": "(str) The package name of the app to launch", "activity_name": "(Optional, str) The specific activity to launch"}, "task": {"category": "Phone MCP", "query": "Launch an app using package name"}}, {"name": "launch_intent", "server": "Phone MCP", "description": "Launches an activity using the Android intent system.", "parameter": {"intent_action": "(str) The action to perform", "intent_type": "(Optional, str) The MIME type for the intent", "extras": "(Optional, Dict[str, str]) Extra data to pass with the intent"}, "task": {"category": "Android", "query": "Launch an activity using Android intents"}}], "domains": [{"name": "Remote Desktop Control", "description": "远程桌面控制，包括屏幕捕获、输入模拟（键盘/鼠标）、应用程序控制及自动化操作"}]}
{"name": "PIF", "description": "1.工作区上下文导航与管理 2.开发连接见解 3.创建临时思考空间 4.记录发展并探索日志条目模式", "tools": [{"name": "pwd", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "cd", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "read", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "write", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "mkdir", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "delete", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Manage workspace context"}}, {"name": "move", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "rename", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": {"category": "PIF", "query": "Navigate and manage workspace context"}}, {"name": "reason", "server": "PIF", "description": "Develop connected insights", "parameter": {"thoughts": "(array) An array of thought objects with content and optional relations"}, "task": {"category": "PIF", "query": "Develop connected insights from thoughts"}}, {"name": "think", "server": "PIF", "description": "Create temporal spaces for contemplation", "parameter": {}, "task": {"category": "UNKNOWN", "query": "Create spaces for contemplation"}}, {"name": "journal_create", "server": "PIF", "description": "Document developments", "parameter": {"title": "(string) Title of the journal entry", "content": "(string) Content of the journal entry", "tags": "(array) Array of tags for the journal entry"}, "task": {"category": "PIF", "query": "Create a journal entry with title, content, and tags"}}, {"name": "journal_read", "server": "PIF", "description": "Explore patterns in journal entries", "parameter": {}, "task": {"category": "PIF", "query": "Analyze journal entry patterns"}}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Placid.app", "description": "1.列出可用的Placid模板 2.使用Placid模板生成视频 3.使用Placid模板生成静态图像", "tools": [{"name": "placid_list_templates", "server": "Placid.app", "description": "Lists available Placid templates with filtering options. Each template includes its title, ID, preview image URL, available layers, and tags.", "parameter": {"collection_id": "(Optional, string) Filter templates by collection ID", "custom_data": "(Optional, string) Filter by custom reference data", "tags": "(Optional, array) Array of tags to filter templates by"}, "task": {"category": "Placid.app", "query": "List available templates with filtering options"}}, {"name": "placid_generate_video", "server": "Placid.app", "description": "Generate videos by combining Placid templates with dynamic content like videos, images, and text. For longer videos, a job ID is provided to check status.", "parameter": {"template_id": "(string) UUID of the template to use", "layers": "(object) Object containing dynamic content for template layers", "audio": "(Optional, string) URL to an mp3 audio file", "audio_duration": "(Optional, string) Set to 'auto' to trim audio to video length", "audio_trim_start": "(Optional, string) Timestamp of trim start point", "audio_trim_end": "(Optional, string) Timestamp of trim end point"}, "task": {"category": "Placid.app", "query": "Generate videos using templates and dynamic content"}}, {"name": "placid_generate_image", "server": "Placid.app", "description": "Generate static images by combining Placid templates with dynamic content like text and images.", "parameter": {"template_id": "(string) UUID of the template to use", "layers": "(object) Object containing dynamic content for template layers"}, "task": {"category": "Placid.app", "query": "Generate images using templates and dynamic content"}}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Postman", "description": "Run a Postman collection and return test results", "tools": [{"name": "run-collection", "server": "Postman", "description": "Runs a Postman collection and returns the test results.", "parameter": {"collection": "(required) Path or URL to the Postman collection", "environment": "(optional) Path or URL to environment file", "globals": "(optional) Path or URL to globals file", "iterationCount": "(optional) Number of iterations to run"}, "task": {"category": "Postman", "query": "Run a Postman collection and retrieve test results"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Productboard", "description": "Productboard数据检索,包括:公司列表与详情、组件列表与详情、功能列表与详情及状态、笔记、产品列表与详情", "tools": [{"name": "get_companies", "server": "Productboard", "description": "Retrieves a list of companies from Productboard.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve list of companies"}}, {"name": "get_company_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific company.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve detailed company information"}}, {"name": "get_components", "server": "Productboard", "description": "Retrieves a list of components from Productboard.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve list of components"}}, {"name": "get_component_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific component.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve detailed component information"}}, {"name": "get_features", "server": "Productboard", "description": "Retrieves a list of features from Productboard.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve a list of features"}}, {"name": "get_feature_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific feature.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve detailed feature information"}}, {"name": "get_feature_statuses", "server": "Productboard", "description": "Retrieves the statuses of features from Productboard.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve feature statuses"}}, {"name": "get_notes", "server": "Productboard", "description": "Retrieves notes from Productboard.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve notes from the platform"}}, {"name": "get_products", "server": "Productboard", "description": "Retrieves a list of products from Productboard.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve a list of products"}}, {"name": "get_product_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific product.", "parameter": {}, "task": {"category": "Productboard", "query": "Retrieve detailed product information"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Prometheus", "description": "1. Execute PromQL instant and range queries against Prometheus 2. List all available metrics in Prometheus 3. Get metadata for a specific metric 4. Get information about all scrape targets", "tools": [{"name": "execute_query", "server": "Prometheus", "description": "Execute a PromQL instant query against Prometheus", "parameter": {"query": "(string) The PromQL query to execute"}, "task": {"category": "Prometheus", "query": "Execute instant queries using PromQL"}}, {"name": "execute_range_query", "server": "Prometheus", "description": "Execute a PromQL range query with start time, end time, and step interval", "parameter": {"query": "(string) The PromQL query to execute", "start_time": "(string) The start time of the range query", "end_time": "(string) The end time of the range query", "step_interval": "(string) The step interval for the range query"}, "task": {"category": "Prometheus", "query": "Execute range queries with specified time intervals"}}, {"name": "list_metrics", "server": "Prometheus", "description": "List all available metrics in Prometheus", "parameter": {}, "task": {"category": "Prometheus", "query": "List available metrics"}}, {"name": "get_metric_metadata", "server": "Prometheus", "description": "Get metadata for a specific metric", "parameter": {"metric_name": "(string) The name of the metric to get metadata for"}, "task": {"category": "Prometheus", "query": "Retrieve metadata for a specific metric"}}, {"name": "get_targets", "server": "Prometheus", "description": "Get information about all scrape targets", "parameter": {}, "task": {"category": "Prometheus", "query": "Retrieve scrape targets information"}}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Pushover", "description": "Send notifications via Pushover", "tools": [{"name": "send", "server": "Pushover", "description": "Sends a notification via Pushover.", "parameter": {"message": "(string) The message to send", "title": "(Optional, string) Message title", "priority": "(Optional, number) -2 to 2 (-2: lowest, 2: emergency)", "sound": "(Optional, string) Notification sound", "url": "(Optional, string) URL to include", "url_title": "(Optional, string) Title for the URL", "device": "(Optional, string) Target specific device"}, "task": {"category": "Pushover", "query": "Send notifications with optional parameters"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Quarkus", "description": "1.通过JDBC URL存储和检索数据库数据 2.检查运行中的JVM进程 3.从文件系统提供文件服务 4.使用JavaFX创建绘图画布 5.与Kubernetes集群交互 6.使用Docker/Podman/OCI兼容容器引擎 7.通过Wolfram Alpha LLM API进行优化的网络搜索", "tools": [{"name": "jdbc", "server": "Quarkus", "description": "A server for storing and retrieving data from a database via a JDBC URL.", "parameter": {}, "task": {"category": "Quarkus", "query": "Store and retrieve data from a database"}}, {"name": "jvminsight", "server": "Quarkus", "description": "A server for inspecting a running JVM process.", "parameter": {}, "task": {"category": "Quarkus", "query": "Inspect running JVM processes"}}, {"name": "filesystem", "server": "Quarkus", "description": "A server for serving files from a file system.", "parameter": {"path1": "(Optional, string) Path to serve files from", "path2": "(Optional, string) Additional path to serve files from"}, "task": {"category": "Quarkus", "query": "Serve files from a file system"}}, {"name": "jfx", "server": "Quarkus", "description": "A server that exposes a canvas for making drawings using JavaFX.", "parameter": {}, "task": {"category": "JavaFX", "query": "Create drawings using a canvas"}}, {"name": "kubernetes", "server": "Quarkus", "description": "A server for interacting with a Kubernetes cluster.", "parameter": {}, "task": {"category": "Kubernetes", "query": "Interact with Kubernetes cluster"}}, {"name": "containers", "server": "Quarkus", "description": "A server for working with Docker/Podman/OCI compatible container engines.", "parameter": {}, "task": {"category": "Quarkus", "query": "Manage container engines"}}, {"name": "wolfram", "server": "Quarkus", "description": "A server for performing web searches optimized for use by a large language model through the Wolfram Alpha LLM API.", "parameter": {}, "task": {"category": "Wolfram Alpha", "query": "Perform web searches optimized for LLM use"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "QGIS", "description": "1.执行简单的ping命令检查服务器连接性 2.QGIS项目操作,包括:项目创建/加载/保存、图层管理(矢量/栅格)、地图渲染、处理算法执行及PyQGIS代码执行", "tools": [{"name": "ping", "server": "QGIS", "description": "Simple ping command to check server connectivity", "parameter": {}, "task": {"category": "QGIS", "query": "Check server connectivity"}}, {"name": "get_qgis_info", "server": "QGIS", "description": "Get QGIS information about the current installation", "parameter": {}, "task": {"category": "QGIS", "query": "Retrieve information about QGIS installation"}}, {"name": "load_project", "server": "QGIS", "description": "Load a QGIS project from the specified path", "parameter": {"path": "(string) Path to the QGIS project file"}, "task": {"category": "QGIS", "query": "Load a project file into QGIS"}}, {"name": "create_new_project", "server": "QGIS", "description": "Create a new project and save it", "parameter": {"path": "(string) Path to save the new project file"}, "task": {"category": "QGIS", "query": "Create and save a new project"}}, {"name": "get_project_info", "server": "QGIS", "description": "Get current project information", "parameter": {}, "task": {"category": "QGIS", "query": "Retrieve project details"}}, {"name": "add_vector_layer", "server": "QGIS", "description": "Add a vector layer to the project", "parameter": {"path": "(string) Path to the vector layer file", "name": "(string) Name to assign to the layer"}, "task": {"category": "QGIS", "query": "Add vector layers to a project"}}, {"name": "add_raster_layer", "server": "QGIS", "description": "Add a raster layer to the project", "parameter": {"path": "(string) Path to the raster layer file", "name": "(string) Name to assign to the layer"}, "task": {"category": "QGIS", "query": "Add raster layer to project"}}, {"name": "get_layers", "server": "QGIS", "description": "Retrieve all layers in the current project", "parameter": {}, "task": {"category": "QGIS", "query": "Retrieve project layers"}}, {"name": "remove_layer", "server": "QGIS", "description": "Remove a layer from the project by its ID", "parameter": {"layer_id": "(string) ID of the layer to remove"}, "task": {"category": "QGIS", "query": "Remove a layer from the project"}}, {"name": "zoom_to_layer", "server": "QGIS", "description": "Zoom to the extent of a specified layer", "parameter": {"layer_id": "(string) ID of the layer to zoom to"}, "task": {"category": "QGIS", "query": "Zoom to the extent of a specified layer"}}, {"name": "get_layer_features", "server": "QGIS", "description": "Retrieve features from a vector layer with an optional limit", "parameter": {"layer_id": "(string) ID of the vector layer", "limit": "(Optional, integer) Maximum number of features to retrieve"}, "task": {"category": "QGIS", "query": "Retrieve features from a vector layer"}}, {"name": "execute_processing", "server": "QGIS", "description": "Execute a processing algorithm with the given parameters", "parameter": {"algorithm": "(string) Name of the processing algorithm", "parameters": "(dictionary) Parameters for the algorithm"}, "task": {"category": "QGIS", "query": "Run a processing algorithm with specified parameters"}}, {"name": "save_project", "server": "QGIS", "description": "Save the current project to the given path", "parameter": {"path": "(string) Path to save the project file"}, "task": {"category": "QGIS", "query": "Save project to specified path"}}, {"name": "render_map", "server": "QGIS", "description": "Render the current map view to an image file", "parameter": {"output_path": "(string) Path to save the rendered image"}, "task": {"category": "QGIS", "query": "Render map view to an image file"}}, {"name": "execute_code", "server": "QGIS", "description": "Execute arbitrary PyQGIS code provided as a string", "parameter": {"code": "(string) PyQGIS code to execute"}, "task": {"category": "QGIS", "query": "Execute PyQGIS code"}}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}, {"name": "Geographic Information System", "description": "地理信息系统操作,包括项目创建/加载/保存、图层管理(矢量/栅格)、地图渲染、处理算法执行及代码执行"}]}
{"name": "QuickChart", "description": "1. Generate chart URLs using QuickChart.io 2. Download chart images to local files", "tools": [{"name": "generate_chart", "server": "QuickChart", "description": "Generate a chart URL using QuickChart.io", "parameter": {"type": "(string) The type of chart to generate (e.g., 'bar', 'line', 'pie')", "data": "(object) The data configuration for the chart", "options": "(object, optional) Additional options for the chart"}, "task": {"category": "QuickChart", "query": "Generate chart URL with specified data"}}, {"name": "download_chart", "server": "QuickChart", "description": "Download a chart image to a local file", "parameter": {"config": "(object) The chart configuration", "outputPath": "(string) The path where the chart image will be saved"}, "task": {"category": "QuickChart", "query": "Download chart images to local files"}}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "Qwen_Max", "description": "Generate text using the Qwen Max language model", "tools": [{"name": "qwen_max", "server": "Qwen_Max", "description": "Generates text using the Qwen Max language model.", "parameter": {"prompt": "(string) The input prompt for the model.", "max_tokens": "(number) The maximum number of tokens to generate in the output.", "temperature": "(number) Controls the randomness of the model's output."}, "task": {"category": "Qwen", "query": "Generate text using a language model"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Raindrop.io", "description": "1.创建书签 2.搜索书签", "tools": [{"name": "create-bookmark", "server": "Raindrop.io", "description": "Creates a new bookmark.", "parameter": {"url": "(string) URL to bookmark (required)", "title": "(Optional, string) Title for the bookmark", "tags": "(Optional, array) Array of tags", "collection": "(Optional, string) Collection ID"}, "task": {"category": "Raindrop.io", "query": "Create a new bookmark with optional details"}}, {"name": "search-bookmarks", "server": "Raindrop.io", "description": "Searches through bookmarks.", "parameter": {"query": "(string) Search query (required)", "tags": "(Optional, array) Array of tags to filter by"}, "task": {"category": "Raindrop.io", "query": "Search and filter bookmarks"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Reaper", "description": "1.查找Reaper项目 2.解析Reaper项目并返回JSON对象", "tools": [{"name": "find_reaper_projects", "server": "Reaper", "description": "Finds all Reaper projects in the directory specified in the config.", "parameter": {}, "task": {"category": "Reaper", "query": "Find all projects in a directory"}}, {"name": "parse_reaper_project", "server": "Reaper", "description": "Parses a Reaper project and returns a JSON object.", "parameter": {}, "task": {"category": "Reaper", "query": "Parse project files"}}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Rememberizer AI", "description": "1.从Rememberizer个人/团队内部知识库中检索语义相似的匹配项 2.使用简单查询搜索Rememberizer内部知识库中的文档 3.列出个人/团队内部知识库的来源 4.获取Rememberizer.ai知识库账户信息 5.检索个人/团队知识系统中所有文档的分页列表 6.在Rememberizer.ai知识系统中保存文本信息以便未来召回", "tools": [{"name": "retrieve_semantically_similar_internal_knowledge", "server": "Rememberizer AI", "description": "Retrieves semantically similar matches from the connected Rememberizer personal/team internal knowledge and memory repository.", "parameter": {"match_this": "(string) Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge", "n_results": "(Optional, integer) Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information", "from_datetime_ISO8601": "(Optional, string) Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date", "to_datetime_ISO8601": "(Optional, string) End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date"}, "task": {"category": "Rememberizer AI", "query": "Retrieve semantically similar knowledge from internal repository"}}, {"name": "smart_search_internal_knowledge", "server": "Rememberizer AI", "description": "Searches for documents in Rememberizer's personal/team internal knowledge and memory repository using a simple query. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {"query": "(string) Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge", "user_context": "(Optional, string) Additional context for the query. Summarize the conversation up to this point for better context-aware results", "n_results": "(Optional, integer) Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information", "from_datetime_ISO8601": "(Optional, string) Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date", "to_datetime_ISO8601": "(Optional, string) End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date"}, "task": {"category": "Rememberizer AI", "query": "Search internal knowledge repository for documents"}}, {"name": "list_internal_knowledge_systems", "server": "Rememberizer AI", "description": "Lists the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {}, "task": {"category": "Rememberizer AI", "query": "List sources of internal knowledge"}}, {"name": "rememberizer_account_information", "server": "Rememberizer AI", "description": "Gets information about the Rememberizer.ai personal/team knowledge repository account, including account holder name and email address.", "parameter": {}, "task": {"category": "Rememberizer AI", "query": "Retrieve account details for knowledge repository"}}, {"name": "list_personal_team_knowledge_documents", "server": "Rememberizer AI", "description": "Retrieves a paginated list of all documents in the personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {"page": "(Optional, integer) Page number for pagination, starts at 1 (default: 1)", "page_size": "(Optional, integer) Number of documents per page, range 1-1000 (default: 100)"}, "task": {"category": "Rememberizer AI", "query": "Retrieve paginated list of knowledge documents"}}, {"name": "remember_this", "server": "Rememberizer AI", "description": "Saves a piece of text information in the Rememberizer.ai knowledge system so that it may be recalled in the future through other tools.", "parameter": {"name": "(string) Name of the information. Used to identify the information in the future", "content": "(string) The information you wish to memorize"}, "task": {"category": "Rememberizer AI", "query": "Save text information for future recall"}}], "domains": [{"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Replicate", "description": "1.模型搜索与浏览 2.模型集合管理 3.预测任务执行与状态监控 4.图像缓存管理", "tools": [{"name": "search_models", "server": "Replicate", "description": "Find models using semantic search", "parameter": {}, "task": {"category": "Replicate", "query": "Search for machine learning models"}}, {"name": "list_models", "server": "Replicate", "description": "Browse available models", "parameter": {}, "task": {"category": "Replicate", "query": "Browse available AI models"}}, {"name": "get_model", "server": "Replicate", "description": "Get details about a specific model", "parameter": {}, "task": {"category": "Replicate", "query": "Retrieve model details"}}, {"name": "list_collections", "server": "Replicate", "description": "Browse model collections", "parameter": {}, "task": {"category": "Replicate", "query": "Browse available model collections"}}, {"name": "get_collection", "server": "Replicate", "description": "Get details about a specific collection", "parameter": {}, "task": {"category": "Replicate", "query": "Retrieve collection details"}}, {"name": "create_prediction", "server": "Replicate", "description": "Run a model with your inputs", "parameter": {}, "task": {"category": "Replicate", "query": "Run a model with custom inputs"}}, {"name": "get_prediction", "server": "Replicate", "description": "Check a prediction's status", "parameter": {}, "task": {"category": "Replicate", "query": "Check the status of a prediction"}}, {"name": "cancel_prediction", "server": "Replicate", "description": "Stop a running prediction", "parameter": {}, "task": {"category": "Replicate", "query": "Stop a running process"}}, {"name": "list_predictions", "server": "Replicate", "description": "See your recent predictions", "parameter": {}, "task": {"category": "Replicate", "query": "View recent prediction history"}}, {"name": "view_image", "server": "Replicate", "description": "Open an image in your browser", "parameter": {}, "task": {"category": "Replicate", "query": "Open images in browser"}}, {"name": "clear_image_cache", "server": "Replicate", "description": "Clean up cached images", "parameter": {}, "task": {"category": "Replicate", "query": "Clean up cached images"}}, {"name": "get_image_cache_stats", "server": "Replicate", "description": "Check cache usage", "parameter": {}, "task": {"category": "Replicate", "query": "Check image cache usage statistics"}}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "Rquest", "description": "HTTP请求操作,包括:GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS/TRACE请求,存储响应检索,HTML/PDF转Markdown,PDF模型状态获取与重启加载", "tools": [{"name": "http_get", "server": "Rquest", "description": "Perform GET requests with optional parameters", "parameter": {"url": "(string) The URL to send the GET request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "params": "(Optional, dict) Query parameters to include in the request"}, "task": {"category": "HTTP", "query": "Perform GET requests with optional parameters"}}, {"name": "http_post", "server": "Rquest", "description": "Submit data via POST requests", "parameter": {"url": "(string) The URL to send the POST request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}, "task": {"category": "HTTP", "query": "Submit data using POST method"}}, {"name": "http_put", "server": "Rquest", "description": "Update resources with PUT requests", "parameter": {"url": "(string) The URL to send the PUT request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}, "task": {"category": "HTTP", "query": "Update resources using PUT method"}}, {"name": "http_delete", "server": "Rquest", "description": "Remove resources with DELETE requests", "parameter": {"url": "(string) The URL to send the DELETE request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": {"category": "HTTP", "query": "Send DELETE requests to remove resources"}}, {"name": "http_patch", "server": "Rquest", "description": "Partially update resources", "parameter": {"url": "(string) The URL to send the PATCH request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}, "task": {"category": "HTTP", "query": "Partially update resources via HTTP PATCH"}}, {"name": "http_head", "server": "Rquest", "description": "Retrieve only headers from a resource", "parameter": {"url": "(string) The URL to send the HEAD request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": {"category": "HTTP", "query": "Retrieve headers from a URL"}}, {"name": "http_options", "server": "Rquest", "description": "Retrieve options for a resource", "parameter": {"url": "(string) The URL to send the OPTIONS request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": {"category": "HTTP", "query": "Retrieve resource options via HTTP"}}, {"name": "http_trace", "server": "Rquest", "description": "Diagnostic request tracing", "parameter": {"url": "(string) The URL to send the TRACE request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": {"category": "HTTP", "query": "Perform diagnostic request tracing"}}, {"name": "get_stored_response", "server": "Rquest", "description": "Retrieve stored large responses, optionally by line range", "parameter": {"response_id": "(string) The ID of the stored response", "start_line": "(Optional, int) The starting line number to retrieve", "end_line": "(Optional, int) The ending line number to retrieve"}, "task": {"category": "Rquest", "query": "Retrieve stored responses with optional line range"}}, {"name": "get_stored_response_with_markdown", "server": "Rquest", "description": "Convert HTML or PDF responses to Markdown format for better LLM processing", "parameter": {"response_id": "(string) The ID of the stored response", "start_line": "(Optional, int) The starting line number to retrieve", "end_line": "(Optional, int) The ending line number to retrieve"}, "task": {"category": "Rquest", "query": "Convert stored responses to Markdown format"}}, {"name": "get_model_state", "server": "Rquest", "description": "Get the current state of the PDF models loading process", "parameter": {}, "task": {"category": "PDF Processing", "query": "Check the loading status of PDF models"}}, {"name": "restart_model_loading", "server": "Rquest", "description": "Restart the PDF models loading process if it failed or got stuck", "parameter": {}, "task": {"category": "Rquest", "query": "Restart PDF models loading process"}}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Rijksmuseum", "description": "1.使用多种条件搜索和筛选艺术品 2.检索艺术品的详细信息 3.访问高分辨率图像数据 4.浏览用户创建的收藏集 5.访问特定用户收藏集的详细信息 6.在浏览器中直接查看艺术品图像 7.生成艺术家作品的时间线", "tools": [{"name": "search_artwork", "server": "Rijksmuseum", "description": "Search and filter artworks using various criteria including text-based search, artist name, artwork type, materials and techniques, time periods, colors, and more.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "Search and filter artworks based on various criteria"}}, {"name": "get_artwork_details", "server": "Rijksmuseum", "description": "Retrieve comprehensive information about specific artworks, including basic details, physical properties, historical context, visual information, curatorial information, and exhibition history.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "Retrieve detailed information about artworks"}}, {"name": "get_artwork_image", "server": "Rijksmuseum", "description": "Access high-resolution image data with deep zoom capabilities, including multiple zoom levels, tile-based image loading, full resolution support, and position information.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "Access high-resolution artwork images"}}, {"name": "get_user_sets", "server": "Rijksmuseum", "description": "Explore user-created collections, allowing users to browse curated sets, view thematic groupings, and analyze collection patterns.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "Browse user-created collections and thematic groupings"}}, {"name": "get_user_set_details", "server": "Rijksmuseum", "description": "Access detailed information about specific user-created collections.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "Retrieve details of user-created collections"}}, {"name": "open_image_in_browser", "server": "Rijksmuseum", "description": "Open artwork images directly in the browser for detailed viewing.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "View artwork images in detail"}}, {"name": "get_artist_timeline", "server": "Rijksmuseum", "description": "Generate chronological timelines of artists' works, tracking artistic development, analyzing periods and styles, and studying career progression.", "parameter": {}, "task": {"category": "Rijksmuseum", "query": "Generate artist work timelines"}}], "domains": [{"name": "Art Collection Management", "description": "艺术品收藏管理，包括艺术品搜索、详细信息检索、高分辨率图像访问、用户收藏集浏览及艺术家作品时间线生成"}]}
{"name": "Riot Games", "description": "1. Summarize player level, rank, top champions, and recent matches 2. Return top champions by mastery points 3. Return mastery details for a specific champion 4. Return recent matches for a summoner 5. Return match performance stats for a given match ID and puuid", "tools": [{"name": "get_player_summary", "server": "Riot Games", "description": "Summarizes level, rank, top champions, and recent matches.", "parameter": {}, "task": {"category": "Riot Games", "query": "Retrieve player statistics and match history"}}, {"name": "get_top_champions_tool", "server": "Riot Games", "description": "Returns top champions by mastery points.", "parameter": {}, "task": {"category": "Riot Games", "query": "Retrieve top champions by mastery points"}}, {"name": "get_champion_mastery_tool", "server": "Riot Games", "description": "Returns mastery details for a specific champion.", "parameter": {}, "task": {"category": "Riot Games", "query": "Retrieve champion mastery details"}}, {"name": "get_recent_matches_tool", "server": "Riot Games", "description": "Returns recent matches for the given summoner.", "parameter": {}, "task": {"category": "Riot Games", "query": "Retrieve recent matches for a summoner"}}, {"name": "get_match_summary", "server": "Riot Games", "description": "Returns match performance stats for a given match ID and puuid.", "parameter": {}, "task": {"category": "Riot Games", "query": "Retrieve match performance statistics"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Scholarly", "description": "Search arXiv for articles related to the given keyword", "tools": [{"name": "search-arxiv", "server": "Scholarly", "description": "Search arXiv for articles related to the given keyword.", "parameter": {"keyword": "(string) The keyword to search for."}, "task": {"category": "arXiv", "query": "Search for academic articles"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "scrapling-fetch", "description": "1. Retrieve complete web pages with pagination support 2. Extract content matching regex patterns with surrounding context", "tools": [{"name": "s-fetch-page", "server": "scrapling-fetch", "description": "Retrieves complete web pages with pagination support.", "parameter": {"url": "(string) The URL of the web page to fetch.", "mode": "(string) The protection level to use ('basic', 'stealth', 'max-stealth').", "start_index": "(Optional, integer) The starting index for pagination.", "max_length": "(Optional, integer) The maximum length of content to retrieve."}, "task": {"category": "Web Scraping", "query": "Fetch web pages with pagination support"}}, {"name": "s-fetch-pattern", "server": "scrapling-fetch", "description": "Extracts content matching regex patterns with surrounding context.", "parameter": {"url": "(string) The URL of the web page to fetch.", "mode": "(string) The protection level to use ('basic', 'stealth', 'max-stealth').", "search_pattern": "(string) The regex pattern to search for.", "context_chars": "(integer) The number of characters of context to include around matches."}, "task": {"category": "Web Scraping", "query": "Extract content with regex patterns and context"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "SearXNG", "description": "1. Execute web searches with pagination using SearxNG 2. Read and convert URL content to markdown", "tools": [{"name": "searxng_web_search", "server": "SearXNG", "description": "Execute web searches with pagination", "parameter": {"query": "(string) The search query. This string is passed to external search services.", "pageno": "(Optional, number) Search page number, starts at 1 (default 1)", "time_range": "(Optional, string) Filter results by time range - one of: 'day', 'month', 'year' (default: none)", "language": "(Optional, string) Language code for results (e.g., 'en', 'fr', 'de') or 'all' (default: 'all')", "safesearch": "(Optional, number) Safe search filter level (0: None, 1: Moderate, 2: Strict) (default: instance setting)"}, "task": {"category": "SearXNG", "query": "Perform web searches with customizable filters"}}, {"name": "web_url_read", "server": "SearXNG", "description": "Read and convert the content from a URL to markdown", "parameter": {"url": "(string) The URL to fetch and process"}, "task": {"category": "SearXNG", "query": "Fetch and convert URL content to markdown"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "SEC EDGAR", "description": "1. Fetch a company's submissions (filings history) by CIK 2. Get a specific reported concept for a company by CIK, taxonomy, and tag 3. Retrieve all facts for a company (full XBRL fact set) by CIK 4. Query XBRL frames (data across entities or time) by taxonomy, tag, unit, year, and quarter", "tools": [{"name": "get_submissions", "server": "SEC EDGAR", "description": "Fetch a company's submissions (filings history) by CIK.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company."}, "task": {"category": "SEC EDGAR", "query": "Retrieve company filings history"}}, {"name": "get_company_concepts", "server": "SEC EDGAR", "description": "Get a specific reported concept for a company by CIK, taxonomy, and tag.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company.", "taxonomy": "(string) The accounting taxonomy (e.g., us-gaap).", "tag": "(string) The specific financial concept tag (e.g., AccountsPayableCurrent)."}, "task": {"category": "SEC EDGAR", "query": "Retrieve financial concepts for a company"}}, {"name": "get_company_facts", "server": "SEC EDGAR", "description": "Retrieve all facts for a company (full XBRL fact set) by CIK.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company."}, "task": {"category": "SEC EDGAR", "query": "Retrieve company facts by CIK"}}, {"name": "get_xbrl_frames", "server": "SEC EDGAR", "description": "Query XBRL frames (data across entities or time) by taxonomy, tag, unit, year, and quarter.", "parameter": {"taxonomy": "(string) The accounting taxonomy (e.g., us-gaap).", "tag": "(string) The specific financial concept tag (e.g., AccountsPayableCurrent).", "unit": "(string) The unit of measurement (e.g., USD).", "year": "(integer) The year of the data.", "quarter": "(integer) The quarter of the data (1-4)."}, "task": {"category": "SEC EDGAR", "query": "Retrieve financial data frames by taxonomy and tag"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "ServiceNow", "description": "ServiceNow平台操作，包括：事件管理、服务目录管理、变更请求管理、工作流管理、脚本管理、变更集管理、知识库管理、用户与群组管理、UI策略管理及工具包管理", "tools": [{"name": "create_incident", "server": "ServiceNow", "description": "Create a new incident in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new incident"}}, {"name": "update_incident", "server": "ServiceNow", "description": "Update an existing incident in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update an existing incident"}}, {"name": "add_comment", "server": "ServiceNow", "description": "Add a comment to an incident in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Add comments to incidents"}}, {"name": "resolve_incident", "server": "ServiceNow", "description": "Resolve an incident in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Resolve incidents in a service management platform"}}, {"name": "list_incidents", "server": "ServiceNow", "description": "List incidents from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "List incidents"}}, {"name": "list_catalog_items", "server": "ServiceNow", "description": "List service catalog items from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "List service catalog items"}}, {"name": "get_catalog_item", "server": "ServiceNow", "description": "Get a specific service catalog item from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve service catalog items"}}, {"name": "list_catalog_categories", "server": "ServiceNow", "description": "List service catalog categories from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "List service catalog categories"}}, {"name": "create_catalog_category", "server": "ServiceNow", "description": "Create a new service catalog category in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new service catalog category"}}, {"name": "update_catalog_category", "server": "ServiceNow", "description": "Update an existing service catalog category in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update service catalog category"}}, {"name": "move_catalog_items", "server": "ServiceNow", "description": "Move catalog items between categories in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Move items between categories"}}, {"name": "create_catalog_item_variable", "server": "ServiceNow", "description": "Create a new variable (form field) for a catalog item", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create variables for catalog items"}}, {"name": "list_catalog_item_variables", "server": "ServiceNow", "description": "List all variables for a catalog item", "parameter": {}, "task": {"category": "ServiceNow", "query": "List variables for a catalog item"}}, {"name": "update_catalog_item_variable", "server": "ServiceNow", "description": "Update an existing variable for a catalog item", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update variables for catalog items"}}, {"name": "list_catalogs", "server": "ServiceNow", "description": "List service catalogs from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "List available service catalogs"}}, {"name": "get_optimization_recommendations", "server": "ServiceNow", "description": "Get recommendations for optimizing the service catalog", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve service catalog optimization recommendations"}}, {"name": "update_catalog_item", "server": "ServiceNow", "description": "Update a service catalog item", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update service catalog items"}}, {"name": "create_change_request", "server": "ServiceNow", "description": "Create a new change request in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new change request"}}, {"name": "update_change_request", "server": "ServiceNow", "description": "Update an existing change request", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update existing change requests"}}, {"name": "list_change_requests", "server": "ServiceNow", "description": "List change requests with filtering options", "parameter": {}, "task": {"category": "ServiceNow", "query": "List change requests with filters"}}, {"name": "get_change_request_details", "server": "ServiceNow", "description": "Get detailed information about a specific change request", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve details of a change request"}}, {"name": "add_change_task", "server": "ServiceNow", "description": "Add a task to a change request", "parameter": {}, "task": {"category": "ServiceNow", "query": "Add a task to a change request"}}, {"name": "submit_change_for_approval", "server": "ServiceNow", "description": "Submit a change request for approval", "parameter": {}, "task": {"category": "ServiceNow", "query": "Submit a change request"}}, {"name": "approve_change", "server": "ServiceNow", "description": "Approve a change request", "parameter": {}, "task": {"category": "ServiceNow", "query": "Approve change requests"}}, {"name": "reject_change", "server": "ServiceNow", "description": "Reject a change request", "parameter": {}, "task": {"category": "ServiceNow", "query": "Reject a change request"}}, {"name": "list_workflows", "server": "ServiceNow", "description": "List workflows from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "List available workflows"}}, {"name": "get_workflow", "server": "ServiceNow", "description": "Get a specific workflow from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve specific workflow details"}}, {"name": "create_workflow", "server": "ServiceNow", "description": "Create a new workflow in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new workflow"}}, {"name": "update_workflow", "server": "ServiceNow", "description": "Update an existing workflow in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Modify an existing workflow"}}, {"name": "delete_workflow", "server": "ServiceNow", "description": "Delete a workflow from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Remove a workflow from the system"}}, {"name": "list_script_includes", "server": "ServiceNow", "description": "List script includes from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "List script includes"}}, {"name": "get_script_include", "server": "ServiceNow", "description": "Get a specific script include from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve script includes"}}, {"name": "create_script_include", "server": "ServiceNow", "description": "Create a new script include in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new script include"}}, {"name": "update_script_include", "server": "ServiceNow", "description": "Update an existing script include in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update script include in ServiceNow"}}, {"name": "delete_script_include", "server": "ServiceNow", "description": "Delete a script include from ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Delete script includes"}}, {"name": "list_changesets", "server": "ServiceNow", "description": "List changesets from ServiceNow with filtering options", "parameter": {}, "task": {"category": "ServiceNow", "query": "List changesets with filtering options"}}, {"name": "get_changeset_details", "server": "ServiceNow", "description": "Get detailed information about a specific changeset", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve detailed changeset information"}}, {"name": "create_changeset", "server": "ServiceNow", "description": "Create a new changeset in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new changeset"}}, {"name": "update_changeset", "server": "ServiceNow", "description": "Update an existing changeset", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update existing changesets"}}, {"name": "commit_changeset", "server": "ServiceNow", "description": "Commit a changeset", "parameter": {}, "task": {"category": "ServiceNow", "query": "Commit changes to a changeset"}}, {"name": "publish_changeset", "server": "ServiceNow", "description": "Publish a changeset", "parameter": {}, "task": {"category": "ServiceNow", "query": "Publish changeset"}}, {"name": "add_file_to_changeset", "server": "ServiceNow", "description": "Add a file to a changeset", "parameter": {}, "task": {"category": "ServiceNow", "query": "Add files to a changeset"}}, {"name": "create_knowledge_base", "server": "ServiceNow", "description": "Create a new knowledge base in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new knowledge base"}}, {"name": "list_knowledge_bases", "server": "ServiceNow", "description": "List knowledge bases with filtering options", "parameter": {}, "task": {"category": "ServiceNow", "query": "List knowledge bases with filtering options"}}, {"name": "create_category", "server": "ServiceNow", "description": "Create a new category in a knowledge base", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new knowledge base category"}}, {"name": "create_article", "server": "ServiceNow", "description": "Create a new knowledge article in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new knowledge article"}}, {"name": "update_article", "server": "ServiceNow", "description": "Update an existing knowledge article in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Modify an existing knowledge article"}}, {"name": "publish_article", "server": "ServiceNow", "description": "Publish a knowledge article in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Publish knowledge articles"}}, {"name": "list_articles", "server": "ServiceNow", "description": "List knowledge articles with filtering options", "parameter": {}, "task": {"category": "ServiceNow", "query": "List knowledge articles with filters"}}, {"name": "get_article", "server": "ServiceNow", "description": "Get a specific knowledge article by ID", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve knowledge article by ID"}}, {"name": "create_user", "server": "ServiceNow", "description": "Create a new user in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new user"}}, {"name": "update_user", "server": "ServiceNow", "description": "Update an existing user in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update user information"}}, {"name": "get_user", "server": "ServiceNow", "description": "Get a specific user by ID, username, or email", "parameter": {}, "task": {"category": "ServiceNow", "query": "Retrieve user information"}}, {"name": "list_users", "server": "ServiceNow", "description": "List users with filtering options", "parameter": {}, "task": {"category": "ServiceNow", "query": "List users with filtering options"}}, {"name": "create_group", "server": "ServiceNow", "description": "Create a new group in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create a new group"}}, {"name": "update_group", "server": "ServiceNow", "description": "Update an existing group in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Update an existing group"}}, {"name": "add_group_members", "server": "ServiceNow", "description": "Add members to a group in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Add members to a group"}}, {"name": "remove_group_members", "server": "ServiceNow", "description": "Remove members from a group in ServiceNow", "parameter": {}, "task": {"category": "ServiceNow", "query": "Remove members from a group"}}, {"name": "list_groups", "server": "ServiceNow", "description": "List groups with filtering options", "parameter": {}, "task": {"category": "ServiceNow", "query": "List groups with filtering options"}}, {"name": "create_ui_policy", "server": "ServiceNow", "description": "Creates a ServiceNow UI Policy, typically for a Catalog Item", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create UI policies for catalog items"}}, {"name": "create_ui_policy_action", "server": "ServiceNow", "description": "Creates an action associated with a UI Policy to control variable states (visibility, mandatory, etc.)", "parameter": {}, "task": {"category": "ServiceNow", "query": "Create actions for UI policies"}}, {"name": "list_tool_packages", "server": "ServiceNow", "description": "Lists all available tool package names defined in the configuration and shows the currently loaded package", "parameter": {}, "task": {"category": "ServiceNow", "query": "List available tool packages"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}, {"name": "User & Access Management", "description": "用户与访问管理，包括用户信息检索、群组成员列表及权限定义管理"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Shopify", "description": "1.获取所有产品或按标题搜索 2.通过ID获取特定产品 3.获取客户或按名称/电子邮件搜索 4.更新客户信息 5.获取特定客户的订单 6.获取订单并可选过滤 7.通过ID获取特定订单 8.更新现有订单信息", "tools": [{"name": "get-products", "server": "Shopify", "description": "Get all products or search by title", "parameter": {"searchTitle": "(optional string) Filter products by title", "limit": "(number) Maximum number of products to return"}, "task": {"category": "Shopify", "query": "Retrieve products with optional search filter"}}, {"name": "get-product-by-id", "server": "Shopify", "description": "Get a specific product by ID", "parameter": {"productId": "(string) ID of the product to retrieve"}, "task": {"category": "Shopify", "query": "Retrieve product details by ID"}}, {"name": "get-customers", "server": "Shopify", "description": "Get customers or search by name/email", "parameter": {"searchQuery": "(optional string) Filter customers by name or email", "limit": "(optional number, default: 10) Maximum number of customers to return"}, "task": {"category": "Shopify", "query": "Retrieve customer information"}}, {"name": "update-customer", "server": "Shopify", "description": "Update a customer's information", "parameter": {"id": "(string, required) Shopify customer ID (numeric ID only, like \"6276879810626\")", "firstName": "(string, optional) Customer's first name", "lastName": "(string, optional) Customer's last name", "email": "(string, optional) Customer's email address", "phone": "(string, optional) Customer's phone number", "tags": "(array of strings, optional) Tags to apply to the customer", "note": "(string, optional) Note about the customer", "taxExempt": "(boolean, optional) Whether the customer is exempt from taxes", "metafields": "(array of objects, optional) Customer metafields for storing additional data"}, "task": {"category": "Shopify", "query": "Update customer details"}}, {"name": "get-customer-orders", "server": "Shopify", "description": "Get orders for a specific customer", "parameter": {"customerId": "(string, required) Shopify customer ID (numeric ID only, like \"6276879810626\")", "limit": "(optional number, default: 10) Maximum number of orders to return"}, "task": {"category": "Shopify", "query": "Retrieve customer orders"}}, {"name": "get-orders", "server": "Shopify", "description": "Get orders with optional filtering", "parameter": {"status": "(optional string) Filter by order status", "limit": "(optional number, default: 10) Maximum number of orders to return"}, "task": {"category": "Shopify", "query": "Retrieve orders with optional filters"}}, {"name": "get-order-by-id", "server": "Shopify", "description": "Get a specific order by ID", "parameter": {"orderId": "(string, required) Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")"}, "task": {"category": "Shopify", "query": "Retrieve order details by ID"}}, {"name": "update-order", "server": "Shopify", "description": "Update an existing order with new information", "parameter": {"id": "(string, required) Shopify order ID", "tags": "(array of strings, optional) New tags for the order", "email": "(string, optional) Update customer email", "note": "(string, optional) Order notes", "customAttributes": "(array of objects, optional) Custom attributes for the order", "metafields": "(array of objects, optional) Order metafields", "shippingAddress": "(object, optional) Shipping address information"}, "task": {"category": "Shopify", "query": "Update order details"}}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Siri Shortcuts", "description": "1.列出系统上所有可用的Siri快捷方式 2.在快捷方式应用中打开快捷方式 3.运行带有可选输入的快捷方式", "tools": [{"name": "list_shortcuts", "server": "Siri Shortcuts", "description": "Lists all available Siri shortcuts on the system", "parameter": {}, "task": {"category": "Siri Shortcuts", "query": "List all available shortcuts"}}, {"name": "open_shortcut", "server": "Siri Shortcuts", "description": "Opens a shortcut in the Shortcuts app", "parameter": {"name": "(string) Name of the shortcut to open"}, "task": {"category": "Siri Shortcuts", "query": "Open a specific shortcut in the Shortcuts app"}}, {"name": "run_shortcut", "server": "Siri Shortcuts", "description": "Runs a shortcut with optional input", "parameter": {"name": "(string) Name of the shortcut to run", "input": "(Optional, string) Text input or filepath to pass to the shortcut"}, "task": {"category": "Siri Shortcuts", "query": "Execute a shortcut with optional input"}}], "domains": [{"name": "Home Automation", "description": "智能家居自动化控制，包括设备控制、插件管理、自动化配置及批量操作执行"}]}
{"name": "Slack", "description": "1.通过channelID获取频道消息 2.获取频道列表", "tools": [{"name": "conversations_history", "server": "Slack", "description": "Get messages from the channel by channelID", "parameter": {"channel_id": "(string) ID of the channel in format Cxxxxxxxxxx.", "cursor": "(string) Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.", "limit": "(number, default: 28) Limit of messages to fetch."}, "task": {"category": "Slack", "query": "Retrieve messages from a Slack channel"}}, {"name": "channels_list", "server": "Slack", "description": "Get list of channels", "parameter": {"channel_types": "(array) Possible channel types. Allowed values: 'mpim', 'im', 'public_channel', 'private_channel'.", "sort": "(string) Type of sorting. Allowed values: 'popularity' - sort by number of members/participants in each channel."}, "task": {"category": "Slack", "query": "Retrieve a list of channels with specified types and sorting"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Snowflake", "description": "Snowflake数据库操作,包括:数据查询(SELECT)、数据写入(INSERT/UPDATE/DELETE)、表创建、数据库/模式/表列表查询、表结构描述、数据洞察添加", "tools": [{"name": "read_query", "server": "Snowflake", "description": "Execute SELECT queries to read data from the database.", "parameter": {"query": "(string) The SELECT SQL query to execute"}, "task": {"category": "Snowflake", "query": "Execute SELECT queries to read data"}}, {"name": "write_query", "server": "Snowflake", "description": "Execute INSERT, UPDATE, or DELETE queries.", "parameter": {"query": "(string) The SQL modification query"}, "task": {"category": "Snowflake", "query": "Execute data modification queries"}}, {"name": "create_table", "server": "Snowflake", "description": "Create new tables in the database.", "parameter": {"query": "(string) CREATE TABLE SQL statement"}, "task": {"category": "Snowflake", "query": "Create new tables in the database"}}, {"name": "list_databases", "server": "Snowflake", "description": "List all databases in the Snowflake instance.", "parameter": {}, "task": {"category": "Snowflake", "query": "List all databases in the instance"}}, {"name": "list_schemas", "server": "Snowflake", "description": "List all schemas within a specific database.", "parameter": {"database": "(string) Name of the database"}, "task": {"category": "Snowflake", "query": "List schemas in a database"}}, {"name": "list_tables", "server": "Snowflake", "description": "List all tables within a specific database and schema.", "parameter": {"database": "(string) Name of the database", "schema": "(string) Name of the schema"}, "task": {"category": "Snowflake", "query": "List tables in a database schema"}}, {"name": "describe_table", "server": "Snowflake", "description": "View column information for a specific table.", "parameter": {"table_name": "(string) Fully qualified table name (database.schema.table)"}, "task": {"category": "Snowflake", "query": "View table column information"}}, {"name": "append_insight", "server": "Snowflake", "description": "Add new data insights to the memo resource.", "parameter": {"insight": "(string) Data insight discovered from analysis"}, "task": {"category": "Snowflake", "query": "Add new data insights to a resource"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Solver", "description": "1. Remove all items from the model 2. Add new item at a specific index 3. Delete item at index 4. Replace item at index 5. Get current model content with numbered items 6. Solve the model with timeout parameter", "tools": [{"name": "clear_model", "server": "Solver", "description": "Remove all items from the model", "parameter": {}, "task": {"category": "Solver", "query": "Clear all items from the model"}}, {"name": "add_item", "server": "Solver", "description": "Add new item at a specific index", "parameter": {}, "task": {"category": "UNKNOWN", "query": "Insert item at a specified position"}}, {"name": "delete_item", "server": "Solver", "description": "Delete item at index", "parameter": {}, "task": {"category": "UNKNOWN", "query": "Remove an item from a list or collection"}}, {"name": "replace_item", "server": "Solver", "description": "Replace item at index", "parameter": {}, "task": {"category": "UNKNOWN", "query": "Replace item at specified index"}}, {"name": "get_model", "server": "Solver", "description": "Get current model content with numbered items", "parameter": {}, "task": {"category": "Solver", "query": "Retrieve current model content"}}, {"name": "solve_model", "server": "Solver", "description": "Solve the model (with timeout parameter)", "parameter": {"timeout": "(Optional, int) Maximum time allowed for solving the model in seconds"}, "task": {"category": "Solver", "query": "Solve a model with optional timeout"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "SoccerDataAPI", "description": "获取全球实时足球比赛信息", "tools": [{"name": "get_livescores", "server": "SoccerDataAPI", "description": "Returns real-time information about ongoing football matches around the world.", "parameter": {}, "task": {"category": "SoccerDataAPI", "query": "Get real-time football match updates"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Solana Agent Kit", "description": "1.部署和管理SPL代币 2.使用Wormhole进行跨链代币转移和包装 3.创建和管理NFT集合 4.使用DEX进行代币交换 5.资产借贷和质押 6.使用ZK压缩发送空投 7.获取Pyth价格数据 8.进行永续合约交易 9.管理Drift账户和保险库 10.Voltr策略存款和提款 11.获取Solana资产信息和价格推断 12.使用deBridge进行跨链订单创建和执行 13.获取代币价格数据和趋势信息 14.在OKX DEX上执行代币交换", "tools": [{"name": "deployToken", "server": "Solana Agent Kit", "description": "Deploys a new SPL token.", "parameter": {"name": "(string) Name of the token", "uri": "(string) URI for the token metadata", "symbol": "(string) Symbol of the token", "decimals": "(number) Number of decimal places", "mintAuthority": "(Optional, PublicKey) Mint authority (defaults to deployer account)", "freezeAuthority": "(Optional, PublicKey) Freeze authority (defaults to deployer account)", "updateAuthority": "(Optional, PublicKey) Update authority (defaults to deployer account)", "isMutable": "(Optional, boolean) Whether the metadata is mutable (defaults to true)", "initialSupply": "(number) Initial supply of the token"}, "task": {"category": "Solana", "query": "Deploy a new SPL token"}}, {"name": "getWormholeSupportedChains", "server": "Solana Agent Kit", "description": "Gets the list of supported chains using Wormhole.", "parameter": {}, "task": {"category": "Solana", "query": "Retrieve supported chains via Wormhole"}}, {"name": "createWrappedToken", "server": "Solana Agent Kit", "description": "Creates a wrapped token on a target chain using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "tokenAddress": "(string) Original token address", "network": "(string) Network type (Testnet or Mainnet)"}, "task": {"category": "Solana", "query": "Create wrapped tokens on target chains"}}, {"name": "cctpTransfer", "server": "Solana Agent Kit", "description": "Performs a CCTP transfer using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "transferAmount": "(string) Amount to transfer", "network": "(string) Network type (Testnet or Mainnet)"}, "task": {"category": "Solana", "query": "Perform a CCTP transfer using Wormhole"}}, {"name": "tokenTransfer", "server": "Solana Agent Kit", "description": "Transfers an SPL token using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "tokenAddress": "(string) Original token address or leave it empty to transfer Native SOL", "network": "(string) Network type (Testnet or Mainnet)"}, "task": {"category": "Solana", "query": "Transfer SPL tokens using Wormhole"}}, {"name": "create3LandCollection", "server": "Solana Agent Kit", "description": "Creates a new NFT collection on 3Land.", "parameter": {"collectionOpts": "(CreateCollectionOptions) Options for the collection", "isDevnet": "(Optional, boolean) Whether to use devnet (defaults to false)", "priorityFeeParam": "(Optional, number) Priority fee (defaults to 50000)"}, "task": {"category": "Solana", "query": "Create a new NFT collection"}}, {"name": "create3LandNft", "server": "Solana Agent Kit", "description": "Creates a new NFT on 3Land.", "parameter": {"collectionAccount": "(string) Hash for the collection", "createItemOptions": "(CreateSingleOptions) Options for the NFT", "isDevnet": "(Optional, boolean) Whether to use devnet (defaults to false)", "withPool": "(Optional, boolean) Whether to create with a liquidity pool", "priorityFeeParam": "(Optional, number) Priority fee (defaults to 50000)"}, "task": {"category": "Solana", "query": "Create a new NFT on 3Land"}}, {"name": "deployCollection", "server": "Solana Agent Kit", "description": "Deploys a new NFT collection.", "parameter": {"name": "(string) Name of the collection", "uri": "(string) URI for the collection metadata", "royaltyBasisPoints": "(number) Royalty basis points", "creators": "(Creator[]) Array of creator objects"}, "task": {"category": "Solana", "query": "Deploy a new NFT collection"}}, {"name": "trade", "server": "Solana Agent Kit", "description": "Swaps tokens using a DEX.", "parameter": {"targetTokenMint": "(PublicKey) Target token mint", "amount": "(number) Amount to trade", "sourceTokenMint": "(PublicKey) Source token mint", "slippage": "(number) Slippage tolerance"}, "task": {"category": "Solana", "query": "Swap tokens on a decentralized exchange"}}, {"name": "lendAssets", "server": "Solana Agent Kit", "description": "Lends assets to a lending protocol.", "parameter": {"amount": "(number) Amount of USDC to lend"}, "task": {"category": "Solana", "query": "Lend assets to a lending protocol"}}, {"name": "stake", "server": "Solana Agent Kit", "description": "Stakes SOL.", "parameter": {"amount": "(number) Amount in SOL to stake"}, "task": {"category": "Solana", "query": "Stake SOL tokens"}}, {"name": "restake", "server": "Solana Agent Kit", "description": "Restakes SOL on Solayer.", "parameter": {"amount": "(number) Amount in SOL to stake"}, "task": {"category": "Solana", "query": "Restake SOL on Solayer"}}, {"name": "sendCompressedAirdrop", "server": "Solana Agent Kit", "description": "Sends a compressed airdrop using ZK compression.", "parameter": {"mint": "(PublicKey) Token mint", "amountPerRecipient": "(number) Amount per recipient", "recipients": "(PublicKey[]) Array of recipient public keys", "priorityFee": "(number) Priority fee in lamports"}, "task": {"category": "Solana", "query": "Send compressed airdrops to recipients"}}, {"name": "getPythPriceFeedID", "server": "Solana Agent Kit", "description": "Gets the Pyth price feed ID for a given asset.", "parameter": {"asset": "(string) Asset symbol"}, "task": {"category": "Solana", "query": "Retrieve price feed ID for an asset"}}, {"name": "getPythPrice", "server": "Solana Agent Kit", "description": "Fetches the price from a Pyth price feed.", "parameter": {"priceFeedID": "(string) Pyth price feed ID"}, "task": {"category": "Solana", "query": "Fetch price from Pyth price feed"}}, {"name": "openPerpTradeLong", "server": "Solana Agent Kit", "description": "Opens a long perpetual trade.", "parameter": {"price": "(number) Maximum price", "collateralAmount": "(number) Collateral amount", "collateralMint": "(PublicKey) Collateral mint", "leverage": "(number) Leverage", "tradeMint": "(PublicKey) Trade mint", "slippage": "(number) Slippage tolerance"}, "task": {"category": "Solana", "query": "Open a long perpetual trade"}}, {"name": "closePerpTradeLong", "server": "Solana Agent Kit", "description": "Closes a long perpetual trade.", "parameter": {"price": "(number) Price", "tradeMint": "(PublicKey) Trade mint"}, "task": {"category": "Solana", "query": "Close a long perpetual trade"}}, {"name": "closeEmptyTokenAccounts", "server": "Solana Agent Kit", "description": "Closes empty token accounts.", "parameter": {}, "task": {"category": "Solana", "query": "Close empty token accounts"}}, {"name": "createDriftUserAccount", "server": "Solana Agent Kit", "description": "Creates a new Drift user account.", "parameter": {}, "task": {"category": "Solana", "query": "Create a new Drift user account"}}, {"name": "createDriftVault", "server": "Solana Agent Kit", "description": "Creates a new Drift vault.", "parameter": {"name": "(string) Name of the vault", "marketName": "(string) Market name", "redeemPeriod": "(number) Redemption period in days", "maxTokens": "(number) Maximum tokens", "minDepositAmount": "(number) Minimum deposit amount", "managementFee": "(number) Management fee in percentage", "profitShare": "(number) Profit share in percentage", "hurdleRate": "(number) Hurdle rate in percentage", "permissioned": "(boolean) Whether the vault is permissioned"}, "task": {"category": "Solana", "query": "Create a new vault on Drift"}}, {"name": "depositIntoDriftVault", "server": "Solana Agent Kit", "description": "Deposits tokens into a Drift vault.", "parameter": {"amount": "(number) Amount to deposit", "vaultAddress": "(string) Vault address"}, "task": {"category": "Solana", "query": "Deposit tokens into a vault"}}, {"name": "depositToDriftUserAccount", "server": "Solana Agent Kit", "description": "Deposits tokens into a Drift user account.", "parameter": {"amount": "(number) Amount to deposit", "token": "(string) Token symbol", "isLoan": "(Optional, boolean) Whether the deposit is a loan (defaults to false)"}, "task": {"category": "Solana", "query": "Deposit tokens into a user account"}}, {"name": "deriveDriftVaultAddress", "server": "Solana Agent Kit", "description": "Derives the address of a Drift vault.", "parameter": {"name": "(string) Name of the vault"}, "task": {"category": "Solana", "query": "Derive Drift vault address"}}, {"name": "doesUserHaveDriftAccount", "server": "Solana Agent Kit", "description": "Checks if the user has a Drift account.", "parameter": {}, "task": {"category": "Solana", "query": "Check user account status"}}, {"name": "driftUserAccountInfo", "server": "Solana Agent Kit", "description": "Gets information about the Drift user account.", "parameter": {}, "task": {"category": "Solana", "query": "Retrieve user account details"}}, {"name": "requestWithdrawalFromDriftVault", "server": "Solana Agent Kit", "description": "Requests a withdrawal from a Drift vault.", "parameter": {"amount": "(number) Amount to withdraw", "vaultAddress": "(string) Vault address"}, "task": {"category": "Solana", "query": "Withdraw funds from a vault"}}, {"name": "tradeUsingDelegatedDriftVault", "server": "Solana Agent Kit", "description": "Executes a trade using a delegated Drift vault.", "parameter": {"vault": "(string) Vault address", "amount": "(number) Trade amount", "symbol": "(string) Trade symbol", "action": "(string) Action (long or short)", "type": "(string) Order type (limit or market)", "price": "(number) Price"}, "task": {"category": "Solana", "query": "Execute trades using delegated vaults"}}, {"name": "tradeUsingDriftPerpAccount", "server": "Solana Agent Kit", "description": "Executes a trade using the user's Drift perpetual account.", "parameter": {"amount": "(number) Trade amount", "symbol": "(string) Trade symbol", "action": "(string) Action (long or short)", "type": "(string) Order type (limit or market)", "price": "(number) Price"}, "task": {"category": "Solana", "query": "Execute trades on Drift perpetual account"}}, {"name": "updateDriftVault", "server": "Solana Agent Kit", "description": "Updates the parameters of a Drift vault.", "parameter": {"name": "(string) Name of the vault", "marketName": "(string) Market name", "redeemPeriod": "(number) Redemption period in days", "maxTokens": "(number) Maximum tokens", "minDepositAmount": "(number) Minimum deposit amount", "managementFee": "(number) Management fee in percentage", "profitShare": "(number) Profit share in percentage", "hurdleRate": "(number) Hurdle rate in percentage", "permissioned": "(boolean) Whether the vault is permissioned"}, "task": {"category": "Solana", "query": "Update parameters of a Drift vault"}}, {"name": "withdrawFromDriftAccount", "server": "Solana Agent Kit", "description": "Withdraws tokens from the Drift user account.", "parameter": {"amount": "(number) Amount to withdraw", "token": "(string) Token symbol"}, "task": {"category": "Solana", "query": "Withdraw tokens from a user account"}}, {"name": "withdrawFromDriftAccount", "server": "Solana Agent Kit", "description": "Withdraws tokens from the Drift user account.", "parameter": {"amount": "(number) Amount to withdraw", "token": "(string) Token symbol", "isLoan": "(Optional, boolean) Whether the withdrawal is a loan repayment (defaults to false)"}, "task": {"category": "Solana", "query": "Withdraw tokens from a Drift account"}}, {"name": "withdrawFromDriftVault", "server": "Solana Agent Kit", "description": "Withdraws tokens from a Drift vault.", "parameter": {"vaultAddress": "(string) Vault address"}, "task": {"category": "Solana", "query": "Withdraw tokens from a vault"}}, {"name": "updateDriftVaultDelegate", "server": "Solana Agent Kit", "description": "Updates the delegate address for a Drift vault.", "parameter": {"vaultAddress": "(string) Vault address", "newDelegate": "(string) New delegate address"}, "task": {"category": "Solana", "query": "Update delegate address for a vault"}}, {"name": "voltrGetPositionValues", "server": "Solana Agent Kit", "description": "Gets the current position values and total value of assets in a Voltr vault.", "parameter": {"vaultAddress": "(string) Vault address"}, "task": {"category": "Solana", "query": "Retrieve position values from a Voltr vault"}}, {"name": "voltrDepositStrategy", "server": "Solana Agent Kit", "description": "Deposits assets into a specific strategy within a Voltr vault.", "parameter": {"amount": "(BN) Amount in base units", "vault": "(string) Vault address", "strategy": "(string) Strategy address"}, "task": {"category": "Solana", "query": "Deposit assets into a Voltr vault strategy"}}, {"name": "voltrWithdrawStrategy", "server": "Solana Agent Kit", "description": "Withdraws assets from a specific strategy within a Voltr vault.", "parameter": {"amount": "(BN) Amount in base units", "vault": "(string) Vault address", "strategy": "(string) Strategy address"}, "task": {"category": "Solana", "query": "Withdraw assets from a Voltr vault strategy"}}, {"name": "getAsset", "server": "Solana Agent Kit", "description": "Gets a Solana asset by its ID.", "parameter": {"assetId": "(string) Asset ID"}, "task": {"category": "Solana", "query": "Retrieve asset details by ID"}}, {"name": "getPriceInference", "server": "Solana Agent Kit", "description": "Gets the price inference for a given token and timeframe from Allora.", "parameter": {"token": "(string) Token symbol", "timeframe": "(string) Timeframe (e.g., 5m, 1h)"}, "task": {"category": "Solana", "query": "Retrieve price inference for a token"}}, {"name": "getAllTopics", "server": "Solana Agent Kit", "description": "Lists all topics from Allora.", "parameter": {}, "task": {"category": "Solana", "query": "List all available topics"}}, {"name": "getInferenceByTopicId", "server": "Solana Agent Kit", "description": "Gets an inference for a specific topic from Allora.", "parameter": {"topicId": "(number) Topic ID"}, "task": {"category": "Solana", "query": "Retrieve inference for a specific topic"}}, {"name": "simulateSwitchboardFeed", "server": "Solana Agent Kit", "description": "Simulates a given Switchboard feed.", "parameter": {"feed": "(string) Feed ID", "oracleUrl": "(string) Oracle URL"}, "task": {"category": "Solana", "query": "Simulate a Switchboard feed"}}, {"name": "swap", "server": "Solana Agent Kit", "description": "Executes a cross-chain token swap.", "parameter": {"amount": "(string) Amount to swap", "fromChain": "(string) Source chain", "fromToken": "(string) Source token address", "toChain": "(string) Destination chain", "toToken": "(string) Destination token address", "dstAddr": "(string) Destination address"}, "task": {"category": "Solana", "query": "Perform cross-chain token swaps"}}, {"name": "getDebridgeSupportedChains", "server": "Solana Agent Kit", "description": "Gets the list of supported chains using deBridge.", "parameter": {}, "task": {"category": "Solana", "query": "Retrieve supported chains via deBridge"}}, {"name": "getDebridgeTokensInfo", "server": "Solana Agent Kit", "description": "Gets information about tokens on a specific chain using deBridge.", "parameter": {"chainId": "(string) Chain ID", "token": "(string) Token symbol"}, "task": {"category": "Solana", "query": "Retrieve token information from a specific blockchain"}}, {"name": "createDebridgeOrder", "server": "Solana Agent Kit", "description": "Creates a deBridge order.", "parameter": {"srcChainId": "(string) Source chain ID", "srcChainTokenIn": "(string) Source token mint", "srcChainTokenInAmount": "(string) Amount of source token", "dstChainId": "(string) Destination chain ID", "dstChainTokenOut": "(string) Destination token mint", "dstChainTokenOutRecipient": "(string) Recipient address on destination chain"}, "task": {"category": "Solana", "query": "Create a cross-chain token transfer order"}}, {"name": "executeDebridgeOrder", "server": "Solana Agent Kit", "description": "Executes a deBridge order.", "parameter": {"txData": "(string) Transaction data"}, "task": {"category": "Solana", "query": "Execute deBridge orders"}}, {"name": "checkDebridgeTransactionStatus", "server": "Solana Agent Kit", "description": "Checks the status of a deBridge transaction.", "parameter": {"signature": "(string) Transaction signature"}, "task": {"category": "Solana", "query": "Check transaction status on deBridge"}}, {"name": "getTokenPriceData", "server": "Solana Agent Kit", "description": "Gets the price data for a list of tokens from CoinGecko.", "parameter": {"tokens": "(string[]) Array of token addresses"}, "task": {"category": "Solana", "query": "Retrieve price data for tokens"}}, {"name": "getTrendingTokens", "server": "Solana Agent Kit", "description": "Gets the list of trending tokens.", "parameter": {}, "task": {"category": "Solana", "query": "Retrieve trending tokens list"}}, {"name": "getLatestPools", "server": "Solana Agent Kit", "description": "Gets the list of latest pools.", "parameter": {}, "task": {"category": "Solana", "query": "Retrieve latest pools list"}}, {"name": "getTokenInfo", "server": "Solana Agent Kit", "description": "Gets information about a specific token.", "parameter": {"tokenAddress": "(string) Token address"}, "task": {"category": "Solana", "query": "Retrieve token details"}}, {"name": "getTopGainers", "server": "Solana Agent Kit", "description": "Gets the list of top gainers for a given timeframe.", "parameter": {"timeframe": "(string) Timeframe (e.g., 24h, 7d)", "category": "(string) Category (e.g., all, stablecoins)"}, "task": {"category": "Solana", "query": "Retrieve top gainers for a specified timeframe"}}, {"name": "getTrendingPools", "server": "Solana Agent Kit", "description": "Gets the list of trending pools for a given timeframe.", "parameter": {"timeframe": "(string) Timeframe (e.g., 24h, 7d)"}, "task": {"category": "Solana", "query": "Retrieve trending pools for a specified timeframe"}}, {"name": "getTokens", "server": "Solana Agent Kit", "description": "Gets the list of supported tokens on OKX DEX.", "parameter": {}, "task": {"category": "OKX DEX", "query": "Retrieve supported tokens list"}}, {"name": "getQuote", "server": "Solana Agent Kit", "description": "Gets a quote for a token swap on OKX DEX.", "parameter": {"fromTokenAddress": "(string) Source token address", "toTokenAddress": "(string) Destination token address", "amount": "(string) Amount to swap", "slippage": "(Optional, string) Slippage tolerance (defaults to 0.5%)"}, "task": {"category": "OKX DEX", "query": "Get a quote for token swap"}}, {"name": "executeSwap", "server": "Solana Agent Kit", "description": "Executes a token swap on OKX DEX.", "parameter": {"fromTokenAddress": "(string) Source token address", "toTokenAddress": "(string) Destination token address", "amount": "(string) Amount to swap", "autoSlippage": "(Optional, boolean) Use auto slippage (defaults to false)", "slippage": "(Optional, string) Custom slippage (defaults to 0.1%)", "maxAutoSlippageBps": "(Optional, string) Maximum auto slippage in basis points (defaults to 100)", "userAddress": "(Optional, string) User wallet address"}, "task": {"category": "OKX DEX", "query": "Execute token swaps on decentralized exchange"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Starwind UI", "description": "1.初始化Starwind UI项目 2.生成Starwind UI组件安装命令 3.生成Starwind UI组件更新命令 4.获取Starwind UI组件文档链接 5.从starwind.dev获取LLM数据 6.检测并返回当前包管理器信息", "tools": [{"name": "init_project", "server": "Starwind UI", "description": "Initializes a new Starwind UI project", "parameter": {}, "task": {"category": "Starwind UI", "query": "Initialize a new project"}}, {"name": "install_component", "server": "Starwind UI", "description": "Generates installation commands for Starwind UI components", "parameter": {}, "task": {"category": "Starwind UI", "query": "Generate installation commands for components"}}, {"name": "update_component", "server": "Starwind UI", "description": "Generates update commands for Starwind UI components", "parameter": {}, "task": {"category": "Starwind UI", "query": "Generate update commands for UI components"}}, {"name": "get_documentation", "server": "Starwind UI", "description": "Returns documentation links for Starwind UI components and guides", "parameter": {}, "task": {"category": "Starwind UI", "query": "Retrieve documentation links for UI components and guides"}}, {"name": "fetch_llm_data", "server": "Starwind UI", "description": "Fetches LLM data from starwind.dev (rate limited, with caching)", "parameter": {}, "task": {"category": "Starwind UI", "query": "Fetch LLM data with rate limiting and caching"}}, {"name": "get_package_manager", "server": "Starwind UI", "description": "Detects and returns the current package manager information", "parameter": {}, "task": {"category": "Starwind UI", "query": "Detect package manager information"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Strava", "description": "Strava API operations, including: fetching athlete profiles and activities, retrieving segment details, managing starred segments, exporting routes in GPX/TCX formats, and accessing activity streams and zones", "tools": [{"name": "get-recent-activities", "server": "Strava", "description": "Fetches the authenticated user's recent activities.", "parameter": {"perPage": "(Optional, number) Number of activities to retrieve. Default: 30"}, "task": {"category": "Strava", "query": "Retrieve user's recent activities"}}, {"name": "get-athlete-profile", "server": "Strava", "description": "Fetches the profile information for the authenticated athlete.", "parameter": {}, "task": {"category": "Strava", "query": "Retrieve athlete profile information"}}, {"name": "get-athlete-stats", "server": "Strava", "description": "Fetches activity statistics (recent, YTD, all-time) for the authenticated athlete.", "parameter": {}, "task": {"category": "Strava", "query": "Retrieve athlete activity statistics"}}, {"name": "get-activity-details", "server": "Strava", "description": "Fetches detailed information about a specific activity using its ID.", "parameter": {"activityId": "(Required, number) The unique identifier of the activity."}, "task": {"category": "Strava", "query": "Retrieve detailed information about an activity"}}, {"name": "list-athlete-clubs", "server": "Strava", "description": "Lists the clubs the authenticated athlete is a member of.", "parameter": {}, "task": {"category": "Strava", "query": "List athlete's club memberships"}}, {"name": "list-starred-segments", "server": "Strava", "description": "Lists the segments starred by the authenticated athlete.", "parameter": {}, "task": {"category": "Strava", "query": "Retrieve starred segments for an athlete"}}, {"name": "get-segment", "server": "Strava", "description": "Fetches detailed information about a specific segment using its ID.", "parameter": {"segmentId": "(Required, number) The unique identifier of the segment."}, "task": {"category": "Strava", "query": "Retrieve detailed segment information"}}, {"name": "explore-segments", "server": "Strava", "description": "Searches for popular segments within a given geographical area (bounding box).", "parameter": {"bounds": "(Required, string) Comma-separated: south_west_lat,south_west_lng,north_east_lat,north_east_lng.", "activityType": "(Optional, string) Filter by activity type ('running' or 'riding').", "minCat": "(Optional, number) Minimum climb category. Requires activityType: 'riding'.", "maxCat": "(Optional, number) Maximum climb category. Requires activityType: 'riding'."}, "task": {"category": "Strava", "query": "Search for popular segments in a geographical area"}}, {"name": "star-segment", "server": "Strava", "description": "Stars or unstars a specific segment for the authenticated athlete.", "parameter": {"segmentId": "(Required, number) The unique identifier of the segment.", "starred": "(Required, boolean) true to star, false to unstar."}, "task": {"category": "Strava", "query": "Manage starred segments for athletes"}}, {"name": "get-segment-effort", "server": "Strava", "description": "Fetches detailed information about a specific segment effort using its ID.", "parameter": {"effortId": "(Required, number) The unique identifier of the segment effort."}, "task": {"category": "Strava", "query": "Retrieve segment effort details"}}, {"name": "list-segment-efforts", "server": "Strava", "description": "Lists the authenticated athlete's efforts on a given segment, optionally filtered by date.", "parameter": {"segmentId": "(Required, number) The ID of the segment.", "startDateLocal": "(Optional, string) Filter efforts starting after this date-time (ISO 8601 format).", "endDateLocal": "(Optional, string) Filter efforts ending before this date-time (ISO 8601 format).", "perPage": "(Optional, number) Number of results per page. Default: 30"}, "task": {"category": "Strava", "query": "Retrieve athlete's segment efforts"}}, {"name": "list-athlete-routes", "server": "Strava", "description": "Lists the routes created by the authenticated athlete.", "parameter": {"page": "(Optional, number) Page number for pagination.", "perPage": "(Optional, number) Number of routes per page. Default: 30"}, "task": {"category": "Strava", "query": "Retrieve routes created by the athlete"}}, {"name": "get-route", "server": "Strava", "description": "Fetches detailed information for a specific route using its ID.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}, "task": {"category": "Strava", "query": "Fetch detailed route information"}}, {"name": "export-route-gpx", "server": "Strava", "description": "Exports a specific route in GPX format and saves it locally.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}, "task": {"category": "Strava", "query": "Export route data in GPX format"}}, {"name": "export-route-tcx", "server": "Strava", "description": "Exports a specific route in TCX format and saves it locally.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}, "task": {"category": "Strava", "query": "Export route data in TCX format"}}, {"name": "get-activity-streams", "server": "Strava", "description": "Retrieves detailed time-series data streams from a Strava activity.", "parameter": {"id": "(Required, number | string) The Strava activity identifier to fetch streams for.", "types": "(Optional, array) Types of streams to fetch. Default: ['time', 'distance', 'heartrate', 'cadence', 'watts'].", "resolution": "(Optional, string) Data resolution/density. Values: 'low', 'medium', 'high'.", "series_type": "(Optional, string) Base series type for data point indexing. Default: 'distance'.", "page": "(Optional, number) Page number for paginated results. Default: 1.", "points_per_page": "(Optional, number) Number of data points per page. Default: 100. Special value: -1 returns ALL data points split into multiple messages."}, "task": {"category": "Strava", "query": "Retrieve time-series data from activities"}}, {"name": "get-activity-laps", "server": "Strava", "description": "Retrieves the laps recorded for a specific Strava activity.", "parameter": {"id": "(Required, number | string) The unique identifier of the Strava activity."}, "task": {"category": "Strava", "query": "Retrieve activity laps"}}, {"name": "get-athlete-zones", "server": "Strava", "description": "Retrieves the authenticated athlete's configured heart rate and power zones.", "parameter": {}, "task": {"category": "Strava", "query": "Retrieve athlete's heart rate and power zones"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "ShaderToy", "description": "1. Retrieve shader information from ShaderToy 2. Search for shaders on ShaderToy", "tools": [{"name": "get_shader_info", "server": "ShaderToy", "description": "Retrieves information on any shader on ShaderToy.", "parameter": {}, "task": {"category": "ShaderToy", "query": "Retrieve shader information"}}, {"name": "search_shader", "server": "ShaderToy", "description": "Searches for shaders available on ShaderToy through a search prompt.", "parameter": {}, "task": {"category": "ShaderToy", "query": "Search for available shaders"}}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Talk To Figma", "description": "Figma文档操作，包括：获取文档信息、节点操作（创建/修改/删除）、文本处理、布局设置、颜色与样式管理、组件实例操作、图像导出及通信通道管理", "tools": [{"name": "get_document_info", "server": "Talk To Figma", "description": "Get information about the current Figma document", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve document details"}}, {"name": "get_selection", "server": "Talk To Figma", "description": "Get information about the current selection", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve details of the current selection"}}, {"name": "read_my_design", "server": "Talk To Figma", "description": "Get detailed node information about the current selection without parameters", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve detailed node information for selected design elements"}}, {"name": "get_node_info", "server": "Talk To Figma", "description": "Get detailed information about a specific node", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve detailed node information"}}, {"name": "get_nodes_info", "server": "Talk To Figma", "description": "Get detailed information about multiple nodes by providing an array of node IDs", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve information about design nodes"}}, {"name": "get_annotations", "server": "Talk To Figma", "description": "Get all annotations in the current document or specific node", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve annotations from document or node"}}, {"name": "set_annotation", "server": "Talk To Figma", "description": "Create or update an annotation with markdown support", "parameter": {}, "task": {"category": "Figma", "query": "Create or update annotations with markdown"}}, {"name": "set_multiple_annotations", "server": "Talk To Figma", "description": "Batch create/update multiple annotations efficiently", "parameter": {}, "task": {"category": "Figma", "query": "Batch manage annotations"}}, {"name": "scan_nodes_by_types", "server": "Talk To Figma", "description": "Scan for nodes with specific types (useful for finding annotation targets)", "parameter": {}, "task": {"category": "Figma", "query": "Find nodes with specific types"}}, {"name": "get_reactions", "server": "Talk To Figma", "description": "Get all prototype reactions from nodes with visual highlight animation", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve prototype reactions with visual highlights"}}, {"name": "set_default_connector", "server": "Talk To Figma", "description": "Set a copied FigJam connector as the default connector style for creating connections (must be set before creating connections)", "parameter": {}, "task": {"category": "Figma", "query": "Set default connector style in FigJam"}}, {"name": "create_connections", "server": "Talk To Figma", "description": "Create FigJam connector lines between nodes, based on prototype flows or custom mapping", "parameter": {}, "task": {"category": "Figma", "query": "Create connector lines between nodes"}}, {"name": "create_rectangle", "server": "Talk To Figma", "description": "Create a new rectangle with position, size, and optional name", "parameter": {}, "task": {"category": "Figma", "query": "Create a rectangle with specified dimensions"}}, {"name": "create_frame", "server": "Talk To Figma", "description": "Create a new frame with position, size, and optional name", "parameter": {}, "task": {"category": "Figma", "query": "Create a new frame with specified attributes"}}, {"name": "create_text", "server": "Talk To Figma", "description": "Create a new text node with customizable font properties", "parameter": {}, "task": {"category": "Figma", "query": "Create customizable text nodes"}}, {"name": "scan_text_nodes", "server": "Talk To Figma", "description": "Scan text nodes with intelligent chunking for large designs", "parameter": {}, "task": {"category": "Figma", "query": "Scan and analyze text nodes in designs"}}, {"name": "set_text_content", "server": "Talk To Figma", "description": "Set the text content of a single text node", "parameter": {}, "task": {"category": "Figma", "query": "Modify text content in design elements"}}, {"name": "set_multiple_text_contents", "server": "Talk To Figma", "description": "Batch update multiple text nodes efficiently", "parameter": {}, "task": {"category": "Figma", "query": "Batch update text nodes"}}, {"name": "set_layout_mode", "server": "Talk To Figma", "description": "Set the layout mode and wrap behavior of a frame (NONE, HORIZONTAL, VERTICAL)", "parameter": {}, "task": {"category": "Figma", "query": "Configure layout mode for frames"}}, {"name": "set_padding", "server": "Talk To Figma", "description": "Set padding values for an auto-layout frame (top, right, bottom, left)", "parameter": {}, "task": {"category": "Figma", "query": "Adjust padding for auto-layout frames"}}, {"name": "set_axis_align", "server": "Talk To Figma", "description": "Set primary and counter axis alignment for auto-layout frames", "parameter": {}, "task": {"category": "Figma", "query": "Configure alignment for auto-layout frames"}}, {"name": "set_layout_sizing", "server": "Talk To Figma", "description": "Set horizontal and vertical sizing modes for auto-layout frames (FIXED, HUG, FILL)", "parameter": {}, "task": {"category": "Figma", "query": "Configure auto-layout frame sizing modes"}}, {"name": "set_item_spacing", "server": "Talk To Figma", "description": "Set distance between children in an auto-layout frame", "parameter": {}, "task": {"category": "Figma", "query": "Adjust spacing in auto-layout frames"}}, {"name": "set_fill_color", "server": "Talk To Figma", "description": "Set the fill color of a node (RGBA)", "parameter": {}, "task": {"category": "Figma", "query": "Modify node fill color"}}, {"name": "set_stroke_color", "server": "Talk To Figma", "description": "Set the stroke color and weight of a node", "parameter": {}, "task": {"category": "Figma", "query": "Modify stroke properties of a design element"}}, {"name": "set_corner_radius", "server": "Talk To Figma", "description": "Set the corner radius of a node with optional per-corner control", "parameter": {}, "task": {"category": "Figma", "query": "Adjust corner radius of design elements"}}, {"name": "move_node", "server": "Talk To Figma", "description": "Move a node to a new position", "parameter": {}, "task": {"category": "Figma", "query": "Reposition elements in a design"}}, {"name": "resize_node", "server": "Talk To Figma", "description": "Resize a node with new dimensions", "parameter": {}, "task": {"category": "Figma", "query": "Resize elements in a design"}}, {"name": "delete_node", "server": "Talk To Figma", "description": "Delete a node", "parameter": {}, "task": {"category": "Figma", "query": "Remove elements from design"}}, {"name": "delete_multiple_nodes", "server": "Talk To Figma", "description": "Delete multiple nodes at once efficiently", "parameter": {}, "task": {"category": "Figma", "query": "Delete multiple design elements efficiently"}}, {"name": "clone_node", "server": "Talk To Figma", "description": "Create a copy of an existing node with optional position offset", "parameter": {}, "task": {"category": "Figma", "query": "Duplicate a node with optional offset"}}, {"name": "get_styles", "server": "Talk To Figma", "description": "Get information about local styles", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve local styles information"}}, {"name": "get_local_components", "server": "Talk To Figma", "description": "Get information about local components", "parameter": {}, "task": {"category": "Figma", "query": "Retrieve local component details"}}, {"name": "create_component_instance", "server": "Talk To Figma", "description": "Create an instance of a component", "parameter": {}, "task": {"category": "Figma", "query": "Create instances of components"}}, {"name": "get_instance_overrides", "server": "Talk To Figma", "description": "Extract override properties from a selected component instance", "parameter": {}, "task": {"category": "Figma", "query": "Extract component instance override properties"}}, {"name": "set_instance_overrides", "server": "Talk To Figma", "description": "Apply extracted overrides to target instances", "parameter": {}, "task": {"category": "Figma", "query": "Apply overrides to design instances"}}, {"name": "export_node_as_image", "server": "Talk To Figma", "description": "Export a node as an image (PNG, JPG, SVG, or PDF) - limited support on image currently returning base64 as text", "parameter": {}, "task": {"category": "Figma", "query": "Export design nodes as images"}}, {"name": "join_channel", "server": "Talk To Figma", "description": "Join a specific channel to communicate with Figma", "parameter": {}, "task": {"category": "Figma", "query": "Join a communication channel"}}], "domains": [{"name": "Design Tool Integration", "description": "设计工具集成，包括文档信息获取、节点操作、文本处理、布局设置、颜色与样式管理、组件实例操作及图像导出"}]}
{"name": "TMDB", "description": "1.按标题或关键词搜索电影 2.根据电影ID获取推荐 3.获取指定时间窗口的热门电影", "tools": [{"name": "search_movies", "server": "TMDB", "description": "Search for movies by title or keywords", "parameter": {"query": "(string) Search query"}, "task": {"category": "TMDB", "query": "Search for movies by title or keywords"}}, {"name": "get_recommendations", "server": "TMDB", "description": "Get movie recommendations based on a movie ID", "parameter": {"movieId": "(string) TMDB movie ID"}, "task": {"category": "TMDB", "query": "Retrieve movie recommendations"}}, {"name": "get_trending", "server": "TMDB", "description": "Get trending movies for a specified time window", "parameter": {"timeWindow": "(string) Either 'day' or 'week'"}, "task": {"category": "TMDB", "query": "Retrieve trending movies for a specific time period"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Tavily search", "description": "1.使用AI进行全面的网页搜索和内容提取 2.生成带有证据的直接答案 3.搜索最近的新闻文章", "tools": [{"name": "tavily_web_search", "server": "Tavily search", "description": "Performs comprehensive web searches with AI-powered content extraction.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "search_depth": "(string, optional) Either 'basic' or 'advanced' search depth (default: 'basic')", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}, "task": {"category": "Tavily search", "query": "Perform comprehensive web searches with AI-powered content extraction"}}, {"name": "tavily_answer_search", "server": "Tavily search", "description": "Performs web searches and generates direct answers with supporting evidence.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "search_depth": "(string, optional) Either 'basic' or 'advanced' search depth (default: 'advanced')", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}, "task": {"category": "Tavily search", "query": "Perform web searches with direct answers and evidence"}}, {"name": "tavily_news_search", "server": "Tavily search", "description": "Searches recent news articles with publication dates.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "days": "(integer, optional) Number of days back to search (default: 3)", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}, "task": {"category": "Tavily search", "query": "Search for recent news articles"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Telegram", "description": "Telegram chat and user management, including chat operations (create/edit/delete), message handling (send/edit/delete), contact management (add/block/import), profile updates, and privacy settings", "tools": [{"name": "get_chats", "server": "Telegram", "description": "Get a paginated list of chats.", "parameter": {"page": "(int) Page number (1-indexed)", "page_size": "(int) Number of chats per page"}, "task": {"category": "Telegram", "query": "Retrieve a list of chats with pagination"}}, {"name": "list_chats", "server": "Telegram", "description": "List chats with metadata and filtering.", "parameter": {"chat_type": "(str) Type of chat (e.g., 'private', 'group', 'channel')", "limit": "(int) Maximum number of chats to return"}, "task": {"category": "Telegram", "query": "List chats with filtering options"}}, {"name": "get_chat", "server": "Telegram", "description": "Get detailed info about a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Retrieve detailed information about a chat"}}, {"name": "create_group", "server": "Telegram", "description": "Create a new group.", "parameter": {"title": "(str) Title of the group", "user_ids": "(list of int) List of user IDs to add to the group"}, "task": {"category": "Telegram", "query": "Create a new group with specified users"}}, {"name": "create_channel", "server": "Telegram", "description": "Create a channel or supergroup.", "parameter": {"title": "(str) Title of the channel/supergroup", "about": "(str) Description of the channel/supergroup", "megagroup": "(bool) Whether to create a supergroup"}, "task": {"category": "Telegram", "query": "Create a new channel or supergroup"}}, {"name": "edit_chat_title", "server": "Telegram", "description": "Change chat/group/channel title.", "parameter": {"chat_id": "(int) ID of the chat", "title": "(str) New title"}, "task": {"category": "Telegram", "query": "Modify chat or group title"}}, {"name": "delete_chat_photo", "server": "Telegram", "description": "Remove chat/group/channel photo.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Remove photo from chat, group, or channel"}}, {"name": "leave_chat", "server": "Telegram", "description": "Leave a group or channel.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Leave a group or channel"}}, {"name": "get_participants", "server": "Telegram", "description": "List all participants in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "List participants in a chat"}}, {"name": "get_admins", "server": "Telegram", "description": "List all admins in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "List administrators in a chat"}}, {"name": "get_banned_users", "server": "Telegram", "description": "List all banned users in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "List banned users in a chat"}}, {"name": "promote_admin", "server": "Telegram", "description": "Promote user to admin.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to promote"}, "task": {"category": "Telegram", "query": "Promote a user to admin in a chat"}}, {"name": "demote_admin", "server": "Telegram", "description": "Demote admin to user.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to demote"}, "task": {"category": "Telegram", "query": "Demote admin to user in a chat"}}, {"name": "ban_user", "server": "Telegram", "description": "Ban user from a chat.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to ban"}, "task": {"category": "Telegram", "query": "Ban a user from a chat"}}, {"name": "unban_user", "server": "Telegram", "description": "Unban user from a chat.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to unban"}, "task": {"category": "Telegram", "query": "Remove user ban from a chat"}}, {"name": "get_invite_link", "server": "Telegram", "description": "Get invite link for a group or channel.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Retrieve invite link for a chat"}}, {"name": "export_chat_invite", "server": "Telegram", "description": "Export invite link for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Generate invite link for a chat"}}, {"name": "import_chat_invite", "server": "Telegram", "description": "Join chat by invite hash.", "parameter": {"hash": "(str) Invite hash"}, "task": {"category": "Telegram", "query": "Join a chat using an invite link"}}, {"name": "join_chat_by_link", "server": "Telegram", "description": "Join chat by invite link.", "parameter": {"link": "(str) Invite link"}, "task": {"category": "Telegram", "query": "Join a chat using an invite link"}}, {"name": "get_messages", "server": "Telegram", "description": "Get paginated messages.", "parameter": {"chat_id": "(int) ID of the chat", "page": "(int) Page number (1-indexed)", "page_size": "(int) Number of messages per page"}, "task": {"category": "Telegram", "query": "Retrieve paginated messages from a chat"}}, {"name": "list_messages", "server": "Telegram", "description": "List filtered messages.", "parameter": {"chat_id": "(int) ID of the chat", "limit": "(int) Maximum number of messages to return", "search_query": "(Optional, str) Search query", "from_date": "(Optional, datetime) Start date", "to_date": "(Optional, datetime) End date"}, "task": {"category": "Telegram", "query": "Retrieve filtered messages from a chat"}}, {"name": "send_message", "server": "Telegram", "description": "Send a message to a specific chat.", "parameter": {"chat_id": "(int) ID of the chat", "message": "(str) Message content to send"}, "task": {"category": "Telegram", "query": "Send a message to a chat"}}, {"name": "reply_to_message", "server": "Telegram", "description": "Reply to a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to reply to", "text": "(str) Reply text"}, "task": {"category": "Telegram", "query": "Reply to a message in a chat"}}, {"name": "edit_message", "server": "Telegram", "description": "Edit a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to edit", "new_text": "(str) New message text"}, "task": {"category": "Telegram", "query": "Edit messages in a chat"}}, {"name": "delete_message", "server": "Telegram", "description": "Delete a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to delete"}, "task": {"category": "Telegram", "query": "Delete a message from a chat"}}, {"name": "forward_message", "server": "Telegram", "description": "Forward a message.", "parameter": {"from_chat_id": "(int) ID of the chat to forward from", "message_id": "(int) ID of the message to forward", "to_chat_id": "(int) ID of the chat to forward to"}, "task": {"category": "Telegram", "query": "Forward messages between chats"}}, {"name": "pin_message", "server": "Telegram", "description": "Pin a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to pin"}, "task": {"category": "Telegram", "query": "Pin a message in a chat"}}, {"name": "unpin_message", "server": "Telegram", "description": "Unpin a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to unpin"}, "task": {"category": "Telegram", "query": "Unpin a message in a chat"}}, {"name": "mark_as_read", "server": "Telegram", "description": "Mark all messages as read in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Mark messages as read in a chat"}}, {"name": "get_message_context", "server": "Telegram", "description": "Get context around a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message", "context_size": "(int) Number of messages before and after the message"}, "task": {"category": "Telegram", "query": "Retrieve message context from a chat"}}, {"name": "get_history", "server": "Telegram", "description": "Get full chat history.", "parameter": {"chat_id": "(int) ID of the chat", "limit": "(int) Maximum number of messages to return"}, "task": {"category": "Telegram", "query": "Retrieve chat history"}}, {"name": "get_pinned_messages", "server": "Telegram", "description": "List pinned messages in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Retrieve pinned messages from a chat"}}, {"name": "get_last_interaction", "server": "Telegram", "description": "Get the most recent message with a contact.", "parameter": {"contact_id": "(int) ID of the contact"}, "task": {"category": "Telegram", "query": "Retrieve the latest message from a contact"}}, {"name": "list_contacts", "server": "Telegram", "description": "List all contacts.", "parameter": {}, "task": {"category": "Telegram", "query": "Retrieve list of contacts"}}, {"name": "search_contacts", "server": "Telegram", "description": "Search contacts.", "parameter": {"query": "(str) Search query"}, "task": {"category": "Telegram", "query": "Search for contacts"}}, {"name": "add_contact", "server": "Telegram", "description": "Add a contact.", "parameter": {"phone": "(str) Phone number of the contact", "first_name": "(str) First name of the contact", "last_name": "(Optional, str) Last name of the contact"}, "task": {"category": "Telegram", "query": "Add a new contact to the list"}}, {"name": "delete_contact", "server": "Telegram", "description": "Delete a contact.", "parameter": {"user_id": "(int) ID of the contact"}, "task": {"category": "Telegram", "query": "Remove a contact from the list"}}, {"name": "block_user", "server": "Telegram", "description": "Block a user.", "parameter": {"user_id": "(int) ID of the user to block"}, "task": {"category": "Telegram", "query": "Block a user by ID"}}, {"name": "unblock_user", "server": "Telegram", "description": "Unblock a user.", "parameter": {"user_id": "(int) ID of the user to unblock"}, "task": {"category": "Telegram", "query": "Unblock a user on Telegram"}}, {"name": "import_contacts", "server": "Telegram", "description": "Bulk import contacts.", "parameter": {"contacts": "(list of dict) List of contact dictionaries"}, "task": {"category": "Telegram", "query": "Bulk import contact information"}}, {"name": "export_contacts", "server": "Telegram", "description": "Export all contacts as JSON.", "parameter": {}, "task": {"category": "Telegram", "query": "Export contacts in JSON format"}}, {"name": "get_blocked_users", "server": "Telegram", "description": "List blocked users.", "parameter": {}, "task": {"category": "Telegram", "query": "Retrieve list of blocked users"}}, {"name": "get_contact_ids", "server": "Telegram", "description": "List all contact IDs.", "parameter": {}, "task": {"category": "Telegram", "query": "List all contact IDs"}}, {"name": "get_direct_chat_by_contact", "server": "Telegram", "description": "Find direct chat with a contact.", "parameter": {"contact_query": "(str) Name, username, or phone number to search for"}, "task": {"category": "Telegram", "query": "Search for direct chat with a contact"}}, {"name": "get_contact_chats", "server": "Telegram", "description": "List all chats with a contact.", "parameter": {"contact_id": "(int) ID of the contact"}, "task": {"category": "Telegram", "query": "Retrieve chat history with a specific contact"}}, {"name": "get_me", "server": "Telegram", "description": "Get your user info.", "parameter": {}, "task": {"category": "Telegram", "query": "Retrieve user information"}}, {"name": "update_profile", "server": "Telegram", "description": "Update your profile.", "parameter": {"first_name": "(str) New first name", "last_name": "(Optional, str) New last name", "about": "(Optional, str) New about text"}, "task": {"category": "Telegram", "query": "Update user profile information"}}, {"name": "delete_profile_photo", "server": "Telegram", "description": "Remove your profile photo.", "parameter": {}, "task": {"category": "Telegram", "query": "Remove profile photo"}}, {"name": "get_user_photos", "server": "Telegram", "description": "Get a user's profile photos.", "parameter": {"user_id": "(int) ID of the user", "limit": "(int) Maximum number of photos to return"}, "task": {"category": "Telegram", "query": "Retrieve user profile photos"}}, {"name": "get_user_status", "server": "Telegram", "description": "Get a user's online status.", "parameter": {"user_id": "(int) ID of the user"}, "task": {"category": "Telegram", "query": "Check user online status"}}, {"name": "get_media_info", "server": "Telegram", "description": "Get info about media in a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message"}, "task": {"category": "Telegram", "query": "Retrieve media information from messages"}}, {"name": "search_public_chats", "server": "Telegram", "description": "Search public chats, channels, or bots by username or title.", "parameter": {"query": "(str) Search query"}, "task": {"category": "Telegram", "query": "Search for public chats, channels, or bots"}}, {"name": "search_messages", "server": "Telegram", "description": "Search messages in a chat.", "parameter": {"chat_id": "(int) ID of the chat", "query": "(str) Search query", "limit": "(int) Maximum number of messages to return"}, "task": {"category": "Telegram", "query": "Search messages within a chat"}}, {"name": "resolve_username", "server": "Telegram", "description": "Resolve a username to ID.", "parameter": {"username": "(str) Username to resolve"}, "task": {"category": "Telegram", "query": "Resolve Telegram username to ID"}}, {"name": "get_sticker_sets", "server": "Telegram", "description": "List sticker sets.", "parameter": {}, "task": {"category": "Telegram", "query": "List available sticker sets"}}, {"name": "get_bot_info", "server": "Telegram", "description": "Get info about a bot.", "parameter": {"bot_username": "(str) Username of the bot"}, "task": {"category": "Telegram", "query": "Retrieve information about a Telegram bot"}}, {"name": "set_bot_commands", "server": "Telegram", "description": "Set bot commands (bot accounts only).", "parameter": {"bot_username": "(str) Username of the bot", "commands": "(list of dict) List of command dictionaries"}, "task": {"category": "Telegram", "query": "Set commands for a Telegram bot"}}, {"name": "get_privacy_settings", "server": "Telegram", "description": "Get privacy settings.", "parameter": {}, "task": {"category": "Telegram", "query": "Retrieve privacy settings"}}, {"name": "set_privacy_settings", "server": "Telegram", "description": "Set privacy settings.", "parameter": {"key": "(str) Setting key", "allow_users": "(list of int) List of user IDs to allow", "disallow_users": "(list of int) List of user IDs to disallow"}, "task": {"category": "Telegram", "query": "Configure privacy settings for users"}}, {"name": "mute_chat", "server": "Telegram", "description": "Mute notifications for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Mute notifications in a chat"}}, {"name": "unmute_chat", "server": "Telegram", "description": "Unmute notifications for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Unmute notifications in a chat"}}, {"name": "archive_chat", "server": "Telegram", "description": "Archive a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Archive a chat by its ID"}}, {"name": "unarchive_chat", "server": "Telegram", "description": "Unarchive a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Unarchive a chat"}}, {"name": "get_recent_actions", "server": "Telegram", "description": "Get recent admin actions in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": {"category": "Telegram", "query": "Retrieve recent admin actions in a chat"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "User & Access Management", "description": "用户与访问管理，包括用户信息检索、群组成员列表及权限定义管理"}]}
{"name": "Telegram-Client", "description": "Telegram account operations, including: account information retrieval, dialog listing and filtering, message marking as read, dialog message retrieval, and message sending", "tools": [{"name": "tg_me", "server": "Telegram-Client", "description": "Get current account information.", "parameter": {}, "task": {"category": "Telegram", "query": "Retrieve current account details"}}, {"name": "tg_dialogs", "server": "Telegram-Client", "description": "List dialogs with optional unread filter.", "parameter": {}, "task": {"category": "Telegram", "query": "List dialogs with optional filters"}}, {"name": "tg_read", "server": "Telegram-Client", "description": "Mark dialog as read.", "parameter": {}, "task": {"category": "Telegram", "query": "Mark dialog as read"}}, {"name": "tg_dialog", "server": "Telegram-Client", "description": "Retrieve messages from specific dialog.", "parameter": {}, "task": {"category": "Telegram", "query": "Retrieve messages from a specific chat"}}, {"name": "tg_send", "server": "Telegram-Client", "description": "Send draft messages to any dialog.", "parameter": {}, "task": {"category": "Telegram", "query": "Send messages to any chat"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Terminal-Control", "description": "1.执行终端命令并返回结果 2.获取命令执行历史 3.获取和更改当前工作目录 4.列出目录内容 5.文件内容操作（写入、读取、插入、删除、更新）", "tools": [{"name": "execute_command", "server": "Terminal-Control", "description": "Execute a terminal command and return its results.", "parameter": {"command": "(string) The command line command to execute", "timeout": "(Optional, int) Command timeout in seconds (default: 30)"}, "task": {"category": "Terminal", "query": "Execute command line commands"}}, {"name": "get_command_history", "server": "Terminal-Control", "description": "Get recent command execution history.", "parameter": {"count": "(Optional, int) Number of recent commands to return (default: 10)"}, "task": {"category": "Terminal", "query": "Retrieve recent command execution history"}}, {"name": "get_current_directory", "server": "Terminal-Control", "description": "Get the current working directory.", "parameter": {}, "task": {"category": "Terminal", "query": "Retrieve current working directory"}}, {"name": "change_directory", "server": "Terminal-Control", "description": "Change the current working directory.", "parameter": {"path": "(string) Directory path to switch to"}, "task": {"category": "Terminal", "query": "Change the current working directory"}}, {"name": "list_directory", "server": "Terminal-Control", "description": "List files and subdirectories in the specified directory.", "parameter": {"path": "(Optional, string) Directory path to list contents (default: current directory)"}, "task": {"category": "Terminal", "query": "List contents of a directory"}}, {"name": "write_file", "server": "Terminal-Control", "description": "Write content to a file with overwrite or append options.", "parameter": {"path": "(string) Path to the file", "content": "(string) Content to write", "mode": "(Optional, string) Write mode ('overwrite' or 'append', default: 'overwrite')"}, "task": {"category": "Terminal-Control", "query": "Write content to a file with different modes"}}, {"name": "read_file", "server": "Terminal-Control", "description": "Read content from a file with optional row selection.", "parameter": {"path": "(string) Path to the file", "start_row": "(Optional, int) Starting row to read from (0-based)", "end_row": "(Optional, int) Ending row to read to (0-based, inclusive)"}, "task": {"category": "Terminal", "query": "Read content from a file with optional row selection"}}, {"name": "insert_file_content", "server": "Terminal-Control", "description": "Insert content at specific row(s) in a file.", "parameter": {"path": "(string) Path to the file", "content": "(string) Content to insert", "row": "(Optional, int) Row number to insert at (0-based)", "rows": "(Optional, list) List of row numbers to insert at (0-based)"}, "task": {"category": "Terminal-Control", "query": "Insert content into a file at specific rows"}}, {"name": "delete_file_content", "server": "Terminal-Control", "description": "Delete content at specific row(s) from a file.", "parameter": {"path": "(string) Path to the file", "row": "(Optional, int) Row number to delete (0-based)", "rows": "(Optional, list) List of row numbers to delete (0-based)"}, "task": {"category": "Terminal", "query": "Delete specific lines from a file"}}, {"name": "update_file_content", "server": "Terminal-Control", "description": "Update content at specific row(s) in a file.", "parameter": {"path": "(string) Path to the file", "content": "(string) New content to place at the specified row(s)", "row": "(Optional, int) Row number to update (0-based)", "rows": "(Optional, list) List of row numbers to update (0-based)"}, "task": {"category": "Terminal", "query": "Modify content in a file at specific rows"}}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "TFT-Match-Analyzer", "description": "1. Get TFT match history for the current player 2. Get detailed information about a specific TFT match", "tools": [{"name": "tft_match_history", "server": "TFT-Match-Analyzer", "description": "Get TFT match history for the current player.", "parameter": {"count": "(Optional, number) Number of matches to retrieve. Defaults to 20", "start": "(Optional, number) Start index for pagination. Defaults to 0"}, "task": {"category": "TFT", "query": "Retrieve match history for the current player"}}, {"name": "tft_match_details", "server": "TFT-Match-Analyzer", "description": "Get detailed information about a specific TFT match.", "parameter": {"matchId": "(required, string) The match ID to get details for"}, "task": {"category": "TFT", "query": "Retrieve detailed match information"}}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Ticketmaster", "description": "Search for events, venues, or attractions on Ticketmaster using various filters", "tools": [{"name": "search_ticketmaster", "server": "Ticketmaster", "description": "Searches for events, venues, or attractions using various filters.", "parameter": {"type": "(string) Type of search ('event', 'venue', or 'attraction')", "keyword": "(Optional, string) Search term", "startDate": "(Optional, string) Start date in YYYY-MM-DD format (for events)", "endDate": "(Optional, string) End date in YYYY-MM-DD format (for events)", "city": "(Optional, string) City name", "stateCode": "(Optional, string) State code (e.g., 'NY')", "countryCode": "(Optional, string) Country code (e.g., 'US')", "venueId": "(Optional, string) Specific venue ID", "attractionId": "(Optional, string) Specific attraction ID", "classificationName": "(Optional, string) Event category (e.g., 'Sports', 'Music')", "format": "(Optional, string) Output format ('json' or 'text', defaults to 'json')"}, "task": {"category": "Ticketmaster", "query": "Search for events, venues, or attractions with filters"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "TickTick", "description": "1.任务管理,包括:创建、更新、完成和删除任务 2.项目管理,包括:创建、更新、删除项目及获取项目详情", "tools": [{"name": "get_task_by_ids", "server": "TickTick", "description": "Get a specific task by project ID and task ID", "parameter": {"projectId": "(string) Project identifier", "taskId": "(string) Task identifier"}, "task": {"category": "TickTick", "query": "Retrieve a specific task by IDs"}}, {"name": "create_task", "server": "TickTick", "description": "Create a new task in a project", "parameter": {"title": "(string) Task title", "projectId": "(string) Project id", "content": "(optional string) Task content", "desc": "(optional string) Task description", "isAllDay": "(optional boolean) Is all day task", "startDate": "(optional string) Task start date in 'yyyy-MM-dd'T'HH:mm:ssZ' format", "dueDate": "(optional string) Task due date in 'yyyy-MM-dd'T'HH:mm:ssZ' format", "timeZone": "(optional string) Task time zone (e.g., 'America/Los_Angeles')", "reminders": "(optional string[]) List of reminder triggers in iCalendar format", "repeatFlag": "(optional string) Task repeat flag in iCalendar format", "priority": "(optional number) Task priority (None: 0, Low: 1, Medium: 3, High: 5)", "sortOrder": "(optional string) Task sort order", "items": "(optional array) List of subtasks with:"}, "task": {"category": "TickTick", "query": "Create a new task in a project"}}, {"name": "update_task", "server": "TickTick", "description": "Update an existing task", "parameter": {"taskId": "(string) Task identifier - Path", "id": "(string) Task identifier - Body", "projectId": "(string) Project id"}, "task": {"category": "TickTick", "query": "Update an existing task in a project"}}, {"name": "complete_task", "server": "TickTick", "description": "Mark a task as completed", "parameter": {"taskId": "(string) Task identifier", "projectId": "(string) Project identifier"}, "task": {"category": "TickTick", "query": "Mark a task as completed"}}, {"name": "delete_task", "server": "TickTick", "description": "Delete a task from a project", "parameter": {"taskId": "(string) Task identifier", "projectId": "(string) Project identifier"}, "task": {"category": "TickTick", "query": "Delete a task from a project"}}, {"name": "get_user_projects", "server": "TickTick", "description": "Get all projects for the authenticated user", "parameter": {}, "task": {"category": "TickTick", "query": "Retrieve user projects"}}, {"name": "get_project_by_id", "server": "TickTick", "description": "Get a specific project by ID", "parameter": {"projectId": "(string) Project identifier"}, "task": {"category": "TickTick", "query": "Retrieve project details by ID"}}, {"name": "get_project_with_data", "server": "TickTick", "description": "Get project details along with tasks and columns", "parameter": {"projectId": "(string) Project identifier"}, "task": {"category": "TickTick", "query": "Retrieve project details including tasks and columns"}}, {"name": "create_project", "server": "TickTick", "description": "Create a new project", "parameter": {"name": "(string) Project name", "color": "(optional string) Project color (default: '#4772FA')", "viewMode": "(optional string) View mode ('list', 'kanban', 'timeline') (default: 'list')", "kind": "(optional string) Project kind ('TASK', 'NOTE') (default: 'TASK')"}, "task": {"category": "TickTick", "query": "Create a new project with customizable settings"}}, {"name": "update_project", "server": "TickTick", "description": "Update an existing project", "parameter": {"projectId": "(string) Project identifier", "name": "(optional string) Project name", "color": "(optional string) Project color", "sortOrder": "(optional number) Project sort order", "viewMode": "(optional string) View mode ('list', 'kanban', 'timeline')", "kind": "(optional string) Project kind ('TASK', 'NOTE')"}, "task": {"category": "TickTick", "query": "Modify project details"}}, {"name": "delete_project", "server": "TickTick", "description": "Delete a project", "parameter": {"projectId": "(string) Project identifier"}, "task": {"category": "TickTick", "query": "Delete a project"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Todoist", "description": "Todoist任务管理,包括:任务创建、检索、更新、完成和删除", "tools": [{"name": "todoist_create_task", "server": "Todoist", "description": "Create new tasks with various attributes.", "parameter": {"content": "(string) task title", "description": "(Optional, string) task description", "due date": "(Optional, string) due date", "priority level": "(Optional, number) priority level (1-4)"}, "task": {"category": "Todoist", "query": "Create new tasks with customizable attributes"}}, {"name": "todoist_get_tasks", "server": "Todoist", "description": "Retrieve and filter tasks.", "parameter": {"due date": "(Optional, string) filter by due date", "priority": "(Optional, number) filter by priority", "project": "(Optional, string) filter by project", "result limit": "(Optional, number) limit the number of results"}, "task": {"category": "Todoist", "query": "Retrieve and filter tasks based on criteria"}}, {"name": "todoist_update_task", "server": "Todoist", "description": "Update existing tasks using natural language search.", "parameter": {"task name": "(string) partial name match to find the task", "content": "(Optional, string) new task title", "description": "(Optional, string) new task description", "due date": "(Optional, string) new due date", "priority": "(Optional, number) new priority level (1-4)"}, "task": {"category": "Todoist", "query": "Update tasks with new details"}}, {"name": "todoist_complete_task", "server": "Todoist", "description": "Mark tasks as complete using natural language search.", "parameter": {"task name": "(string) partial name match to find the task"}, "task": {"category": "Todoist", "query": "Mark tasks as complete"}}, {"name": "todoist_delete_task", "server": "Todoist", "description": "Remove tasks using natural language search.", "parameter": {"task name": "(string) partial name match to find the task"}, "task": {"category": "Todoist", "query": "Delete tasks by name"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Typesense", "description": "1.在Typesense集合中搜索文档 2.通过ID从集合中检索特定文档 3.获取Typesense集合的统计信息 4.分析集合结构和内容 5.获取集合的有效搜索查询建议", "tools": [{"name": "typesense_query", "server": "Typesense", "description": "Search for documents in Typesense collections with powerful filtering", "parameter": {"query_text": "(string) The query text to search for", "collection_name": "(string) The name of the collection to search", "search_fields": "(array) Fields to search within", "filters": "(object, optional) Filters to apply to the search", "sort_options": "(object, optional) Options for sorting results", "limit": "(number, optional) Maximum number of results to return"}, "task": {"category": "Typesense", "query": "Search documents with filtering and sorting options"}}, {"name": "typesense_get_document", "server": "Typesense", "description": "Retrieve specific documents by ID from collections", "parameter": {"collection_name": "(string) The name of the collection", "document_id": "(string) The ID of the document to retrieve"}, "task": {"category": "Typesense", "query": "Retrieve documents by ID from collections"}}, {"name": "typesense_collection_stats", "server": "Typesense", "description": "Get statistics about a Typesense collection", "parameter": {"collection_name": "(string) The name of the collection"}, "task": {"category": "Typesense", "query": "Retrieve collection statistics"}}, {"name": "analyze_collection", "server": "Typesense", "description": "Analyze collection structure and contents", "parameter": {"collection_name": "(string) The name of the collection"}, "task": {"category": "Typesense", "query": "Analyze collection structure and contents"}}, {"name": "search_suggestions", "server": "Typesense", "description": "Get suggestions for effective search queries for a collection", "parameter": {"collection_name": "(string) The name of the collection"}, "task": {"category": "Typesense", "query": "Retrieve search query suggestions"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Travel Planner", "description": "1.使用Google Places API搜索地点 2.获取特定地点的详细信息 3.计算两个位置之间的路线 4.获取位置时区信息", "tools": [{"name": "searchPlaces", "server": "Travel Planner", "description": "Search for places using Google Places API", "parameter": {"query": "(string) Search query for places", "location": "(optional) Latitude and longitude to bias results", "radius": "(optional) Search radius in meters"}, "task": {"category": "Google Places", "query": "Search for places using location and radius"}}, {"name": "getPlaceDetails", "server": "Travel Planner", "description": "Get detailed information about a specific place", "parameter": {"placeId": "(string) Google Place ID to retrieve details for"}, "task": {"category": "Travel Planner", "query": "Retrieve detailed information about a place"}}, {"name": "calculateRoute", "server": "Travel Planner", "description": "Calculate route between two locations", "parameter": {"origin": "(string) Starting location", "destination": "(string) Ending location", "mode": "(optional) Travel mode (driving, walking, bicycling, transit)"}, "task": {"category": "Travel Planner", "query": "Calculate route between two points"}}, {"name": "getTimeZone", "server": "Travel Planner", "description": "Get timezone information for a location", "parameter": {"location": "(string) Latitude and longitude coordinates", "timestamp": "(optional) Timestamp for time zone calculation"}, "task": {"category": "Travel Planner", "query": "Retrieve timezone details for a location"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Unity Catalog", "description": "1.列出指定目录和模式中的函数 2.获取指定目录和模式中的函数 3.在指定目录和模式中创建函数 4.删除指定目录和模式中的函数", "tools": [{"name": "uc_list_functions", "server": "Unity Catalog", "description": "Lists functions within the specified parent catalog and schema.", "parameter": {}, "task": {"category": "Unity Catalog", "query": "List functions in a catalog and schema"}}, {"name": "uc_get_function", "server": "Unity Catalog", "description": "Gets a function within a parent catalog and schema.", "parameter": {"name": "(string) The name of the function (not fully-qualified)."}, "task": {"category": "Unity Catalog", "query": "Retrieve a function from a catalog and schema"}}, {"name": "uc_create_function", "server": "Unity Catalog", "description": "Creates a function within a parent catalog and schema. WARNING: This API is experimental and will change in future versions.", "parameter": {"name": "(string) The name of the function (not fully-qualified).", "script": "(string) The Python script including the function to be registered."}, "task": {"category": "Unity Catalog", "query": "Create a function in a catalog and schema"}}, {"name": "uc_delete_function", "server": "Unity Catalog", "description": "Deletes a function within a parent catalog and schema.", "parameter": {"name": "(string) The name of the function (not fully-qualified)."}, "task": {"category": "Unity Catalog", "query": "Delete a function from a catalog and schema"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Unity3d Game Engine", "description": "Unity游戏开发工具集，包括：执行菜单项、选择游戏对象、更新组件、安装包、运行测试、发送控制台日志、添加资源到场景", "tools": [{"name": "execute_menu_item", "server": "Unity3d Game Engine", "description": "Executes Unity menu items (functions tagged with the MenuItem attribute)", "parameter": {"menuItemName": "(string) The name of the menu item to execute"}, "task": {"category": "Unity3d", "query": "Execute functions from Unity menu items"}}, {"name": "select_gameobject", "server": "Unity3d Game Engine", "description": "Selects game objects in the Unity hierarchy by path or instance ID", "parameter": {"pathOrId": "(string) The path or instance ID of the game object to select"}, "task": {"category": "Unity3D", "query": "Select game objects in Unity hierarchy"}}, {"name": "update_component", "server": "Unity3d Game Engine", "description": "Updates component fields on a GameObject or adds it to the GameObject if it does not contain the component", "parameter": {"gameObjectPath": "(string) The path of the GameObject", "componentType": "(string) The type of the component to update or add", "fields": "(object) A dictionary of field names and values to update"}, "task": {"category": "Unity3D", "query": "Update or add components to GameObjects"}}, {"name": "add_package", "server": "Unity3d Game Engine", "description": "Installs new packages in the Unity Package Manager", "parameter": {"packageName": "(string) The name of the package to install"}, "task": {"category": "Unity3d", "query": "Install new packages in Unity"}}, {"name": "run_tests", "server": "Unity3d Game Engine", "description": "Runs tests using the Unity Test Runner", "parameter": {"testMode": "(string) The test mode to run (e.g., 'EditMode', 'PlayMode')"}, "task": {"category": "Unity3D", "query": "Run tests in Unity Test Runner"}}, {"name": "send_console_log", "server": "Unity3d Game Engine", "description": "Sends a console log to Unity", "parameter": {"message": "(string) The message to send to the Unity console"}, "task": {"category": "Unity3d", "query": "Send messages to Unity console"}}, {"name": "add_asset_to_scene", "server": "Unity3d Game Engine", "description": "Adds an asset from the AssetDatabase to the Unity scene", "parameter": {"assetPath": "(string) The path of the asset to add"}, "task": {"category": "Unity3D", "query": "Add assets to a Unity scene"}}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Unity Integration (Advanced)", "description": "Unity Editor operations, including: project and editor state information retrieval, scene and GameObject information retrieval, C# code execution, log retrieval and filtering, file operations (read/write/edit), directory listing and searching, asset type filtering", "tools": [{"name": "get_editor_state", "server": "Unity Integration (Advanced)", "description": "Get comprehensive information about the Unity project and editor state", "parameter": {}, "task": {"category": "Unity", "query": "Retrieve Unity project and editor information"}}, {"name": "get_current_scene_info", "server": "Unity Integration (Advanced)", "description": "Get detailed information about the current scene", "parameter": {}, "task": {"category": "Unity", "query": "Retrieve detailed information about the current scene"}}, {"name": "get_game_objects_info", "server": "Unity Integration (Advanced)", "description": "Get information about specific GameObjects in the scene", "parameter": {}, "task": {"category": "Unity", "query": "Retrieve information about GameObjects in a scene"}}, {"name": "execute_editor_command", "server": "Unity Integration (Advanced)", "description": "Execute C# code directly in the Unity Editor", "parameter": {}, "task": {"category": "Unity", "query": "Execute C# code in Unity Editor"}}, {"name": "get_logs", "server": "Unity Integration (Advanced)", "description": "Retrieve and filter Unity console logs", "parameter": {}, "task": {"category": "Unity", "query": "Retrieve and filter console logs"}}, {"name": "verify_connection", "server": "Unity Integration (Advanced)", "description": "Check if there's an active connection to Unity Editor", "parameter": {}, "task": {"category": "Unity", "query": "Check active connection to Unity Editor"}}, {"name": "read_file", "server": "Unity Integration (Advanced)", "description": "Read contents of a file in your Unity project", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder"}, "task": {"category": "Unity", "query": "Read file contents in Unity project"}}, {"name": "read_multiple_files", "server": "Unity Integration (Advanced)", "description": "Read multiple files at once", "parameter": {}, "task": {"category": "Unity", "query": "Read multiple files simultaneously"}}, {"name": "write_file", "server": "Unity Integration (Advanced)", "description": "Create or overwrite a file with new content", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder", "content": "(string) Content to write to the file"}, "task": {"category": "Unity", "query": "Create or overwrite files in Unity project"}}, {"name": "edit_file", "server": "Unity Integration (Advanced)", "description": "Make targeted edits to existing files with diff preview", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder", "edits": "(array) Array of edit objects, each containing oldText and newText", "dryRun": "(Optional, boolean) Whether to perform a dry run without applying changes"}, "task": {"category": "Unity", "query": "Edit files with diff preview"}}, {"name": "list_directory", "server": "Unity Integration (Advanced)", "description": "Get a listing of files and folders in a directory", "parameter": {"path": "(string) Path to the directory, can be absolute or relative to the Unity project's Assets folder"}, "task": {"category": "Unity", "query": "List files and folders in a directory"}}, {"name": "directory_tree", "server": "Unity Integration (Advanced)", "description": "Get a hierarchical view of directories and files", "parameter": {}, "task": {"category": "Unity", "query": "View directory and file hierarchy"}}, {"name": "search_files", "server": "Unity Integration (Advanced)", "description": "Find files matching a search pattern", "parameter": {"pattern": "(string) Search pattern to match file names"}, "task": {"category": "Unity", "query": "Search for files based on a pattern"}}, {"name": "get_file_info", "server": "Unity Integration (Advanced)", "description": "Get metadata about a specific file or directory", "parameter": {"path": "(string) Path to the file or directory, can be absolute or relative to the Unity project's Assets folder"}, "task": {"category": "Unity", "query": "Retrieve metadata for files or directories"}}, {"name": "find_assets_by_type", "server": "Unity Integration (Advanced)", "description": "Find all assets of a specific type (e.g., Material, Prefab)", "parameter": {"assetType": "(string) Type of asset to find"}, "task": {"category": "Unity", "query": "Search for assets by type"}}, {"name": "list_scripts", "server": "Unity Integration (Advanced)", "description": "Get a listing of all C# scripts in the project", "parameter": {}, "task": {"category": "Unity", "query": "Retrieve all C# scripts in a project"}}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Vega-Lite", "description": "1. Save data aggregations for visualization 2. Visualize data using Vega-Lite syntax", "tools": [{"name": "save_data", "server": "Vega-Lite", "description": "Save a table of data aggregations to the server for later visualization.", "parameter": {"name": "(string) Name of the data table to be saved", "data": "(array) Array of objects representing the data table"}, "task": {"category": "Vega-Lite", "query": "Save data table for visualization"}}, {"name": "visualize_data", "server": "Vega-Lite", "description": "Visualize a table of data using Vega-Lite syntax.", "parameter": {"data_name": "(string) Name of the data table to be visualized", "vegalite_specification": "(string) JSON string representing the Vega-Lite specification"}, "task": {"category": "Vega-Lite", "query": "Visualize data tables with Vega-Lite syntax"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "Video Editor", "description": "1.从URL添加视频到用户库并分析 2.使用嵌入和关键词搜索视频 3.根据指定条件从一组视频文件生成渲染视频编辑 4.根据指定条件从单个输入视频文件生成编辑", "tools": [{"name": "add-video", "server": "Video Editor", "description": "Adds a video from a URL to the user's library and analyzes it for retrieval.", "parameter": {"url": "(string) The URL of the video to add", "name": "(Optional, string) The name to assign to the video"}, "task": {"category": "Video Editor", "query": "Add and analyze videos from URLs"}}, {"name": "search-videos", "server": "Video Editor", "description": "Searches videos using embeddings and keywords to find relevant matches.", "parameter": {"query": "(string) The search query to use"}, "task": {"category": "Video Editor", "query": "Search for videos using keywords and embeddings"}}, {"name": "generate-edit-from-videos", "server": "Video Editor", "description": "Generates a rendered video edit from a set of video files based on specified criteria.", "parameter": {}, "task": {"category": "Video Editor", "query": "Generate video edits from multiple video files"}}, {"name": "generate-edit-from-single-video", "server": "Video Editor", "description": "Generates an edit from a single input video file based on specified criteria.", "parameter": {}, "task": {"category": "Video Editor", "query": "Create edits from a single video file"}}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Virtual location (Google Street View,etc.)", "description": "1.获取和设置旅行虚拟角色的位置、目的地和属性 2.控制旅行虚拟角色的旅程 3.在Bluesky SNS上发布、回复和点赞文章 4.获取和设置环境及图像设置", "tools": [{"name": "get_traveler_view_info", "server": "Virtual location (Google Street View,etc.)", "description": "Gets information about the current travel avatar's location, optionally including nearby Google Street View photos and information about nearby facilities.", "parameter": {"includePhoto": "(boolean) Gets nearby Google Street View photos. If you have set up an image generation AI, it will synthesize the avatar.", "includeNearbyFacilities": "(boolean) Gets information about nearby facilities."}, "task": {"category": "Google Street View", "query": "Retrieve travel avatar location and nearby information"}}, {"name": "get_traveler_location", "server": "Virtual location (Google Street View,etc.)", "description": "Gets information about the current travel avatar's address and nearby facilities.", "parameter": {}, "task": {"category": "Google Street View", "query": "Retrieve travel avatar's location and nearby facilities"}}, {"name": "reach_a_percentage_of_destination", "server": "Virtual location (Google Street View,etc.)", "description": "Reaches a specified percentage of the destination (moveMode=skip only).", "parameter": {"timeElapsedPercentage": "(number) Percent progress towards destination (0~100)."}, "task": {"category": "Virtual location", "query": "Navigate to a specified percentage of the destination"}}, {"name": "set_traveler_location", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the current travel avatar's location.", "parameter": {"address": "(string) Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)."}, "task": {"category": "Google Street View", "query": "Set travel avatar's location"}}, {"name": "get_traveler_destination_address", "server": "Virtual location (Google Street View,etc.)", "description": "Gets the destination of the travel avatar you set.", "parameter": {}, "task": {"category": "Google Street View", "query": "Retrieve destination address for travel avatar"}}, {"name": "set_traveler_destination_address", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the destination of the travel avatar.", "parameter": {"address": "(string) Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)."}, "task": {"category": "Google Street View", "query": "Set destination for travel avatar"}}, {"name": "start_traveler_journey", "server": "Virtual location (Google Street View,etc.)", "description": "Starts the journey at the destination (moveMode=realtime only).", "parameter": {}, "task": {"category": "Google Street View", "query": "Start a journey at a virtual location"}}, {"name": "stop_traveler_journey", "server": "Virtual location (Google Street View,etc.)", "description": "Stops the journey (moveMode=realtime only).", "parameter": {}, "task": {"category": "Google Street View", "query": "Stop a real-time journey"}}, {"name": "set_traveler_info", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the traveler's attributes, such as name and personality.", "parameter": {"settings": "(string) Setting information such as name and personality."}, "task": {"category": "Google Street View", "query": "Set traveler attributes for virtual location"}}, {"name": "get_traveler_info", "server": "Virtual location (Google Street View,etc.)", "description": "Gets the traveler's attributes, such as name and personality.", "parameter": {}, "task": {"category": "Google Street View", "query": "Retrieve traveler attributes"}}, {"name": "set_avatar_prompt", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the prompt when generating the travel avatar image. The default is an anime-style woman.", "parameter": {"prompt": "(string) Prompt for avatar generation."}, "task": {"category": "Virtual location", "query": "Set prompt for travel avatar image generation"}}, {"name": "reset_avatar_prompt", "server": "Virtual location (Google Street View,etc.)", "description": "Resets avatar generation prompts to default.", "parameter": {}, "task": {"category": "Virtual location", "query": "Reset avatar generation prompts"}}, {"name": "get_sns_feeds", "server": "Virtual location (Google Street View,etc.)", "description": "Gets Bluesky SNS articles for the specified custom feed (feeds containing a specific tag).", "parameter": {}, "task": {"category": "Bluesky SNS", "query": "Retrieve articles from custom feeds"}}, {"name": "get_sns_mentions", "server": "Virtual location (Google Street View,etc.)", "description": "Gets recent mentions (likes, replies) to Bluesky SNS posts that you made yourself.", "parameter": {}, "task": {"category": "Bluesky SNS", "query": "Retrieve recent mentions of your posts"}}, {"name": "post_sns_writer", "server": "Virtual location (Google Street View,etc.)", "description": "Posts an article to Bluesky SNS with the specified custom feed. Sets a specific tag so that it can be determined that the post was generated by the travel bot.", "parameter": {"message": "(string) Article to post."}, "task": {"category": "Bluesky SNS", "query": "Post an article with a custom feed tag"}}, {"name": "reply_sns_writer", "server": "Virtual location (Google Street View,etc.)", "description": "Replies to the article with the specified id. Sets a specific tag so that it can be determined that the post was generated by the travel bot.", "parameter": {"message": "(string) Reply to post.", "id": "(string) The ID of the post to reply to."}, "task": {"category": "Virtual location", "query": "Reply to a social media post with a travel bot tag"}}, {"name": "add_like", "server": "Virtual location (Google Street View,etc.)", "description": "Adds a like to the specified post.", "parameter": {"id": "(string) The ID of the post to like."}, "task": {"category": "Virtual location", "query": "Add a like to a post"}}, {"name": "tips", "server": "Virtual location (Google Street View,etc.)", "description": "Guides you on how to set up features that have not yet been set.", "parameter": {}, "task": {"category": "Google Street View", "query": "Guide for setting up features"}}, {"name": "get_setting", "server": "Virtual location (Google Street View,etc.)", "description": "Gets environment and image settings.", "parameter": {}, "task": {"category": "Google Street View", "query": "Retrieve environment and image settings"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "VolcEngine TOS", "description": "Volcengine TOS operations, including: listing buckets, listing objects in a bucket, and retrieving objects from TOS", "tools": [{"name": "list_buckets", "server": "VolcEngine TOS", "description": "Returns a list of all buckets owned by the authenticated sender of the request", "parameter": {}, "task": {"category": "VolcEngine TOS", "query": "List all buckets owned by the authenticated user"}}, {"name": "list_objects", "server": "VolcEngine TOS", "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request", "parameter": {}, "task": {"category": "VolcEngine TOS", "query": "List objects in a bucket"}}, {"name": "get_object", "server": "VolcEngine TOS", "description": "Retrieves an object from volcengine TOS. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported", "parameter": {}, "task": {"category": "VolcEngine TOS", "query": "Retrieve objects from storage"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Webflow", "description": "1. Retrieve list of Webflow sites with details 2. Retrieve detailed information of a specific Webflow site by ID", "tools": [{"name": "get_sites", "server": "Webflow", "description": "Retrieves a list of all Webflow sites accessible to the authenticated user, returning detailed information such as display name, site ID, creation date, and more.", "parameter": {}, "task": {"category": "Webflow", "query": "Retrieve list of accessible sites"}}, {"name": "get_site", "server": "Webflow", "description": "Retrieves detailed information about a specific Webflow site by ID, returning the same detailed information as get_sites for a single site.", "parameter": {"siteId": "(string) The ID of the Webflow site to retrieve."}, "task": {"category": "Webflow", "query": "Retrieve detailed information about a Webflow site"}}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "whale-tracker-mcp", "description": "1. Fetch recent whale transactions with filters 2. Retrieve detailed transaction information by ID", "tools": [{"name": "get_recent_transactions", "server": "whale-tracker-mcp", "description": "Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.", "parameter": {"blockchain": "(string) The blockchain to filter transactions by.", "min_value": "(Optional, float) The minimum value of the transactions to fetch.", "limit": "(Optional, int) The maximum number of transactions to return."}, "task": {"category": "Blockchain", "query": "Fetch recent high-value transactions"}}, {"name": "get_transaction_details", "server": "whale-tracker-mcp", "description": "Retrieve detailed information about a specific transaction by its ID.", "parameter": {"transaction_id": "(string) The ID of the transaction to retrieve details for."}, "task": {"category": "whale-tracker-mcp", "query": "Retrieve transaction details by ID"}}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}]}
{"name": "Whois MCP", "description": "WHOIS信息查询，包括域名、顶级域名(TLD)、IP地址和自治系统号(ASN)的WHOIS信息检索", "tools": [{"name": "whois_domain", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified domain.", "parameter": {}, "task": {"category": "WHOIS", "query": "Look up domain registration details"}}, {"name": "whois_tld", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified Top Level Domain (TLD).", "parameter": {}, "task": {"category": "WHOIS", "query": "Look up WHOIS information for a TLD"}}, {"name": "whois_ip", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified IP address.", "parameter": {}, "task": {"category": "WHOIS", "query": "Look up WHOIS information for an IP address"}}, {"name": "whois_as", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified Autonomous System Number (ASN).", "parameter": {}, "task": {"category": "WHOIS", "query": "Look up WHOIS information for an Autonomous System Number"}}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Wikidata MCP", "description": "1. Search for Wikidata entity and property IDs 2. Retrieve properties associated with a Wikidata entity ID 3. Execute SPARQL queries on Wikidata 4. Retrieve labels and descriptions for Wikidata entity IDs", "tools": [{"name": "search_entity", "server": "Wikidata MCP", "description": "Search for a Wikidata entity ID by its query.", "parameter": {"query": "(str) The query to search for the entity."}, "task": {"category": "Wikidata", "query": "Search for entity IDs by query"}}, {"name": "search_property", "server": "Wikidata MCP", "description": "Search for a Wikidata property ID by its query.", "parameter": {"query": "(str) The query to search for the property."}, "task": {"category": "Wikidata", "query": "Search for Wikidata property IDs"}}, {"name": "get_properties", "server": "Wikidata MCP", "description": "Get the properties associated with a given Wikidata entity ID.", "parameter": {"entity_id": "(str) The ID of the entity to get properties for."}, "task": {"category": "Wikidata", "query": "Retrieve properties for a Wikidata entity"}}, {"name": "execute_sparql", "server": "Wikidata MCP", "description": "Execute a SPARQL query on Wikidata.", "parameter": {"sparql_query": "(str) The SPARQL query to execute."}, "task": {"category": "Wikidata", "query": "Execute SPARQL queries on Wikidata"}}, {"name": "get_metadata", "server": "Wikidata MCP", "description": "Retrieve the label and description for a given Wikidata entity ID in a specified language.", "parameter": {"entity_id": "(str) The ID of the entity to retrieve metadata for.", "language": "(Optional, str) The language for the metadata, default is 'en'."}, "task": {"category": "Wikidata", "query": "Retrieve metadata for a Wikidata entity"}}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Windows CLI", "description": "1.在指定shell中执行命令 2.获取执行命令的历史记录 3.通过SSH在远程系统上执行命令 4.SSH连接管理（创建/读取/更新/删除） 5.获取服务器当前工作目录", "tools": [{"name": "execute_command", "server": "Windows CLI", "description": "Execute a command in the specified shell", "parameter": {"shell": "(string) Shell to use ('powershell', 'cmd', or 'gitbash')", "command": "(string) Command to execute", "workingDir": "(Optional, string) Working directory"}, "task": {"category": "Windows CLI", "query": "Execute commands in a specified shell"}}, {"name": "get_command_history", "server": "Windows CLI", "description": "Get the history of executed commands", "parameter": {"limit": "(Optional, number)"}, "task": {"category": "Windows CLI", "query": "Retrieve history of executed commands"}}, {"name": "ssh_execute", "server": "Windows CLI", "description": "Execute a command on a remote system via SSH", "parameter": {"connectionId": "(string) ID of the SSH connection to use", "command": "(string) Command to execute"}, "task": {"category": "Windows CLI", "query": "Execute commands on remote systems via SSH"}}, {"name": "ssh_disconnect", "server": "Windows CLI", "description": "Disconnect from an SSH server", "parameter": {"connectionId": "(string) ID of the SSH connection to disconnect"}, "task": {"category": "Windows CLI", "query": "Disconnect from an SSH server"}}, {"name": "create_ssh_connection", "server": "Windows CLI", "description": "Create a new SSH connection", "parameter": {"connectionId": "(string) ID for the new SSH connection", "connectionConfig": "(object) Connection configuration details including host, port, username, and either password or privateKeyPath"}, "task": {"category": "Windows CLI", "query": "Set up a new SSH connection"}}, {"name": "read_ssh_connections", "server": "Windows CLI", "description": "Read all configured SSH connections", "parameter": {}, "task": {"category": "Windows CLI", "query": "Retrieve configured SSH connections"}}, {"name": "update_ssh_connection", "server": "Windows CLI", "description": "Update an existing SSH connection", "parameter": {"connectionId": "(string) ID of the SSH connection to update", "connectionConfig": "(object) New connection configuration details"}, "task": {"category": "Windows CLI", "query": "Update SSH connection details"}}, {"name": "delete_ssh_connection", "server": "Windows CLI", "description": "Delete an SSH connection", "parameter": {"connectionId": "(string) ID of the SSH connection to delete"}, "task": {"category": "Windows CLI", "query": "Remove an SSH connection"}}, {"name": "get_current_directory", "server": "Windows CLI", "description": "Get the current working directory of the server", "parameter": {}, "task": {"category": "Windows CLI", "query": "Retrieve the current working directory"}}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "World Bank data API", "description": "1.列出世界银行开放数据API中的可用国家 2.列出世界银行开放数据API中的可用指标 3.分析国家指标，如人口分段、贫困数字等", "tools": [{"name": "list_countries", "server": "World Bank data API", "description": "Lists available countries in the World Bank open data API", "parameter": {}, "task": {"category": "World Bank", "query": "List available countries in open data API"}}, {"name": "list_indicators", "server": "World Bank data API", "description": "Lists available indicators in the World Bank open data API", "parameter": {}, "task": {"category": "World Bank", "query": "List available indicators in open data"}}, {"name": "analyse_indicators", "server": "World Bank data API", "description": "Analyses indicators, such as population segments, poverty numbers, etc., for countries", "parameter": {}, "task": {"category": "World Bank", "query": "Analyze country indicators"}}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "xcodebuild", "description": "1. Build iOS Xcode workspace/project 2. Run test for iOS Xcode workspace/project", "tools": [{"name": "build", "server": "xcodebuild", "description": "Build iOS Xcode workspace/project", "parameter": {"folder": "(string, required) The full path of the current folder that the iOS Xcode workspace/project sits"}, "task": {"category": "Xcode", "query": "Build iOS Xcode workspace or project"}}, {"name": "test", "server": "xcodebuild", "description": "Run test for iOS Xcode workspace/project", "parameter": {"folder": "(string, required) The full path of the current folder that the iOS Xcode workspace/project sits"}, "task": {"category": "Xcode", "query": "Run tests for iOS projects"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Xero-mcp-server", "description": "Xero accounting operations, including: OAuth2 authentication, bank transactions creation, contacts management, balance sheet retrieval, accounts listing, invoices management, journals listing, organizations details retrieval, payments management, and quotes listing", "tools": [{"name": "authenticate", "server": "Xero-mcp-server", "description": "Authenticate with Xero using OAuth2", "parameter": {}, "task": {"category": "Xero", "query": "Authenticate using OAuth2"}}, {"name": "create_bank_transactions", "server": "Xero-mcp-server", "description": "Creates one or more spent or received money transactions", "parameter": {}, "task": {"category": "Xero", "query": "Create bank transactions for spent or received money"}}, {"name": "create_contacts", "server": "Xero-mcp-server", "description": "Creates one or multiple contacts in a Xero organisation", "parameter": {}, "task": {"category": "Xero", "query": "Create contacts in Xero organisation"}}, {"name": "get_balance_sheet", "server": "Xero-mcp-server", "description": "Retrieves report for balance sheet", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve balance sheet report"}}, {"name": "list_accounts", "server": "Xero-mcp-server", "description": "Retrieves the full chart of accounts", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve chart of accounts"}}, {"name": "list_bank_transactions", "server": "Xero-mcp-server", "description": "Retrieves any spent or received money transactions", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve money transactions"}}, {"name": "list_contacts", "server": "Xero-mcp-server", "description": "Retrieves all contacts in a Xero organisation", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve all contacts from an organization"}}, {"name": "list_invoices", "server": "Xero-mcp-server", "description": "Retrieves sales invoices or purchase bills", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve sales invoices or purchase bills"}}, {"name": "list_journals", "server": "Xero-mcp-server", "description": "Retrieves journals", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve journal entries"}}, {"name": "list_organisations", "server": "Xero-mcp-server", "description": "Retrieves Xero organisation details", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve organization details"}}, {"name": "list_payments", "server": "Xero-mcp-server", "description": "Retrieves payments for invoices and credit notes", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve payments for invoices and credit notes"}}, {"name": "list_quotes", "server": "Xero-mcp-server", "description": "Retrieves sales quotes", "parameter": {}, "task": {"category": "Xero", "query": "Retrieve sales quotes"}}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "XiYan", "description": "Provide a natural language interface for retrieving data from a database by converting natural language to SQL and executing queries", "tools": [{"name": "get_data", "server": "XiYan", "description": "Provides a natural language interface for retrieving data from a database. Converts the input natural language into SQL using a built-in model and calls the database to return the query results.", "parameter": {}, "task": {"category": "XiYan", "query": "Retrieve data from database using natural language"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "XMind", "description": "XMind文件处理工具集,包括:解析分析思维导图结构、提取TODO任务、递归扫描XMind文件、多文件对比分析、文件名模式搜索、智能模糊路径匹配、节点ID精确检索、多条件内容搜索", "tools": [{"name": "read_xmind", "server": "XMind", "description": "Parse and analyze XMind files, extracting the complete mind map structure.", "parameter": {}, "task": {"category": "XMind", "query": "Extract mind map structure from files"}}, {"name": "get_todo_tasks", "server": "XMind", "description": "Extract and analyze TODO tasks, including task context and hierarchy.", "parameter": {}, "task": {"category": "XMind", "query": "Extract and analyze TODO tasks"}}, {"name": "list_xmind_directory", "server": "XMind", "description": "Recursively scan for XMind files, filtering and organizing results.", "parameter": {}, "task": {"category": "XMind", "query": "Scan and organize XMind files"}}, {"name": "read_multiple_xmind_files", "server": "XMind", "description": "Process multiple files simultaneously, comparing and analyzing across files.", "parameter": {}, "task": {"category": "XMind", "query": "Compare and analyze multiple mind maps"}}, {"name": "search_xmind_files", "server": "XMind", "description": "Search files by name patterns, with recursive directory scanning.", "parameter": {}, "task": {"category": "XMind", "query": "Search for mind map files by name patterns"}}, {"name": "extract_node", "server": "XMind", "description": "Perform smart fuzzy path matching, returning ranked search results and complete subtree extraction.", "parameter": {"path": "(string) Path to the XMind file.", "searchQuery": "(string) Fuzzy path query to match nodes."}, "task": {"category": "XMind", "query": "Search and extract nodes from mind maps"}}, {"name": "extract_node_by_id", "server": "XMind", "description": "Directly access a node by its ID for fast and precise retrieval.", "parameter": {"path": "(string) Path to the XMind file.", "nodeId": "(string) ID of the node to extract."}, "task": {"category": "XMind", "query": "Access a specific node in a mind map"}}, {"name": "search_nodes", "server": "XMind", "description": "Perform multi-criteria content search with configurable search fields.", "parameter": {"path": "(string) Path to the XMind file.", "query": "(string) Search query.", "searchIn": "(array) Fields to search in (e.g., ['title', 'notes']).", "caseSensitive": "(boolean, optional) Whether the search should be case-sensitive."}, "task": {"category": "XMind", "query": "Search content in mind maps with configurable fields"}}], "domains": [{"name": "Design Tool Integration", "description": "设计工具集成，包括文档信息获取、节点操作、文本处理、布局设置、颜色与样式管理、组件实例操作及图像导出"}]}
{"name": "YouTube", "description": "YouTube视频与频道管理,包括:视频详情获取、多语言字幕检索、视频搜索、频道详情获取、频道视频列表获取、播放列表详情获取、播放列表内容获取", "tools": [{"name": "videos.getVideo", "server": "YouTube", "description": "Get video details such as title, description, and duration.", "parameter": {"videoId": "(string) The ID of the video."}, "task": {"category": "YouTube", "query": "Retrieve video details"}}, {"name": "transcripts.getTranscript", "server": "YouTube", "description": "Retrieve the transcript of a video, supporting multiple languages.", "parameter": {"videoId": "(string) The ID of the video.", "language": "(string) The language of the transcript (default is 'en')."}, "task": {"category": "YouTube", "query": "Retrieve video transcripts in different languages"}}, {"name": "videos.searchVideos", "server": "YouTube", "description": "Search for videos across YouTube.", "parameter": {"query": "(string) The search term.", "maxResults": "(number) The maximum number of results to return."}, "task": {"category": "YouTube", "query": "Search for videos on YouTube"}}, {"name": "channels.getChannel", "server": "YouTube", "description": "Get details of a YouTube channel.", "parameter": {"channelId": "(string) The ID of the channel."}, "task": {"category": "YouTube", "query": "Retrieve channel details"}}, {"name": "channels.listVideos", "server": "YouTube", "description": "List videos from a specific channel.", "parameter": {"channelId": "(string) The ID of the channel.", "maxResults": "(number) The maximum number of results to return."}, "task": {"category": "YouTube", "query": "Retrieve videos from a channel"}}, {"name": "playlists.getPlaylistItems", "server": "YouTube", "description": "Get items from a playlist.", "parameter": {"playlistId": "(string) The ID of the playlist.", "maxResults": "(number) The maximum number of results to return."}, "task": {"category": "YouTube", "query": "Retrieve items from a playlist"}}, {"name": "playlists.getPlaylist", "server": "YouTube", "description": "Get details of a playlist.", "parameter": {"playlistId": "(string) The ID of the playlist."}, "task": {"category": "YouTube", "query": "Retrieve playlist details"}}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "mcp_weather", "description": "1.获取指定城市的当前天气信息 2.获取指定城市在特定日期范围内的天气信息 3.获取指定时区的当前时间", "tools": [{"name": "get_weather", "server": "mcp_weather", "description": "Retrieves the current weather information for a given city.", "parameter": {"city": "(string, required) The name of the city."}, "task": {"category": "mcp_weather", "query": "Retrieve current weather information"}}, {"name": "get_weather_by_datetime_range", "server": "mcp_weather", "description": "Retrieves weather information for a specified city between start and end dates.", "parameter": {"city": "(string, required) The name of the city.", "start_date": "(string, required) Start date in format YYYY-MM-DD (ISO 8601).", "end_date": "(string, required) End date in format YYYY-MM-DD (ISO 8601)."}, "task": {"category": "mcp_weather", "query": "Retrieve weather data for a city within a date range"}}, {"name": "get_current_datetime", "server": "mcp_weather", "description": "Retrieves the current time in a specified timezone.", "parameter": {"timezone_name": "(string, required) IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user."}, "task": {"category": "mcp_weather", "query": "Get current time in a specified timezone"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}, {"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "AWS KB Retrieval", "description": "Perform retrieval operations using the AWS Knowledge Base", "tools": [{"name": "retrieve_from_aws_kb", "server": "AWS KB Retrieval", "description": "Perform retrieval operations using the AWS Knowledge Base.", "parameter": {"query": "(string) The search query for retrieval.", "knowledgeBaseId": "(string) The ID of the AWS Knowledge Base.", "n": "(number, optional) Number of results to retrieve (default: 3)."}, "task": {"category": "AWS", "query": "Retrieve information from AWS Knowledge Base"}}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Brave Search", "description": "1. Execute web searches with pagination and filtering 2. Search for local businesses and services", "tools": [{"name": "brave_web_search", "server": "Brave Search", "description": "Execute web searches with pagination and filtering", "parameter": {"query": "(string) Search terms", "count": "(Optional, number) Results per page (max 20)", "offset": "(Optional, number) Pagination offset (max 9)"}, "task": {"category": "Brave Search", "query": "Perform web searches with pagination"}}, {"name": "brave_local_search", "server": "Brave Search", "description": "Search for local businesses and services", "parameter": {"query": "(string) Local search terms", "count": "(Optional, number) Number of results (max 20)"}, "task": {"category": "Brave Search", "query": "Search for local businesses and services"}}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "EverArt", "description": "Generate images with multiple model options and return URL", "tools": [{"name": "generate_image", "server": "EverArt", "description": "Generates images with multiple model options. Opens result in browser and returns URL.", "parameter": {"prompt": "(string) Image description", "model": "(Optional, string) Model ID (default: \"207910310772879360\")", "image_count": "(Optional, number) Number of images (default: 1)"}, "task": {"category": "EverArt", "query": "Generate images with customizable options"}}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "Everything", "description": "1.回显输入消息 2.数字相加 3.长时间操作进度通知 4.使用MCP采样功能演示LLM采样能力 5.返回小型测试图像 6.打印所有环境变量 7.演示如何使用注释提供内容元数据 8.返回MCP客户端可使用的资源引用", "tools": [{"name": "echo", "server": "Everything", "description": "Simple tool to echo back input messages", "parameter": {"message": "(string) Message to echo back"}, "task": {"category": "UNKNOWN", "query": "Echo back input messages"}}, {"name": "add", "server": "Everything", "description": "Adds two numbers together", "parameter": {"a": "(number) First number", "b": "(number) Second number"}, "task": {"category": "UNKNOWN", "query": "Perform basic arithmetic operations"}}, {"name": "longRunningOperation", "server": "Everything", "description": "Demonstrates progress notifications for long operations", "parameter": {"duration": "(number, default: 10) Duration in seconds", "steps": "(number, default: 5) Number of progress steps"}, "task": {"category": "Everything", "query": "Monitor progress of long-running operations"}}, {"name": "sampleLLM", "server": "Everything", "description": "Demonstrates LLM sampling capability using MCP sampling feature", "parameter": {"prompt": "(string) The prompt to send to the LLM", "maxTokens": "(number, default: 100) Maximum tokens to generate"}, "task": {"category": "LLM", "query": "Demonstrate sampling capability of an LLM"}}, {"name": "getTinyImage", "server": "Everything", "description": "Returns a small test image", "parameter": {}, "task": {"category": "Everything", "query": "Retrieve a small test image"}}, {"name": "printEnv", "server": "Everything", "description": "Prints all environment variables", "parameter": {}, "task": {"category": "System", "query": "Display environment variables"}}, {"name": "annotatedMessage", "server": "Everything", "description": "Demonstrates how annotations can be used to provide metadata about content", "parameter": {"messageType": "(enum: 'error' | 'success' | 'debug') Type of message to demonstrate different annotation patterns", "includeImage": "(boolean, default: false) Whether to include an example image"}, "task": {"category": "Everything", "query": "Demonstrate metadata annotations for different message types"}}, {"name": "getResourceReference", "server": "Everything", "description": "Returns a resource reference that can be used by MCP clients", "parameter": {"resourceId": "(number, 1-100) ID of the resource to reference"}, "task": {"category": "MCP", "query": "Get reference for a resource"}}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Filesystem", "description": "File system operations including: reading single/multiple files, writing/editing files, creating directories, listing directory contents, moving/renaming files, searching files/directories, retrieving file metadata, and listing accessible directories", "tools": [{"name": "read_file", "server": "Filesystem", "description": "Read complete contents of a file", "parameter": {"path": "(string) File path"}, "task": {"category": "Filesystem", "query": "Read contents from a file"}}, {"name": "read_multiple_files", "server": "Filesystem", "description": "Read multiple files simultaneously", "parameter": {"paths": "(string[]) Array of file paths"}, "task": {"category": "Filesystem", "query": "Read multiple files at once"}}, {"name": "write_file", "server": "Filesystem", "description": "Create new file or overwrite existing", "parameter": {"path": "(string) File location", "content": "(string) File content"}, "task": {"category": "Filesystem", "query": "Create or overwrite files"}}, {"name": "edit_file", "server": "Filesystem", "description": "Make selective edits using advanced pattern matching and formatting", "parameter": {"path": "(string) File to edit", "edits": "(array) List of edit operations", "dryRun": "(boolean) Preview changes without applying (default: false)"}, "task": {"category": "Filesystem", "query": "Edit files with pattern matching and formatting"}}, {"name": "create_directory", "server": "Filesystem", "description": "Create new directory or ensure it exists", "parameter": {"path": "(string) Directory path"}, "task": {"category": "Filesystem", "query": "Create or ensure directory exists"}}, {"name": "list_directory", "server": "Filesystem", "description": "List directory contents with [FILE] or [DIR] prefixes", "parameter": {"path": "(string) Directory path"}, "task": {"category": "Filesystem", "query": "List contents of a directory"}}, {"name": "move_file", "server": "Filesystem", "description": "Move or rename files and directories", "parameter": {"source": "(string) Source path", "destination": "(string) Destination path"}, "task": {"category": "Filesystem", "query": "Move or rename files and directories"}}, {"name": "search_files", "server": "Filesystem", "description": "Recursively search for files/directories", "parameter": {"path": "(string) Starting directory", "pattern": "(string) Search pattern", "excludePatterns": "(string[]) Array of exclude patterns"}, "task": {"category": "Filesystem", "query": "Search for files and directories recursively"}}, {"name": "get_file_info", "server": "Filesystem", "description": "Get detailed file/directory metadata", "parameter": {"path": "(string) File or directory path"}, "task": {"category": "Filesystem", "query": "Retrieve metadata for files or directories"}}, {"name": "list_allowed_directories", "server": "Filesystem", "description": "List all directories the server is allowed to access", "parameter": {}, "task": {"category": "Filesystem", "query": "List accessible directories on the server"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "GitHub", "description": "GitHub仓库管理,包括:文件操作、仓库搜索与创建、问题管理、拉取请求管理、分支管理、代码搜索、用户搜索、提交管理", "tools": [{"name": "create_or_update_file", "server": "GitHub", "description": "Create or update a single file in a repository", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "path": "(string) Path where to create/update the file", "content": "(string) Content of the file", "message": "(string) Commit message", "branch": "(string) Branch to create/update the file in", "sha": "(optional string) SHA of file being replaced (for updates)"}, "task": {"category": "GitHub", "query": "Manage files in a repository"}}, {"name": "push_files", "server": "GitHub", "description": "Push multiple files in a single commit", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "branch": "(string) Branch to push to", "files": "(array) Files to push, each with `path` and `content`", "message": "(string) Commit message"}, "task": {"category": "GitHub", "query": "Push multiple files in a single commit to a repository"}}, {"name": "search_repositories", "server": "GitHub", "description": "Search for GitHub repositories", "parameter": {"query": "(string) Search query", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": {"category": "GitHub", "query": "Search for repositories on GitHub"}}, {"name": "create_repository", "server": "GitHub", "description": "Create a new GitHub repository", "parameter": {"name": "(string) Repository name", "description": "(optional string) Repository description", "private": "(optional boolean) Whether repo should be private", "autoInit": "(optional boolean) Initialize with README"}, "task": {"category": "GitHub", "query": "Create a new repository"}}, {"name": "get_file_contents", "server": "GitHub", "description": "Get contents of a file or directory", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "path": "(string) Path to file/directory", "branch": "(optional string) Branch to get contents from"}, "task": {"category": "GitHub", "query": "Retrieve file or directory contents from a repository"}}, {"name": "create_issue", "server": "GitHub", "description": "Create a new issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "title": "(string) Issue title", "body": "(optional string) Issue description", "assignees": "(optional string[]) Usernames to assign", "labels": "(optional string[]) Labels to add", "milestone": "(optional number) Milestone number"}, "task": {"category": "GitHub", "query": "Create a new issue in a repository"}}, {"name": "create_pull_request", "server": "GitHub", "description": "Create a new pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "title": "(string) PR title", "body": "(optional string) PR description", "head": "(string) Branch containing changes", "base": "(string) Branch to merge into", "draft": "(optional boolean) Create as draft PR", "maintainer_can_modify": "(optional boolean) Allow maintainer edits"}, "task": {"category": "GitHub", "query": "Create a new pull request for a repository"}}, {"name": "fork_repository", "server": "GitHub", "description": "Fork a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "organization": "(optional string) Organization to fork to"}, "task": {"category": "GitHub", "query": "Fork a repository to an account or organization"}}, {"name": "create_branch", "server": "GitHub", "description": "Create a new branch", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "branch": "(string) Name for new branch", "from_branch": "(optional string) Source branch (defaults to repo default)"}, "task": {"category": "GitHub", "query": "Create a new branch in a repository"}}, {"name": "list_issues", "server": "GitHub", "description": "List and filter repository issues", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "state": "(optional string) Filter by state ('open', 'closed', 'all')", "labels": "(optional string[]) Filter by labels", "sort": "(optional string) Sort by ('created', 'updated', 'comments')", "direction": "(optional string) Sort direction ('asc', 'desc')", "since": "(optional string) Filter by date (ISO 8601 timestamp)", "page": "(optional number) Page number", "per_page": "(optional number) Results per page"}, "task": {"category": "GitHub", "query": "List and filter issues in a repository"}}, {"name": "update_issue", "server": "GitHub", "description": "Update an existing issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to update", "title": "(optional string) New title", "body": "(optional string) New description", "state": "(optional string) New state ('open' or 'closed')", "labels": "(optional string[]) New labels", "assignees": "(optional string[]) New assignees", "milestone": "(optional number) New milestone number"}, "task": {"category": "GitHub", "query": "Modify details of an existing issue"}}, {"name": "add_issue_comment", "server": "GitHub", "description": "Add a comment to an issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to comment on", "body": "(string) Comment text"}, "task": {"category": "GitHub", "query": "Add comments to issues"}}, {"name": "search_code", "server": "GitHub", "description": "Search for code across GitHub repositories", "parameter": {"q": "(string) Search query using GitHub code search syntax", "sort": "(optional string) Sort field ('indexed' only)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": {"category": "GitHub", "query": "Search for code in repositories"}}, {"name": "search_issues", "server": "GitHub", "description": "Search for issues and pull requests", "parameter": {"q": "(string) Search query using GitHub issues search syntax", "sort": "(optional string) Sort field (comments, reactions, created, etc.)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": {"category": "GitHub", "query": "Search for issues and pull requests"}}, {"name": "search_users", "server": "GitHub", "description": "Search for GitHub users", "parameter": {"q": "(string) Search query using GitHub users search syntax", "sort": "(optional string) Sort field (followers, repositories, joined)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": {"category": "GitHub", "query": "Search for users on GitHub"}}, {"name": "list_commits", "server": "GitHub", "description": "Gets commits of a branch in a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "page": "(optional string) page number", "per_page": "(optional string) number of record per page", "sha": "(optional string) branch name"}, "task": {"category": "GitHub", "query": "Retrieve commits from a repository branch"}}, {"name": "get_issue", "server": "GitHub", "description": "Gets the contents of an issue within a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to retrieve"}, "task": {"category": "GitHub", "query": "Retrieve issue details from a repository"}}, {"name": "get_pull_request", "server": "GitHub", "description": "Get details of a specific pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": {"category": "GitHub", "query": "Retrieve details of a pull request"}}, {"name": "list_pull_requests", "server": "GitHub", "description": "List and filter repository pull requests", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "state": "(optional string) Filter by state ('open', 'closed', 'all')", "head": "(optional string) Filter by head user/org and branch", "base": "(optional string) Filter by base branch", "sort": "(optional string) Sort by ('created', 'updated', 'popularity', 'long-running')", "direction": "(optional string) Sort direction ('asc', 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": {"category": "GitHub", "query": "List and filter pull requests in a repository"}}, {"name": "create_pull_request_review", "server": "GitHub", "description": "Create a review on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "body": "(string) Review comment text", "event": "(string) Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')", "commit_id": "(optional string) SHA of commit to review", "comments": "(optional array) Line-specific comments, each with:"}, "task": {"category": "GitHub", "query": "Create a review for a pull request"}}, {"name": "merge_pull_request", "server": "GitHub", "description": "Merge a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "commit_title": "(optional string) Title for merge commit", "commit_message": "(optional string) Extra detail for merge commit", "merge_method": "(optional string) Merge method ('merge', 'squash', 'rebase')"}, "task": {"category": "GitHub", "query": "Merge pull requests in a repository"}}, {"name": "get_pull_request_files", "server": "GitHub", "description": "Get the list of files changed in a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": {"category": "GitHub", "query": "Retrieve list of files changed in a pull request"}}, {"name": "get_pull_request_status", "server": "GitHub", "description": "Get the combined status of all status checks for a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": {"category": "GitHub", "query": "Check status of a pull request"}}, {"name": "update_pull_request_branch", "server": "GitHub", "description": "Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's 'Update branch' button)", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "expected_head_sha": "(optional string) The expected SHA of the pull request's HEAD ref"}, "task": {"category": "GitHub", "query": "Update pull request branch with latest changes"}}, {"name": "get_pull_request_comments", "server": "GitHub", "description": "Get the review comments on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": {"category": "GitHub", "query": "Retrieve review comments for a pull request"}}, {"name": "get_pull_request_reviews", "server": "GitHub", "description": "Get the reviews on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": {"category": "GitHub", "query": "Retrieve reviews for a pull request"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "GitLab", "description": "GitLab operations including: file management, repository search/creation, issue/merge request creation, branching and forking", "tools": [{"name": "create_or_update_file", "server": "GitLab", "description": "Create or update a single file in a project", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "file_path": "(string) Path where to create/update the file", "content": "(string) Content of the file", "commit_message": "(string) Commit message", "branch": "(string) Branch to create/update the file in", "previous_path": "(Optional, string) Path of the file to move/rename"}, "task": {"category": "GitLab", "query": "Manage files in a project repository"}}, {"name": "push_files", "server": "GitLab", "description": "Push multiple files in a single commit", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "branch": "(string) Branch to push to", "files": "(array) Files to push, each with `file_path` and `content`", "commit_message": "(string) Commit message"}, "task": {"category": "GitLab", "query": "Push multiple files in a single commit"}}, {"name": "search_repositories", "server": "GitLab", "description": "Search for GitLab projects", "parameter": {"search": "(string) Search query", "page": "(Optional, number) Page number for pagination", "per_page": "(Optional, number) Results per page (default 20)"}, "task": {"category": "GitLab", "query": "Search for projects on GitLab"}}, {"name": "create_repository", "server": "GitLab", "description": "Create a new GitLab project", "parameter": {"name": "(string) Project name", "description": "(Optional, string) Project description", "visibility": "(Optional, string) 'private', 'internal', or 'public'", "initialize_with_readme": "(Optional, boolean) Initialize with README"}, "task": {"category": "GitLab", "query": "Create a new project"}}, {"name": "get_file_contents", "server": "GitLab", "description": "Get contents of a file or directory", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "file_path": "(string) Path to file/directory", "ref": "(Optional, string) Branch/tag/commit to get contents from"}, "task": {"category": "GitLab", "query": "Retrieve file or directory contents from a project"}}, {"name": "create_issue", "server": "GitLab", "description": "Create a new issue", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "title": "(string) Issue title", "description": "(Optional, string) Issue description", "assignee_ids": "(Optional, number[]) User IDs to assign", "labels": "(Optional, string[]) Labels to add", "milestone_id": "(Optional, number) Milestone ID"}, "task": {"category": "GitLab", "query": "Create a new issue in a project"}}, {"name": "create_merge_request", "server": "GitLab", "description": "Create a new merge request", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "title": "(string) MR title", "description": "(Optional, string) MR description", "source_branch": "(string) Branch containing changes", "target_branch": "(string) Branch to merge into", "draft": "(Optional, boolean) Create as draft MR", "allow_collaboration": "(Optional, boolean) Allow commits from upstream members"}, "task": {"category": "GitLab", "query": "Create a new merge request for a project"}}, {"name": "fork_repository", "server": "GitLab", "description": "Fork a project", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "namespace": "(Optional, string) Namespace to fork to"}, "task": {"category": "GitLab", "query": "Fork a project to a specified namespace"}}, {"name": "create_branch", "server": "GitLab", "description": "Create a new branch", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "branch": "(string) Name for new branch", "ref": "(Optional, string) Source branch/commit for new branch"}, "task": {"category": "GitLab", "query": "Create a new branch in a project"}}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Google Drive", "description": "Search for files in Google Drive", "tools": [{"name": "search", "server": "Google Drive", "description": "Search for files in Google Drive", "parameter": {"query": "(string) Search query"}, "task": {"category": "Google Drive", "query": "Search for files"}}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Google Maps", "description": "1.Convert address to coordinates 2.Convert coordinates to address 3.Search for places using text query 4.Get detailed information about a place 5.Calculate distances and times between points 6.Get elevation data for locations 7.Get directions between points", "tools": [{"name": "maps_geocode", "server": "Google Maps", "description": "Convert address to coordinates", "parameter": {"address": "(string) Address to be converted"}, "task": {"category": "Google Maps", "query": "Convert address to geographic coordinates"}}, {"name": "maps_reverse_geocode", "server": "Google Maps", "description": "Convert coordinates to address", "parameter": {"latitude": "(number) Latitude coordinate", "longitude": "(number) Longitude coordinate"}, "task": {"category": "Google Maps", "query": "Convert geographic coordinates to a readable address"}}, {"name": "maps_search_places", "server": "Google Maps", "description": "Search for places using text query", "parameter": {"query": "(string) Text query for place search", "location": "(Optional, object) { latitude: number, longitude: number }", "radius": "(Optional, number) Radius in meters (max 50000)"}, "task": {"category": "Google Maps", "query": "Search for places based on text query"}}, {"name": "maps_place_details", "server": "Google Maps", "description": "Get detailed information about a place", "parameter": {"place_id": "(string) Place ID to get details for"}, "task": {"category": "Google Maps", "query": "Retrieve detailed information about a specific place"}}, {"name": "maps_distance_matrix", "server": "Google Maps", "description": "Calculate distances and times between points", "parameter": {"origins": "(string[]) List of origin addresses", "destinations": "(string[]) List of destination addresses", "mode": "(Optional, string) Travel mode: 'driving', 'walking', 'bicycling', 'transit'"}, "task": {"category": "Google Maps", "query": "Calculate travel distances and times between locations"}}, {"name": "maps_elevation", "server": "Google Maps", "description": "Get elevation data for locations", "parameter": {"locations": "(array of objects) [{latitude, longitude}]"}, "task": {"category": "Google Maps", "query": "Retrieve elevation data for specific coordinates"}}, {"name": "maps_directions", "server": "Google Maps", "description": "Get directions between points", "parameter": {"origin": "(string) Origin address", "destination": "(string) Destination address", "mode": "(Optional, string) Travel mode: 'driving', 'walking', 'bicycling', 'transit'"}, "task": {"category": "Google Maps", "query": "Get directions between two locations"}}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Memory", "description": "1.在知识图谱中创建多个新实体 2.创建实体间的新关系 3.向现有实体添加新观察 4.删除实体及其关系 5.从实体中删除特定观察 6.从图谱中删除特定关系 7.读取整个知识图谱 8.基于查询搜索节点 9.按名称检索特定节点", "tools": [{"name": "create_entities", "server": "Memory", "description": "Create multiple new entities in the knowledge graph.", "parameter": {"entities": "(array of objects) Each object contains: `name` (string): Entity identifier, `entityType` (string): Type classification, `observations` (string[]): Associated observations"}, "task": {"category": "Knowledge Graph", "query": "Add multiple entities to knowledge graph"}}, {"name": "create_relations", "server": "Memory", "description": "Create multiple new relations between entities.", "parameter": {"relations": "(array of objects) Each object contains: `from` (string): Source entity name, `to` (string): Target entity name, `relationType` (string): Relationship type in active voice"}, "task": {"category": "Memory", "query": "Establish relationships between entities"}}, {"name": "add_observations", "server": "Memory", "description": "Add new observations to existing entities.", "parameter": {"observations": "(array of objects) Each object contains: `entityName` (string): Target entity, `contents` (string[]): New observations to add"}, "task": {"category": "Memory", "query": "Add new observations to entities"}}, {"name": "delete_entities", "server": "Memory", "description": "Remove entities and their relations.", "parameter": {"entityNames": "(string[]) List of entity names to delete"}, "task": {"category": "Memory", "query": "Remove entities and their relations"}}, {"name": "delete_observations", "server": "Memory", "description": "Remove specific observations from entities.", "parameter": {"deletions": "(array of objects) Each object contains: `entityName` (string): Target entity, `observations` (string[]): Observations to remove"}, "task": {"category": "Memory", "query": "Remove observations from entities"}}, {"name": "delete_relations", "server": "Memory", "description": "Remove specific relations from the graph.", "parameter": {"relations": "(array of objects) Each object contains: `from` (string): Source entity name, `to` (string): Target entity name, `relationType` (string): Relationship type"}, "task": {"category": "Memory", "query": "Remove specific relations from the graph"}}, {"name": "read_graph", "server": "Memory", "description": "Read the entire knowledge graph.", "parameter": {}, "task": {"category": "Memory", "query": "Access the complete knowledge graph"}}, {"name": "search_nodes", "server": "Memory", "description": "Search for nodes based on a query.", "parameter": {"query": "(string) Search term to match against entity names, types, and observation content"}, "task": {"category": "Memory", "query": "Search for nodes matching a query term"}}, {"name": "open_nodes", "server": "Memory", "description": "Retrieve specific nodes by name.", "parameter": {"names": "(string[]) List of node names to retrieve"}, "task": {"category": "Memory", "query": "Retrieve nodes by their names"}}], "domains": [{"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "PostgreSQL", "description": "Execute read-only SQL queries against the connected database", "tools": [{"name": "query", "server": "PostgreSQL", "description": "Execute read-only SQL queries against the connected database", "parameter": {"sql": "(string): The SQL query to execute"}, "task": {"category": "PostgreSQL", "query": "Execute read-only queries on database"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Puppeteer", "description": "Browser automation using Puppeteer, including: navigation, screenshot capture, element interaction (click/hover/fill/select), and JavaScript execution", "tools": [{"name": "puppeteer_navigate", "server": "Puppeteer", "description": "Navigate to any URL in the browser", "parameter": {"url": "(string, required): URL to navigate to", "launchOptions": "(object, optional): PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts. Example: { headless: true, args: ['--user-data-dir=\"C:/Data\"'] }", "allowDangerous": "(boolean, optional): Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox, --disable-web-security will throw errors. Default false."}, "task": {"category": "Puppeteer", "query": "Navigate to a specified URL in the browser"}}, {"name": "puppeteer_screenshot", "server": "Puppeteer", "description": "Capture screenshots of the entire page or specific elements", "parameter": {"name": "(string, required): Name for the screenshot", "selector": "(string, optional): CSS selector for element to screenshot", "width": "(number, optional, default: 800): Screenshot width", "height": "(number, optional, default: 600): Screenshot height", "encoded": "(boolean, optional): If true, capture the screenshot as a base64-encoded data URI (as text) instead of binary image content. Default false."}, "task": {"category": "Puppeteer", "query": "Capture screenshots of web pages or elements"}}, {"name": "puppeteer_click", "server": "Puppeteer", "description": "Click elements on the page", "parameter": {"selector": "(string): CSS selector for element to click"}, "task": {"category": "Puppeteer", "query": "Interact with page elements"}}, {"name": "puppeteer_hover", "server": "Puppeteer", "description": "Hover elements on the page", "parameter": {"selector": "(string): CSS selector for element to hover"}, "task": {"category": "Puppeteer", "query": "Hover over elements on a webpage"}}, {"name": "puppeteer_fill", "server": "Puppeteer", "description": "Fill out input fields", "parameter": {"selector": "(string): CSS selector for input field", "value": "(string): Value to fill"}, "task": {"category": "Puppeteer", "query": "Automate filling out input fields"}}, {"name": "puppeteer_select", "server": "Puppeteer", "description": "Select an element with SELECT tag", "parameter": {"selector": "(string): CSS selector for element to select", "value": "(string): Value to select"}, "task": {"category": "Puppeteer", "query": "Select elements using CSS selectors"}}, {"name": "puppeteer_evaluate", "server": "Puppeteer", "description": "Execute JavaScript in the browser console", "parameter": {"script": "(string): JavaScript code to execute"}, "task": {"category": "Puppeteer", "query": "Run JavaScript code in browser console"}}], "domains": [{"name": "Browser Operation", "description": "浏览器操作与自动化控制,如网页元素操控、Cookie 管理、页面截图等"}]}
{"name": "Sentry", "description": "Retrieve and analyze Sentry issues by ID or URL", "tools": [{"name": "get_sentry_issue", "server": "Sentry", "description": "Retrieve and analyze a Sentry issue by ID or URL", "parameter": {"issue_id_or_url": "(string) Sentry issue ID or URL to analyze"}, "task": {"category": "Sentry", "query": "Retrieve and analyze issues"}}, {"name": "sentry-issue", "server": "Sentry", "description": "Retrieve issue details from Sentry", "parameter": {"issue_id_or_url": "(string) Sentry issue ID or URL"}, "task": {"category": "Sentry", "query": "Retrieve details of an issue"}}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Sequential Thinking", "description": "Facilitates a detailed, step-by-step thinking process for problem-solving and analysis", "tools": [{"name": "sequential_thinking", "server": "Sequential Thinking", "description": "Facilitates a detailed, step-by-step thinking process for problem-solving and analysis.", "parameter": {"thought": "(string) The current thinking step", "nextThoughtNeeded": "(boolean) Whether another thought step is needed", "thoughtNumber": "(integer) Current thought number", "totalThoughts": "(integer) Estimated total thoughts needed", "isRevision": "(boolean, optional) Whether this revises previous thinking", "revisesThought": "(integer, optional) Which thought is being reconsidered", "branchFromThought": "(integer, optional) Branching point thought number", "branchId": "(string, optional) Branch identifier", "needsMoreThoughts": "(boolean, optional) If more thoughts are needed"}, "task": {"category": "Sequential Thinking", "query": "Facilitate step-by-step problem-solving and analysis"}}], "domains": [{"name": "Problem Solving & Analysis", "description": "Problem-solving and analysis tools that facilitate detailed, step-by-step thinking processes"}]}
{"name": "Sqlite", "description": "1. Execute SELECT queries to read data from the database 2. Execute INSERT, UPDATE, or DELETE queries 3. Create new tables in the database 4. Get a list of all tables in the database 5. View schema information for a specific table 6. Add new business insights to the memo resource", "tools": [{"name": "read_query", "server": "Sqlite", "description": "Execute SELECT queries to read data from the database", "parameter": {"query": "(string) The SELECT SQL query to execute"}, "task": {"category": "Sqlite", "query": "Execute SELECT queries to read data"}}, {"name": "write_query", "server": "Sqlite", "description": "Execute INSERT, UPDATE, or DELETE queries", "parameter": {"query": "(string) The SQL modification query"}, "task": {"category": "Sqlite", "query": "Execute modification queries on database"}}, {"name": "create_table", "server": "Sqlite", "description": "Create new tables in the database", "parameter": {"query": "(string) CREATE TABLE SQL statement"}, "task": {"category": "Sqlite", "query": "Create new tables in a database"}}, {"name": "list_tables", "server": "Sqlite", "description": "Get a list of all tables in the database", "parameter": {}, "task": {"category": "Sqlite", "query": "Retrieve all tables from the database"}}, {"name": "describe-table", "server": "Sqlite", "description": "View schema information for a specific table", "parameter": {"table_name": "(string) Name of table to describe"}, "task": {"category": "Sqlite", "query": "View schema information for a table"}}, {"name": "append_insight", "server": "Sqlite", "description": "Add new business insights to the memo resource", "parameter": {"insight": "(string) Business insight discovered from data analysis"}, "task": {"category": "Sqlite", "query": "Add new business insights to the database"}}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Time", "description": "1.获取特定时区或系统时区的当前时间 2.在不同时区之间转换时间", "tools": [{"name": "get_current_time", "server": "Time", "description": "Get current time in a specific timezone or system timezone.", "parameter": {"timezone": "(string) IANA timezone name (e.g., 'America/New_York', 'Europe/London')"}, "task": {"category": "Time", "query": "Retrieve current time for a timezone"}}, {"name": "convert_time", "server": "Time", "description": "Convert time between timezones.", "parameter": {"source_timezone": "(string) Source IANA timezone name", "time": "(string) Time in 24-hour format (HH:MM)", "target_timezone": "(string) Target IANA timezone name"}, "task": {"category": "Time", "query": "Convert time between different timezones"}}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
