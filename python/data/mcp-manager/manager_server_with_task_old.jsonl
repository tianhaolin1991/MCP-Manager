{"name": "AgentQL", "description": "Extract structured data from a given URL using a prompt to describe the data and fields to extract", "tools": [{"name": "extract-web-data", "server": "AgentQL", "description": "Extracts structured data from a given URL using a prompt to describe the data and fields to extract.", "parameter": {"url": "(string) The URL of the web page to extract data from.", "prompt": "(string) A description of the actual data and its fields to extract."}, "task": "Extract the product names and prices from the first 10 items listed on the given e-commerce webpage URL."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Aiven", "description": "1.列出Aiven账户中的所有项目 2.列出特定Aiven项目中的所有服务 3.获取特定Aiven项目中服务的详细信息", "tools": [{"name": "list_projects", "server": "Aiven", "description": "List all projects on your Aiven account.", "parameter": {}, "task": "List all projects currently available in your Aiven account."}, {"name": "list_services", "server": "Aiven", "description": "List all services in a specific Aiven project.", "parameter": {}, "task": "List all services available in the Aiven project named \"ProjectX\"."}, {"name": "get_service_details", "server": "Aiven", "description": "Get the detail of your service in a specific Aiven project.", "parameter": {}, "task": "Retrieve the detailed information of all services within the specified Aiven project."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Alibaba Cloud AnalyticDB for MySQL", "description": "1.在AnalyticDB for MySQL集群中执行SQL查询 2.获取SQL查询的执行计划 3.获取带运行时统计信息的实际执行计划", "tools": [{"name": "execute_sql", "server": "Alibaba Cloud AnalyticDB for MySQL", "description": "Execute a SQL query in the AnalyticDB for MySQL Cluster", "parameter": {}, "task": "Execute a SQL query to retrieve the top 10 highest revenue products from the AnalyticDB for MySQL Cluster."}, {"name": "get_query_plan", "server": "Alibaba Cloud AnalyticDB for MySQL", "description": "Get the query plan for a SQL query", "parameter": {}, "task": "Generate the execution plan for the SQL query \"SELECT * FROM customers WHERE age > 30 ORDER BY last_name\"."}, {"name": "get_execution_plan", "server": "Alibaba Cloud AnalyticDB for MySQL", "description": "Get the actual execution plan with runtime statistics for a SQL query", "parameter": {}, "task": "Retrieve the runtime execution plan and statistics for the SQL query currently being analyzed."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Apache IoTDB", "description": "Database metadata and data query operations, including: SHOW/COUNT queries, SELECT queries, listing tables, and viewing table schema", "tools": [{"name": "metadata_query", "server": "Apache IoTDB", "description": "Execute SHOW/COUNT queries to read metadata from the database", "parameter": {"query_sql": "(string) The SHOW/COUNT SQL query to execute"}, "task": "Retrieve the count of all tables in the current database schema using a metadata query."}, {"name": "select_query", "server": "Apache IoTDB", "description": "Execute SELECT queries to read data from the database", "parameter": {"query_sql": "(string) The SELECT SQL query to execute"}, "task": "Retrieve the names and email addresses of all customers who made a purchase in the last 30 days using a SELECT query."}, {"name": "read_query", "server": "Apache IoTDB", "description": "Execute SELECT queries to read data from the database", "parameter": {"query": "(string) The SELECT SQL query to execute"}, "task": "Retrieve the names and email addresses of all customers who made a purchase in the last 30 days using a SELECT query."}, {"name": "list_tables", "server": "Apache IoTDB", "description": "Get a list of all tables in the database", "parameter": {}, "task": "List all tables available in the connected database."}, {"name": "describe-table", "server": "Apache IoTDB", "description": "View schema information for a specific table", "parameter": {"table_name": "(string) Name of table to describe"}, "task": "View the schema information for the 'customer_orders' table."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Apify", "description": "1.检索特定Actor的文档、输入模式和详细信息 2.通过关键词搜索相关Actor并返回详细信息 3.将Actor添加到可用工具列表 4.从可用工具列表中移除Actor", "tools": [{"name": "get-actor-details", "server": "Apify", "description": "Retrieves documentation, input schema, and details about a specific Actor.", "parameter": {}, "task": "Retrieve the documentation and input schema for a specified Actor."}, {"name": "discover-actors", "server": "Apify", "description": "Searches for relevant Actors using keywords and returns their details.", "parameter": {}, "task": "Search for actors who have starred in action movies released in the last 5 years and retrieve their details."}, {"name": "add-actor-as-tool", "server": "Apify", "description": "Adds an Actor by name to the available tools list without executing it, requiring user consent to run later.", "parameter": {}, "task": "Add an actor named \"DataProcessor\" to the available tools list for potential future execution."}, {"name": "remove-actor-from-tool", "server": "Apify", "description": "Removes an Actor by name from the available tools list when it's no longer needed.", "parameter": {}, "task": "Remove the actor named \"DataProcessor\" from the available tools list."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "APIMatic MCP", "description": "Validate OpenAPI files using APIMatic's API", "tools": [{"name": "validate-openapi-using-apimatic", "server": "APIMatic MCP", "description": "Validates an OpenAPI file using APIMatic’s API and returns a validation summary.", "parameter": {}, "task": "Validate the OpenAPI specification file to ensure it meets the required standards and returns a detailed validation summary."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Arize Phoenix", "description": "1.提供围绕OpenTelemetry原语的轻量级包装 2.通过OpenAPI REST接口与Phoenix服务器交互的轻量级客户端 3.评估LLM应用程序的工具 4.Arize Phoenix API的客户端 5.Arize Phoenix的MCP服务器实现", "tools": [{"name": "arize-phoenix-otel", "server": "Arize Phoenix", "description": "Provides a lightweight wrapper around OpenTelemetry primitives with Phoenix-aware defaults", "parameter": {}, "task": "Generate OpenTelemetry traces with Phoenix-aware default configurations."}, {"name": "arize-phoenix-client", "server": "Arize Phoenix", "description": "Lightweight client for interacting with the Phoenix server via its OpenAPI REST interface", "parameter": {}, "task": "Connect to the Phoenix server using the lightweight client and retrieve the current server status via the OpenAPI REST interface."}, {"name": "arize-phoenix-evals", "server": "Arize Phoenix", "description": "Tooling to evaluate LLM applications including RAG relevance, answer relevance, and more", "parameter": {}, "task": "Evaluate the relevance of answers generated by an LLM application in a RAG (Retrieval-Augmented Generation) setup."}, {"name": "@arizeai/phoenix-client", "server": "Arize Phoenix", "description": "Client for the Arize Phoenix API", "parameter": {}, "task": "Send a request to the Arize Phoenix API to retrieve the latest model performance metrics."}, {"name": "@arizeai/phoenix-mcp", "server": "Arize Phoenix", "description": "MCP server implementation for Arize Phoenix providing a unified interface to Phoenix's capabilities", "parameter": {}, "task": "Monitor the performance and health status of the Arize Phoenix MCP server implementation."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Astra DB", "description": "Astra DB operations, including: collection management (create/update/delete), record CRUD operations, bulk operations, document count estimation, and client setup assistance", "tools": [{"name": "GetCollections", "server": "Astra DB", "description": "Get all collections in the database", "parameter": {}, "task": "Retrieve a list of all available collections stored in the database."}, {"name": "CreateCollection", "server": "Astra DB", "description": "Create a new collection in the database", "parameter": {}, "task": "Create a new collection in the database to store user activity logs."}, {"name": "UpdateCollection", "server": "Astra DB", "description": "Update an existing collection in the database", "parameter": {}, "task": "Update the existing collection in the database with the latest data entries."}, {"name": "DeleteCollection", "server": "Astra DB", "description": "Delete a collection from the database", "parameter": {}, "task": "Delete the specified collection from the connected database."}, {"name": "ListRecords", "server": "Astra DB", "description": "List records from a collection in the database", "parameter": {}, "task": "List all records from the 'customers' collection in the database."}, {"name": "GetRecord", "server": "Astra DB", "description": "Get a specific record from a collection by ID", "parameter": {}, "task": "Retrieve the record with ID \"12345\" from the specified collection."}, {"name": "CreateRecord", "server": "Astra DB", "description": "Create a new record in a collection", "parameter": {}, "task": "Create a new record in the specified collection with the provided data fields."}, {"name": "UpdateRecord", "server": "Astra DB", "description": "Update an existing record in a collection", "parameter": {}, "task": "Update the existing record with ID '12345' in the specified collection."}, {"name": "DeleteRecord", "server": "Astra DB", "description": "Delete a record from a collection", "parameter": {}, "task": "Delete the record with ID '12345' from the 'customers' collection."}, {"name": "FindRecord", "server": "Astra DB", "description": "Find records in a collection by field value", "parameter": {}, "task": "Find all records in the specified collection where the 'status' field is set to 'active'."}, {"name": "BulkCreateRecords", "server": "Astra DB", "description": "Create multiple records in a collection at once", "parameter": {}, "task": "Create 50 new customer records in the specified collection with the provided details."}, {"name": "BulkUpdateRecords", "server": "Astra DB", "description": "Update multiple records in a collection at once", "parameter": {}, "task": "Update all records in the specified collection where the status field is set to \"pending\" and change it to \"completed\"."}, {"name": "BulkDeleteRecords", "server": "Astra DB", "description": "Delete multiple records from a collection at once", "parameter": {}, "task": "Delete all records from the specified collection in a single operation."}, {"name": "OpenBrowser", "server": "Astra DB", "description": "Open a web browser for authentication and setup", "parameter": {}, "task": "Open a web browser to authenticate and complete the initial setup process."}, {"name": "HelpAddToClient", "server": "Astra DB", "description": "Get assistance with adding Astra DB client to your MCP client", "parameter": {}, "task": "Get assistance with integrating Astra DB into your existing MCP client setup."}, {"name": "EstimateDocumentCount", "server": "Astra DB", "description": "Get estimate of the number of documents in a collection", "parameter": {}, "task": "Estimate the total number of documents in the specified collection."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Audiense Insights", "description": "Audiense insights reports operations, including: retrieving reports list, fetching detailed report information, getting audience insights, retrieving baseline audiences, fetching affinity categories, comparing audience influencers, getting audience content engagement, and generating comprehensive report summaries", "tools": [{"name": "get-reports", "server": "Audiense Insights", "description": "Retrieves the list of Audiense insights reports owned by the authenticated user.", "parameter": {}, "task": "Retrieve the latest 10 Audiense insights reports created by the authenticated user."}, {"name": "get-report-info", "server": "Audiense Insights", "description": "Fetches detailed information about a specific intelligence report, including status, segmentation type, audience size, segments, and access links.", "parameter": {"report_id": "(string) The ID of the intelligence report."}, "task": "Fetch the detailed information, including status, segmentation type, audience size, segments, and access links, for the intelligence report with ID \"RPT-2024-001\"."}, {"name": "get-audience-insights", "server": "Audiense Insights", "description": "Retrieves aggregated insights for a given audience, including demographics, behavioral traits, psychographics, and socioeconomic factors.", "parameter": {"audience_insights_id": "(string) The ID of the audience insights.", "insights": "(array of strings, optional) List of specific insight names to filter."}, "task": "Retrieve demographic and behavioral insights for the audience with ID 'AUD12345'."}, {"name": "get-baselines", "server": "Audiense Insights", "description": "Retrieves available baseline audiences, optionally filtered by country.", "parameter": {"country": "(string, optional) ISO country code to filter by."}, "task": "Retrieve the list of available baseline audiences, filtered by the country code 'US'."}, {"name": "get-categories", "server": "Audiense Insights", "description": "Retrieves the list of available affinity categories that can be used in influencer comparisons.", "parameter": {}, "task": "Retrieve the list of available categories for influencer affinity comparisons."}, {"name": "compare-audience-influencers", "server": "Audiense Insights", "description": "Compares influencers of a given audience with a baseline audience, providing affinity scores, baseline comparisons, and uniqueness scores.", "parameter": {"audience_influencers_id": "(string) ID of the audience influencers.", "baseline_audience_influencers_id": "(string) ID of the baseline audience influencers.", "cursor": "(number, optional) Pagination cursor.", "count": "(number, optional) Number of items per page (default: 200).", "bio_keyword": "(string, optional) Filter influencers by bio keyword.", "entity_type": "(enum: person | brand, optional) Filter by entity type.", "followers_min": "(number, optional) Minimum number of followers.", "followers_max": "(number, optional) Maximum number of followers.", "categories": "(array of strings, optional) Filter influencers by categories.", "countries": "(array of strings, optional) Filter influencers by country ISO codes."}, "task": "Compare the influencers of audience ID 'A123' with baseline audience ID 'B456', filtering for influencers with a minimum of 10,000 followers, located in the US or UK, and categorized under 'Fitness' or 'Wellness'. Limit the results to 100 items per page."}, {"name": "get-audience-content", "server": "Audiense Insights", "description": "Retrieves audience content engagement details, including liked, shared, and influential content.", "parameter": {"audience_content_id": "(string) The ID of the audience content."}, "task": "Retrieve engagement details, including likes, shares, and influential metrics, for the audience content with ID \"AC12345\"."}, {"name": "report-summary", "server": "Audiense Insights", "description": "Generates a comprehensive summary of an Audiense report, including metadata, audience size, segment information, top insights, and top influencers with comparison metrics.", "parameter": {"report_id": "(string) The ID of the intelligence report to summarize."}, "task": "Generate a comprehensive summary of the intelligence report with ID 'AUD-2024-12345', including metadata, audience size, segment details, top insights, and top influencers with comparison metrics."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "AWS", "description": "1.搜索AWS文档和最佳实践 2.获取AWS文档内容推荐 3.将AWS文档转换为Markdown格式 4.发现和查询Amazon Bedrock知识库 5.分析AWS CDK项目并提供构造建议 6.提供基础设施即代码最佳实践 7.分析和可视化AWS成本 8.使用自然语言查询成本数据 9.生成详细成本报告和见解 10.基于文本和颜色生成图像 11.生成专业图表 12.运行AWS Lambda函数 13.实施安全优先的开发工作流程 14.集成Checkov进行安全检查 15.提供AWS和AWSCC提供者文档 16.使用AWS-IA GenAI模块 17.执行Terraform工作流 18.使用地理编码搜索地点 19.获取特定地点的详细信息 20.反向地理编码坐标到地址 21.搜索指定位置附近的地点 22.搜索当前开放的地点 23.计算位置之间的路线 24.优化路线点以提高路由效率 25.使用FAISS和Amazon Bedrock嵌入索引Git仓库 26.在仓库内执行语义搜索 27.分析仓库结构 28.在AWS组织中搜索GitHub仓库 29.支持文本和二进制的文件访问", "tools": [{"name": "Search Documentation", "server": "AWS", "description": "Search AWS documentation and best practices using the official AWS search API.", "parameter": {}, "task": "Search AWS documentation for best practices on setting up a secure S3 bucket configuration."}, {"name": "Get Content Recommendations", "server": "AWS", "description": "Get content recommendations for AWS documentation pages.", "parameter": {}, "task": "Provide content recommendations for the latest AWS documentation pages."}, {"name": "Convert Documentation to Markdown", "server": "AWS", "description": "Convert AWS documentation to markdown format.", "parameter": {}, "task": "Convert the latest AWS EC2 documentation into a markdown file."}, {"name": "Discover Knowledge Bases", "server": "AWS", "description": "Discover Amazon Bedrock Knowledge Bases and their data sources.", "parameter": {}, "task": "Discover all available Amazon Bedrock Knowledge Bases along with their associated data sources."}, {"name": "Query Knowledge Bases", "server": "AWS", "description": "Query Amazon Bedrock Knowledge Bases with natural language.", "parameter": {}, "task": "Search for information about the latest advancements in artificial intelligence using natural language queries."}, {"name": "Filter Results by Data Source", "server": "AWS", "description": "Filter query results by data source.", "parameter": {}, "task": "Filter the query results to only include data from the specified source."}, {"name": "Rerank Results", "server": "AWS", "description": "Rerank query results.", "parameter": {}, "task": "Rerank the top 10 search results based on relevance to the query \"best budget laptops 2024.\""}, {"name": "AWS CDK Project Analysis", "server": "AWS", "description": "Analyze and assist with AWS CDK projects.", "parameter": {}, "task": "Analyze the infrastructure as code setup in the current AWS CDK project and identify any potential issues or optimizations."}, {"name": "CDK Construct Recommendations", "server": "AWS", "description": "Provide recommendations for CDK constructs.", "parameter": {}, "task": "Recommend suitable CDK constructs for deploying a serverless API with a DynamoDB backend."}, {"name": "Infrastructure as Code Best Practices", "server": "AWS", "description": "Provide best practices for infrastructure as code.", "parameter": {}, "task": "Provide a set of best practices for implementing infrastructure as code in a cloud environment."}, {"name": "Analyze and Visualize Costs", "server": "AWS", "description": "Analyze and visualize AWS costs.", "parameter": {}, "task": "Analyze and visualize the AWS cost data for the past 6 months."}, {"name": "Query Cost Data with Natural Language", "server": "AWS", "description": "Query cost data using natural language.", "parameter": {}, "task": "Retrieve the total expenses for office supplies in the last quarter using natural language."}, {"name": "Generate Cost Reports and Insights", "server": "AWS", "description": "Generate detailed cost reports and insights.", "parameter": {}, "task": "Generate a detailed cost report for the last quarter, including insights on expenditure trends and potential savings."}, {"name": "Text-Based Image Generation", "server": "AWS", "description": "Generate images using text with customizable parameters.", "parameter": {}, "task": "Generate an image based on the text description \"a serene mountain landscape at sunset with a clear blue lake in the foreground.\""}, {"name": "Color-Guided Image Generation", "server": "AWS", "description": "Generate images with specific color palettes.", "parameter": {}, "task": "Generate an image using a color palette consisting of shades of blue and green."}, {"name": "Save Generated Images", "server": "AWS", "description": "Save generated images to the workspace.", "parameter": {}, "task": "Save the generated images to the current workspace directory."}, {"name": "Generate Professional Diagrams", "server": "AWS", "description": "Generate professional diagrams using Python code.", "parameter": {}, "task": "Create a professional flowchart diagram illustrating the steps in a software development lifecycle using Python."}, {"name": "Customize Diagram Appearance", "server": "AWS", "description": "Customize the appearance, layout, and styling of diagrams.", "parameter": {}, "task": "Customize the layout and styling of the current diagram to improve readability and visual appeal."}, {"name": "Code Scanning for Secure Diagram Generation", "server": "AWS", "description": "Scan code to ensure secure diagram generation.", "parameter": {}, "task": "Scan the provided codebase to verify secure diagram generation practices."}, {"name": "Run AWS Lambda Functions", "server": "AWS", "description": "Select and run AWS Lambda functions as MCP tools without code changes.", "parameter": {}, "task": "Run the selected AWS Lambda function to process the latest batch of uploaded data files."}, {"name": "Security-First Development Workflow", "server": "AWS", "description": "Implement a security-first development workflow.", "parameter": {}, "task": "Implement a security-first development workflow for a new web application project, ensuring secure coding practices, regular security reviews, and automated vulnerability scanning are integrated into the development lifecycle."}, {"name": "Checkov Integration", "server": "AWS", "description": "Integrate Checkov for security checks.", "parameter": {}, "task": "Perform a security scan on the current infrastructure configuration using Checkov integration."}, {"name": "AWS and AWSCC Provider Documentation", "server": "AWS", "description": "Provide documentation for AWS and AWSCC providers.", "parameter": {}, "task": "Retrieve the latest documentation for AWS and AWS Cloud Control (AWSCC) providers, focusing on setup, configuration, and supported services."}, {"name": "AWS-IA GenAI Modules", "server": "AWS", "description": "Use AWS-IA GenAI modules.", "parameter": {}, "task": "Generate a creative marketing campaign proposal using AWS-IA GenAI modules to target young professionals in the tech industry."}, {"name": "Terraform Workflow Execution", "server": "AWS", "description": "Execute Terraform workflows.", "parameter": {}, "task": "Execute a Terraform workflow to provision infrastructure resources in the specified environment."}, {"name": "Search for Places Using Geocoding", "server": "AWS", "description": "Search for places using geocoding.", "parameter": {}, "task": "Find the nearest coffee shop to the current location using geocoding."}, {"name": "Get Details for Specific Places", "server": "AWS", "description": "Get details for specific places by PlaceId.", "parameter": {}, "task": "Retrieve the full details of the place identified by PlaceId \"PL123456789\"."}, {"name": "Reverse Geocode Coordinates to Addresses", "server": "AWS", "description": "Reverse geocode coordinates to addresses.", "parameter": {}, "task": "Convert the given latitude and longitude coordinates into their corresponding street addresses."}, {"name": "Search for Places Near a Location", "server": "AWS", "description": "Search for places near a specified location.", "parameter": {}, "task": "Find nearby restaurants within a 5-mile radius of the current user location."}, {"name": "Search for Places That Are Currently Open", "server": "AWS", "description": "Search for places that are currently open.", "parameter": {}, "task": "Find restaurants that are currently open within a 5-mile radius of the user's current location."}, {"name": "Calculate Routes Between Locations", "server": "AWS", "description": "Calculate routes between locations with turn-by-turn directions.", "parameter": {}, "task": "Calculate the most efficient route from the city center to the airport, including detailed turn-by-turn directions."}, {"name": "Optimize Waypoints for Efficient Routing", "server": "AWS", "description": "Optimize waypoints for efficient routing.", "parameter": {}, "task": "Optimize the sequence of waypoints to ensure the most efficient route between the starting point and destination."}, {"name": "Repository Indexing", "server": "AWS", "description": "Index Git repositories using FAISS and Amazon Bedrock embeddings.", "parameter": {}, "task": "Index all Git repositories in the current workspace using FAISS and Amazon Bedrock embeddings for efficient search and retrieval."}, {"name": "Semantic Search Within Repositories", "server": "AWS", "description": "Perform semantic search within repositories.", "parameter": {}, "task": "Search for relevant documents or code snippets within the specified repositories using semantic matching."}, {"name": "Repository Structure Analysis", "server": "AWS", "description": "Analyze the structure of repositories.", "parameter": {}, "task": "Analyze the directory structure and file organization of the specified repository."}, {"name": "GitHub Repository Search in AWS Organizations", "server": "AWS", "description": "Search GitHub repositories within AWS organizations.", "parameter": {}, "task": "Search for all GitHub repositories within AWS organizations."}, {"name": "File Access with Text and Binary Support", "server": "AWS", "description": "Access files with text and binary support.", "parameter": {}, "task": "Read the contents of a binary file named \"data.dat\" located in the \"/documents\" directory."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}, {"name": "Location & Environmental Service", "description": "位置与环境服务,包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Axiom", "description": "1. Execute APL queries against Axiom datasets 2. List available Axiom datasets", "tools": [{"name": "queryApl", "server": "Axiom", "description": "Execute APL queries against Axiom datasets", "parameter": {}, "task": "Query the Axiom dataset for all records created in the last 24 hours using APL."}, {"name": "listDatasets", "server": "Axiom", "description": "List available Axiom datasets", "parameter": {}, "task": "List all available datasets in the Axiom platform."}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Azure", "description": "1. List and manage Azure AI Search services, indexes, and queries 2. List and manage Cosmos DB accounts, databases, containers, and items 3. Execute SQL queries against Cosmos DB containers 4. List and manage Azure Database for PostgreSQL - Flexible Server databases, tables, and servers 5. List and manage Kusto clusters, databases, tables, and schemas 6. Query Kusto databases using KQL 7. List and manage Storage accounts, blob containers, blobs, and tables 8. Query logs using KQL in Log Analytics workspaces 9. List and manage App Configuration stores, key-value pairs, and labeled configurations 10. Lock/unlock configuration settings in App Configuration stores 11. List, create, and manage keys in Azure Key Vault 12. List and manage resource groups 13. Execute Azure CLI and Azure Developer CLI commands 14. Support for all Azure CLI functionality, JSON output formatting, and cross-platform compatibility 15. Support for template discovery, initialization, provisioning, and deployment", "tools": [{"name": "List Azure AI Search services", "server": "Azure", "description": "Lists all Azure AI Search services.", "parameter": {}, "task": "List all available Azure AI Search services in the current subscription."}, {"name": "List indexes and look at their schema and configuration", "server": "Azure", "description": "Lists indexes and provides details about their schema and configuration.", "parameter": {}, "task": "List all indexes in the current database and provide details about their schema and configuration."}, {"name": "Query search indexes", "server": "Azure", "description": "Queries search indexes for specific data.", "parameter": {}, "task": "Search for all documents related to \"machine learning\" in the available search indexes."}, {"name": "List Cosmos DB accounts", "server": "Azure", "description": "Lists all Cosmos DB accounts.", "parameter": {}, "task": "List all available Cosmos DB accounts in the current subscription."}, {"name": "List and query databases", "server": "Azure", "description": "Lists and queries databases within a Cosmos DB account.", "parameter": {}, "task": "List all databases within the specified Cosmos DB account and retrieve their basic properties."}, {"name": "Manage containers and items", "server": "Azure", "description": "Manages containers and items within a Cosmos DB database.", "parameter": {}, "task": "Manage the containers and items in the specified Cosmos DB database, ensuring all data is organized and accessible."}, {"name": "Execute SQL queries against containers", "server": "Azure", "description": "Executes SQL queries against containers within a Cosmos DB database.", "parameter": {}, "task": "Execute a SQL query to retrieve all records from the 'Products' container in the Cosmos DB database."}, {"name": "List and query databases", "server": "Azure", "description": "Lists and queries databases within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}, "task": "List all available databases in the Azure Database for PostgreSQL - Flexible Server and retrieve the schema details for the top 5 largest databases."}, {"name": "List and get schema for tables", "server": "Azure", "description": "Lists and retrieves the schema for tables within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}, "task": "List and retrieve the schema for all tables in the connected Azure Database for PostgreSQL - Flexible Server."}, {"name": "List, get configuration and get parameters for servers", "server": "Azure", "description": "Lists, retrieves configuration, and retrieves parameters for servers within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}, "task": "Retrieve the configuration details and parameters for all servers in the Azure Database for PostgreSQL - Flexible Server environment."}, {"name": "List Kusto clusters", "server": "Azure", "description": "Lists all Kusto clusters.", "parameter": {}, "task": "List all available Kusto clusters in the current environment."}, {"name": "List databases in a Kusto cluster", "server": "Azure", "description": "Lists databases within a Kusto cluster.", "parameter": {}, "task": "List all available databases in the connected Kusto cluster."}, {"name": "List tables in a Kusto database", "server": "Azure", "description": "Lists tables within a Kusto database.", "parameter": {}, "task": "List all tables available in the connected Kusto database."}, {"name": "Get schema for a Kusto table", "server": "Azure", "description": "Retrieves the schema for a Kusto table.", "parameter": {}, "task": "Retrieve the schema definition for the specified Kusto table in the current database."}, {"name": "Sample rows from a Kusto table", "server": "Azure", "description": "Samples rows from a Kusto table.", "parameter": {}, "task": "Sample 100 random rows from the specified Kusto table for analysis."}, {"name": "Query Kusto databases using KQL", "server": "Azure", "description": "Queries Kusto databases using KQL.", "parameter": {}, "task": "Query the Kusto database for all records in the 'Logs' table from the past 7 days using KQL."}, {"name": "List Storage accounts", "server": "Azure", "description": "Lists all Storage accounts.", "parameter": {}, "task": "List all available storage accounts in the current Azure subscription."}, {"name": "Manage blob containers and blobs", "server": "Azure", "description": "Manages blob containers and blobs within a Storage account.", "parameter": {}, "task": "Create a new blob container named \"customer-data-2024\" in the connected Storage account."}, {"name": "List and query Storage tables", "server": "Azure", "description": "Lists and queries tables within a Storage account.", "parameter": {}, "task": "List all tables within the specified Storage account and retrieve the metadata for each table."}, {"name": "Get container properties and metadata", "server": "Azure", "description": "Retrieves properties and metadata for a Storage container.", "parameter": {}, "task": "Retrieve the properties and metadata for the specified storage container."}, {"name": "List Log Analytics workspaces", "server": "Azure", "description": "Lists all Log Analytics workspaces.", "parameter": {}, "task": "List all available Log Analytics workspaces in the current subscription."}, {"name": "Query logs using KQL", "server": "Azure", "description": "Queries logs using KQL.", "parameter": {}, "task": "Retrieve the last 100 error logs from the application logs using KQL."}, {"name": "List available tables", "server": "Azure", "description": "Lists available tables within a Log Analytics workspace.", "parameter": {}, "task": "List all available tables in the specified Log Analytics workspace."}, {"name": "Configure monitoring options", "server": "Azure", "description": "Configures monitoring options within a Log Analytics workspace.", "parameter": {}, "task": "Configure monitoring settings for the Log Analytics workspace to ensure comprehensive data collection and analysis."}, {"name": "List App Configuration stores", "server": "Azure", "description": "Lists all App Configuration stores.", "parameter": {}, "task": "List all available App Configuration stores in the current environment."}, {"name": "Manage key-value pairs", "server": "Azure", "description": "Manages key-value pairs within an App Configuration store.", "parameter": {}, "task": "Manage the key-value pairs in the App Configuration store for the current application environment."}, {"name": "Handle labeled configurations", "server": "Azure", "description": "Handles labeled configurations within an App Configuration store.", "parameter": {}, "task": "Manage the labeled configurations in the App Configuration store by reviewing and organizing them effectively."}, {"name": "Lock/unlock configuration settings", "server": "Azure", "description": "Locks or unlocks configuration settings within an App Configuration store.", "parameter": {}, "task": "Lock the configuration settings in the current App Configuration store to prevent further modifications."}, {"name": "List, create, and get keys", "server": "Azure", "description": "Lists, creates, and retrieves keys within an Azure Key Vault.", "parameter": {}, "task": "List all the keys stored in the specified Azure Key Vault."}, {"name": "List resource groups", "server": "Azure", "description": "Lists all resource groups.", "parameter": {}, "task": "List all available resource groups in the current environment."}, {"name": "Resource group management operations", "server": "Azure", "description": "Performs management operations on resource groups.", "parameter": {}, "task": "Manage the resource groups in the current environment by organizing, updating, or deleting them as needed."}, {"name": "Execute Azure CLI commands directly", "server": "Azure", "description": "Executes Azure CLI commands directly.", "parameter": {}, "task": "Execute a command to list all virtual machines in the current Azure subscription."}, {"name": "Support for all Azure CLI functionality", "server": "Azure", "description": "Supports all Azure CLI functionality.", "parameter": {}, "task": "Deploy a new Azure virtual machine with 4 vCPUs and 16GB RAM in the East US region."}, {"name": "JSON output formatting", "server": "Azure", "description": "Formats output in JSON.", "parameter": {}, "task": "Format the provided data into a structured JSON output."}, {"name": "Cross-platform compatibility", "server": "Azure", "description": "Ensures cross-platform compatibility.", "parameter": {}, "task": "Test the application's functionality across Windows, macOS, and Linux operating systems to ensure seamless performance."}, {"name": "Execute Azure Developer CLI commands directly", "server": "Azure", "description": "Executes Azure Developer CLI commands directly.", "parameter": {}, "task": "Execute a deployment of a web application to Azure using the Azure Developer CLI."}, {"name": "Support for template discovery, template initialization, provisioning and deployment", "server": "Azure", "description": "Supports template discovery, template initialization, provisioning, and deployment.", "parameter": {}, "task": "Discover and initialize a new template, then proceed with provisioning and deployment."}, {"name": "Cross-platform compatibility", "server": "Azure", "description": "Ensures cross-platform compatibility.", "parameter": {}, "task": "Ensure the application functions correctly across Windows, macOS, and Linux operating systems."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Bankless Onchain", "description": "1.从各种区块链网络读取智能合约状态 2.检索代理实现合约地址 3.根据主题获取合约事件日志 4.从事件名称和参数类型生成事件主题签名", "tools": [{"name": "read_contract", "server": "Bankless Onchain", "description": "Read state from smart contracts on various blockchain networks.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'polygon')", "contract": "(string, required) The contract address", "method": "(string, required) The contract method to call", "inputs": "(array, required) Input parameters for the method call, each containing: { type (string), value (any) }", "outputs": "(array, required) Expected output types, each containing: { type (string) }"}, "task": "Query the total supply of tokens from the smart contract at address '0x123...abc' on the Ethereum network, using the 'totalSupply' method with no input parameters and expecting a uint256 output."}, {"name": "get_proxy", "server": "Bankless Onchain", "description": "Retrieve proxy implementation contract addresses.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "contract": "(string, required) The contract address"}, "task": "Retrieve the proxy implementation contract address for the specified contract on the Ethereum network."}, {"name": "get_events", "server": "Bankless Onchain", "description": "Fetch event logs for a contract based on topics.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "addresses": "(array, required) List of contract addresses to filter events", "topic": "(string, required) Primary topic to filter events", "optionalTopics": "(array, optional) Optional additional topics (can include null values)"}, "task": "Fetch event logs for the contract address '0x123...abc' on the Ethereum network, filtering for the 'Transfer' topic with an optional secondary topic of '0x456...def'."}, {"name": "build_event_topic", "server": "Bankless Onchain", "description": "Generate an event topic signature from event name and argument types.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "name": "(string, required) Event name (e.g., 'Transfer(address,address,uint256)')", "arguments": "(array, required) Event arguments types, each containing: { type (string) }"}, "task": "Generate a topic signature for the 'Approval(address,address,uint256)' event with argument types ['address', 'address', 'uint256'] on the Ethereum network."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}]}
{"name": "Bitrise", "description": "Bitrise CI/CD平台操作,包括:应用管理、构建触发与监控、工作流配置、Webhook管理、缓存管理、流水线管理、工作区管理、用户与成员管理、发布管理(测试构建与测试者管理)", "tools": [{"name": "list_apps", "server": "Bitrise", "description": "List all the apps available for the authenticated account", "parameter": {"sort_by": "(Optional, string) Order of the apps: last_build_at (default) or created_at", "next": "(Optional, string) Slug of the first app in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}, "task": "List all available apps sorted by creation date, starting from the app with the slug \"example-app\" and limit the results to 20 per page."}, {"name": "register_app", "server": "Bitrise", "description": "Add a new app to Bitrise", "parameter": {"repo_url": "(string) Repository URL", "is_public": "(boolean) Whether the app's builds visibility is 'public'", "organization_slug": "(string) The organization (aka workspace) the app to add to", "project_type": "(Optional, string) Type of project (ios, android, etc.)", "provider": "(Optional, string) github"}, "task": "Add a new iOS app to the Bitrise organization 'mobile-team' with a public repository hosted on GitHub at 'https://github.com/mobile-team/ios-app'."}, {"name": "finish_bitrise_app", "server": "Bitrise", "description": "Finish the setup of a Bitrise app", "parameter": {"app_slug": "(string) The slug of the Bitrise app to finish setup for", "project_type": "(Optional, string) The type of project (e.g., android, ios, flutter, etc.)", "stack_id": "(Optional, string) The stack ID to use for the app", "mode": "(Optional, string) The mode of setup", "config": "(Optional, string) The configuration to use for the app"}, "task": "Complete the setup for a Bitrise app with the slug \"my-app-slug\" by specifying the project type as \"ios\" and using the stack ID \"xcode-14.3\"."}, {"name": "get_app", "server": "Bitrise", "description": "Get the details of a specific app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "Retrieve the details of the Bitrise app with the identifier \"example-app-slug\"."}, {"name": "delete_app", "server": "Bitrise", "description": "Delete an app from Bitrise", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "Remove the Bitrise app with the identifier 'example-app-slug'."}, {"name": "update_app", "server": "Bitrise", "description": "Update an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "is_public": "(boolean) Whether the app's builds visibility is 'public'", "project_type": "(string) Type of project", "provider": "(string) Repository provider", "repo_url": "(string) Repository URL"}, "task": "Update the Bitrise app with the identifier \"my-app-123\" to have public builds visibility, set the project type to \"iOS\", and link it to the repository \"https://github.com/username/my-app-123.git\" using the \"GitHub\" provider."}, {"name": "get_bitrise_yml", "server": "Bitrise", "description": "Get the current Bitrise YML config file of a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "Retrieve the current YML configuration file for the Bitrise app identified by the slug \"android-release-build\"."}, {"name": "update_bitrise_yml", "server": "Bitrise", "description": "Update the Bitrise YML config file of a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "bitrise_yml_as_json": "(string) The new Bitrise YML config file content"}, "task": "Update the Bitrise configuration file for the app with identifier \"ABC123\" using the provided new YML content in JSON format."}, {"name": "list_branches", "server": "Bitrise", "description": "List the branches with existing builds of an app's repository", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "List all branches with existing builds for the Bitrise app identified by \"my_app_slug\"."}, {"name": "register_ssh_key", "server": "Bitrise", "description": "Add an SSH-key to a specific app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "auth_ssh_private_key": "(string) Private SSH key", "auth_ssh_public_key": "(string) Public SSH key", "is_register_key_into_provider_service": "(boolean) Register the key in the provider service"}, "task": "Add an SSH key pair to the Bitrise app with the identifier \"my_app_123\", using the provided private and public keys, and register the key in the provider service."}, {"name": "register_webhook", "server": "Bitrise", "description": "Register an incoming webhook for a specific application", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "Register an incoming webhook for the Bitrise application with the identifier \"mobile-app-ios\"."}, {"name": "list_builds", "server": "Bitrise", "description": "List all the builds of a specified Bitrise app or all accessible builds", "parameter": {"app_slug": "(Optional, string) Identifier of the Bitrise app", "sort_by": "(Optional, string) Order of builds: created_at (default), running_first", "branch": "(Optional, string) Filter builds by branch", "workflow": "(Optional, string) Filter builds by workflow", "status": "(Optional, integer) Filter builds by status (0: not finished, 1: successful, 2: failed, 3: aborted, 4: in-progress)", "next": "(Optional, string) Slug of the first build in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}, "task": "List all successful builds for the Bitrise app with the branch \"main\" and workflow \"deploy_production\", sorted by creation date, with a limit of 20 results per page."}, {"name": "trigger_bitrise_build", "server": "Bitrise", "description": "Trigger a new build/pipeline for a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "branch": "(Optional, string) The branch to build (default: main)", "workflow_id": "(Optional, string) The workflow to build", "commit_message": "(Optional, string) The commit message for the build", "commit_hash": "(Optional, string) The commit hash for the build"}, "task": "Trigger a new build for the Bitrise app with identifier 'app123' using the 'deploy_prod' workflow on the 'release/v1.2.0' branch, including the commit message 'Bug fixes and performance improvements'."}, {"name": "get_build", "server": "Bitrise", "description": "Get a specific build of a given app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build"}, "task": "Retrieve the details of a specific build with the identifier \"abc123\" for the Bitrise app identified as \"xyz789\"."}, {"name": "abort_build", "server": "Bitrise", "description": "Abort a specific build", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "reason": "(Optional, string) Reason for aborting the build"}, "task": "Abort the build with identifier \"build123\" for the Bitrise app \"app456\" due to a configuration error."}, {"name": "get_build_log", "server": "Bitrise", "description": "Get the build log of a specified build of a Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the Bitrise build"}, "task": "Retrieve the build log for the Bitrise app with identifier \"APP123\" and build identifier \"BUILD456\"."}, {"name": "get_build_bitrise_yml", "server": "Bitrise", "description": "Get the bitrise.yml of a build", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build"}, "task": "Retrieve the bitrise.yml configuration file for the build with identifier \"build123\" in the Bitrise app identified as \"app456\"."}, {"name": "list_build_workflows", "server": "Bitrise", "description": "List the workflows of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "List all the workflows associated with the Bitrise app identified by the slug \"example-app-123\"."}, {"name": "list_artifacts", "server": "Bitrise", "description": "Get a list of all build artifacts", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "next": "(Optional, string) Slug of the first artifact in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}, "task": "Retrieve a list of up to 30 build artifacts for the Bitrise app with identifier \"APP123\" and build identifier \"BUILD456\"."}, {"name": "get_artifact", "server": "Bitrise", "description": "Get a specific build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact"}, "task": "Retrieve the build artifact with identifier 'artifact123' from the Bitrise app 'myapp' for build 'build456'."}, {"name": "delete_artifact", "server": "Bitrise", "description": "Delete a build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact"}, "task": "Remove the build artifact with identifier 'artifact123' from the build 'build456' in the Bitrise app 'app789'."}, {"name": "update_artifact", "server": "Bitrise", "description": "Update a build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact", "is_public_page_enabled": "(boolean) Enable public page for the artifact"}, "task": "Update the build artifact with the identifier \"artifact123\" for the Bitrise app \"myapp\" and build \"build456\" to enable public page access."}, {"name": "list_outgoing_webhooks", "server": "Bitrise", "description": "List the outgoing webhooks of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "List all outgoing webhooks configured for the Bitrise app with the identifier \"my_app_slug\"."}, {"name": "delete_outgoing_webhook", "server": "Bitrise", "description": "Delete the outgoing webhook of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "webhook_slug": "(string) Identifier of the webhook"}, "task": "Remove the outgoing webhook with the identifier \"WH123\" from the Bitrise app identified by \"APP456\"."}, {"name": "update_outgoing_webhook", "server": "Bitrise", "description": "Update an outgoing webhook for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "webhook_slug": "(string) Identifier of the webhook", "events": "(array) List of events to trigger the webhook", "url": "(string) URL of the webhook", "headers": "(Optional, array) Headers to be sent with the webhook"}, "task": "Update the outgoing webhook for the Bitrise app with identifier 'app123' to trigger on 'build_failed' and 'build_succeeded' events, sending data to 'https://example.com/webhook' with custom headers 'Authorization: Bearer token123' and 'Content-Type: application/json'."}, {"name": "create_outgoing_webhook", "server": "Bitrise", "description": "Create an outgoing webhook for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "events": "(array) List of events to trigger the webhook", "url": "(string) URL of the webhook", "headers": "(Optional, array) Headers to be sent with the webhook"}, "task": "Create an outgoing webhook for the Bitrise app with the identifier \"my-app-slug\" that triggers on \"build_failed\" and \"build_succeeded\" events, sending requests to \"https://example.com/webhook\" with custom headers \"Authorization: Bearer token123\" and \"Content-Type: application/json\"."}, {"name": "list_cache_items", "server": "Bitrise", "description": "List the key-value cache items belonging to an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "List all key-value cache items associated with the Bitrise app identified by the slug \"my-app-123\"."}, {"name": "delete_all_cache_items", "server": "Bitrise", "description": "Delete all key-value cache items belonging to an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "Clear all cached data associated with the Bitrise application identified by the specified app slug."}, {"name": "delete_cache_item", "server": "Bitrise", "description": "Delete a key-value cache item", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "cache_item_id": "(string) Identifier of the cache item"}, "task": "Remove the cache item with ID 'abc123' from the Bitrise app identified by 'my-app-slug'."}, {"name": "get_cache_item_download_url", "server": "Bitrise", "description": "Get the download URL of a key-value cache item", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "cache_item_id": "(string) Identifier of the cache item"}, "task": "Retrieve the download URL for the cache item with ID 'abc123' in the Bitrise application 'my-app-slug'."}, {"name": "list_pipelines", "server": "Bitrise", "description": "List all pipelines and standalone builds of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}, "task": "List all pipelines and standalone builds for the Bitrise app with the identifier \"my_app_slug\"."}, {"name": "get_pipeline", "server": "Bitrise", "description": "Get a pipeline of a given app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline"}, "task": "Retrieve the pipeline configuration for the Bitrise app with the identifier \"example-app\" and pipeline ID \"pipeline-123\"."}, {"name": "abort_pipeline", "server": "Bitrise", "description": "Abort a pipeline", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline", "reason": "(Optional, string) Reason for aborting the pipeline"}, "task": "Abort the Bitrise pipeline with ID 'pipeline123' for the app identified by 'app456', providing the reason \"Unexpected error in build process\"."}, {"name": "rebuild_pipeline", "server": "Bitrise", "description": "Rebuild a pipeline", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline"}, "task": "Rebuild the Bitrise pipeline with the identifier \"pipeline123\" for the application identified by \"app456\"."}, {"name": "list_group_roles", "server": "Bitrise", "description": "List group roles for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "role_name": "(string) Name of the role"}, "task": "List all roles assigned to the group for the Bitrise app with the identifier \"my_app_slug\"."}, {"name": "replace_group_roles", "server": "Bitrise", "description": "Replace group roles for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "role_name": "(string) Name of the role", "group_slugs": "(array) List of group slugs"}, "task": "Update the role of groups in the Bitrise app with identifier \"my_app\" to \"admin\" for the groups [\"developers\", \"qa_team\"]."}, {"name": "list_workspaces", "server": "Bitrise", "description": "List the workspaces the user has access to", "parameter": {}, "task": "List all the workspaces accessible to the current user."}, {"name": "get_workspace", "server": "Bitrise", "description": "Get details for one workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}, "task": "Retrieve the details of the Bitrise workspace with the slug \"example-workspace\"."}, {"name": "get_workspace_groups", "server": "Bitrise", "description": "Get the groups in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}, "task": "Retrieve all groups within the Bitrise workspace identified by the slug \"dev-team-2024\"."}, {"name": "create_workspace_group", "server": "Bitrise", "description": "Create a group in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace", "group_name": "(string) Name of the group"}, "task": "Create a new group named \"Developers\" in the Bitrise workspace with the slug \"bitrise-dev-team\"."}, {"name": "get_workspace_members", "server": "Bitrise", "description": "Get the members in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}, "task": "List all members in the Bitrise workspace with the slug \"dev-team-2024\"."}, {"name": "invite_member_to_workspace", "server": "Bitrise", "description": "Invite a member to a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace", "email": "(string) Email address of the user"}, "task": "Invite a user with the email address \"example@domain.com\" to the Bitrise workspace identified by the slug \"dev-team-2024\"."}, {"name": "add_member_to_group", "server": "Bitrise", "description": "Add a member to a group", "parameter": {"group_slug": "(string) Slug of the group", "user_slug": "(string) Slug of the user"}, "task": "Add the user with the slug 'john_doe' to the group identified by the slug 'engineering_team'."}, {"name": "me", "server": "Bitrise", "description": "Get info from the currently authenticated user account", "parameter": {}, "task": "Retrieve the details of the currently authenticated user account."}, {"name": "create_connected_app", "server": "Bitrise", "description": "Add a new Release Management connected app to Bitrise", "parameter": {"platform": "(string) The mobile platform for the connected app (ios/android)", "store_app_id": "(string) The app store identifier for the connected app", "workspace_slug": "(string) Identifier of the Bitrise workspace", "id": "(Optional, string) An uuidV4 identifier for your new connected app", "manual_connection": "(Optional, boolean) Indicates a manual connection", "project_id": "(Optional, string) Specifies which Bitrise Project to associate with", "store_app_name": "(Optional, string) App name for manual connections", "store_credential_id": "(Optional, string) Selection of credentials added on Bitrise"}, "task": "Add a new Release Management connected app for an iOS mobile platform to the Bitrise workspace \"WS12345\" using the app store identifier \"com.example.app\". Ensure the connection is manual and provide the app name \"Example App\" for the manual connection."}, {"name": "list_connected_apps", "server": "Bitrise", "description": "List Release Management connected apps available for the authenticated account within a workspace", "parameter": {"workspace_slug": "(string) Identifier of the Bitrise workspace", "items_per_page": "(Optional, integer) Maximum number of connected apps per page", "page": "(Optional, integer) Page number to return", "platform": "(Optional, string) Filter for a specific mobile platform", "project_id": "(Optional, string) Filter for a specific Bitrise Project", "search": "(Optional, string) Search by bundle ID, package name, or app title"}, "task": "List all connected apps available in the Bitrise workspace \"dev-team-2024\" with 20 items per page, filtered for the Android platform."}, {"name": "get_connected_app", "server": "Bitrise", "description": "Gives back a Release Management connected app for the authenticated account", "parameter": {"id": "(string) Identifier of the Release Management connected app"}, "task": "Retrieve the details of the Release Management connected app with the identifier \"RM12345\" for the authenticated account."}, {"name": "update_connected_app", "server": "Bitrise", "description": "Updates a connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier for your connected app", "store_app_id": "(string) The store identifier for your app", "connect_to_store": "(Optional, boolean) Check validity against the App Store or Google Play", "store_credential_id": "(Optional, string) Selection of credentials added on Bitrise"}, "task": "Update the connected app with the identifier 'abc123' to connect to the App Store using the store credential ID 'cred456', ensuring validity is checked against the App Store."}, {"name": "list_installable_artifacts", "server": "Bitrise", "description": "List Release Management installable artifacts of a connected app", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "after_date": "(Optional, string) Start of the interval for artifact creation/upload", "artifact_type": "(Optional, string) Filter for a specific artifact type", "before_date": "(Optional, string) End of the interval for artifact creation/upload", "branch": "(Optional, string) Filter for the Bitrise CI branch", "distribution_ready": "(Optional, boolean) Filter for distribution ready artifacts", "items_per_page": "(Optional, integer) Maximum number of artifacts per page", "page": "(Optional, integer) Page number to return", "platform": "(Optional, string) Filter for a specific mobile platform", "search": "(Optional, string) Search by version, filename or build number", "source": "(Optional, string) Filter for the source of installable artifacts", "store_signed": "(Optional, boolean) Filter for store ready installable artifacts", "version": "(Optional, string) Filter for a specific version", "workflow": "(Optional, string) Filter for a specific Bitrise CI workflow"}, "task": "List installable artifacts for the connected app with ID \"APP123\" that were created between 2024-01-01 and 2024-12-31, filtered for iOS platform and distribution-ready status, returning a maximum of 20 items per page."}, {"name": "generate_installable_artifact_upload_url", "server": "Bitrise", "description": "Generates a signed upload URL for an installable artifact to be uploaded to Bitrise", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) An uuidv4 identifier for the installable artifact", "file_name": "(string) The name of the installable artifact file", "file_size_bytes": "(integer) The byte size of the installable artifact file", "branch": "(Optional, string) Name of the CI branch", "with_public_page": "(Optional, boolean) Enable public install page", "workflow": "(Optional, string) Name of the CI workflow"}, "task": "Generate a signed upload URL for an installable artifact file named \"app-release.apk\" with a size of 25MB, associated with the connected app ID \"app-12345\" and artifact ID \"a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8\". Enable the public install page and specify the workflow as \"release-build\"."}, {"name": "get_installable_artifact_upload_and_processing_status", "server": "Bitrise", "description": "Gets the processing and upload status of an installable artifact", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) The uuidv4 identifier for the installable artifact"}, "task": "Retrieve the upload and processing status of the installable artifact with UUID \"a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8\" for the connected app ID \"APP-12345\"."}, {"name": "set_installable_artifact_public_install_page", "server": "Bitrise", "description": "Changes whether public install page should be available for the installable artifact", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) The uuidv4 identifier for the installable artifact", "with_public_page": "(boolean) Boolean flag for enabling/disabling public install page"}, "task": "Enable the public install page for the installable artifact with ID 'abc123' in the connected app 'appXYZ'."}, {"name": "list_build_distribution_versions", "server": "Bitrise", "description": "Lists Build Distribution versions available for testers", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "items_per_page": "(Optional, integer) Maximum number of versions per page", "page": "(Optional, integer) Page number to return"}, "task": "List the first 10 available Build Distribution versions for the connected app with ID \"123e4567-e89b-12d3-a456-426614174000\"."}, {"name": "list_build_distribution_version_test_builds", "server": "Bitrise", "description": "Gives back a list of test builds for the given build distribution version", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "version": "(string) The version of the build distribution", "items_per_page": "(Optional, integer) Maximum number of test builds per page", "page": "(Optional, integer) Page number to return"}, "task": "Retrieve a list of test builds for version 2.5.0 of the build distribution, limited to 20 items per page, starting from page 1."}, {"name": "create_tester_group", "server": "Bitrise", "description": "Creates a tester group for a Release Management connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "name": "(string) The name for the new tester group", "auto_notify": "(Optional, boolean) Indicates automatic notifications for the group"}, "task": "Create a tester group named \"Beta Testers\" for the connected app with ID \"123e4567-e89b-12d3-a456-426614174000\" and enable automatic notifications."}, {"name": "notify_tester_group", "server": "Bitrise", "description": "Notifies a tester group about a new test build", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "test_build_id": "(string) The unique identifier of the test build"}, "task": "Notify the tester group with ID 'abc123' about the new test build 'build456' for the connected app 'app789'."}, {"name": "add_testers_to_tester_group", "server": "Bitrise", "description": "Adds testers to a tester group of a connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "user_slugs": "(array) The list of users identified by slugs to be added"}, "task": "Add 5 testers identified by their user slugs to the specified tester group for the connected app with ID 'abc123-def456'."}, {"name": "update_tester_group", "server": "Bitrise", "description": "Updates the given tester group settings", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "auto_notify": "(Optional, boolean) Setting for automatic email notifications", "name": "(Optional, string) The new name for the tester group"}, "task": "Update the tester group settings for the connected app with ID '123e4567-e89b-12d3-a456-426614174000' by enabling automatic email notifications and changing the group name to 'Beta Testers 2024'."}, {"name": "list_tester_groups", "server": "Bitrise", "description": "Gives back a list of tester groups related to a specific connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "items_per_page": "(Optional, integer) Maximum number of tester groups per page", "page": "(Optional, integer) Page number to return"}, "task": "Retrieve the first 20 tester groups associated with the connected app identified by UUID '123e4567-e89b-12d3-a456-426614174000'."}, {"name": "get_tester_group", "server": "Bitrise", "description": "Gives back the details of the selected tester group", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group"}, "task": "Retrieve the details of the tester group with the identifier 'abc123' for the connected application identified by 'xyz456'."}, {"name": "get_potential_testers", "server": "Bitrise", "description": "Gets a list of potential testers who can be added to a specific tester group", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "items_per_page": "(Optional, integer) Maximum number of potential testers per page", "page": "(Optional, integer) Page number to return", "search": "(Optional, string) Search for testers by email or username"}, "task": "Retrieve a list of potential testers for the specified tester group, limited to 20 entries per page, and search for testers with the email domain \"@example.com\"."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Box", "description": "Box云存储服务操作,包括:用户信息获取、文件搜索与读取、AI文件分析、文件夹管理、文件上传下载、文档生成模板管理及作业跟踪", "tools": [{"name": "box_who_am_i", "server": "Box", "description": "Get your current user information and check connection status.", "parameter": {}, "task": "Retrieve your current user details and verify the connection status."}, {"name": "box_authorize_app_tool", "server": "Box", "description": "Start the Box application authorization process.", "parameter": {}, "task": "Authorize the application to access the Box account."}, {"name": "box_search_tool", "server": "Box", "description": "Search for files in Box.", "parameter": {"query": "(str) The query to search for.", "file_extensions": "(List[str], optional) File extensions to filter results.", "where_to_look_for_query": "(List[str], optional) Locations to search (e.g. NAME, DESCRIPTION, FILE_CONTENT, COMMENTS, TAG).", "ancestor_folder_ids": "(List[str], optional) List of folder IDs in which to search."}, "task": "Search for all PDF files containing the keyword \"financial report\" in their names within the specified folder IDs."}, {"name": "box_read_tool", "server": "Box", "description": "Read the text content of a Box file.", "parameter": {"file_id": "(str) ID of the file to read"}, "task": "Read the text content from the Box file with ID '12345'."}, {"name": "box_ask_ai_tool", "server": "Box", "description": "Ask Box AI about a file.", "parameter": {"file_id": "(str) ID of the file", "prompt": "(str) Question for the AI"}, "task": "Ask Box AI to summarize the content of the file with ID \"F12345\" in 3 bullet points."}, {"name": "box_hubs_ask_ai_tool", "server": "Box", "description": "Ask Box AI about a hub. There is currently no way via API to discover a hub ID, so you must know the ID to use this tool. We will fix this in the future.", "parameter": {"hubs_id": "(str) ID of the hub", "prompt": "(str) Question for the AI"}, "task": "Ask Box AI about the contents of the hub with ID \"HUB12345\" by providing the question: \"What are the main categories of files stored in this hub?\""}, {"name": "box_search_folder_by_name", "server": "Box", "description": "Locate a folder by name.", "parameter": {"folder_name": "(str) Name of the folder"}, "task": "Find the folder named \"Project_Documents_2024\" in the connected storage system."}, {"name": "box_ai_extract_data", "server": "Box", "description": "Extract data from a file using AI.", "parameter": {"file_id": "(str) ID of the file", "fields": "(str) Fields to extract"}, "task": "Extract the customer name and order date from the specified document using AI."}, {"name": "box_list_folder_content_by_folder_id", "server": "Box", "description": "List folder contents.", "parameter": {"folder_id": "(str) ID of the folder", "is_recursive": "(bool) Whether to list recursively"}, "task": "List all files and subfolders within the folder with ID \"F12345\" recursively."}, {"name": "box_manage_folder_tool", "server": "Box", "description": "Create, update, or delete folders in Box.", "parameter": {"action": "(str) Action to perform: 'create', 'delete', or 'update'", "folder_id": "(str, optional) ID of the folder (required for delete/update)", "name": "(str, optional) Folder name (required for create, optional for update)", "parent_id": "(str, optional) Parent folder ID (required for create, optional for update)", "description": "(str, optional) Folder description (optional for update)", "recursive": "(bool, optional) Whether to delete recursively (optional for delete)"}, "task": "Create a new folder named \"Project_2024\" under the parent folder with ID \"12345\" and set its description to \"All project files for 2024\"."}, {"name": "box_upload_file_from_path_tool", "server": "Box", "description": "Upload a file to Box from a local filesystem path.", "parameter": {"file_path": "(str) Local file path", "folder_id": "(str, optional) Destination folder ID (defaults to '0')", "new_file_name": "(str, optional) New file name (if not provided, uses the original file name)"}, "task": "Upload the local file located at \"/documents/report.pdf\" to the Box folder with ID \"12345\" and rename it to \"Q2_Report.pdf\"."}, {"name": "box_upload_file_from_content_tool", "server": "Box", "description": "Upload content as a file to Box.", "parameter": {"content": "(str | bytes) Content to upload (text or binary)", "file_name": "(str) The name to assign the file", "folder_id": "(str, optional) Destination folder ID (defaults to '0')", "is_base64": "(bool, optional) Indicates if the provided content is base64 encoded"}, "task": "Upload a text document named \"Quarterly_Report_2024.txt\" containing the sales data for Q1 2024 to the default Box folder. Ensure the content is not base64 encoded."}, {"name": "box_download_file_tool", "server": "Box", "description": "Download a file from Box.", "parameter": {"file_id": "(str) The ID of the file to download", "save_file": "(bool, optional) Whether to save the file locally", "save_path": "(str, optional) The local path where the file should be saved"}, "task": "Download the file with ID \"12345\" from Box and save it to the local directory \"/downloads/box_files\"."}, {"name": "box_docgen_create_batch_tool", "server": "Box", "description": "Generate documents using a Box Doc Gen template and a local JSON file.", "parameter": {"file_id": "(str) Template file ID", "destination_folder_id": "(str) Folder ID where generated documents should be stored", "user_input_file_path": "(str) Path to a JSON file with input data", "output_type": "(str, optional) Output format (default is 'pdf')"}, "task": "Generate multiple documents in PDF format using the specified Box Doc Gen template and input data from a local JSON file, then save them to the designated Box folder."}, {"name": "box_docgen_get_job_tool", "server": "Box", "description": "Fetch a single Doc Gen job by its ID.", "parameter": {"job_id": "(str) The job identifier"}, "task": "Retrieve the details of a document generation job with the identifier \"JOB12345\"."}, {"name": "box_docgen_list_jobs_tool", "server": "Box", "description": "List all Doc Gen jobs associated with the current user.", "parameter": {"marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to return"}, "task": "List all document generation jobs associated with the current user, returning a maximum of 50 jobs per request."}, {"name": "box_docgen_list_jobs_by_batch_tool", "server": "Box", "description": "List Doc Gen jobs belonging to a specific batch.", "parameter": {"batch_id": "(str) The batch identifier", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to return"}, "task": "List all document generation jobs associated with batch ID \"BATCH12345,\" returning a maximum of 50 jobs per page. If a pagination marker is provided, continue from the specified position."}, {"name": "box_docgen_template_create_tool", "server": "Box", "description": "Mark a file as a Box Doc Gen template.", "parameter": {"file_id": "(str) File ID to mark as a template"}, "task": "Mark the file with ID \"12345\" as a Box Doc Gen template."}, {"name": "box_docgen_template_list_tool", "server": "Box", "description": "List all available Box Doc Gen templates.", "parameter": {"marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of templates to list"}, "task": "List all available document generation templates, retrieving a maximum of 50 templates per request. If a pagination marker is provided, continue listing from that point."}, {"name": "box_docgen_template_delete_tool", "server": "Box", "description": "Remove the Doc Gen template marking from a file.", "parameter": {"template_id": "(str) The template identifier"}, "task": "Remove the Doc Gen template marking from the file associated with template ID \"TEMPLATE_12345\"."}, {"name": "box_docgen_template_get_by_id_tool", "server": "Box", "description": "Retrieve details of a specific Doc Gen template.", "parameter": {"template_id": "(str) The template identifier"}, "task": "Retrieve the details of the document generation template with the identifier \"TMPL12345\"."}, {"name": "box_docgen_template_list_tags_tool", "server": "Box", "description": "List all tags associated with a Box Doc Gen template.", "parameter": {"template_id": "(str) The template ID", "template_version_id": "(str | None, optional) Specific version ID", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of tags to return"}, "task": "List all tags associated with the Box Doc Gen template with ID \"TMP12345,\" returning a maximum of 50 tags per page. If a pagination marker is provided, continue from the specified marker."}, {"name": "box_docgen_template_list_jobs_tool", "server": "Box", "description": "List all Doc Gen jobs that used a specific template.", "parameter": {"template_id": "(str) The template identifier", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to list"}, "task": "List all document generation jobs that used template ID \"TMPL12345\", showing a maximum of 50 jobs per page. If there are more results, use the provided pagination marker to fetch the next batch."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Chroma", "description": "Chroma collection management, including: listing, creating, peeking, getting info, counting, modifying, and deleting collections. Also includes document operations like adding, querying, retrieving, updating, and deleting documents with semantic search and filtering.", "tools": [{"name": "chroma_list_collections", "server": "Chroma", "description": "List all collections with pagination support", "parameter": {}, "task": "List all available collections with pagination support in the database."}, {"name": "chroma_create_collection", "server": "Chroma", "description": "Create a new collection with optional HNSW configuration", "parameter": {}, "task": "Create a new collection with HNSW configuration for efficient similarity search."}, {"name": "chroma_peek_collection", "server": "Chroma", "description": "View a sample of documents in a collection", "parameter": {}, "task": "View a sample of 10 documents from the specified collection."}, {"name": "chroma_get_collection_info", "server": "Chroma", "description": "Get detailed information about a collection", "parameter": {}, "task": "Retrieve the detailed metadata and statistics for the specified collection in the vector database."}, {"name": "chroma_get_collection_count", "server": "Chroma", "description": "Get the number of documents in a collection", "parameter": {}, "task": "Count the number of documents in the specified collection."}, {"name": "chroma_modify_collection", "server": "Chroma", "description": "Update a collection's name or metadata", "parameter": {}, "task": "Update the metadata of an existing collection to include additional descriptive tags and categories."}, {"name": "chroma_delete_collection", "server": "Chroma", "description": "Delete a collection", "parameter": {}, "task": "Delete the specified collection from the Chroma database."}, {"name": "chroma_add_documents", "server": "Chroma", "description": "Add documents with optional metadata and custom IDs", "parameter": {}, "task": "Add a collection of documents to the database with optional metadata and custom identifiers."}, {"name": "chroma_query_documents", "server": "Chroma", "description": "Query documents using semantic search with advanced filtering", "parameter": {}, "task": "Retrieve semantically similar documents from the collection based on the provided query text."}, {"name": "chroma_get_documents", "server": "Chroma", "description": "Retrieve documents by IDs or filters with pagination", "parameter": {}, "task": "Retrieve the first 10 documents from the collection that match the filter criteria for category \"research papers.\""}, {"name": "chroma_update_documents", "server": "Chroma", "description": "Update existing documents' content, metadata, or embeddings", "parameter": {}, "task": "Update the content and metadata of existing documents in the Chroma database."}, {"name": "chroma_delete_documents", "server": "Chroma", "description": "Delete specific documents from a collection", "parameter": {}, "task": "Remove all documents from the specified collection in the Chroma database."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "CircleCI", "description": "1. Retrieve CircleCI build failure logs 2. Identify flaky tests in CircleCI projects 3. Get latest pipeline status for a branch 4. Retrieve test metadata for CircleCI jobs 5. Assist with CircleCI configuration tasks 6. Generate structured prompt templates for AI applications 7. Generate test cases for prompt templates", "tools": [{"name": "get_build_failure_logs", "server": "CircleCI", "description": "Retrieves detailed failure logs from CircleCI builds. Can be used with CircleCI URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI URL or a combination of workspace root path, Git remote URL, and branch name"}, "task": "Retrieve the detailed failure logs for the CircleCI build associated with the Git repository located at `/home/user/projects/app` with the remote URL `https://github.com/org/app.git` on the `feature/login` branch."}, {"name": "find_flaky_tests", "server": "CircleCI", "description": "Identifies flaky tests in a CircleCI project by analyzing test execution history. Can be used with CircleCI project URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI project URL or a combination of workspace root path and Git remote URL"}, "task": "Identify flaky tests in the CircleCI project located at the specified workspace root path and Git remote URL combination."}, {"name": "get_latest_pipeline_status", "server": "CircleCI", "description": "Retrieves the status of the latest pipeline for a given branch. Can be used with CircleCI project URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI project URL or a combination of workspace root path, Git remote URL, and branch name"}, "task": "Retrieve the status of the latest pipeline for the 'main' branch in the specified CircleCI project."}, {"name": "get_job_test_results", "server": "CircleCI", "description": "Retrieves test metadata for CircleCI jobs. Can be used with CircleCI URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI URL (job, workflow, or pipeline) or a combination of workspace root path, Git remote URL, and branch name"}, "task": "Retrieve the test metadata for the CircleCI job associated with the workspace located at `/projects/my-app`, Git remote URL `https://github.com/my-org/my-app.git`, and branch `feature/login`."}, {"name": "config_helper", "server": "CircleCI", "description": "Assists with CircleCI configuration tasks by providing guidance and validation. Can validate CircleCI config files.", "parameter": {"config_path": "(string) Path to the .circleci/config.yml file"}, "task": "Validate the CircleCI configuration file located at `.circleci/config.yml` for any syntax errors or misconfigurations."}, {"name": "create_prompt_template", "server": "CircleCI", "description": "Helps generate structured prompt templates for AI-enabled applications based on feature requirements.", "parameter": {"requirements": "(string) User requirements for the prompt template"}, "task": "Generate a structured prompt template for an AI application that assists users in summarizing research papers based on their key findings and methodology."}, {"name": "recommend_prompt_template_tests", "server": "CircleCI", "description": "Generates test cases for prompt templates to ensure they produce expected results.", "parameter": {"template": "(string) The prompt template to generate tests for"}, "task": "Generate test cases for the prompt template designed to summarize news articles, ensuring it produces concise and accurate summaries."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "ClickHouse", "description": "1.在ClickHouse集群上执行SQL查询 2.列出ClickHouse集群中的所有数据库 3.列出数据库中的所有表", "tools": [{"name": "run_select_query", "server": "ClickHouse", "description": "Execute SQL queries on your ClickHouse cluster.", "parameter": {"sql": "(string) The SQL query to execute."}, "task": "Retrieve the top 10 highest-grossing products from the sales table in the ClickHouse database for Q1 2024."}, {"name": "list_databases", "server": "ClickHouse", "description": "List all databases on your ClickHouse cluster.", "parameter": {}, "task": "List all available databases in the connected ClickHouse cluster."}, {"name": "list_tables", "server": "ClickHouse", "description": "List all tables in a database.", "parameter": {"database": "(string) The name of the database."}, "task": "List all tables in the \"customer_records\" database."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Codacy", "description": "Codacy代码质量分析工具集，包括：组织与仓库管理、代码质量指标分析（Grade, Issues, Duplication, Complexity, Coverage）、安全风险管理（SRM）、Pull Request分析、代码分析工具管理、本地CLI分析", "tools": [{"name": "codacy_list_organizations", "server": "Codacy", "description": "List organizations with pagination support.", "parameter": {}, "task": "List all organizations with pagination support."}, {"name": "codacy_list_organization_repositories", "server": "Codacy", "description": "List repositories in an organization with pagination support.", "parameter": {}, "task": "List all repositories in the specified organization with pagination support."}, {"name": "codacy_get_repository_with_analysis", "server": "Codacy", "description": "Get repository with analysis information, including metrics for Grade, Issues, Duplication, Complexity, and Coverage.", "parameter": {}, "task": "Retrieve the latest analysis metrics for a specified repository, including Grade, Issues, Duplication, Complexity, and Coverage."}, {"name": "codacy_list_repository_issues", "server": "Codacy", "description": "Lists and filters code quality issues in a repository. This is the primary tool for investigating general code quality concerns (e.g., best practices, performance, complexity, style) but NOT security issues. For security-related issues, use the SRM items tool instead.", "parameter": {"severity": "(Optional, string) Filter by issue severity", "category": "(Optional, string) Filter by issue category", "language": "(Optional, string) Filter by programming language", "author": "(Optional, string) Filter by author", "branch": "(Optional, string) Specify the branch for analysis", "pattern": "(Optional, string) Pattern-based searching"}, "task": "List all code quality issues in the repository's `main` branch that are categorized as \"performance\" and written in Python."}, {"name": "codacy_list_files", "server": "Codacy", "description": "List files in a repository with pagination support.", "parameter": {}, "task": "List all files in the specified repository with pagination support, displaying the first 20 files."}, {"name": "codacy_get_file_issues", "server": "Codacy", "description": "Get the issue list for a file in a repository.", "parameter": {}, "task": "Retrieve the list of issues for the main.py file in the specified repository."}, {"name": "codacy_get_file_coverage", "server": "Codacy", "description": "Get coverage information for a file in the head commit of a repository branch.", "parameter": {}, "task": "Retrieve the coverage details for the latest commit in the main branch of the specified repository."}, {"name": "codacy_get_file_clones", "server": "Codacy", "description": "Get the list of duplication clones (identical or very similar code segments) for a file in a repository.", "parameter": {}, "task": "Retrieve the list of duplicated or highly similar code segments for the main.py file in the specified repository."}, {"name": "codacy_get_file_with_analysis", "server": "Codacy", "description": "Get detailed analysis information for a file, including metrics for Grade, Issues, Duplication, Complexity, and Coverage.", "parameter": {}, "task": "Retrieve the detailed analysis report for a specific file, including metrics for Grade, Issues, Duplication, Complexity, and Coverage."}, {"name": "codacy_search_organization_srm_items", "server": "Codacy", "description": "Primary tool to list security items/issues/vulnerabilities/findings across an organization. Results are related to the organization's security and risk management (SRM) dashboard on Codacy.", "parameter": {}, "task": "List all security vulnerabilities and findings across the organization's security and risk management dashboard."}, {"name": "codacy_search_repository_srm_items", "server": "Codacy", "description": "List security items/issues/vulnerabilities/findings for a specific repository.", "parameter": {}, "task": "List all security vulnerabilities and issues found in the specified repository."}, {"name": "codacy_list_repository_pull_requests", "server": "Codacy", "description": "List pull requests from a repository that the user has access to.", "parameter": {}, "task": "List all pull requests from the repository that the user has access to on Codacy."}, {"name": "codacy_get_repository_pull_request", "server": "Codacy", "description": "Get detailed information about a specific pull request.", "parameter": {}, "task": "Retrieve detailed information about the latest pull request in the specified repository."}, {"name": "codacy_list_pull_request_issues", "server": "Codacy", "description": "Returns a list of issues found in a pull request (new or fixed issues).", "parameter": {}, "task": "List all the issues (both new and fixed) identified in the latest pull request."}, {"name": "codacy_get_pull_request_files_coverage", "server": "Codacy", "description": "Get diff coverage information for all files in a pull request.", "parameter": {}, "task": "Retrieve the diff coverage details for all files included in the latest pull request."}, {"name": "codacy_get_pull_request_git_diff", "server": "Codacy", "description": "Returns the human-readable Git diff of a pull request.", "parameter": {}, "task": "Generate a human-readable Git diff for the latest pull request in the repository."}, {"name": "codacy_list_tools", "server": "Codacy", "description": "List all code analysis tools available in Codacy.", "parameter": {}, "task": "List all available code analysis tools in the Codacy platform."}, {"name": "codacy_list_repository_tools", "server": "Codacy", "description": "Get analysis tools settings and available tools for a repository.", "parameter": {}, "task": "List the available analysis tools and their settings for the specified repository in Codacy."}, {"name": "codacy_get_pattern", "server": "Codacy", "description": "Get the definition of a specific pattern.", "parameter": {}, "task": "Retrieve the detailed definition of a specified code analysis pattern."}, {"name": "codacy_list_repository_tool_patterns", "server": "Codacy", "description": "List the patterns of a tool available for a repository.", "parameter": {}, "task": "List all available patterns for the specified repository's code analysis tool."}, {"name": "codacy_get_issue", "server": "Codacy", "description": "Get detailed information about a specific issue.", "parameter": {}, "task": "Retrieve detailed information about the latest reported issue in the codebase."}, {"name": "codacy_cli_analyze", "server": "Codacy", "description": "Run quality analysis locally using Codacy CLI. Features include analyzing specific files or entire directories, using specific tools or all available tools, getting immediate results without waiting for scheduled analysis, and applying fixes based on Codacy configuration.", "parameter": {}, "task": "Analyze the code quality of the entire project directory using all available tools and provide immediate results."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "CodeLogic", "description": "1.从CodeLogic服务器API获取指定代码方法和类的影响评估 2.分析代码和数据库实体之间的影响", "tools": [{"name": "codelogic-method-impact", "server": "CodeLogic", "description": "Pulls an impact assessment from the CodeLogic server's APIs for the specified code method and class.", "parameter": {"method": "(string) The method that you're working on", "class": "(string) The class associated with the method"}, "task": "Assess the impact of the `calculateRevenue` method within the `FinancialReport` class on the CodeLogic server."}, {"name": "codelogic-database-impact", "server": "CodeLogic", "description": "Analyzes impacts between code and database entities.", "parameter": {"entity_type": "(string) The type of database entity (column, table, or view)", "entity_name": "(string) The name of the database entity"}, "task": "Analyze the impact of changes on the 'customer_data' table within the database schema."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Comet Opik", "description": "1.管理提示词（创建、列表、更新、删除） 2.组织和管理项目/工作区 3.跟踪和分析追踪数据 4.收集和查询指标数据", "tools": [{"name": "Prompts Management", "server": "Comet Opik", "description": "Create, list, update, and delete prompts", "parameter": {}, "task": "Manage the list of available prompts by updating outdated entries and removing unused ones."}, {"name": "Projects/Workspaces Management", "server": "Comet Opik", "description": "Organize and manage projects", "parameter": {}, "task": "Organize all active projects into categorized workspaces based on their current status and priority levels."}, {"name": "Traces", "server": "Comet Opik", "description": "Track and analyze trace data", "parameter": {}, "task": "Analyze the trace data collected over the past 24 hours to identify any anomalies or performance bottlenecks."}, {"name": "Metrics", "server": "Comet Opik", "description": "Gather and query metrics data", "parameter": {}, "task": "Gather and analyze the latest system performance metrics over the past 24 hours."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Couchbase", "description": "Couchbase数据库操作,包括:获取作用域和集合列表、获取集合结构、通过ID获取/更新/删除文档、执行SQL++查询", "tools": [{"name": "get_scopes_and_collections", "server": "Couchbase", "description": "Get a list of all the scopes and collections in the specified bucket.", "parameter": {}, "task": "Retrieve all scopes and collections from the currently connected bucket."}, {"name": "get_collection_structure", "server": "Couchbase", "description": "Get the structure for a collection.", "parameter": {}, "task": "Retrieve the schema definition for the specified database collection."}, {"name": "get_document_by_id", "server": "Couchbase", "description": "Get a document by ID from a specified scope and collection.", "parameter": {}, "task": "Retrieve the document with ID '12345' from the 'customer_records' collection in the 'sales_database' scope."}, {"name": "upsert_document_by_id", "server": "Couchbase", "description": "Upsert a document by ID to a specified scope and collection.", "parameter": {}, "task": "Update or insert a document with the ID \"user_12345\" into the \"customers\" collection within the \"ecommerce\" scope. Ensure the document contains the latest customer details including name, email, and purchase history."}, {"name": "delete_document_by_id", "server": "Couchbase", "description": "Delete a document by ID from a specified scope and collection.", "parameter": {}, "task": "Delete the document with ID 'DOC123' from the 'invoices' collection in the '2024_records' scope."}, {"name": "run_sqlpp_query", "server": "Couchbase", "description": "Run a SQL++ query on a specified scope. The `READ_ONLY_QUERY_MODE` environment variable controls whether data-modifying queries are allowed.", "parameter": {}, "task": "Run a read-only SQL++ query to retrieve all customer records from the e-commerce database."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Dart", "description": "1. Get user space configuration 2. List, create, retrieve, update, and delete tasks with filtering options 3. List, create, retrieve, update, and delete docs with filtering options", "tools": [{"name": "get_config", "server": "Dart", "description": "Get information about the user's space, including available assignees, dartboards, folders, statuses, tags, priorities, and sizes", "parameter": {}, "task": "Retrieve the list of available assignees, statuses, and priorities from the user's workspace configuration."}, {"name": "list_tasks", "server": "Dart", "description": "List tasks with optional filtering by assignee, status, dartboard, priority, due date, and more", "parameter": {}, "task": "List all tasks assigned to 'John Doe' with a status of 'In Progress' and a priority level of 'High'."}, {"name": "create_task", "server": "Dart", "description": "Create a new task with title, description, status, priority, size, dates, dartboard, assignees, tags, and parent task", "parameter": {}, "task": "Create a new task titled \"Website Redesign\" with the description \"Redesign the company homepage to improve user experience,\" set the status to \"In Progress,\" priority to \"High,\" size to \"Medium,\" due date to \"2024-12-15,\" assign it to the \"Design Team,\" and tag it with \"UI\" and \"Frontend.\""}, {"name": "get_task", "server": "Dart", "description": "Retrieve an existing task by its ID", "parameter": {}, "task": "Retrieve the details of the task with ID \"TASK12345\"."}, {"name": "update_task", "server": "Dart", "description": "Update an existing task's properties", "parameter": {}, "task": "Update the due date of the current task to 2024-12-31."}, {"name": "delete_task", "server": "Dart", "description": "Move a task to the trash (recoverable)", "parameter": {}, "task": "Move the specified task to the trash for potential recovery later."}, {"name": "list_docs", "server": "Dart", "description": "List docs with optional filtering by folder, title, text content, and more", "parameter": {}, "task": "List all documents in the \"Project_Reports\" folder that contain the keyword \"Q2_2024\" in their title or content."}, {"name": "create_doc", "server": "Dart", "description": "Create a new doc with title, text content, and folder", "parameter": {}, "task": "Create a new document titled \"Project Plan\" with the content \"Outline the project milestones and deliverables\" in the \"Work\" folder."}, {"name": "get_doc", "server": "Dart", "description": "Retrieve an existing doc by its ID", "parameter": {}, "task": "Retrieve the document with ID \"DOC-2024-001\" from the database."}, {"name": "update_doc", "server": "Dart", "description": "Update an existing doc's properties", "parameter": {}, "task": "Update the title of the existing document to \"Project Report Q3 2024\" and modify the access permissions to \"View Only\" for external collaborators."}, {"name": "delete_doc", "server": "Dart", "description": "Move a doc to the trash (recoverable)", "parameter": {}, "task": "Move the specified document to the trash for potential recovery later."}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}, {"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "DevHub", "description": "1.获取DevHub账户中的所有业务信息 2.获取特定业务的所有位置信息 3.获取DevHub位置的营业时间 4.更新DevHub位置的营业时间 5.根据地理坐标查找最近的DevHub位置 6.从URL获取DevHub站点ID和详细信息 7.按ID检索博客文章 8.创建新的博客文章 9.更新现有博客文章的标题和/或内容 10.将图像上传到DevHub媒体库", "tools": [{"name": "get_businesses", "server": "DevHub", "description": "Gets all businesses within the DevHub account. Returns a list of businesses with their IDs and names.", "parameter": {}, "task": "Retrieve the list of all businesses associated with the DevHub account, including their IDs and names."}, {"name": "get_locations", "server": "DevHub", "description": "Gets all locations for a specific business. Returns detailed location information including address, coordinates, and URLs.", "parameter": {"business_id": "(string) The ID of the business."}, "task": "Retrieve the detailed location information including address, coordinates, and URLs for the business with ID \"B12345\"."}, {"name": "get_hours_of_operation", "server": "DevHub", "description": "Gets the hours of operation for a specific DevHub location. Returns a structured list of time ranges for each day of the week.", "parameter": {"location_id": "(string) The ID of the location.", "hours_type": "(Optional, string) The type of hours to retrieve, default is 'primary'."}, "task": "Retrieve the primary hours of operation for the DevHub location with ID 'LOC123'."}, {"name": "update_hours", "server": "DevHub", "description": "Updates the hours of operation for a DevHub location.", "parameter": {"location_id": "(string) The ID of the location.", "new_hours": "(dict) The new hours of operation.", "hours_type": "(Optional, string) The type of hours to update, default is 'primary'."}, "task": "Update the primary hours of operation for the DevHub location with ID 'LOC123' to the following schedule: Monday to Friday from 9:00 AM to 5:00 PM, and closed on weekends."}, {"name": "get_nearest_location", "server": "DevHub", "description": "Finds the nearest DevHub location based on geographic coordinates.", "parameter": {"business_id": "(string) The ID of the business.", "latitude": "(float) The latitude coordinate.", "longitude": "(float) The longitude coordinate."}, "task": "Find the nearest DevHub location for business ID \"B12345\" using the geographic coordinates 40.7128° N latitude and 74.0060° W longitude."}, {"name": "site_from_url", "server": "DevHub", "description": "Gets the DevHub site ID and details from a URL. Returns site ID, URL, and associated location IDs.", "parameter": {"url": "(string) The URL of the DevHub site."}, "task": "Retrieve the site ID, URL, and associated location IDs for the DevHub site at \"https://example.devhub.com\"."}, {"name": "get_blog_post", "server": "DevHub", "description": "Retrieves a single blog post by ID, including its title, date, and HTML content.", "parameter": {"post_id": "(string) The ID of the blog post."}, "task": "Retrieve the blog post with ID \"abc123\" including its title, publication date, and HTML content."}, {"name": "create_blog_post", "server": "DevHub", "description": "Creates a new blog post. The content should be in HTML format and should not include an H1 tag.", "parameter": {"site_id": "(string) The ID of the site where the blog post will be created.", "title": "(string) The title of the blog post.", "content": "(string) The HTML content of the blog post."}, "task": "Create a new blog post titled \"The Future of Renewable Energy\" with HTML-formatted content discussing solar and wind energy advancements, excluding an H1 tag, for the site with ID \"green-tech-blog\"."}, {"name": "update_blog_post", "server": "DevHub", "description": "Updates an existing blog post's title and/or content.", "parameter": {"post_id": "(string) The ID of the blog post.", "title": "(Optional, string) The new title of the blog post.", "content": "(Optional, string) The new HTML content of the blog post."}, "task": "Update the blog post with ID \"12345\" by changing its title to \"New Trends in Technology\" and its content to include the latest advancements in AI and machine learning."}, {"name": "upload_image", "server": "DevHub", "description": "Uploads an image to the DevHub media gallery. Supports webp, jpeg, and png formats. The image must be provided as a base64-encoded string.", "parameter": {"base64_image_content": "(string) The base64-encoded content of the image.", "filename": "(string) The filename of the image."}, "task": "Upload a JPEG image named \"profile_picture.jpg\" to the DevHub media gallery, ensuring it is provided as a base64-encoded string."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Dynatrace", "description": "1.列出Kubernetes等服务的问题详情 2.列出和检索安全问题和漏洞详情 3.执行DQL查询获取事件或日志 4.使用Slack Connector发送Slack消息 5.使用Dynatrace Automation Engine设置通知工作流 6.检索实体的所有权信息", "tools": [{"name": "list_problems", "server": "Dynatrace", "description": "Lists problem details from your services, such as Kubernetes.", "parameter": {}, "task": "List the problem details from the Kubernetes services in your environment."}, {"name": "get_security_problems", "server": "Dynatrace", "description": "Lists and retrieves security problems or vulnerability details.", "parameter": {}, "task": "List and retrieve details of all security problems or vulnerabilities currently identified in the system."}, {"name": "execute_dql", "server": "Dynatrace", "description": "Executes DQL (Dynatrace Query Language) queries to fetch events or logs.", "parameter": {}, "task": "Query the last 50 error events from the Dynatrace monitoring system using DQL."}, {"name": "send_slack_message", "server": "Dynatrace", "description": "Sends Slack messages using the Slack Connector.", "parameter": {}, "task": "Send a message to the designated Slack channel with the content \"Reminder: Team meeting at 2 PM today.\""}, {"name": "set_up_notification_workflow", "server": "Dynatrace", "description": "Sets up notification workflows using the Dynatrace Automation Engine.", "parameter": {}, "task": "Set up a notification workflow in the Dynatrace Automation Engine to alert the team when specific system events occur."}, {"name": "get_ownership", "server": "Dynatrace", "description": "Retrieves ownership information of an entity.", "parameter": {}, "task": "Retrieve the ownership details of the specified entity."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "EduBase", "description": "Retrieve user information from the EduBase platform", "tools": [{"name": "edubase_get_user", "server": "EduBase", "description": "Retrieves user information from the EduBase platform.", "parameter": {}, "task": "Retrieve the current user's profile details from the EduBase platform."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Elasticsearch", "description": "Elasticsearch operations, including: listing indices, getting field mappings, performing searches with query DSL, and retrieving shard information", "tools": [{"name": "list_indices", "server": "Elasticsearch", "description": "List all available Elasticsearch indices", "parameter": {}, "task": "List all available indices in the connected Elasticsearch cluster."}, {"name": "get_mappings", "server": "Elasticsearch", "description": "Get field mappings for a specific Elasticsearch index", "parameter": {}, "task": "Retrieve the field mappings for the Elasticsearch index named \"customer_data_2024\"."}, {"name": "search", "server": "Elasticsearch", "description": "Perform an Elasticsearch search with the provided query DSL", "parameter": {}, "task": "Search for documents in the Elasticsearch index matching the query \"error logs from the last 24 hours\"."}, {"name": "get_shards", "server": "Elasticsearch", "description": "Get shard information for all or specific indices", "parameter": {}, "task": "Retrieve the shard details for all indices in the Elasticsearch cluster."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "eSignatures", "description": "Contract management operations including: create/query/withdraw/delete contracts, create/update/query/delete templates, and manage template collaborators", "tools": [{"name": "create_contract", "server": "eSignatures", "description": "Draft for review or send contract", "parameter": {}, "task": "Draft a contract for review between two parties regarding a service agreement."}, {"name": "query_contract", "server": "eSignatures", "description": "Retrieve contract info", "parameter": {}, "task": "Retrieve the latest contract details for the current fiscal year."}, {"name": "withdraw_contract", "server": "eSignatures", "description": "Withdraw an unsigned contract", "parameter": {}, "task": "Withdraw the unsigned contract from the current negotiation process."}, {"name": "delete_contract", "server": "eSignatures", "description": "Delete a draft or test contract", "parameter": {}, "task": "Delete a draft contract that is no longer needed."}, {"name": "list_recent_contracts", "server": "eSignatures", "description": "List the recent contracts", "parameter": {}, "task": "List the most recent 10 contracts signed in the past month."}, {"name": "create_template", "server": "eSignatures", "description": "Create a new contract template", "parameter": {}, "task": "Create a new contract template for a standard employment agreement."}, {"name": "update_template", "server": "eSignatures", "description": "Update an existing template", "parameter": {}, "task": "Update the content and layout of an existing template to reflect the latest branding guidelines. Ensure all placeholders and dynamic elements are correctly configured."}, {"name": "query_template", "server": "eSignatures", "description": "Retrieve template content and info", "parameter": {}, "task": "Retrieve the latest version of the marketing email template."}, {"name": "delete_template", "server": "eSignatures", "description": "Delete a template", "parameter": {}, "task": "Delete the specified template from the system."}, {"name": "list_templates", "server": "eSignatures", "description": "List all your templates", "parameter": {}, "task": "List all available templates in your account."}, {"name": "add_template_collaborator", "server": "eSignatures", "description": "Invite someone to edit a template", "parameter": {}, "task": "Invite a collaborator to edit the shared template document."}, {"name": "remove_template_collaborator", "server": "eSignatures", "description": "Revoke template editing rights", "parameter": {}, "task": "Revoke editing rights for all collaborators associated with the selected template."}, {"name": "list_template_collaborators", "server": "eSignatures", "description": "View who can edit a template", "parameter": {}, "task": "List all collaborators who have editing permissions for the current template."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Exa", "description": "1.实时网页搜索与内容提取 2.学术论文与研究内容搜索 3.公司信息爬取与研究 4.特定URL内容提取 5.竞争对手查找 6.LinkedIn公司及人员搜索 7.Wikipedia信息检索 8.GitHub仓库搜索", "tools": [{"name": "web_search_exa", "server": "Exa", "description": "Performs real-time web searches with optimized results and content extraction.", "parameter": {}, "task": "Search for the latest advancements in renewable energy technologies and extract key findings."}, {"name": "research_paper_search", "server": "Exa", "description": "Specialized search focused on academic papers and research content.", "parameter": {}, "task": "Search for academic papers related to quantum computing published in the last 5 years."}, {"name": "company_research", "server": "Exa", "description": "Comprehensive company research tool that crawls company websites to gather detailed information about businesses.", "parameter": {}, "task": "Research and gather detailed information about the latest products and services offered by the company from its official website."}, {"name": "crawling", "server": "Exa", "description": "Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL.", "parameter": {}, "task": "Extract the main content from the provided URL of a news article."}, {"name": "competitor_finder", "server": "Exa", "description": "Identifies competitors of a company by searching for businesses offering similar products or services.", "parameter": {}, "task": "Identify the top 5 competitors of a company specializing in cloud-based project management software."}, {"name": "linkedin_search", "server": "Exa", "description": "Search LinkedIn for companies and people using Exa AI. Simply include company names, person names, or specific LinkedIn URLs in your query.", "parameter": {}, "task": "Search for the LinkedIn profile of a software engineer named \"John Smith\" who works at Google."}, {"name": "wikipedia_search_exa", "server": "Exa", "description": "Search and retrieve information from Wikipedia articles on specific topics, giving you accurate, structured knowledge from the world's largest encyclopedia.", "parameter": {}, "task": "Search for detailed information about the history of the Roman Empire on Wikipedia."}, {"name": "github_search", "server": "Exa", "description": "Search GitHub repositories using Exa AI - performs real-time searches on GitHub.com to find relevant repositories, issues, and GitHub accounts.", "parameter": {}, "task": "Search for repositories related to machine learning models on GitHub."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Fewsats", "description": "1. Retrieve the balance of the user's wallet 2. Retrieve the user's payment methods 3. Pay an offer with the specified ID from the l402_offers 4. Retrieve the details of a payment", "tools": [{"name": "balance", "server": "Fewsats", "description": "Retrieve the balance of the user's wallet", "parameter": {}, "task": "Check the current balance in the user's wallet."}, {"name": "payment_methods", "server": "Fewsats", "description": "Retrieve the user's payment methods", "parameter": {}, "task": "Retrieve the list of available payment methods for the current user."}, {"name": "pay_offer", "server": "Fewsats", "description": "Pays an offer with the specified ID from the l402_offers", "parameter": {"offer_id": "(string) String identifier for the offer", "l402_offer": "(object) Offer details containing: offers (Array of offer objects with ID, amount, currency, description, title), payment_context_token (Payment context token string), payment_request_url (URL for payment request), version (API version string)"}, "task": "Pay the offer with ID \"offer123\" from the l402_offers, ensuring the payment includes the specified amount, currency, and description as detailed in the offer object. Use the provided payment context token and payment request URL to complete the transaction. Verify the API version matches the required version for the payment process."}, {"name": "payment_info", "server": "Fewsats", "description": "Retrieve the details of a payment", "parameter": {"pid": "(string) Payment ID to retrieve information for"}, "task": "Retrieve the details of the payment with ID 'PAY123456789'."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Fibery", "description": "Fibery workspace operations, including: list databases, describe database structure, query database, create/update entities", "tools": [{"name": "list_databases", "server": "Fibery", "description": "Retrieves a list of all databases available in your Fibery workspace.", "parameter": {}, "task": "Retrieve a list of all available databases in the current Fibery workspace."}, {"name": "describe_database", "server": "Fibery", "description": "Provides a detailed breakdown of a specific database's structure, showing all fields with their titles, names, and types.", "parameter": {}, "task": "Generate a detailed breakdown of the current database structure, including all fields with their titles, names, and types."}, {"name": "query_database", "server": "Fibery", "description": "Offers powerful, flexible access to your Fibery data through the Fibery API.", "parameter": {}, "task": "Retrieve all project records created in the last 30 days from the Fibery workspace."}, {"name": "create_entity", "server": "Fibery", "description": "Creates new entities in your Fibery workspace with specified field values.", "parameter": {}, "task": "Create a new entity in your Fibery workspace with the following details: title \"Project Alpha\", status \"In Progress\", and assignee \"John Doe\"."}, {"name": "create_entities_batch", "server": "Fibery", "description": "Creates multiple new entities in your Fibery workspace with specified field values.", "parameter": {}, "task": "Create 10 new entities in the Fibery workspace with predefined field values for a project management system."}, {"name": "update_entity", "server": "Fibery", "description": "Updates existing entities in your Fibery workspace with new field values.", "parameter": {}, "task": "Update the priority field of an existing task in your Fibery workspace to \"High\"."}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Financial Datasets", "description": "1.获取公司财务报表（收入、资产负债表、现金流量表） 2.获取公司股票价格（当前和历史） 3.获取公司新闻 4.获取加密货币行情（当前和历史价格）", "tools": [{"name": "get_income_statements", "server": "Financial Datasets", "description": "Get income statements for a company.", "parameter": {}, "task": "Retrieve the income statements for the specified company for the last fiscal year."}, {"name": "get_balance_sheets", "server": "Financial Datasets", "description": "Get balance sheets for a company.", "parameter": {}, "task": "Retrieve the balance sheets for the specified company for the last fiscal year."}, {"name": "get_cash_flow_statements", "server": "Financial Datasets", "description": "Get cash flow statements for a company.", "parameter": {}, "task": "Retrieve the cash flow statements for the most recent fiscal year for a specified company."}, {"name": "get_current_stock_price", "server": "Financial Datasets", "description": "Get the current / latest price of a company.", "parameter": {}, "task": "Get the latest stock price for Apple Inc."}, {"name": "get_historical_stock_prices", "server": "Financial Datasets", "description": "Gets historical stock prices for a company.", "parameter": {}, "task": "Retrieve the historical stock prices for Apple Inc. over the past 5 years."}, {"name": "get_company_news", "server": "Financial Datasets", "description": "Get news for a company.", "parameter": {}, "task": "Retrieve the latest news articles related to the specified company."}, {"name": "get_available_crypto_tickers", "server": "Financial Datasets", "description": "Gets all available crypto tickers.", "parameter": {}, "task": "Retrieve the list of all currently available cryptocurrency tickers."}, {"name": "get_crypto_prices", "server": "Financial Datasets", "description": "Gets historical prices for a crypto currency.", "parameter": {}, "task": "Retrieve the historical price data for Bitcoin over the past 30 days."}, {"name": "get_historical_crypto_prices", "server": "Financial Datasets", "description": "Gets historical prices for a crypto currency.", "parameter": {}, "task": "Retrieve the historical price data for Bitcoin over the past 30 days."}, {"name": "get_current_crypto_price", "server": "Financial Datasets", "description": "Get the current / latest price of a crypto currency.", "parameter": {}, "task": "Check the latest price of Bitcoin."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Firecrawl", "description": "Firecrawl web data acquisition tools, including: single URL scraping, batch URL scraping with rate limiting, batch operation status checking, web search with content extraction, asynchronous crawling, structured information extraction using LLM, deep web research with LLM analysis, and llms.txt file generation", "tools": [{"name": "firecrawl_scrape", "server": "Firecrawl", "description": "Scrape content from a single URL with advanced options.", "parameter": {"url": "(string) The URL to scrape", "formats": "(array) List of formats to return (e.g., ['markdown'])", "onlyMainContent": "(boolean) Whether to only return the main content", "waitFor": "(number) Time to wait for page elements to load (in milliseconds)", "timeout": "(number) Maximum time to wait for the scrape to complete (in milliseconds)", "mobile": "(boolean) Whether to simulate a mobile device", "includeTags": "(array) List of tags to include in the scrape", "excludeTags": "(array) List of tags to exclude from the scrape", "skipTlsVerification": "(boolean) Whether to skip TLS verification"}, "task": "Scrape the main content in markdown format from the specified URL, waiting 5000 milliseconds for page elements to load and skipping TLS verification."}, {"name": "firecrawl_batch_scrape", "server": "Firecrawl", "description": "Scrape multiple URLs efficiently with built-in rate limiting and parallel processing.", "parameter": {"urls": "(array) List of URLs to scrape", "options": "(object) Additional options for the scrape"}, "task": "Scrape the content from the following URLs: [\"https://example.com/page1\", \"https://example.com/page2\", \"https://example.com/page3\"], using parallel processing and rate limiting."}, {"name": "firecrawl_check_batch_status", "server": "Firecrawl", "description": "Check the status of a batch operation.", "parameter": {"id": "(string) The ID of the batch operation to check"}, "task": "Check the status of the batch operation with ID \"batch-12345\"."}, {"name": "firecrawl_search", "server": "Firecrawl", "description": "Search the web and optionally extract content from search results.", "parameter": {"query": "(string) The search query", "limit": "(number) Maximum number of results to return", "lang": "(string) Language of the search results", "country": "(string) Country code for the search results", "scrapeOptions": "(object) Additional options for scraping the search results"}, "task": "Search for the latest advancements in renewable energy technology, returning up to 5 results in English from the United States, and extract the main content from each result."}, {"name": "firecrawl_crawl", "server": "Firecrawl", "description": "Start an asynchronous crawl with advanced options.", "parameter": {"url": "(string) The starting URL for the crawl", "maxDepth": "(number) Maximum recursive depth for the crawl", "limit": "(number) Maximum number of URLs to crawl", "allowExternalLinks": "(boolean) Whether to follow external links", "deduplicateSimilarURLs": "(boolean) Whether to deduplicate similar URLs"}, "task": "Crawl the website starting from \"https://example.com\" with a maximum depth of 3, limit to 50 pages, and exclude external links while deduplicating similar URLs."}, {"name": "firecrawl_extract", "server": "Firecrawl", "description": "Extract structured information from web pages using LLM capabilities.", "parameter": {"urls": "(array) List of URLs to extract information from", "prompt": "(string) Custom prompt for the LLM extraction", "systemPrompt": "(string) System prompt to guide the LLM", "schema": "(object) JSON schema for structured data extraction", "allowExternalLinks": "(boolean) Allow extraction from external links", "enableWebSearch": "(boolean) Enable web search for additional context", "includeSubdomains": "(boolean) Include subdomains in extraction"}, "task": "Extract the titles and publication dates of articles from the specified list of news website URLs, using a custom prompt to focus on recent publications within the last month. Ensure the extraction follows a structured JSON schema and includes subdomains if available."}, {"name": "firecrawl_deep_research", "server": "Firecrawl", "description": "Conduct deep web research on a query using intelligent crawling, search, and LLM analysis.", "parameter": {"query": "(string, required) The research question or topic to explore", "maxDepth": "(number, optional) Maximum recursive depth for crawling/search (default: 3)", "timeLimit": "(number, optional) Time limit in seconds for the research session (default: 120)", "maxUrls": "(number, optional) Maximum number of URLs to analyze (default: 50)"}, "task": "Perform a deep web research on \"renewable energy advancements in 2024\" with a maximum depth of 4, analyzing up to 60 URLs within a 180-second time limit."}, {"name": "firecrawl_generate_llmstxt", "server": "Firecrawl", "description": "Generate a standardized llms.txt (and optionally llms-full.txt) file for a given domain.", "parameter": {"url": "(string, required) The base URL of the website to analyze", "maxUrls": "(number, optional) Max number of URLs to include (default: 10)", "showFullText": "(boolean, optional) Whether to include llms-full.txt contents in the response"}, "task": "Generate a standardized llms.txt file for the website \"example.com\" including up to 15 URLs, without the full text content."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Gitee", "description": "GitHub/Gitee repository operations, including: listing user repositories, getting file content, creating repositories (user/org/enterprise), forking repositories, managing releases, searching open source repositories, managing pull requests (listing, creating, updating, merging, commenting), managing issues (creating, updating, commenting), and user information management (getting user info, searching users, listing notifications)", "tools": [{"name": "list_user_repos", "server": "Gitee", "description": "List user authorized repositories", "parameter": {}, "task": "List all repositories that the current user has access to."}, {"name": "get_file_content", "server": "Gitee", "description": "Get the content of a file in a repository", "parameter": {}, "task": "Retrieve the content of the README.md file from the main branch of the specified repository."}, {"name": "create_user_repo", "server": "Gitee", "description": "Create a user repository", "parameter": {}, "task": "Create a new repository for the current user with default settings."}, {"name": "create_org_repo", "server": "Gitee", "description": "Create an organization repository", "parameter": {}, "task": "Create a new repository under the specified organization with default settings."}, {"name": "create_enter_repo", "server": "Gitee", "description": "Create an enterprise repository", "parameter": {}, "task": "Create a new enterprise repository with default settings."}, {"name": "fork_repository", "server": "Gitee", "description": "Fork a repository", "parameter": {}, "task": "Create a fork of the specified GitHub repository."}, {"name": "create_release", "server": "Gitee", "description": "Create a release for a repository", "parameter": {}, "task": "Create a new release for the specified GitHub repository with the latest changes."}, {"name": "list_releases", "server": "Gitee", "description": "List repository releases", "parameter": {}, "task": "List all releases from the connected repository."}, {"name": "search_open_source_repositories", "server": "Gitee", "description": "Search open source repositories on Gitee", "parameter": {}, "task": "Search for open source repositories related to machine learning on Gitee."}, {"name": "list_repo_pulls", "server": "Gitee", "description": "List pull requests in a repository", "parameter": {}, "task": "List all open pull requests in the specified GitHub repository."}, {"name": "merge_pull", "server": "Gitee", "description": "Merge a pull request", "parameter": {}, "task": "Merge the latest pull request in the repository."}, {"name": "create_pull", "server": "Gitee", "description": "Create a pull request", "parameter": {}, "task": "Create a pull request for the latest changes in the development branch to merge into the main branch."}, {"name": "update_pull", "server": "Gitee", "description": "Update a pull request", "parameter": {}, "task": "Update the latest changes to the existing pull request in the repository."}, {"name": "get_pull_detail", "server": "Gitee", "description": "Get details of a pull request", "parameter": {}, "task": "Retrieve the details of the latest pull request in the repository."}, {"name": "comment_pull", "server": "Gitee", "description": "Comment on a pull request", "parameter": {}, "task": "Add a comment to the latest pull request in the repository discussing the proposed changes."}, {"name": "list_pull_comments", "server": "Gitee", "description": "List all comments for a pull request", "parameter": {}, "task": "List all comments for the latest pull request in the current repository."}, {"name": "create_issue", "server": "Gitee", "description": "Create an issue", "parameter": {}, "task": "Create a new issue in the project management system with the title \"Update Documentation\" and the description \"Review and update all API documentation to reflect recent changes.\""}, {"name": "update_issue", "server": "Gitee", "description": "Update an issue", "parameter": {}, "task": "Update the status of the current issue to \"In Progress\" and assign it to the project manager."}, {"name": "get_repo_issue_detail", "server": "Gitee", "description": "Get details of a repository issue", "parameter": {}, "task": "Retrieve the details of the latest open issue from the specified GitHub repository."}, {"name": "list_repo_issues", "server": "Gitee", "description": "List repository issues", "parameter": {}, "task": "List all open issues in the specified GitHub repository."}, {"name": "comment_issue", "server": "Gitee", "description": "Comment on an issue", "parameter": {}, "task": "Add a comment to the open issue regarding the recent bug report."}, {"name": "list_issue_comments", "server": "Gitee", "description": "List comments on an issue", "parameter": {}, "task": "List all comments on issue #42 in the project repository."}, {"name": "get_user_info", "server": "Gitee", "description": "Get current authenticated user information", "parameter": {}, "task": "Retrieve the details of the currently authenticated user."}, {"name": "search_users", "server": "Gitee", "description": "Search for users", "parameter": {}, "task": "Search for all active users in the system."}, {"name": "list_user_notifications", "server": "Gitee", "description": "List user notifications", "parameter": {}, "task": "List all notifications for the current user."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Gyazo", "description": "Gyazo图片管理,包括:全文搜索、获取图片内容与元数据、获取最新图片、上传图片", "tools": [{"name": "gyazo_search", "server": "Gyazo", "description": "Full-text search for captures uploaded by users on Gyazo", "parameter": {"keyword": "(string) Search by keyword, title, app, URL, or date range", "pagination": "(Optional, boolean) Supports pagination for browsing multiple results"}, "task": "Search for all Gyazo captures containing the keyword \"project_demo\" and enable pagination to browse through multiple results."}, {"name": "gyazo_image", "server": "Gyazo", "description": "Fetch image content and metadata from Gyazo", "parameter": {"id_or_url": "(string) Retrieve specific images by ID or URL"}, "task": "Retrieve the image content and metadata for the Gyazo image with the URL \"https://gyazo.com/abc123\"."}, {"name": "gyazo_latest_image", "server": "Gyazo", "description": "Fetch the most recent image from Gyazo", "parameter": {}, "task": "Retrieve the latest uploaded image from the Gyazo platform."}, {"name": "gyazo_upload", "server": "Gyazo", "description": "Upload an image to Gyazo", "parameter": {"image_data": "(string) Base64 encoded image data", "title": "(Optional, string) Title of the image", "description": "(Optional, string) Description of the image", "referer_url": "(Optional, string) Referer URL", "app_name": "(Optional, string) App name"}, "task": "Upload the provided base64 encoded image to Gyazo with the title \"Project Screenshot\" and a description of \"Latest UI design mockup\"."}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "gotoHuman", "description": "1.列出所有可用的审查表单 2.获取给定表单的审查模式 3.请求人工审查", "tools": [{"name": "list-forms", "server": "gotoHuman", "description": "List all available review forms.", "parameter": {}, "task": "List all the available review forms currently accessible in the system."}, {"name": "get-form-schema", "server": "gotoHuman", "description": "Get the schema to use when requesting a human review for a given form.", "parameter": {"formId": "(string) The form ID to fetch the schema for"}, "task": "Retrieve the schema required for submitting a human review request for form ID \"F-2024-001\"."}, {"name": "request-human-review-with-form", "server": "gotoHuman", "description": "Request a human review. Will appear in your gotoHuman inbox.", "parameter": {"formId": "(string) The form ID for the review", "fieldData": "(object) Content (AI-output to review, context,...) and configuration for the form's fields. The schema for this needs to be fetched with get-form-schema", "metadata": "(Optional, object) Optional additional data that will be incl. in the webhook response after form submission", "assignToUsers": "(Optional, array) Optional list of user emails to assign the review to"}, "task": "Request a human review for the AI-generated marketing content using form ID 'MKTG-2024-Q2' and include the content draft along with the target audience details in the form fields. Assign the review to the marketing team leads."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Grafana", "description": "Grafana相关操作,包括:仪表盘搜索与管理、数据源查询与管理、Prometheus查询与元数据获取、Grafana Incident事件管理、Loki日志查询与统计、告警规则管理、OnCall调度管理、Sift调查分析、错误模式日志查找、慢请求查找", "tools": [{"name": "search_dashboards", "server": "Grafana", "description": "Search for dashboards", "parameter": {}, "task": "Search for all available dashboards in the system."}, {"name": "get_dashboard_by_uid", "server": "Grafana", "description": "Get a dashboard by uid", "parameter": {}, "task": "Retrieve the dashboard with the specified unique identifier (UID)."}, {"name": "update_dashboard", "server": "Grafana", "description": "Update or create a new dashboard", "parameter": {}, "task": "Update the existing dashboard with the latest performance metrics for Q2 2024."}, {"name": "list_datasources", "server": "Grafana", "description": "List datasources", "parameter": {}, "task": "List all available datasources in the current system."}, {"name": "get_datasource_by_uid", "server": "Grafana", "description": "Get a datasource by uid", "parameter": {}, "task": "Retrieve the details of a datasource using its unique identifier."}, {"name": "get_datasource_by_name", "server": "Grafana", "description": "Get a datasource by name", "parameter": {}, "task": "Retrieve the details of a datasource named \"Sales_Data_2024\"."}, {"name": "query_prometheus", "server": "Grafana", "description": "Execute a query against a Prometheus datasource", "parameter": {}, "task": "Query the Prometheus datasource for the current CPU usage metrics across all nodes in the cluster."}, {"name": "list_prometheus_metric_metadata", "server": "Grafana", "description": "List metric metadata", "parameter": {}, "task": "List all available metric metadata from the Prometheus monitoring system."}, {"name": "list_prometheus_metric_names", "server": "Grafana", "description": "List available metric names", "parameter": {}, "task": "List all available metric names from the Prometheus monitoring system."}, {"name": "list_prometheus_label_names", "server": "Grafana", "description": "List label names matching a selector", "parameter": {}, "task": "List all label names in the Prometheus monitoring system that match the specified selector."}, {"name": "list_prometheus_label_values", "server": "Grafana", "description": "List values for a specific label", "parameter": {}, "task": "List all values for the 'instance' label in the Prometheus monitoring system."}, {"name": "list_incidents", "server": "Grafana", "description": "List incidents in Grafana Incident", "parameter": {}, "task": "List all active incidents in the Grafana Incident monitoring system."}, {"name": "create_incident", "server": "Grafana", "description": "Create an incident in Grafana Incident", "parameter": {}, "task": "Create a new incident in Grafana Incident to track and manage an ongoing issue."}, {"name": "add_activity_to_incident", "server": "Grafana", "description": "Add an activity item to an incident in Grafana Incident", "parameter": {}, "task": "Add a new activity item to the incident currently being managed in Grafana Incident."}, {"name": "resolve_incident", "server": "Grafana", "description": "Resolve an incident in Grafana Incident", "parameter": {}, "task": "Resolve the currently active incident in Grafana Incident."}, {"name": "query_loki_logs", "server": "Grafana", "description": "Query and retrieve logs using LogQL (either log or metric queries)", "parameter": {}, "task": "Retrieve the last 100 log entries from the Loki logging system using a LogQL query."}, {"name": "list_loki_label_names", "server": "Grafana", "description": "List all available label names in logs", "parameter": {}, "task": "List all available label names from the logs stored in the Loki logging system."}, {"name": "list_loki_label_values", "server": "Grafana", "description": "List values for a specific log label", "parameter": {}, "task": "List all available values for the 'namespace' label in the Loki log system."}, {"name": "query_loki_stats", "server": "Grafana", "description": "Get statistics about log streams", "parameter": {}, "task": "Retrieve the latest statistics for all active log streams in the Loki logging system."}, {"name": "list_alert_rules", "server": "Grafana", "description": "List alert rules", "parameter": {}, "task": "List all currently configured alert rules in the monitoring system."}, {"name": "get_alert_rule_by_uid", "server": "Grafana", "description": "Get alert rule by UID", "parameter": {}, "task": "Retrieve the alert rule details associated with the specified UID."}, {"name": "list_oncall_schedules", "server": "Grafana", "description": "List schedules from Grafana OnCall", "parameter": {}, "task": "List all active on-call schedules from Grafana OnCall."}, {"name": "get_oncall_shift", "server": "Grafana", "description": "Get details for a specific OnCall shift", "parameter": {}, "task": "Retrieve the details of the current OnCall shift for the team."}, {"name": "get_current_oncall_users", "server": "Grafana", "description": "Get users currently on-call for a specific schedule", "parameter": {}, "task": "Retrieve the list of users currently on-call for the designated schedule."}, {"name": "list_oncall_teams", "server": "Grafana", "description": "List teams from Grafana OnCall", "parameter": {}, "task": "List all teams currently configured in Grafana OnCall."}, {"name": "list_oncall_users", "server": "Grafana", "description": "List users from Grafana OnCall", "parameter": {}, "task": "List all users currently on call in Grafana OnCall."}, {"name": "get_investigation", "server": "Grafana", "description": "Retrieve an existing Sift investigation by its UUID", "parameter": {}, "task": "Retrieve the details of an existing investigation using its unique identifier."}, {"name": "get_analysis", "server": "Grafana", "description": "Retrieve a specific analysis from a Sift investigation", "parameter": {}, "task": "Retrieve the latest analysis report from the ongoing Sift investigation."}, {"name": "list_investigations", "server": "Grafana", "description": "Retrieve a list of Sift investigations with an optional limit", "parameter": {}, "task": "Retrieve the latest 10 investigations from the Sift platform."}, {"name": "find_error_pattern_logs", "server": "Grafana", "description": "Finds elevated error patterns in Loki logs", "parameter": {}, "task": "Analyze the Loki logs to identify any recurring error patterns with elevated frequency."}, {"name": "find_slow_requests", "server": "Grafana", "description": "Finds slow requests from the relevant tempo datasources", "parameter": {}, "task": "Find slow requests from the tempo datasources that exceed the expected response time threshold."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Graphlit", "description": "1.知识库内容查询与检索（包括内容、集合、订阅源、对话） 2.相关资源检索（文本、图像） 3.图像处理与描述 4.语言模型对话 5.结构化数据提取 6.内容发布（音频、图像） 7.多源数据采集（文件、网页、消息、社交媒体、邮件、问题、文本、短期记忆） 8.平台集成（邮件、项目管理、云存储、社交、团队协作） 9.网络爬虫与搜索 10.通知发送（Slack、邮件、Webhook、Twitter） 11.知识库项目管理（配置、集合操作） 12.平台资源列表查询", "tools": [{"name": "Query Contents", "server": "Graphlit", "description": "Searches and retrieves contents from the knowledge base.", "parameter": {}, "task": "Search and retrieve all available contents from the knowledge base."}, {"name": "Query Collections", "server": "Graphlit", "description": "Searches and retrieves collections from the knowledge base.", "parameter": {}, "task": "Search and retrieve all available collections from the knowledge base."}, {"name": "Query Feeds", "server": "Graphlit", "description": "Searches and retrieves feeds from the knowledge base.", "parameter": {}, "task": "Search and retrieve the latest 10 feeds from the knowledge base."}, {"name": "Query Conversations", "server": "Graphlit", "description": "Searches and retrieves conversations from the knowledge base.", "parameter": {}, "task": "Search and retrieve the latest 10 conversations from the knowledge base."}, {"name": "Retrieve Relevant Sources", "server": "Graphlit", "description": "Retrieves relevant sources based on a query.", "parameter": {}, "task": "Retrieve the most relevant sources related to the topic of \"sustainable energy solutions.\""}, {"name": "Retrieve Similar Images", "server": "Graphlit", "description": "Retrieves images similar to a given image.", "parameter": {}, "task": "Find and retrieve images that are visually similar to the provided reference image."}, {"name": "Visually Describe Image", "server": "Graphlit", "description": "Provides a visual description of an image.", "parameter": {}, "task": "Generate a detailed visual description of the uploaded image, including objects, colors, and any notable features."}, {"name": "Prompt LLM Conversation", "server": "Graphlit", "description": "Initiates a conversation with a language model.", "parameter": {}, "task": "Start a conversation with a language model to discuss the latest advancements in artificial intelligence."}, {"name": "Extract Structured JSON from Text", "server": "Graphlit", "description": "Extracts structured JSON data from text.", "parameter": {}, "task": "Extract structured JSON data from the provided text document."}, {"name": "Publish as Audio (ElevenLabs Audio)", "server": "Graphlit", "description": "Publishes content as audio using ElevenLabs.", "parameter": {}, "task": "Convert the provided text content into an audio file using ElevenLabs' text-to-speech service."}, {"name": "Publish as Image (OpenAI Image Generation)", "server": "Graphlit", "description": "Publishes content as an image using OpenAI.", "parameter": {}, "task": "Generate an image from the provided text content using OpenAI's image generation capabilities."}, {"name": "Files", "server": "Graphlit", "description": "Ingests files into the knowledge base.", "parameter": {}, "task": "Upload a PDF document to the knowledge base for future reference and retrieval."}, {"name": "Web Pages", "server": "Graphlit", "description": "Ingests web pages into the knowledge base.", "parameter": {}, "task": "Add the latest news articles from a specified website to the knowledge base."}, {"name": "Messages", "server": "Graphlit", "description": "Ingests messages from communication platforms into the knowledge base.", "parameter": {}, "task": "Ingest the latest 50 messages from the connected communication platform into the knowledge base."}, {"name": "Posts", "server": "Graphlit", "description": "Ingests posts from social media platforms into the knowledge base.", "parameter": {}, "task": "Ingest the latest 100 posts from connected social media platforms into the knowledge base."}, {"name": "Emails", "server": "Graphlit", "description": "Ingests emails into the knowledge base.", "parameter": {}, "task": "Ingest the latest 50 unread emails from the primary inbox into the knowledge base."}, {"name": "Issues", "server": "Graphlit", "description": "Ingests issues from project management tools into the knowledge base.", "parameter": {}, "task": "Ingest all open issues from the connected project management tool into the knowledge base."}, {"name": "Text", "server": "Graphlit", "description": "Ingests plain text into the knowledge base.", "parameter": {}, "task": "Ingest the provided plain text document into the knowledge base for future reference."}, {"name": "Memory (Short-Term)", "server": "Graphlit", "description": "Ingests short-term memory data into the knowledge base.", "parameter": {}, "task": "Store the provided short-term memory data in the knowledge base for immediate recall."}, {"name": "Microsoft Outlook email", "server": "Graphlit", "description": "Connects to Microsoft Outlook to ingest emails.", "parameter": {}, "task": "Retrieve the latest 10 unread emails from the inbox folder in Microsoft Outlook."}, {"name": "Google Mail", "server": "Graphlit", "description": "Connects to Google Mail to ingest emails.", "parameter": {}, "task": "Retrieve the latest 10 unread emails from the primary inbox in Google Mail."}, {"name": "Notion", "server": "Graphlit", "description": "Connects to Notion to ingest data.", "parameter": {}, "task": "Retrieve all pages and databases from the connected Notion workspace."}, {"name": "Reddit", "server": "Graphlit", "description": "Connects to Reddit to ingest data.", "parameter": {}, "task": "Retrieve the top 10 trending posts from the \"technology\" subreddit in the past 24 hours."}, {"name": "Linear", "server": "Graphlit", "description": "Connects to Linear to ingest data.", "parameter": {}, "task": "Fetch all active issues from the connected Linear workspace."}, {"name": "Jira", "server": "Graphlit", "description": "Connects to Jira to ingest data.", "parameter": {}, "task": "Retrieve all open issues assigned to the \"Development\" team from the Jira project \"Web Platform\" created in the last 30 days."}, {"name": "GitHub Issues", "server": "Graphlit", "description": "Connects to GitHub to ingest issues.", "parameter": {}, "task": "Retrieve the latest 10 open issues from the GitHub repository for project \"Alpha\"."}, {"name": "Google Drive", "server": "Graphlit", "description": "Connects to Google Drive to ingest files.", "parameter": {}, "task": "Upload a PDF document to the connected cloud storage service."}, {"name": "OneDrive", "server": "Graphlit", "description": "Connects to OneDrive to ingest files.", "parameter": {}, "task": "Upload a document from the local machine to the connected cloud storage service."}, {"name": "SharePoint", "server": "Graphlit", "description": "Connects to SharePoint to ingest files.", "parameter": {}, "task": "Upload a document to the designated SharePoint site for team collaboration."}, {"name": "Dropbox", "server": "Graphlit", "description": "Connects to Dropbox to ingest files.", "parameter": {}, "task": "Upload a PDF document to the connected cloud storage service."}, {"name": "Box", "server": "Graphlit", "description": "Connects to Box to ingest files.", "parameter": {}, "task": "Download all files from the connected Box account to a local directory."}, {"name": "GitHub", "server": "Graphlit", "description": "Connects to GitHub to ingest repositories and files.", "parameter": {}, "task": "Retrieve the latest 5 public repositories created in the last month from GitHub."}, {"name": "Slack", "server": "Graphlit", "description": "Connects to Slack to ingest messages and files.", "parameter": {}, "task": "Send a message to the designated Slack channel with the latest project updates."}, {"name": "Microsoft Teams", "server": "Graphlit", "description": "Connects to Microsoft Teams to ingest messages and files.", "parameter": {}, "task": "Retrieve all messages and shared files from the Microsoft Teams workspace for the past 7 days."}, {"name": "Discord", "server": "Graphlit", "description": "Connects to Discord to ingest messages and files.", "parameter": {}, "task": "Retrieve the latest 50 messages from the general channel in the connected Discord server."}, {"name": "Twitter/X", "server": "Graphlit", "description": "Connects to Twitter/X to ingest tweets and media.", "parameter": {}, "task": "Retrieve the latest 10 tweets from the official Twitter/X account of a major news organization."}, {"name": "Podcasts (RSS)", "server": "Graphlit", "description": "Connects to podcast RSS feeds to ingest episodes.", "parameter": {}, "task": "Retrieve the latest 10 episodes from the subscribed podcast RSS feed."}, {"name": "Web Crawling", "server": "Graphlit", "description": "Crawls web pages and ingests the content.", "parameter": {}, "task": "Crawl and ingest the content from the homepage of a specified website."}, {"name": "Web Search (including Podcast Search)", "server": "Graphlit", "description": "Performs web searches and ingests the results.", "parameter": {}, "task": "Search for the latest podcast episodes discussing advancements in artificial intelligence."}, {"name": "Web Mapping", "server": "Graphlit", "description": "Maps and visualizes web content.", "parameter": {}, "task": "Visualize the hierarchical structure of a given website's homepage."}, {"name": "Screenshot Page", "server": "Graphlit", "description": "Takes screenshots of web pages and ingests them.", "parameter": {}, "task": "Take a screenshot of the current web page and save it for later analysis."}, {"name": "Slack", "server": "Graphlit", "description": "Sends notifications to Slack.", "parameter": {}, "task": "Send a notification to the designated Slack channel about the upcoming team meeting scheduled for tomorrow at 10 AM."}, {"name": "Email", "server": "Graphlit", "description": "Sends notifications via email.", "parameter": {}, "task": "Send a notification email to the recipient regarding the upcoming project deadline."}, {"name": "Webhook", "server": "Graphlit", "description": "Sends notifications via webhook.", "parameter": {}, "task": "Send a notification to the configured webhook endpoint."}, {"name": "Twitter/X", "server": "Graphlit", "description": "Sends notifications to Twitter/X.", "parameter": {}, "task": "Send a notification to Twitter/X about the upcoming product launch event scheduled for 2025-07-15."}, {"name": "Configure Project", "server": "Graphlit", "description": "Configures a project in the knowledge base.", "parameter": {}, "task": "Configure a new project in the knowledge base with default settings."}, {"name": "Create Collection", "server": "Graphlit", "description": "Creates a new collection in the knowledge base.", "parameter": {}, "task": "Create a new collection in the knowledge base to organize and store related documents."}, {"name": "Add Contents to Collection", "server": "Graphlit", "description": "Adds contents to an existing collection.", "parameter": {}, "task": "Add three new articles to the 'Technology Trends' collection."}, {"name": "Remove Contents from Collection", "server": "Graphlit", "description": "Removes contents from an existing collection.", "parameter": {}, "task": "Remove all items from the specified collection."}, {"name": "Delete Collection(s)", "server": "Graphlit", "description": "Deletes one or more collections from the knowledge base.", "parameter": {}, "task": "Delete all collections from the knowledge base."}, {"name": "Delete Feed(s)", "server": "Graphlit", "description": "Deletes one or more feeds from the knowledge base.", "parameter": {}, "task": "Delete the oldest 5 feeds from the knowledge base."}, {"name": "Delete Content(s)", "server": "Graphlit", "description": "Deletes one or more contents from the knowledge base.", "parameter": {}, "task": "Delete the oldest 5 entries from the knowledge base."}, {"name": "Delete Conversation(s)", "server": "Graphlit", "description": "Deletes one or more conversations from the knowledge base.", "parameter": {}, "task": "Delete all outdated conversations from the knowledge base that are older than 6 months."}, {"name": "Is Feed Done?", "server": "Graphlit", "description": "Checks if a feed is done processing.", "parameter": {}, "task": "Check if the current feed has finished processing."}, {"name": "Is Content Done?", "server": "Graphlit", "description": "Checks if a content item is done processing.", "parameter": {}, "task": "Check if the latest uploaded content item has finished processing."}, {"name": "List Slack Channels", "server": "Graphlit", "description": "Lists available Slack channels.", "parameter": {}, "task": "List all available channels in the connected Slack workspace."}, {"name": "List Microsoft Teams Teams", "server": "Graphlit", "description": "Lists available Microsoft Teams teams.", "parameter": {}, "task": "List all available Microsoft Teams teams in the organization."}, {"name": "List Microsoft Teams Channels", "server": "Graphlit", "description": "Lists available channels within a Microsoft Teams team.", "parameter": {}, "task": "List all available channels in the specified Microsoft Teams team."}, {"name": "List SharePoint Libraries", "server": "Graphlit", "description": "Lists available libraries in SharePoint.", "parameter": {}, "task": "List all available document libraries in the connected SharePoint site."}, {"name": "List SharePoint Folders", "server": "Graphlit", "description": "Lists available folders within a SharePoint library.", "parameter": {}, "task": "List all available folders within the default SharePoint document library."}, {"name": "List Linear Projects", "server": "Graphlit", "description": "Lists available projects in Linear.", "parameter": {}, "task": "List all available projects in the Linear workspace."}, {"name": "List Notion Databases", "server": "Graphlit", "description": "Lists available databases in Notion.", "parameter": {}, "task": "List all available databases in the connected Notion workspace."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "GreptimeDB", "description": "1.列出数据库中的表 2.从表中读取数据 3.列出可用工具 4.执行SQL查询 5.列出可用提示 6.按名称获取提示", "tools": [{"name": "list_resources", "server": "GreptimeDB", "description": "Lists tables in the database.", "parameter": {}, "task": "List all tables available in the connected database."}, {"name": "read_resource", "server": "GreptimeDB", "description": "Reads data from a table.", "parameter": {}, "task": "Read the latest 50 entries from the customer feedback table."}, {"name": "list_tools", "server": "GreptimeDB", "description": "Lists available tools.", "parameter": {}, "task": "List all available tools that can be accessed within the current system."}, {"name": "call_tool", "server": "GreptimeDB", "description": "Executes an SQL query.", "parameter": {}, "task": "Execute an SQL query to retrieve the top 10 highest-paid employees from the database."}, {"name": "list_prompts", "server": "GreptimeDB", "description": "Lists available prompts.", "parameter": {}, "task": "List all available prompts in the system."}, {"name": "get_prompt", "server": "GreptimeDB", "description": "Gets a prompt by name.", "parameter": {}, "task": "Retrieve the prompt named \"customer_feedback_survey\" from the system."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "Heroku", "description": "Heroku平台应用管理,包括:应用列表查询、应用信息获取、应用创建与重命名、应用所有权转移、项目部署、Dyno管理(列表/扩缩容/重启)、Add-on管理(列表/创建/信息获取)、维护模式切换、应用日志查看、Pipeline管理(创建/升级/列表/信息)、团队与空间管理、PostgreSQL数据库操作(查询/信息/进程/锁/性能分析/凭证/维护/备份/升级)", "tools": [{"name": "list_apps", "server": "Heroku", "description": "List all Heroku apps. You can filter apps by personal, collaborator, team, or space.", "parameter": {}, "task": "List all Heroku apps associated with your personal account."}, {"name": "get_app_info", "server": "Heroku", "description": "Get detailed information about an app, including its configuration, dynos, and add-ons.", "parameter": {}, "task": "Retrieve the detailed configuration, dynos, and add-ons information for the specified application."}, {"name": "create_app", "server": "Heroku", "description": "Create a new app with customizable settings for region, team, and space.", "parameter": {}, "task": "Create a new application with customizable settings for the North America region, assigned to the \"Development\" team and deployed in the \"Staging\" space."}, {"name": "rename_app", "server": "Heroku", "description": "Rename an existing app.", "parameter": {}, "task": "Rename the currently selected application to a new specified name."}, {"name": "transfer_app", "server": "Heroku", "description": "Transfer ownership of an app to another user or team.", "parameter": {}, "task": "Transfer ownership of the specified application to the designated user or team."}, {"name": "deploy_to_heroku", "server": "Heroku", "description": "Deploy projects to Heroku with an `app.json` configuration, supporting team deployments, private spaces, and environment setups.", "parameter": {}, "task": "Deploy a project to Heroku using the `app.json` configuration file for environment setup and team collaboration."}, {"name": "deploy_one_off_dyno", "server": "Heroku", "description": "Execute code or commands in a sandboxed environment on a Heroku one-off dyno. Supports file creation, network access, environment variables, and automatic cleanup. Ideal for running scripts, tests, or temporary workloads.", "parameter": {}, "task": "Run a Python script in a temporary sandboxed environment to process and analyze a dataset, ensuring automatic cleanup after completion."}, {"name": "ps_list", "server": "Heroku", "description": "List all dynos for an app.", "parameter": {}, "task": "List all running dynos for the specified Heroku application."}, {"name": "ps_scale", "server": "Heroku", "description": "Scale the number of dynos up or down, or resize dynos.", "parameter": {}, "task": "Scale the number of dynos up to 5 for the production environment."}, {"name": "ps_restart", "server": "Heroku", "description": "Restart specific dynos, process types, or all dynos.", "parameter": {}, "task": "Restart all dynos in the current environment."}, {"name": "list_addons", "server": "Heroku", "description": "List all add-ons for all apps or for a specific app.", "parameter": {}, "task": "List all available add-ons for the currently installed applications."}, {"name": "get_addon_info", "server": "Heroku", "description": "Get detailed information about a specific add-on.", "parameter": {}, "task": "Retrieve the details of the currently installed add-on."}, {"name": "create_addon", "server": "Heroku", "description": "Provision a new add-on for an app.", "parameter": {}, "task": "Provision a new add-on for the specified application. Ensure the add-on is configured with default settings and ready for integration."}, {"name": "maintenance_on", "server": "Heroku", "description": "Enable maintenance mode for an app.", "parameter": {}, "task": "Enable maintenance mode for the current application to prevent user access during updates."}, {"name": "maintenance_off", "server": "Heroku", "description": "Disable maintenance mode for an app.", "parameter": {}, "task": "Disable maintenance mode for the currently deployed application."}, {"name": "get_app_logs", "server": "Heroku", "description": "View application logs.", "parameter": {}, "task": "Retrieve the latest 100 lines of logs from the currently running application."}, {"name": "pipelines_create", "server": "Heroku", "description": "Create a new pipeline.", "parameter": {}, "task": "Create a new pipeline for automating the build and deployment process of a web application."}, {"name": "pipelines_promote", "server": "Heroku", "description": "Promote apps to the next stage in a pipeline.", "parameter": {}, "task": "Promote all applications currently in the staging environment to the production stage in the deployment pipeline."}, {"name": "pipelines_list", "server": "Heroku", "description": "List available pipelines.", "parameter": {}, "task": "List all available pipelines in the current system."}, {"name": "pipelines_info", "server": "Heroku", "description": "Get detailed pipeline information.", "parameter": {}, "task": "Retrieve detailed information about all available pipelines in the system."}, {"name": "list_teams", "server": "Heroku", "description": "List teams you belong to.", "parameter": {}, "task": "List all the teams you are currently a member of."}, {"name": "list_private_spaces", "server": "Heroku", "description": "List available spaces.", "parameter": {}, "task": "List all available private spaces in the current environment."}, {"name": "pg_psql", "server": "Heroku", "description": "Execute SQL queries against the Heroku PostgreSQL database.", "parameter": {}, "task": "Query the Heroku PostgreSQL database for all active user accounts created in the last 30 days."}, {"name": "pg_info", "server": "Heroku", "description": "Display detailed database information.", "parameter": {}, "task": "Display detailed information about the connected PostgreSQL database, including tables, schemas, and system statistics."}, {"name": "pg_ps", "server": "Heroku", "description": "View active queries and execution details.", "parameter": {}, "task": "Monitor the currently active queries and their execution details in the PostgreSQL database."}, {"name": "pg_locks", "server": "Heroku", "description": "View database locks and identify blocking transactions.", "parameter": {}, "task": "Check the current locks and identify any blocking transactions in the PostgreSQL database."}, {"name": "pg_outliers", "server": "Heroku", "description": "Identify resource-intensive queries.", "parameter": {}, "task": "Identify the top 5 most resource-intensive queries executed in the PostgreSQL database over the past 24 hours."}, {"name": "pg_credentials", "server": "Heroku", "description": "Manage database credentials and access.", "parameter": {}, "task": "Generate a list of all active database credentials with their respective access levels."}, {"name": "pg_kill", "server": "Heroku", "description": "Terminate specific database processes.", "parameter": {}, "task": "Terminate all idle database processes that have been inactive for more than 30 minutes."}, {"name": "pg_maintenance", "server": "Heroku", "description": "Show database maintenance information.", "parameter": {}, "task": "Show the maintenance information for the connected PostgreSQL database."}, {"name": "pg_backups", "server": "Heroku", "description": "Manage database backups and schedules.", "parameter": {}, "task": "Create a new backup schedule for the PostgreSQL database to run daily at 2 AM."}, {"name": "pg_upgrade", "server": "Heroku", "description": "Upgrade PostgreSQL to a newer version.", "parameter": {}, "task": "Upgrade the current PostgreSQL database to the latest available version."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Hologres", "description": "Hologres数据库操作,包括:执行SELECT/DML/DDL SQL查询、收集表统计信息、获取查询计划与执行计划", "tools": [{"name": "execute_select_sql", "server": "Hologres", "description": "Execute a SELECT SQL query on the Hologres server", "parameter": {}, "task": "Retrieve all customer records from the Hologres database where the registration date is after January 1, 2023."}, {"name": "execute_dml_sql", "server": "Hologres", "description": "Execute a DML (INSERT, UPDATE, DELETE) SQL query on the Hologres server", "parameter": {}, "task": "Update the customer records in the Hologres database to set the 'status' field to 'inactive' for all customers who have not made a purchase in the last 12 months."}, {"name": "execute_ddl_sql", "server": "Hologres", "description": "Execute a DDL (CREATE, ALTER, DROP) SQL query on the Hologres server", "parameter": {}, "task": "Create a new table named 'customer_orders' with columns for customer_id (integer), order_date (date), and total_amount (decimal) in the Hologres database."}, {"name": "gather_table_statistics", "server": "Hologres", "description": "Collect table statistics", "parameter": {}, "task": "Collect statistics for all tables in the connected database."}, {"name": "get_query_plan", "server": "Hologres", "description": "Get query plan", "parameter": {}, "task": "Retrieve the execution plan for the latest database query."}, {"name": "get_execution_plan", "server": "Hologres", "description": "Get execution plan", "parameter": {}, "task": "Retrieve the execution plan for the current project workflow."}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Hyperbrowser", "description": "1. Extract formatted content from webpages 2. Crawl and extract content from linked pages 3. Convert HTML to structured JSON 4. Query the web with Bing search 5. Browser automation with Browser Use agent 6. General-purpose automation with OpenAI’s CUA model 7. Complex browser tasks with Claude computer use 8. Create, delete, and list Hyperbrowser profiles", "tools": [{"name": "scrape_webpage", "server": "Hyperbrowser", "description": "Extract formatted (markdown, screenshot etc) content from any webpage", "parameter": {}, "task": "Extract the formatted content including text and images from the homepage of a specified website."}, {"name": "crawl_webpages", "server": "Hyperbrowser", "description": "Navigate through multiple linked pages and extract LLM-friendly formatted content", "parameter": {}, "task": "Crawl and extract formatted content from all linked pages starting from the homepage of a specified website."}, {"name": "extract_structured_data", "server": "Hyperbrowser", "description": "Convert messy HTML into structured JSON", "parameter": {}, "task": "Convert the messy HTML content from a webpage into structured JSON format."}, {"name": "search_with_bing", "server": "Hyperbrowser", "description": "Query the web and get results with Bing search", "parameter": {}, "task": "Search for the latest news articles about renewable energy advancements."}, {"name": "browser_use_agent", "server": "Hyperbrowser", "description": "Fast, lightweight browser automation with the Browser Use agent", "parameter": {}, "task": "Simulate browsing a website to check its loading time and responsiveness."}, {"name": "openai_computer_use_agent", "server": "Hyperbrowser", "description": "General-purpose automation using OpenAI’s CUA model", "parameter": {}, "task": "Automate the process of organizing and categorizing a collection of 100 research papers into relevant topics using OpenAI's CUA model."}, {"name": "claude_computer_use_agent", "server": "Hyperbrowser", "description": "Complex browser tasks using Claude computer use", "parameter": {}, "task": "Perform a complex browser task involving automated form filling and submission on a specified website using Claude's capabilities."}, {"name": "create_profile", "server": "Hyperbrowser", "description": "Creates a new persistent Hyperbrowser profile", "parameter": {}, "task": "Create a new persistent profile for Hyperbrowser with default settings."}, {"name": "delete_profile", "server": "Hyperbrowser", "description": "Deletes an existing persistent Hyperbrowser profile", "parameter": {}, "task": "Delete the currently active Hyperbrowser profile permanently."}, {"name": "list_profiles", "server": "Hyperbrowser", "description": "Lists existing persistent Hyperbrowser profiles", "parameter": {}, "task": "List all currently stored Hyperbrowser profiles."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Browser Operation", "description": "浏览器操作与自动化控制,如网页元素操控、Cookie 管理、页面截图等"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "ForeverVM", "description": "1. Connect to machines by ID 2. Create new machines with tags and memory limits 3. List all machines with optional tag filtering", "tools": [{"name": "repl", "server": "ForeverVM", "description": "Connects to a new machine or an existing one by ID.", "parameter": {"machine_name": "(Optional, string) The ID of an existing machine to connect to."}, "task": "Connect to an existing machine with the ID \"DEV-1234\" using the REPL tool."}, {"name": "createMachine", "server": "ForeverVM", "description": "Creates a new machine with optional tags and memory limits.", "parameter": {"tags": "(Optional, object) Key-value pairs to tag the machine.", "memory_mb": "(Optional, number) Memory limit in megabytes for the machine."}, "task": "Create a new machine with a memory limit of 4096 MB and tag it with the key-value pair \"environment: production\"."}, {"name": "listMachines", "server": "ForeverVM", "description": "Lists all machines, optionally filtered by tags.", "parameter": {"tags": "(Optional, object) Key-value pairs to filter the machines by tags."}, "task": "List all machines tagged with \"environment:production\" and \"region:us-west\"."}], "domains": [{"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "Inkeep", "description": "Retrieve product documentation about Inkeep using conversational queries", "tools": [{"name": "search-product-content", "server": "Inkeep", "description": "Retrieves product documentation about Inkeep. The query should be framed as a conversational question about Inkeep.", "parameter": {}, "task": "Find information about how to integrate Inkeep with an existing website by searching the product documentation."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Kagi Search", "description": "1.执行网页搜索以查找基于查询的信息 2.基于URL生成内容摘要", "tools": [{"name": "search", "server": "Kagi Search", "description": "Performs a web search to find information based on the query provided.", "parameter": {}, "task": "Search for the latest advancements in renewable energy technologies."}, {"name": "summarizer", "server": "Kagi Search", "description": "Generates a summary of the content, such as a video, based on the URL provided.", "parameter": {}, "task": "Generate a summary of the video content from the provided YouTube URL."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Keboola", "description": "Keboola平台操作,包括:存储桶和表信息获取与更新、SQL查询与转换创建、组件与转换配置检索、作业管理与启动、文档查询", "tools": [{"name": "get_bucket_detail", "server": "Keboola", "description": "Gets detailed information about a specific bucket.", "parameter": {}, "task": "Retrieve the detailed information for the specified storage bucket."}, {"name": "get_table_detail", "server": "Keboola", "description": "Gets detailed information about a specific table including its DB identifier and column information.", "parameter": {}, "task": "Retrieve the detailed structure and column information for a specified database table."}, {"name": "retrieve_bucket_tables", "server": "Keboola", "description": "Retrieves all tables in a specific bucket with their basic information.", "parameter": {}, "task": "Retrieve all tables along with their basic information from the specified storage bucket."}, {"name": "retrieve_buckets", "server": "Keboola", "description": "Retrieves information about all buckets in the project.", "parameter": {}, "task": "Retrieve the details of all storage buckets in the current project."}, {"name": "update_bucket_description", "server": "Keboola", "description": "Update the description for a given Keboola bucket.", "parameter": {}, "task": "Update the description of the specified Keboola bucket to reflect its current usage and contents."}, {"name": "update_table_description", "server": "Keboola", "description": "Update the description for a given Keboola table.", "parameter": {}, "task": "Update the description of the specified table in Keboola to reflect its current data contents and purpose."}, {"name": "get_sql_dialect", "server": "Keboola", "description": "Gets the name of the SQL dialect used by Keboola project's underlying database.", "parameter": {}, "task": "Determine the SQL dialect used by the Keboola project's underlying database."}, {"name": "query_table", "server": "Keboola", "description": "Executes an SQL SELECT query to get the data from the underlying database.", "parameter": {}, "task": "Retrieve all customer records from the database where the registration date is after January 1, 2023."}, {"name": "create_sql_transformation", "server": "Keboola", "description": "Creates an SQL transformation using the specified name, SQL query following the current SQL dialect, a detailed description, and optionally a list of created table names if and only if they are generated within the SQL statements.", "parameter": {}, "task": "Create an SQL transformation named \"MonthlySalesReport\" that calculates the total sales for each product category in the current month, with a detailed description explaining the logic and any tables generated within the SQL statements."}, {"name": "get_component_details", "server": "Keboola", "description": "Gets detailed information about a specific Keboola component configuration given component/transformation ID and configuration ID.", "parameter": {}, "task": "Retrieve the detailed configuration information for a specific Keboola component using its transformation ID and configuration ID."}, {"name": "retrieve_components", "server": "Keboola", "description": "Retrieves components configurations in the project, optionally filtered by component types or specific component IDs. If component_ids are supplied, only those components identified by the IDs are retrieved, disregarding component_types.", "parameter": {}, "task": "Retrieve the configurations of all components in the current project. If specific component IDs are provided, only fetch the configurations for those components."}, {"name": "retrieve_transformations", "server": "Keboola", "description": "Retrieves transformations configurations in the project, optionally filtered by specific transformation IDs.", "parameter": {}, "task": "Retrieve all transformation configurations currently set up in the project."}, {"name": "get_job_detail", "server": "Keboola", "description": "Retrieves detailed information about a specific job, identified by the job_id, including its status, parameters, results, and any relevant metadata.", "parameter": {}, "task": "Retrieve the status, parameters, and results of the job with ID 'JOB12345'."}, {"name": "retrieve_jobs", "server": "Keboola", "description": "Retrieves all jobs in the project, or filter jobs by a specific component_id or config_id, with optional status filtering.", "parameter": {}, "task": "Retrieve all jobs in the project, including their status and associated component or config IDs."}, {"name": "start_job", "server": "Keboola", "description": "Starts a new job for a given component or transformation.", "parameter": {}, "task": "Start a new job for the data transformation process."}, {"name": "docs_query", "server": "Keboola", "description": "Answers a question using the Keboola documentation as a source.", "parameter": {}, "task": "Find the recommended method for connecting to a Snowflake database using the Keboola documentation."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Lara Translate", "description": "1.文本翻译 2.翻译记忆管理，包括：创建、更新、删除翻译记忆 3.翻译单元管理，包括：添加、删除翻译单元 4.TMX文件导入与状态检查", "tools": [{"name": "translate", "server": "Lara Translate", "description": "Translate text between languages", "parameter": {"text": "(array) An array of text blocks to translate, each with: 'text' (string), 'translatable' (boolean)", "source": "(Optional, string) Source language code (e.g., 'en-EN')", "target": "(string) Target language code (e.g., 'it-IT')", "context": "(Optional, string) Additional context to improve translation quality", "instructions": "(Optional, string[]) Instructions to adjust translation behavior", "source_hint": "(Optional, string) Guidance for language detection"}, "task": "Translate the following text blocks from English to Italian: [\"Hello, how are you?\", \"Please send the report by Friday.\"], ensuring the translation maintains a formal tone. Provide additional context that the text is from a business email."}, {"name": "list_memories", "server": "Lara Translate", "description": "List saved translation memories", "parameter": {}, "task": "List all saved translation memories available in the system."}, {"name": "create_memory", "server": "Lara Translate", "description": "Create a new translation memory", "parameter": {"name": "(string) Name of the new memory", "external_id": "(Optional, string) ID of the memory to import from MyMemory (e.g., 'ext_my_[MyMemory ID]')"}, "task": "Create a new translation memory named \"Technical Manuals EN-FR\" with the external ID \"ext_my_12345\" imported from MyMemory."}, {"name": "update_memory", "server": "Lara Translate", "description": "Update translation memory name", "parameter": {"id": "(string) ID of the memory to update", "name": "(string) The new name for the memory"}, "task": "Update the name of the translation memory with ID \"TM12345\" to \"Global Marketing Translations\"."}, {"name": "delete_memory", "server": "Lara Translate", "description": "Delete a translation memory", "parameter": {"id": "(string) ID of the memory to delete"}, "task": "Delete the translation memory with the ID \"TM12345\"."}, {"name": "add_translation", "server": "Lara Translate", "description": "Add a translation unit to memory", "parameter": {"id": "(string | string[]) ID or IDs of memories where to add the translation unit", "source": "(string) Source language code", "target": "(string) Target language code", "sentence": "(string) The source sentence", "translation": "(string) The translated sentence", "tuid": "(Optional, string) Translation Unit unique identifier", "sentence_before": "(Optional, string) Context sentence before", "sentence_after": "(Optional, string) Context sentence after"}, "task": "Add a translation unit to memory with the following details:  \n- Source language: French (fr)  \n- Target language: English (en)  \n- Source sentence: \"Bonjour, comment allez-vous ?\"  \n- Translated sentence: \"Hello, how are you?\"  \n- Context sentence before: \"Nous nous rencontrons demain.\"  \n- Context sentence after: \"À bientôt !\"  \n- Memory ID: \"mem123\"  \n- Translation Unit ID: \"tuid456\""}, {"name": "delete_translation", "server": "Lara Translate", "description": "Delete a translation unit from memory", "parameter": {"id": "(string) ID of the memory", "source": "(string) Source language code", "target": "(string) Target language code", "sentence": "(string) The source sentence", "translation": "(string) The translated sentence", "tuid": "(Optional, string) Translation Unit unique identifier", "sentence_before": "(Optional, string) Context sentence before", "sentence_after": "(Optional, string) Context sentence after"}, "task": "Remove the translation unit with ID \"mem123\" where the source sentence is \"Hello world\" in English (en) and the translated sentence is \"Hola mundo\" in Spanish (es). Include the context sentences \"Greetings\" before and \"Goodbye\" after the source sentence."}, {"name": "import_tmx", "server": "Lara Translate", "description": "Import a TMX file into a memory", "parameter": {"id": "(string) ID of the memory to update", "tmx": "(file path) The path of the TMX file to upload", "gzip": "(boolean) Indicates if the file is compressed (.gz)"}, "task": "Import a TMX file located at \"/data/translations/en-fr.tmx\" into memory with ID \"mem123\", specifying that the file is compressed in GZIP format."}, {"name": "check_import_status", "server": "Lara Translate", "description": "Checks the status of a TMX file import", "parameter": {"id": "(string) The ID of the import job"}, "task": "Check the status of the TMX file import job with ID 'IMP12345'."}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Logfire", "description": "1.从跟踪数据中获取按文件分组的异常计数 2.获取特定文件中异常的详细跟踪信息 3.在OpenTelemetry跟踪和指标上运行自定义SQL查询 4.获取OpenTelemetry模式以帮助自定义查询", "tools": [{"name": "find_exceptions", "server": "Logfire", "description": "Get exception counts from traces grouped by file", "parameter": {"age": "(int) Number of minutes to look back (e.g., 30 for last 30 minutes, max 7 days)"}, "task": "Retrieve the count of exceptions grouped by file from the traces recorded in the last 60 minutes."}, {"name": "find_exceptions_in_file", "server": "Logfire", "description": "Get detailed trace information about exceptions in a specific file", "parameter": {"filepath": "(string) Path to the file to analyze", "age": "(int) Number of minutes to look back (max 7 days)"}, "task": "Retrieve detailed trace information for exceptions found in the file located at \"/var/log/app/error.log\" within the last 60 minutes."}, {"name": "arbitrary_query", "server": "Logfire", "description": "Run custom SQL queries on your OpenTelemetry traces and metrics", "parameter": {"query": "(string) SQL query to execute", "age": "(int) Number of minutes to look back (max 7 days)"}, "task": "Query the OpenTelemetry traces and metrics for all errors occurring in the last 60 minutes using a custom SQL query."}, {"name": "get_logfire_records_schema", "server": "Logfire", "description": "Get the OpenTelemetry schema to help with custom queries", "parameter": {}, "task": "Retrieve the OpenTelemetry schema structure to assist in formulating custom log queries."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Langfuse Prompt Management", "description": "1. List available prompts 2. Retrieve and compile a specific prompt", "tools": [{"name": "get-prompts", "server": "Langfuse Prompt Management", "description": "List available prompts", "parameter": {"cursor": "(Optional, string) Parameter for pagination"}, "task": "List the first 10 available prompts, starting from the beginning of the list."}, {"name": "get-prompt", "server": "Langfuse Prompt Management", "description": "Retrieve and compile a specific prompt", "parameter": {"name": "(string) Name of the prompt to retrieve", "arguments": "(Optional, JSON object) Prompt variables"}, "task": "Retrieve the prompt named \"customer_onboarding\" with the variables {\"customer_name\": \"John Doe\", \"plan_type\": \"premium\"}."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "Lingo.dev", "description": "MCP server management, including: start/stop server, check status, list users, add/remove users", "tools": [{"name": "start-server", "server": "Lingo.dev", "description": "Starts the MCP server.", "parameter": {}, "task": "Start the MCP server to begin hosting services."}, {"name": "stop-server", "server": "Lingo.dev", "description": "Stops the running MCP server.", "parameter": {}, "task": "Stop the currently running MCP server."}, {"name": "status", "server": "Lingo.dev", "description": "Checks the current status of the MCP server.", "parameter": {}, "task": "Check the current operational status of the MCP server."}, {"name": "list-users", "server": "Lingo.dev", "description": "Lists all users registered with the MCP server.", "parameter": {}, "task": "List all registered users in the MCP server's database."}, {"name": "add-user", "server": "Lingo.dev", "description": "Adds a new user to the MCP server.", "parameter": {"username": "(string) The username for the new user.", "password": "(string) The password for the new user."}, "task": "Add a new user with the username \"john_doe\" and password \"securePass123\" to the MCP server."}, {"name": "remove-user", "server": "Lingo.dev", "description": "Removes an existing user from the MCP server.", "parameter": {"username": "(string) The username of the user to remove."}, "task": "Remove the user with the username 'john_doe' from the MCP server."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "MCP Toolbox for Databases", "description": "Search for hotels based on name", "tools": [{"name": "search-hotels-by-name", "server": "MCP Toolbox for Databases", "description": "Search for hotels based on name.", "parameter": {"name": "(string) The name of the hotel."}, "task": "Find the details of a hotel named \"Grand Plaza\" using the hotel search service."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务,包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Meilisearch", "description": "Meilisearch操作,包括:连接设置管理、索引创建与列表、文档检索与更新、搜索功能、索引设置管理、API密钥管理、任务管理、健康检查、版本与统计信息获取", "tools": [{"name": "get-connection-settings", "server": "Meilisearch", "description": "View current Meilisearch connection URL and API key status", "parameter": {}, "task": "Retrieve the current connection URL and API key status for the Meilisearch instance."}, {"name": "update-connection-settings", "server": "Meilisearch", "description": "Update URL and/or API key to connect to a different instance", "parameter": {"url": "(string) New Meilisearch instance URL", "api_key": "(string) New Meilisearch API key"}, "task": "Update the connection settings to a new Meilisearch instance with the URL \"https://search.example.com\" and the API key \"abc123xyz\"."}, {"name": "create-index", "server": "Meilisearch", "description": "Create a new index with optional primary key", "parameter": {"uid": "(string) Unique identifier for the index", "primaryKey": "(Optional, string) Primary key for the index"}, "task": "Create a new index with the unique identifier \"user_profiles\" and set \"user_id\" as the primary key."}, {"name": "list-indexes", "server": "Meilisearch", "description": "List all available indexes", "parameter": {}, "task": "List all available indexes in the current database."}, {"name": "get-index-metrics", "server": "Meilisearch", "description": "Get detailed metrics for a specific index", "parameter": {"uid": "(string) Unique identifier for the index"}, "task": "Retrieve the detailed metrics for the index with the unique identifier \"IDX-2024-001\"."}, {"name": "get-documents", "server": "Meilisearch", "description": "Retrieve documents from an index with pagination", "parameter": {"indexUid": "(string) Unique identifier for the index", "offset": "(Optional, integer) Number of results to skip (default: 0)", "limit": "(Optional, integer) Maximum number of results to return (default: 20)"}, "task": "Retrieve the first 15 documents from the index with the unique identifier \"customer_reviews\"."}, {"name": "add-documents", "server": "Meilisearch", "description": "Add or update documents in an index", "parameter": {"indexUid": "(string) Unique identifier for the index", "documents": "(array of objects) Documents to add or update"}, "task": "Add or update 5 product documents in the index with the unique identifier \"products_2024\". The documents should include fields for product ID, name, price, and category."}, {"name": "search", "server": "Meilisearch", "description": "Flexible search across single or multiple indices with filtering and sorting options", "parameter": {"query": "(string) The search query (required)", "indexUid": "(Optional, string) Specific index to search in", "limit": "(Optional, integer) Maximum number of results per index (default: 20)", "offset": "(Optional, integer) Number of results to skip (default: 0)", "filter": "(Optional, string) Filter expression", "sort": "(Optional, array of strings) Sorting rules"}, "task": "Search for documents containing the keyword \"machine learning\" across all indices, limiting the results to 15 per index and sorting them by publication date in descending order."}, {"name": "get-settings", "server": "Meilisearch", "description": "View current settings for an index", "parameter": {"uid": "(string) Unique identifier for the index"}, "task": "Retrieve the current configuration details for the index with the unique identifier \"IDX12345\"."}, {"name": "update-settings", "server": "Meilisearch", "description": "Update index settings (ranking, faceting, etc.)", "parameter": {"uid": "(string) Unique identifier for the index", "settings": "(object) New settings to apply"}, "task": "Update the ranking and faceting settings for the index with the unique identifier 'IDX12345' to optimize search performance."}, {"name": "get-keys", "server": "Meilisearch", "description": "List all API keys", "parameter": {}, "task": "List all available API keys stored in the system."}, {"name": "create-key", "server": "Meilisearch", "description": "Create new API key with specific permissions", "parameter": {"description": "(string) Description for the API key", "actions": "(array of strings) Actions allowed for the API key", "indexes": "(array of strings) Indexes the API key can access", "expiresAt": "(Optional, string) Expiration date and time for the API key"}, "task": "Generate a new API key with permissions to read and write data on the \"customers\" and \"orders\" indexes, set to expire on 2025-12-31. The key should allow actions for document creation and deletion."}, {"name": "delete-key", "server": "Meilisearch", "description": "Delete an existing API key", "parameter": {"key": "(string) API key to delete"}, "task": "Delete the API key with the identifier \"XYZ12345\"."}, {"name": "get-task", "server": "Meilisearch", "description": "Get information about a specific task", "parameter": {"uid": "(string) Unique identifier for the task"}, "task": "Retrieve the details of the task with the unique identifier \"TASK-12345\"."}, {"name": "get-tasks", "server": "Meilisearch", "description": "List tasks with optional filters", "parameter": {"limit": "(Optional, integer) Maximum number of tasks to return", "from": "(Optional, integer) Number of tasks to skip", "reverse": "(Optional, boolean) Sort order of tasks", "batchUids": "(Optional, array of strings) Filter by batch UIDs", "uids": "(Optional, array of strings) Filter by task UIDs", "canceledBy": "(Optional, string) Filter by cancellation source", "types": "(Optional, array of strings) Filter by task types", "statuses": "(Optional, array of strings) Filter by task statuses", "indexUids": "(Optional, array of strings) Filter by index UIDs", "afterEnqueuedAt": "(Optional, string) Filter by enqueue time", "beforeEnqueuedAt": "(Optional, string) Filter by enqueue time", "afterStartedAt": "(Optional, string) Filter by start time", "beforeStartedAt": "(Optional, string) Filter by start time", "afterFinishedAt": "(Optional, string) Filter by finish time", "beforeFinishedAt": "(Optional, string) Filter by finish time"}, "task": "Retrieve the first 20 tasks that were enqueued after 2024-05-01 and have a status of \"completed\", sorted in reverse chronological order."}, {"name": "cancel-tasks", "server": "Meilisearch", "description": "Cancel pending or enqueued tasks", "parameter": {"uids": "(array of strings) Task UIDs to cancel", "batchUids": "(Optional, array of strings) Batch UIDs to filter tasks", "types": "(Optional, array of strings) Task types to filter tasks", "statuses": "(Optional, array of strings) Task statuses to filter tasks", "indexUids": "(Optional, array of strings) Index UIDs to filter tasks", "canceledBy": "(Optional, string) Cancellation source"}, "task": "Cancel all pending tasks with the status \"enqueued\" for the index with UID \"documents\"."}, {"name": "delete-tasks", "server": "Meilisearch", "description": "Delete completed tasks", "parameter": {"uids": "(array of strings) Task UIDs to delete", "batchUids": "(Optional, array of strings) Batch UIDs to filter tasks", "types": "(Optional, array of strings) Task types to filter tasks", "statuses": "(Optional, array of strings) Task statuses to filter tasks", "indexUids": "(Optional, array of strings) Index UIDs to filter tasks", "canceledBy": "(Optional, string) Cancellation source"}, "task": "Delete all completed tasks with the status \"finished\" that belong to the \"data_processing\" type and were canceled by the \"system\" source."}, {"name": "health-check", "server": "Meilisearch", "description": "Basic health check", "parameter": {}, "task": "Perform a basic health check on the system to ensure all essential services are running properly."}, {"name": "get-health-status", "server": "Meilisearch", "description": "Comprehensive health status", "parameter": {}, "task": "Check the comprehensive health status of the system."}, {"name": "get-version", "server": "Meilisearch", "description": "Get Meilisearch version information", "parameter": {}, "task": "Retrieve the current version details of the Meilisearch instance."}, {"name": "get-stats", "server": "Meilisearch", "description": "Get database statistics", "parameter": {}, "task": "Retrieve the latest database statistics including table sizes, row counts, and index usage."}, {"name": "get-system-info", "server": "Meilisearch", "description": "Get system-level information", "parameter": {}, "task": "Retrieve the current system-level information including CPU, memory, and disk usage."}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Milvus", "description": "Milvus数据库操作,包括:全文搜索、向量相似性搜索、集合查询、集合管理(创建/加载/释放)、数据插入与删除", "tools": [{"name": "milvus_text_search", "server": "Milvus", "description": "Search for documents using full text search", "parameter": {"collection_name": "(string) Name of collection to search", "query_text": "(string) Text to search for", "limit": "(Optional, int) Maximum results (default: 5)", "output_fields": "(Optional, list) Fields to include in results", "drop_ratio": "(Optional, float) Proportion of low-frequency terms to ignore (0.0-1.0)"}, "task": "Search for documents containing the phrase \"machine learning applications\" in the \"research_papers\" collection, returning a maximum of 10 results with title and abstract fields included, while ignoring 20% of low-frequency terms."}, {"name": "milvus_vector_search", "server": "Milvus", "description": "Perform vector similarity search on a collection", "parameter": {"collection_name": "(string) Name of collection to search", "vector": "(list) Query vector", "vector_field": "(Optional, string) Field containing vectors to search (default: 'vector')", "limit": "(Optional, int) Maximum results (default: 5)", "output_fields": "(Optional, list) Fields to include in results", "metric_type": "(Optional, string) Distance metric (COSINE, L2, IP) (default: 'COSINE')"}, "task": "Find the top 3 most similar vectors to the input vector [0.1, 0.5, 0.8] in the 'product_embeddings' collection using the COSINE distance metric, and include the 'product_id' and 'name' fields in the results."}, {"name": "milvus_query", "server": "Milvus", "description": "Query collection using filter expressions", "parameter": {"collection_name": "(string) Name of collection to query", "filter_expr": "(string) Filter expression (e.g. 'age > 20')", "output_fields": "(Optional, list) Fields to include in results", "limit": "(Optional, int) Maximum results (default: 10)"}, "task": "Retrieve up to 15 records from the 'customer_profiles' collection where the 'purchase_frequency' field is greater than 5, including only the 'customer_id' and 'last_purchase_date' fields in the results."}, {"name": "milvus_list_collections", "server": "Milvus", "description": "List all collections in the database", "parameter": {}, "task": "List all available collections in the Milvus vector database."}, {"name": "milvus_create_collection", "server": "Milvus", "description": "Create a new collection with specified schema", "parameter": {"collection_name": "(string) Name for the new collection", "collection_schema": "(dict) Collection schema definition", "index_params": "(Optional, dict) Optional index parameters"}, "task": "Create a new collection named \"user_profiles\" with a schema defining fields for user ID, name, and embedding vector, and set the index parameters to use the IVF_FLAT algorithm with 128 clusters."}, {"name": "milvus_load_collection", "server": "Milvus", "description": "Load a collection into memory for search and query", "parameter": {"collection_name": "(string) Name of collection to load", "replica_number": "(Optional, int) Number of replicas (default: 1)"}, "task": "Load the collection named \"customer_profiles\" into memory with 2 replicas for search and query operations."}, {"name": "milvus_release_collection", "server": "Milvus", "description": "Release a collection from memory", "parameter": {"collection_name": "(string) Name of collection to release"}, "task": "Release the collection named \"customer_profiles\" from memory to free up resources."}, {"name": "milvus_insert_data", "server": "Milvus", "description": "Insert data into a collection", "parameter": {"collection_name": "(string) Name of collection", "data": "(dict) Dictionary mapping field names to lists of values"}, "task": "Insert customer records into the specified collection, including fields for name, email, and purchase history."}, {"name": "milvus_delete_entities", "server": "Milvus", "description": "Delete entities from a collection based on filter expression", "parameter": {"collection_name": "(string) Name of collection", "filter_expr": "(string) Filter expression to select entities to delete"}, "task": "Delete all entities from the 'customer_profiles' collection where the 'last_login' date is before 2023-01-01."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Momento", "description": "Momento缓存服务操作，包括：获取缓存值、设置缓存值（带TTL）、列出所有缓存、创建新缓存、删除缓存", "tools": [{"name": "get", "server": "Momento", "description": "Get the cache value stored for the given key.", "parameter": {"key": "string -- the key to look up in the cache.", "cacheName": "(Optional, string) -- the name cache where the key presides"}, "task": "Retrieve the cached value associated with the key \"user_session_12345\" from the default cache."}, {"name": "set", "server": "Momento", "description": "Sets the value in cache with a given Time To Live (TTL) seconds. If a value for this key is already present, it will be replaced by the new value regardless of the previous value's data type.", "parameter": {"key": "string -- the key to set in the cache", "value": "string -- the value to set for the given key", "ttl": "(Optional, integer) -- the number of seconds to keep this value in the cache", "cacheName": "(Optional, string) -- the name of the cache to store the key in"}, "task": "Store the value \"user_session_12345\" with a 300-second TTL in the \"session_cache\" using the key \"current_user\"."}, {"name": "list-caches", "server": "Momento", "description": "Lists the names of all the caches in your Momento account.", "parameter": {}, "task": "List all the available cache names in your Momento account."}, {"name": "create-cache", "server": "Momento", "description": "Creates a new cache in your Momento account.", "parameter": {"name": "string -- the name of the cache to create"}, "task": "Create a new cache named \"user-sessions\" in your Momento account."}, {"name": "delete-cache", "server": "Momento", "description": "Deletes a cache from your Momento account.", "parameter": {"name": "string -- the name of the cache to delete"}, "task": "Delete the cache named \"user-sessions\" from your Momento account."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "MongoDB", "description": "MongoDB Atlas管理工具集，包括：组织与项目管理、集群创建与连接、访问控制配置、数据库用户管理、数据库操作（查询、聚合、插入、更新、删除）、集合与索引管理、数据库统计信息获取", "tools": [{"name": "atlas-list-orgs", "server": "MongoDB", "description": "Lists MongoDB Atlas organizations", "parameter": {}, "task": "List all MongoDB Atlas organizations currently available in the system."}, {"name": "atlas-list-projects", "server": "MongoDB", "description": "Lists MongoDB Atlas projects", "parameter": {}, "task": "List all available projects in the MongoDB Atlas database."}, {"name": "atlas-create-project", "server": "MongoDB", "description": "Creates a new MongoDB Atlas project", "parameter": {}, "task": "Create a new MongoDB Atlas project with default settings."}, {"name": "atlas-list-clusters", "server": "MongoDB", "description": "Lists MongoDB Atlas clusters", "parameter": {}, "task": "List all MongoDB Atlas clusters currently available in the connected account."}, {"name": "atlas-inspect-cluster", "server": "MongoDB", "description": "Inspect a specific MongoDB Atlas cluster", "parameter": {}, "task": "Inspect the current status and configuration details of the specified MongoDB Atlas cluster."}, {"name": "atlas-create-free-cluster", "server": "MongoDB", "description": "Create a free MongoDB Atlas cluster", "parameter": {}, "task": "Create a free MongoDB Atlas cluster with the default configuration."}, {"name": "atlas-connect-cluster", "server": "MongoDB", "description": "Connects to MongoDB Atlas cluster", "parameter": {}, "task": "Connect to the MongoDB Atlas cluster named \"ProductionCluster\" and verify the connection status."}, {"name": "atlas-inspect-access-list", "server": "MongoDB", "description": "Inspect IP/CIDR ranges with access to MongoDB Atlas clusters", "parameter": {}, "task": "Inspect all IP/CIDR ranges that currently have access permissions to the MongoDB Atlas clusters."}, {"name": "atlas-create-access-list", "server": "MongoDB", "description": "Configure IP/CIDR access list for MongoDB Atlas clusters", "parameter": {}, "task": "Configure the IP/CIDR access list for all MongoDB Atlas clusters to restrict access to specific IP ranges."}, {"name": "atlas-list-db-users", "server": "MongoDB", "description": "List MongoDB Atlas database users", "parameter": {}, "task": "List all database users in the MongoDB Atlas cluster."}, {"name": "atlas-create-db-user", "server": "MongoDB", "description": "List MongoDB Atlas database users", "parameter": {}, "task": "List all database users in the MongoDB Atlas cluster."}, {"name": "connect", "server": "MongoDB", "description": "Connect to a MongoDB instance", "parameter": {}, "task": "Connect to a MongoDB instance running on the default localhost port."}, {"name": "find", "server": "MongoDB", "description": "Run a find query against a MongoDB collection", "parameter": {}, "task": "Search for all documents in the specified MongoDB collection where the \"status\" field equals \"active\"."}, {"name": "aggregate", "server": "MongoDB", "description": "Run an aggregation against a MongoDB collection", "parameter": {}, "task": "Aggregate the total sales amount from the MongoDB collection for the first quarter of 2024."}, {"name": "count", "server": "MongoDB", "description": "Get the number of documents in a MongoDB collection", "parameter": {}, "task": "Count the number of documents in the specified MongoDB collection."}, {"name": "insert-one", "server": "MongoDB", "description": "Insert a single document into a MongoDB collection", "parameter": {}, "task": "Insert a new document containing user details (name, email, and registration date) into the specified MongoDB collection."}, {"name": "insert-many", "server": "MongoDB", "description": "Insert multiple documents into a MongoDB collection", "parameter": {}, "task": "Insert 50 customer records into the specified MongoDB collection."}, {"name": "create-index", "server": "MongoDB", "description": "Create an index for a MongoDB collection", "parameter": {}, "task": "Create an index for the \"users\" collection in MongoDB to optimize query performance on the \"email\" field."}, {"name": "update-one", "server": "MongoDB", "description": "Update a single document in a MongoDB collection", "parameter": {}, "task": "Update the document with the ID \"12345\" in the \"users\" collection to set the \"status\" field to \"active\"."}, {"name": "update-many", "server": "MongoDB", "description": "Update multiple documents in a MongoDB collection", "parameter": {}, "task": "Update all documents in the MongoDB collection where the \"status\" field is set to \"pending\" and change it to \"processed\"."}, {"name": "rename-collection", "server": "MongoDB", "description": "Rename a MongoDB collection", "parameter": {}, "task": "Rename the existing MongoDB collection 'customer_data' to 'client_records'."}, {"name": "delete-one", "server": "MongoDB", "description": "Delete a single document from a MongoDB collection", "parameter": {}, "task": "Delete the document with the ID \"12345\" from the specified MongoDB collection."}, {"name": "delete-many", "server": "MongoDB", "description": "Delete multiple documents from a MongoDB collection", "parameter": {}, "task": "Delete all documents from the 'users' collection where the 'status' field is set to 'inactive'."}, {"name": "drop-collection", "server": "MongoDB", "description": "Remove a collection from a MongoDB database", "parameter": {}, "task": "Remove the 'customer_data' collection from the connected MongoDB database."}, {"name": "drop-database", "server": "MongoDB", "description": "Remove a MongoDB database", "parameter": {}, "task": "Remove the currently connected MongoDB database."}, {"name": "list-databases", "server": "MongoDB", "description": "List all databases for a MongoDB connection", "parameter": {}, "task": "List all available databases in the connected MongoDB instance."}, {"name": "list-collections", "server": "MongoDB", "description": "List all collections for a given database", "parameter": {}, "task": "List all collections available in the connected MongoDB database."}, {"name": "collection-indexes", "server": "MongoDB", "description": "Describe the indexes for a collection", "parameter": {}, "task": "Describe the indexes for the specified collection in the database."}, {"name": "collection-schema", "server": "MongoDB", "description": "Describe the schema for a collection", "parameter": {}, "task": "Describe the schema for the 'customer_data' collection."}, {"name": "collection-storage-size", "server": "MongoDB", "description": "Get the size of a collection in MB", "parameter": {}, "task": "Retrieve the storage size in MB for the specified database collection."}, {"name": "db-stats", "server": "MongoDB", "description": "Return statistics about a MongoDB database", "parameter": {}, "task": "Return the statistics for the connected MongoDB database, including details like collection counts, storage size, and index usage."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "MotherDuck", "description": "Execute SQL queries on DuckDB or MotherDuck databases", "tools": [{"name": "query", "server": "MotherDuck", "description": "Execute a SQL query on the DuckDB or MotherDuck database", "parameter": {"query": "(string, required) The SQL query to execute"}, "task": "Retrieve the top 10 highest-priced products from the DuckDB or MotherDuck database using a SQL query."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Neo4j", "description": "1.将自然语言转换为Cypher查询以在Neo4j数据库上执行读写操作 2.在Neo4j实例中管理个人知识图谱 3.提供Neo4j Aura云实例的管理功能", "tools": [{"name": "mcp-neo4j-cypher", "server": "Neo4j", "description": "Converts natural language to Cypher queries for executing read and write operations on a configured Neo4j database.", "parameter": {}, "task": "Generate a list of all nodes and their relationships in the Neo4j database, formatted as a graph visualization."}, {"name": "mcp-neo4j-memory", "server": "Neo4j", "description": "Manages a personal knowledge graph in a Neo4j instance, allowing storage and retrieval of entities and relationships across different sessions and clients.", "parameter": {}, "task": "Retrieve all entities and their relationships stored in the personal knowledge graph from the Neo4j instance."}, {"name": "mcp-neo4j-cloud-aura-api", "server": "Neo4j", "description": "Provides management capabilities for Neo4j Aura cloud instances, including creating, destroying, finding, scaling, and enabling features.", "parameter": {}, "task": "Create a new Neo4j Aura cloud instance with default settings and enable all available features."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Neon", "description": "Neon数据库项目管理与操作,包括:项目列表检索、项目详情获取、项目创建与删除、分支创建与删除、分支详情获取、数据库连接字符串获取、SQL查询执行、SQL事务执行、数据库表列表获取、表结构详情获取、数据库迁移准备与完成、Neon Auth认证配置", "tools": [{"name": "list_projects", "server": "Neon", "description": "Retrieves a list of your Neon projects, providing a summary of each project associated with your Neon account.", "parameter": {}, "task": "Retrieve a summary of all projects associated with your Neon account."}, {"name": "describe_project", "server": "Neon", "description": "Fetches detailed information about a specific Neon project, including its ID, name, and associated branches and databases.", "parameter": {}, "task": "Fetch detailed information about the current Neon project, including its ID, name, and all associated branches and databases."}, {"name": "create_project", "server": "Neon", "description": "Creates a new Neon project in your Neon account. A project acts as a container for branches, databases, roles, and computes.", "parameter": {}, "task": "Create a new project in your Neon account to serve as a container for branches, databases, roles, and computes."}, {"name": "delete_project", "server": "Neon", "description": "Deletes an existing Neon project and all its associated resources.", "parameter": {}, "task": "Delete an existing Neon project along with all its associated resources."}, {"name": "create_branch", "server": "Neon", "description": "Creates a new branch within a specified Neon project. Leverages Neon's branching feature for development, testing, or migrations.", "parameter": {}, "task": "Create a new branch in the specified Neon project for development purposes."}, {"name": "delete_branch", "server": "Neon", "description": "Deletes an existing branch from a Neon project.", "parameter": {}, "task": "Delete the 'feature-login' branch from the connected Neon project."}, {"name": "describe_branch", "server": "Neon", "description": "Retrieves details about a specific branch, such as its name, ID, and parent branch.", "parameter": {}, "task": "Retrieve the details of the main branch, including its name, ID, and parent branch information."}, {"name": "get_connection_string", "server": "Neon", "description": "Returns your database connection string.", "parameter": {}, "task": "Retrieve the connection details for the currently linked database."}, {"name": "run_sql", "server": "Neon", "description": "Executes a single SQL query against a specified Neon database. Supports both read and write operations.", "parameter": {}, "task": "Execute a SQL query to retrieve the top 10 highest-grossing products from the Neon database for the year 2024."}, {"name": "run_sql_transaction", "server": "Neon", "description": "Executes a series of SQL queries within a single transaction against a Neon database.", "parameter": {}, "task": "Execute a series of SQL queries within a single transaction to update customer records and their corresponding order statuses in the Neon database."}, {"name": "get_database_tables", "server": "Neon", "description": "Lists all tables within a specified Neon database.", "parameter": {}, "task": "List all tables available in the connected Neon database."}, {"name": "describe_table_schema", "server": "Neon", "description": "Retrieves the schema definition of a specific table, detailing columns, data types, and constraints.", "parameter": {}, "task": "Retrieve the schema definition for the 'customer_orders' table, including column names, data types, and constraints."}, {"name": "prepare_database_migration", "server": "Neon", "description": "Initiates a database migration process. Creates a temporary branch to apply and test the migration safely before affecting the main branch.", "parameter": {}, "task": "Prepare a temporary branch for testing database schema changes before applying them to the main branch."}, {"name": "complete_database_migration", "server": "Neon", "description": "Finalizes and applies a prepared database migration to the main branch. Merges changes from the temporary migration branch and cleans up temporary resources.", "parameter": {}, "task": "Finalize and apply the prepared database migration to the main branch, merging changes from the temporary migration branch and cleaning up all temporary resources."}, {"name": "provision_neon_auth", "server": "Neon", "description": "Action to provision Neon Auth for a Neon project. It allows developers to easily set up authentication infrastructure by creating an integration with Stack Auth.", "parameter": {}, "task": "Set up authentication infrastructure for a Neon project by integrating with Stack Auth."}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Octagon", "description": "1. Extract information from SEC filings 2. Analyze earnings call transcripts 3. Retrieve financial metrics and ratios 4. Access stock market data 5. Research private company information 6. Research startup funding rounds and venture capital 7. Research M&A and IPO transactions 8. Look up information on investors 9. Analyze private debts, borrowers, and lenders 10. Extract data from any public website 11. Perform comprehensive research on any topic", "tools": [{"name": "octagon-sec-agent", "server": "Octagon", "description": "Extract information from SEC filings.", "parameter": {"prompt": "(string) A natural language query specifying the information to extract from SEC filings."}, "task": "Extract the executive compensation details for the CEO from the latest annual report (10-K) filed by a publicly traded company."}, {"name": "octagon-transcripts-agent", "server": "Octagon", "description": "Analyze earnings call transcripts.", "parameter": {"prompt": "(string) A natural language query specifying the information to extract from earnings call transcripts."}, "task": "Extract insights about revenue growth projections for the next fiscal year from the latest earnings call transcripts."}, {"name": "octagon-financials-agent", "server": "Octagon", "description": "Retrieve financial metrics and ratios.", "parameter": {"prompt": "(string) A natural language query specifying the financial metrics or ratios to retrieve."}, "task": "Retrieve the current price-to-earnings ratio and debt-to-equity ratio for Apple Inc. using natural language query."}, {"name": "octagon-stock-data-agent", "server": "Octagon", "description": "Access stock market data.", "parameter": {"prompt": "(string) A natural language query specifying the stock market data to access."}, "task": "Retrieve the latest closing price and trading volume for Apple Inc. (AAPL) from the stock market data."}, {"name": "octagon-companies-agent", "server": "Octagon", "description": "Research private company information.", "parameter": {"prompt": "(string) A natural language query specifying the private company information to research."}, "task": "Research the latest funding round details for a private AI startup based in San Francisco."}, {"name": "octagon-funding-agent", "server": "Octagon", "description": "Research startup funding rounds and venture capital.", "parameter": {"prompt": "(string) A natural language query specifying the funding rounds or venture capital information to research."}, "task": "Research the latest Series A funding rounds for AI startups in the healthcare sector."}, {"name": "octagon-deals-agent", "server": "Octagon", "description": "Research M&A and IPO transactions.", "parameter": {"prompt": "(string) A natural language query specifying the M&A or IPO transaction information to research."}, "task": "Research the latest M&A transactions in the technology sector involving companies valued over $1 billion."}, {"name": "octagon-investors-agent", "server": "Octagon", "description": "A specialized database agent for looking up information on investors.", "parameter": {"prompt": "(string) A natural language query specifying the investor information to look up."}, "task": "Retrieve the investment portfolio details for the top 5 most active venture capital firms in the last quarter."}, {"name": "octagon-debts-agent", "server": "Octagon", "description": "A specialized database agent for analyzing private debts, borrowers, and lenders.", "parameter": {"prompt": "(string) A natural language query specifying the debt information to analyze."}, "task": "Analyze the debt records of borrowers who have outstanding loans exceeding $50,000 in the last quarter."}, {"name": "octagon-scraper-agent", "server": "Octagon", "description": "Extract data from any public website.", "parameter": {"prompt": "(string) A natural language query specifying the data to extract from a public website."}, "task": "Extract the latest 10 news headlines from the homepage of a major news website."}, {"name": "octagon-deep-research-agent", "server": "Octagon", "description": "Perform comprehensive research on any topic.", "parameter": {"prompt": "(string) A natural language query specifying the topic to research."}, "task": "Conduct an in-depth analysis of the impact of artificial intelligence on modern healthcare systems."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Oxylabs", "description": "1.使用Oxylabs Web Scraper API进行网站爬取，支持JavaScript渲染、结构化数据解析和Markdown格式HTML清理 2.使用Oxylabs Web Unblocker访问难以访问的网站，支持JavaScript渲染和HTML清理", "tools": [{"name": "oxylabs_scraper", "server": "Oxylabs", "description": "Uses Oxylabs Web Scraper API for general website scraping with support for JavaScript rendering, parsed structured data, and cleaned HTML in Markdown format.", "parameter": {"url": "(string) The URL to scrape", "parse": "(Optional, boolean) Enable structured data extraction", "render": "(Optional, string) Use headless browser rendering; values: 'html' or 'None'"}, "task": "Scrape the product details from the specified e-commerce website URL, including structured data extraction and using headless browser rendering for JavaScript-heavy content."}, {"name": "oxylabs_web_unblocker", "server": "Oxylabs", "description": "Uses Oxylabs Web Unblocker for hard-to-access websites with support for JavaScript rendering and cleaned HTML, but does not return parsed data.", "parameter": {"url": "(string) The URL to scrape", "render": "(Optional, string) Use headless browser rendering; values: 'html' or 'None'"}, "task": "Access the content of a hard-to-reach website at \"https://example.com\" using headless browser rendering to ensure JavaScript is executed."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Perplexity", "description": "Engage in live web searches using the Sonar API", "tools": [{"name": "perplexity_ask", "server": "Perplexity", "description": "Engage in a conversation with the Sonar API for live web searches.", "parameter": {"messages": "(array) An array of conversation messages. Each message must include: role (string) The role of the message (e.g., system, user, assistant), content (string) The content of the message."}, "task": "Initiate a conversation with the web search API to find the latest advancements in renewable energy technology, providing a user message requesting detailed information and an assistant message summarizing the findings."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Pinecone", "description": "Pinecone vector database operations, including: document search, index listing/description/statistics, index creation with integrated inference, record upsert/search, cascading search across indexes, and document reranking", "tools": [{"name": "search-docs", "server": "Pinecone", "description": "Search the official Pinecone documentation.", "parameter": {}, "task": "Search the official documentation for information on how to set up a Pinecone index."}, {"name": "list-indexes", "server": "Pinecone", "description": "Lists all Pinecone indexes.", "parameter": {}, "task": "List all available indexes in the Pinecone vector database."}, {"name": "describe-index", "server": "Pinecone", "description": "Describes the configuration of an index.", "parameter": {}, "task": "Describe the configuration of the current index in the system."}, {"name": "describe-index-stats", "server": "Pinecone", "description": "Provides statistics about the data in the index, including the number of records and available namespaces.", "parameter": {}, "task": "Provide statistics about the data in the index, including the number of records and available namespaces."}, {"name": "create-index-for-model", "server": "Pinecone", "description": "Creates a new index that uses an integrated inference model to embed text as vectors.", "parameter": {}, "task": "Create a new index that embeds text as vectors using an integrated inference model."}, {"name": "upsert-records", "server": "Pinecone", "description": "Inserts or updates records in an index with integrated inference.", "parameter": {}, "task": "Update or insert records in the specified index, ensuring the data includes inferred fields for enhanced searchability."}, {"name": "search-records", "server": "Pinecone", "description": "Searches for records in an index based on a text query, using integrated inference for embedding. Has options for metadata filtering and reranking.", "parameter": {}, "task": "Search for records related to \"climate change policies\" in the specified index, applying metadata filtering for documents published after 2020 and reranking the results by relevance."}, {"name": "cascading-search", "server": "Pinecone", "description": "Searches for records across multiple indexes, deduplicating and reranking the results.", "parameter": {}, "task": "Search for relevant records across multiple indexes, ensuring the results are deduplicated and reranked for accuracy."}, {"name": "rerank-documents", "server": "Pinecone", "description": "Reranks a collection of records or text documents using a specialized reranking model.", "parameter": {}, "task": "Rerank a collection of 50 research papers based on relevance to the topic \"machine learning in healthcare.\""}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Redis", "description": "Redis database operations including: string operations with expiration, hash field-value pair storage, list operations for queues, set operations for unique values, sorted set operations for leaderboards, pub/sub for real-time messaging, stream operations for event sourcing, JSON document manipulation, vector search query engine, and server information retrieval", "tools": [{"name": "string", "server": "Redis", "description": "Tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.", "parameter": {}, "task": "Store a session token with an expiration time of 30 minutes."}, {"name": "hash", "server": "Redis", "description": "Tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.", "parameter": {}, "task": "Store the vector embeddings of a product with attributes including name, price, and category in a hash structure."}, {"name": "list", "server": "Redis", "description": "Tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.", "parameter": {}, "task": "Maintain a list of the 10 most recent user actions in the system."}, {"name": "set", "server": "Redis", "description": "Tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.", "parameter": {}, "task": "Add the user IDs \"user123\", \"user456\", and \"user789\" to a set for tracking unique members."}, {"name": "sorted set", "server": "Redis", "description": "Tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.", "parameter": {}, "task": "Generate a leaderboard for the top 10 players based on their scores in the latest gaming tournament."}, {"name": "pub/sub", "server": "Redis", "description": "Functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.", "parameter": {}, "task": "Send a real-time notification to all subscribed clients about a system maintenance scheduled for tomorrow at 2 AM."}, {"name": "streams", "server": "Redis", "description": "Tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.", "parameter": {}, "task": "Add a new event to the data stream with the details of a user login activity, including timestamp and user ID."}, {"name": "JSON", "server": "Redis", "description": "Tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.", "parameter": {}, "task": "Store a nested JSON document containing user profile information, including name, email, and address details, in Redis."}, {"name": "query engine", "server": "Redis", "description": "Tools to manage vector indexes and perform vector search.", "parameter": {}, "task": "Search for the top 5 most similar vectors to a given query vector in the vector index."}, {"name": "server management", "server": "Redis", "description": "Tool to retrieve information about the database.", "parameter": {}, "task": "Retrieve the current status and configuration details of the connected database server."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Redis Cloud API", "description": "Redis Cloud account management, including: account details retrieval, payment methods listing, Pro/Essential subscriptions creation/listing/deletion, database modules listing, regions and plans retrieval, task management", "tools": [{"name": "get_current_account", "server": "Redis Cloud API", "description": "Get details about your current Redis Cloud account", "parameter": {}, "task": "Retrieve the details of the currently active Redis Cloud account."}, {"name": "get_current_payment_methods", "server": "Redis Cloud API", "description": "List all payment methods configured for your account", "parameter": {}, "task": "List all currently configured payment methods for the account."}, {"name": "get_pro_subscriptions", "server": "Redis Cloud API", "description": "List all Pro subscriptions in your account", "parameter": {}, "task": "List all active Pro subscriptions associated with the current account."}, {"name": "create_pro_subscription", "server": "Redis Cloud API", "description": "Create a new Pro subscription with advanced configuration options", "parameter": {"multi_cloud_deployment": "(Optional, boolean) Whether to support multi-cloud deployment", "memory": "(Optional, number) Memory configuration", "persistence": "(Optional, boolean) Persistence configuration", "modules": "(Optional, array) List of modules to configure", "active_active_deployments": "(Optional, boolean) Set up Active-Active deployments", "networking_configuration": "(Optional, object) Custom networking configuration"}, "task": "Create a new Pro subscription with multi-cloud deployment enabled, 16GB of memory, persistence turned on, and Active-Active deployments configured. Include the modules \"analytics\" and \"security\" in the setup."}, {"name": "get_essential_subscriptions", "server": "Redis Cloud API", "description": "List all Essential subscriptions (paginated)", "parameter": {}, "task": "List all Essential subscriptions with pagination."}, {"name": "get_essential_subscription_by_id", "server": "Redis Cloud API", "description": "Get detailed information about a specific Essential subscription", "parameter": {"subscription_id": "(string) ID of the Essential subscription"}, "task": "Retrieve the detailed information for the Essential subscription with the ID \"ESS12345\"."}, {"name": "create_essential_subscription", "server": "Redis Cloud API", "description": "Create a new Essential subscription", "parameter": {}, "task": "Create a new Essential subscription for the user account."}, {"name": "delete_essential_subscription", "server": "Redis Cloud API", "description": "Delete an Essential subscription", "parameter": {"subscription_id": "(string) ID of the Essential subscription to delete"}, "task": "Delete the Essential subscription with the ID 'ESS123456789'."}, {"name": "get_database_modules", "server": "Redis Cloud API", "description": "List all available database modules (capabilities) supported in your account", "parameter": {}, "task": "List all available database modules (capabilities) supported in the current account."}, {"name": "get_pro_plans_regions", "server": "Redis Cloud API", "description": "Get available regions across cloud providers", "parameter": {}, "task": "Retrieve the list of available regions supported by major cloud service providers."}, {"name": "get_essentials_plans", "server": "Redis Cloud API", "description": "List available Essential subscription plans (paginated)", "parameter": {}, "task": "List the first 10 available Essential subscription plans."}, {"name": "get_tasks", "server": "Redis Cloud API", "description": "List all current tasks in your account", "parameter": {}, "task": "List all the tasks currently present in your account."}, {"name": "get_task_by_id", "server": "Redis Cloud API", "description": "Get detailed information about a specific task", "parameter": {"task_id": "(string) ID of the task"}, "task": "Retrieve the detailed information for the task with ID \"TASK-12345\"."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Qdrant", "description": "1. Store information in Qdrant database 2. Retrieve information from Qdrant database", "tools": [{"name": "qdrant-store", "server": "Qdrant", "description": "Store some information in the Qdrant database", "parameter": {"information": "(string) Information to store", "metadata": "(Optional, JSON) Optional metadata to store", "collection_name": "(string) Name of the collection to store the information in. Required if there is no default collection name."}, "task": "Store the text \"Latest research findings on renewable energy\" in the Qdrant database collection named \"scientific_research\" along with metadata including the author's name and publication date."}, {"name": "qdrant-find", "server": "Qdrant", "description": "Retrieve relevant information from the Qdrant database", "parameter": {"query": "(string) Query to use for searching", "collection_name": "(string) Name of the collection to store the information in. Required if there is no default collection name."}, "task": "Search for documents related to \"machine learning applications\" in the specified Qdrant collection."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Ramp", "description": "1.数据处理与分析 2.临时数据库查询与表清理 3.财务数据加载（交易、报销、账单等） 4.组织数据加载（部门、用户、供应商等）", "tools": [{"name": "process_data", "server": "Ramp", "description": "Processes data for analysis.", "parameter": {}, "task": "Process the dataset to prepare it for analysis by cleaning and structuring the data appropriately."}, {"name": "execute_query", "server": "Ramp", "description": "Executes a query on the ephemeral database.", "parameter": {}, "task": "Execute a query on the ephemeral database to retrieve all active user sessions."}, {"name": "clear_table", "server": "Ramp", "description": "Clears a table in the ephemeral database.", "parameter": {}, "task": "Clear all records from the specified table in the ephemeral database."}, {"name": "get_ramp_categories", "server": "Ramp", "description": "Fetches Ramp categories.", "parameter": {}, "task": "Fetch the list of available Ramp categories."}, {"name": "get_currencies", "server": "Ramp", "description": "Fetches available currencies.", "parameter": {}, "task": "Fetch the list of all available currencies."}, {"name": "load_transactions", "server": "Ramp", "description": "Loads transactions data.", "parameter": {}, "task": "Load the latest transactions data from the connected database."}, {"name": "load_reimbursements", "server": "Ramp", "description": "Loads reimbursements data.", "parameter": {}, "task": "Load the latest reimbursements data for review."}, {"name": "load_bills", "server": "Ramp", "description": "Loads bills data.", "parameter": {}, "task": "Load the latest bills data for the current month."}, {"name": "load_locations", "server": "Ramp", "description": "Loads locations data.", "parameter": {}, "task": "Load the latest available locations data for analysis."}, {"name": "load_departments", "server": "Ramp", "description": "Loads departments data.", "parameter": {}, "task": "Load the departments data from the connected database."}, {"name": "load_bank_accounts", "server": "Ramp", "description": "Loads bank accounts data.", "parameter": {}, "task": "Load the latest bank accounts data for all customers."}, {"name": "load_vendors", "server": "Ramp", "description": "Loads vendors data.", "parameter": {}, "task": "Load the latest available vendors data from the connected database."}, {"name": "load_vendor_bank_accounts", "server": "Ramp", "description": "Loads vendor bank accounts data.", "parameter": {}, "task": "Retrieve the latest vendor bank account details from the database."}, {"name": "load_entities", "server": "Ramp", "description": "Loads entities data.", "parameter": {}, "task": "Load the latest available entities data for analysis."}, {"name": "load_spend_limits", "server": "Ramp", "description": "Loads spend limits data.", "parameter": {}, "task": "Retrieve the latest spend limits data for review."}, {"name": "load_spend_programs", "server": "Ramp", "description": "Loads spend programs data.", "parameter": {}, "task": "Load the latest spend programs data for review."}, {"name": "load_users", "server": "Ramp", "description": "Loads users data.", "parameter": {}, "task": "Load the user data from the connected database."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Raygun", "description": "Application monitoring and management, including: application listing and details retrieval, API key regeneration, error group management, deployment operations, customer and session tracking, performance metrics analysis, source map handling, and team invitation management", "tools": [{"name": "list_applications", "server": "Raygun", "description": "List all applications under your account", "parameter": {}, "task": "List all applications associated with the current user account."}, {"name": "get_application", "server": "Raygun", "description": "Get application details by identifier", "parameter": {}, "task": "Retrieve the details of the application with the identifier \"APP12345\"."}, {"name": "get_application_by_api_key", "server": "Raygun", "description": "Get application details by API key", "parameter": {}, "task": "Retrieve the details of the application associated with the provided API key."}, {"name": "regenerate_application_api_key", "server": "Raygun", "description": "Generate a new API key for an application", "parameter": {}, "task": "Generate a new API key for the currently active application."}, {"name": "list_error_groups", "server": "Raygun", "description": "List error groups for an application", "parameter": {}, "task": "List all error groups associated with the specified application."}, {"name": "get_error_group", "server": "Raygun", "description": "Get detailed information about an error group", "parameter": {}, "task": "Retrieve detailed information about the most recent error group encountered in the system."}, {"name": "resolve_error_group", "server": "Raygun", "description": "Set error group status to resolved", "parameter": {}, "task": "Mark the specified error group as resolved in the system."}, {"name": "activate_error_group", "server": "Raygun", "description": "Set error group status to active", "parameter": {}, "task": "Activate the status of the specified error group."}, {"name": "ignore_error_group", "server": "Raygun", "description": "Set error group status to ignored", "parameter": {}, "task": "Ignore all error groups in the system to prevent further alerts."}, {"name": "permanently_ignore_error_group", "server": "Raygun", "description": "Set error group status to permanently ignored", "parameter": {}, "task": "Set the status of the specified error group to permanently ignored."}, {"name": "list_deployments", "server": "Raygun", "description": "List deployments for an application", "parameter": {}, "task": "List all deployments for the current application."}, {"name": "get_deployment", "server": "Raygun", "description": "Get deployment details by identifier", "parameter": {}, "task": "Retrieve the deployment details for the specified identifier."}, {"name": "delete_deployment", "server": "Raygun", "description": "Remove a deployment", "parameter": {}, "task": "Remove the currently active deployment from the system."}, {"name": "update_deployment", "server": "Raygun", "description": "Update deployment information", "parameter": {}, "task": "Update the deployment configuration for the latest version of the application."}, {"name": "reprocess_deployment_commits", "server": "Raygun", "description": "Reprocess deployment commit data", "parameter": {}, "task": "Reprocess the latest deployment commit data to ensure accuracy and completeness."}, {"name": "list_customers", "server": "Raygun", "description": "List customers for an application", "parameter": {}, "task": "List all customers associated with the current application."}, {"name": "list_sessions", "server": "Raygun", "description": "List user sessions for an application", "parameter": {}, "task": "List all active user sessions for the application within the last 24 hours."}, {"name": "get_session", "server": "Raygun", "description": "Get detailed session information", "parameter": {}, "task": "Retrieve the detailed information of the current active session."}, {"name": "list_pages", "server": "Raygun", "description": "List monitored pages for an application", "parameter": {}, "task": "List all monitored pages for the specified application."}, {"name": "get_page_metrics_time_series", "server": "Raygun", "description": "Get time-series performance metrics", "parameter": {}, "task": "Retrieve the performance metrics data for the last 30 days in time-series format."}, {"name": "get_page_metrics_histogram", "server": "Raygun", "description": "Get histogram of performance metrics", "parameter": {}, "task": "Generate a histogram showing the distribution of performance metrics for the last 30 days."}, {"name": "get_error_metrics_time_series", "server": "Raygun", "description": "Get time-series error metrics", "parameter": {}, "task": "Retrieve the time-series error metrics for the past 24 hours."}, {"name": "list_source_maps", "server": "Raygun", "description": "List source maps for an application", "parameter": {}, "task": "List all available source maps for the current application."}, {"name": "get_source_map", "server": "Raygun", "description": "Get source map details", "parameter": {}, "task": "Retrieve the detailed source map information for the current project."}, {"name": "update_source_map", "server": "Raygun", "description": "Update source map information", "parameter": {}, "task": "Update the source map information for the current project's latest build."}, {"name": "delete_source_map", "server": "Raygun", "description": "Remove a source map", "parameter": {}, "task": "Remove the source map associated with the current project."}, {"name": "upload_source_map", "server": "Raygun", "description": "Upload a new source map", "parameter": {}, "task": "Upload a new source map file for the current project version."}, {"name": "delete_all_source_maps", "server": "Raygun", "description": "Remove all source maps", "parameter": {}, "task": "Remove all source map files from the project directory."}, {"name": "list_invitations", "server": "Raygun", "description": "List pending team invitations", "parameter": {}, "task": "List all pending team invitations that have not been accepted or declined yet."}, {"name": "send_invitation", "server": "Raygun", "description": "Send a new team invitation", "parameter": {}, "task": "Send an invitation to join the project team to a new member."}, {"name": "get_invitation", "server": "Raygun", "description": "Get invitation details", "parameter": {}, "task": "Retrieve the details of the latest invitation sent to the recipient."}, {"name": "revoke_invitation", "server": "Raygun", "description": "Revoke a pending invitation", "parameter": {}, "task": "Revoke the pending invitation sent to the user with the email address \"example@domain.com\"."}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Rember", "description": "Create flashcards with AI using the Rember API from Claude notes", "tools": [{"name": "create_flashcards", "server": "Rember", "description": "Creates flashcards with AI by taking a list of notes from Claude and generating a few flashcards for each note using the Rember API.", "parameter": {"notes": "(list of strings) A list of notes from Claude to generate flashcards from."}, "task": "Generate flashcards for the following notes: \"Photosynthesis converts sunlight into energy,\" \"Mitochondria are the powerhouse of the cell,\" and \"DNA contains genetic information.\" Ensure each note has at least three flashcards."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Riza", "description": "1. Create new tools using Riza Tools API 2. Fetch and edit saved Riza tools 3. Execute saved tools securely on Riza's code interpreter API 4. List all available saved tools 5. Execute arbitrary code safely on Riza's code interpreter API", "tools": [{"name": "create_tool", "server": "Riza", "description": "Creates a new tool by writing code and saving it using the Riza Tools API.", "parameter": {}, "task": "Create a new tool that converts temperatures between Celsius and Fahrenheit and save it using the Riza Tools API."}, {"name": "fetch_tool", "server": "Riza", "description": "Fetches saved Riza tools, including their source code, for editing purposes.", "parameter": {}, "task": "Retrieve the latest version of all saved Riza tools for review and potential modifications."}, {"name": "execute_tool", "server": "Riza", "description": "Executes a saved tool securely on Riza's code interpreter API.", "parameter": {}, "task": "Execute a saved tool securely on the code interpreter API to perform a predefined task."}, {"name": "edit_tool", "server": "Riza", "description": "Edits an existing saved tool.", "parameter": {}, "task": "Edit the configuration of an existing saved tool to update its parameters or description."}, {"name": "list_tools", "server": "Riza", "description": "Lists all available saved tools.", "parameter": {}, "task": "List all the currently available saved tools along with their descriptions."}, {"name": "execute_code", "server": "Riza", "description": "Executes arbitrary code safely on Riza's code interpreter API without saving it as a tool.", "parameter": {}, "task": "Run a Python script to calculate the factorial of 10 using Riza's code interpreter."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "ScreenshotOne", "description": "Render a screenshot of a website and return it as an image", "tools": [{"name": "render-website-screenshot", "server": "ScreenshotOne", "description": "Render a screenshot of a website and returns it as an image.", "parameter": {}, "task": "Generate a screenshot of the homepage of \"https://example.com\" and return it as an image."}], "domains": [{"name": "Browser Operation", "description": "浏览器操作与自动化控制,如网页元素操控、Cookie 管理、页面截图等"}]}
{"name": "Semgrep", "description": "1.扫描代码安全漏洞 2.使用自定义Semgrep规则扫描代码文件 3.输出代码的抽象语法树(AST) 4.获取Semgrep支持的语言列表 5.获取最新的Semgrep规则JSON Schema", "tools": [{"name": "security_check", "server": "Semgrep", "description": "Scan code for security vulnerabilities", "parameter": {}, "task": "Scan the provided codebase for potential security vulnerabilities."}, {"name": "semgrep_scan", "server": "Semgrep", "description": "Scan code files for security vulnerabilities with a given config string", "parameter": {"code_files": "(list of objects) List of code files to scan, each with 'filename' and 'content' keys"}, "task": "Scan the provided Python and JavaScript files for security vulnerabilities using a custom configuration."}, {"name": "semgrep_scan_with_custom_rule", "server": "Semgrep", "description": "Scan code files using a custom Semgrep rule", "parameter": {"code_files": "(list of objects) List of code files to scan, each with 'filename' and 'content' keys", "custom_rule": "(string) Custom Semgrep rule to use for scanning"}, "task": "Scan the provided Python files for potential SQL injection vulnerabilities using a custom Semgrep rule that detects unsafe string concatenation in database queries."}, {"name": "get_abstract_syntax_tree", "server": "Semgrep", "description": "Output the Abstract Syntax Tree (AST) of code", "parameter": {"code": "(string) Code to generate the AST for"}, "task": "Generate the Abstract Syntax Tree (AST) for the provided Python function that calculates the factorial of a number."}, {"name": "supported_languages", "server": "Semgrep", "description": "Return the list of languages Semgrep supports", "parameter": {}, "task": "List all the programming languages that can be analyzed by the static code analysis tool."}, {"name": "semgrep_rule_schema", "server": "Semgrep", "description": "Fetches the latest semgrep rule JSON Schema", "parameter": {}, "task": "Fetch the latest JSON Schema for Semgrep rules."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "SingleStore", "description": "1. Retrieve workspace groups, workspaces, and organization details 2. List regions supporting workspaces 3. Execute SQL operations on workspaces 4. List and create starter workspaces 5. List notebook samples and create notebooks 6. List personal files 7. Create and manage scheduled jobs for notebooks", "tools": [{"name": "workspace_groups_info", "server": "SingleStore", "description": "Retrieve details about the workspace groups accessible to the user", "parameter": {}, "task": "Retrieve the details of all workspace groups currently accessible to the user."}, {"name": "workspaces_info", "server": "SingleStore", "description": "Retrieve details about the workspaces in a specific workspace group", "parameter": {"workspaceGroupID": "(string) ID of the workspace group"}, "task": "Retrieve the details of all workspaces within the workspace group identified by the ID \"WG-2024-001\"."}, {"name": "organization_info", "server": "SingleStore", "description": "Retrieve details about the user's current organization", "parameter": {}, "task": "Retrieve the details of the user's current organization, including its name, address, and contact information."}, {"name": "list_of_regions", "server": "SingleStore", "description": "Retrieve a list of all regions that support workspaces for the user", "parameter": {}, "task": "Retrieve the list of all available regions where workspaces can be created for the current user."}, {"name": "execute_sql", "server": "SingleStore", "description": "Execute SQL operations on a connected workspace", "parameter": {"workspace_group_identifier": "(string) Identifier of the workspace group", "workspace_identifier": "(string) Identifier of the workspace", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "database": "(string) Name of the database", "sql_query": "(string) SQL query to execute"}, "task": "Retrieve all customer records from the \"customers\" table in the \"sales\" database within the specified workspace."}, {"name": "list_virtual_workspaces", "server": "SingleStore", "description": "List all starter workspaces accessible to the user", "parameter": {}, "task": "List all virtual workspaces currently available for the user to access."}, {"name": "create_virtual_workspace", "server": "SingleStore", "description": "Create a new starter workspace with a user", "parameter": {"name": "(string) Name of the starter workspace", "database_name": "(string) Name of the database to create", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "workspace_group": "(object) Object containing 'name' (optional) and 'cellID' (mandatory)"}, "task": "Create a new starter workspace named \"DevTeam2024\" with a database called \"dev_db\", assigning the username \"dev_user\" and password \"secure123\", and associate it with workspace group cellID \"cell-5a2b\"."}, {"name": "execute_sql_on_virtual_workspace", "server": "SingleStore", "description": "Execute SQL operations on a virtual workspace", "parameter": {"virtual_workspace_id": "(string) ID of the virtual workspace", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "sql_query": "(string) SQL query to execute"}, "task": "Execute a SQL query to retrieve all customer records from the virtual workspace with ID 'VW12345' using the provided credentials."}, {"name": "list_notebook_samples", "server": "SingleStore", "description": "List all notebook samples available in SingleStore Spaces", "parameter": {}, "task": "List all available notebook samples in the connected SingleStore Spaces environment."}, {"name": "create_notebook", "server": "SingleStore", "description": "Create a new notebook in the user's personal space", "parameter": {"notebook_name": "(string) Name of the notebook", "content": "(Optional, string) Content of the notebook"}, "task": "Create a new notebook titled \"Project Ideas\" with an initial content of \"Brainstorming session notes for Q3 initiatives\" in the user's personal space."}, {"name": "list_personal_files", "server": "SingleStore", "description": "List all files in the user's personal space", "parameter": {}, "task": "List all files stored in the personal storage space of the current user."}, {"name": "create_scheduled_job", "server": "SingleStore", "description": "Create a new scheduled job to run a notebook", "parameter": {"name": "(string) Name for the job", "notebook_path": "(string) Path to the notebook to execute", "schedule_mode": "(string) Once or Recurring", "execution_interval_minutes": "(Optional, number) Minutes between executions", "start_at": "(Optional, string) When to start the job", "description": "(Optional, string) Description of the job", "create_snapshot": "(Optional, boolean) Whether to create notebook snapshots", "runtime_name": "(string) Name of the runtime environment", "parameters": "(Optional, object) Parameters for the job", "target_config": "(Optional, object) Target configuration for the job"}, "task": "Schedule a recurring job to run the notebook located at \"/analytics/monthly_report.ipynb\" every 60 minutes, starting at \"2024-07-01T09:00:00Z\". Use the runtime environment named \"production_env\" and include a description stating \"Monthly analytics report generation\". Enable notebook snapshots for this job."}, {"name": "get_job_details", "server": "SingleStore", "description": "Get details about a specific job", "parameter": {"job_id": "(string) ID of the job"}, "task": "Retrieve the details of the job with ID \"JOB12345\"."}, {"name": "list_job_executions", "server": "SingleStore", "description": "List execution history for a specific job", "parameter": {"job_id": "(string) ID of the job", "start": "(Optional, string) Start date for the execution history", "end": "(Optional, string) End date for the execution history"}, "task": "List the execution history for job ID \"JOB_12345\" between 2024-01-01 and 2024-06-30."}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "StarRocks", "description": "StarRocks数据库操作,包括:执行SELECT/DDL/DML查询、生成Plotly图表、获取表和数据库概览信息", "tools": [{"name": "read_query", "server": "StarRocks", "description": "Execute a SELECT query or other commands that return a ResultSet (e.g., SHOW, DESCRIBE).", "parameter": {"query": "(string) SQL query string"}, "task": "Retrieve the names and email addresses of all customers who made a purchase in the last 30 days using a SELECT query."}, {"name": "write_query", "server": "StarRocks", "description": "Execute a DDL (CREATE, ALTER, DROP), DML (INSERT, UPDATE, DELETE), or other StarRocks command that does not return a ResultSet.", "parameter": {"query": "(string) SQL command string"}, "task": "Create a new table named 'customer_orders' with columns for order_id (integer), customer_name (string), order_date (date), and total_amount (decimal) in the StarRocks database."}, {"name": "query_and_plotly_chart", "server": "StarRocks", "description": "Executes a SQL query, loads the results into a Pandas DataFrame, and generates a Plotly chart using a provided Python expression.", "parameter": {"query": "(string) SQL query to fetch data", "plotly_expr": "(string) Python expression string using 'px' (Plotly Express) and 'df' (DataFrame). Example: 'px.scatter(df, x=\"col1\", y=\"col2\")'"}, "task": "Generate a scatter plot showing the relationship between 'age' and 'income' columns from the results of a SQL query that retrieves customer data from the database. Use Plotly Express to create the visualization with 'age' on the x-axis and 'income' on the y-axis."}, {"name": "table_overview", "server": "StarRocks", "description": "Get an overview of a specific table: columns (from DESCRIBE), total row count, and sample rows (LIMIT 3). Uses an in-memory cache unless refresh is true.", "parameter": {"table": "(string) Table name, optionally prefixed with database name (e.g., 'db_name.table_name' or 'table_name'). If database is omitted, uses STARROCKS_DB environment variable if set.", "refresh": "(Optional, boolean) Set to true to bypass the cache. Defaults to false."}, "task": "Retrieve the column structure, total row count, and 3 sample rows for the 'customer_orders' table, bypassing the cache if necessary."}, {"name": "db_overview", "server": "StarRocks", "description": "Get an overview (columns, row count, sample rows) for all tables within a specified database. Uses the table-level cache for each table unless refresh is true.", "parameter": {"db": "(string) Database name. Optional if STARROCKS_DB env var is set.", "refresh": "(Optional, boolean) Set to true to bypass the cache for all tables in the DB. Defaults to false."}, "task": "Retrieve the column names, row counts, and 10 sample rows for all tables in the 'sales_2024' database, ensuring the data is fetched directly from the source by bypassing the cache."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Stripe", "description": "Stripe支付服务操作,包括:客户管理、优惠券管理、产品与价格管理、支付链接创建、发票管理、余额查询、订阅管理、退款处理、争议处理", "tools": [{"name": "createCustomer", "server": "Stripe", "description": "Creates a new customer in Stripe.", "parameter": {"name": "(string) The customer's name.", "email": "(string) The customer's email address.", "phone": "(Optional, string) The customer's phone number."}, "task": "Create a new customer record with the name \"John Doe\", email \"john.doe@example.com\", and phone number \"+1234567890\" in the payment system."}, {"name": "listCustomers", "server": "Stripe", "description": "Lists all customers in Stripe.", "parameter": {}, "task": "List all customers registered in the Stripe payment system."}, {"name": "createCoupon", "server": "Stripe", "description": "Creates a new coupon in Stripe.", "parameter": {"percent_off": "(number) The percentage discount.", "duration": "(string) The duration of the coupon (e.g., 'once', 'repeating').", "duration_in_months": "(Optional, number) The number of months the coupon lasts if the duration is 'repeating'."}, "task": "Create a new coupon offering a 15% discount that is valid for 3 months with a repeating duration."}, {"name": "listCoupons", "server": "Stripe", "description": "Lists all coupons in Stripe.", "parameter": {}, "task": "List all active discount coupons available in the Stripe payment system."}, {"name": "createProduct", "server": "Stripe", "description": "Creates a new product in Stripe.", "parameter": {"name": "(string) The product's name.", "description": "(string) The product's description.", "unit_label": "(Optional, string) The label for the unit of measure."}, "task": "Create a new product in Stripe with the name \"Premium Subscription,\" a description of \"Access to exclusive features and content,\" and a unit label of \"month.\""}, {"name": "listProducts", "server": "Stripe", "description": "Lists all products in Stripe.", "parameter": {}, "task": "List all available products in the Stripe payment system."}, {"name": "createPrice", "server": "Stripe", "description": "Creates a new price in Stripe.", "parameter": {"product": "(string) The ID of the product this price is associated with.", "unit_amount": "(number) The unit amount in cents.", "currency": "(string) The currency of the price."}, "task": "Create a new price for product ID 'prod_12345' with a unit amount of 1999 cents in USD."}, {"name": "listPrices", "server": "Stripe", "description": "Lists all prices in Stripe.", "parameter": {}, "task": "List all the current prices available in the Stripe payment system."}, {"name": "createPaymentLink", "server": "Stripe", "description": "Creates a new payment link in Stripe.", "parameter": {"line_items": "(array) An array of line items to include in the payment link.", "success_url": "(string) The URL to redirect to after a successful payment.", "cancel_url": "(string) The URL to redirect to if the payment is canceled."}, "task": "Generate a payment link for an order containing 3 items, redirecting to \"https://example.com/success\" after successful payment and \"https://example.com/cancel\" if the payment is canceled."}, {"name": "createInvoice", "server": "Stripe", "description": "Creates a new invoice in Stripe.", "parameter": {"customer": "(string) The ID of the customer to create the invoice for.", "lines": "(array) An array of line items to include in the invoice."}, "task": "Generate an invoice for customer ID \"cus_123456\" including three line items: a subscription for $10, a one-time fee of $5, and a discount of $2."}, {"name": "createInvoiceItem", "server": "Stripe", "description": "Creates a new invoice item in Stripe.", "parameter": {"customer": "(string) The ID of the customer to create the invoice item for.", "amount": "(number) The amount of the invoice item in cents.", "currency": "(string) The currency of the invoice item."}, "task": "Create a new invoice item for customer ID 'cus_12345' with an amount of 2500 cents in USD currency."}, {"name": "finalizeInvoice", "server": "Stripe", "description": "Finalizes an invoice in Stripe.", "parameter": {"invoice": "(string) The ID of the invoice to finalize."}, "task": "Finalize the Stripe invoice with the ID 'inv_123456789'."}, {"name": "retrieveBalance", "server": "Stripe", "description": "Retrieves the current balance in Stripe.", "parameter": {}, "task": "Retrieve the current available balance from the connected Stripe account."}, {"name": "listSubscriptions", "server": "Stripe", "description": "Lists all subscriptions in Stripe.", "parameter": {}, "task": "List all active subscriptions in the Stripe payment system."}, {"name": "updateSubscription", "server": "Stripe", "description": "Updates an existing subscription in Stripe.", "parameter": {"subscription": "(string) The ID of the subscription to update.", "items": "(array) An array of subscription items to update."}, "task": "Update the subscription with ID 'sub_12345' in Stripe by adding two new subscription items to the existing plan."}, {"name": "cancelSubscription", "server": "Stripe", "description": "Cancels an existing subscription in Stripe.", "parameter": {"subscription": "(string) The ID of the subscription to cancel."}, "task": "Cancel the subscription with the ID 'sub_123456789' in Stripe."}, {"name": "createRefund", "server": "Stripe", "description": "Creates a new refund in Stripe.", "parameter": {"charge": "(string) The ID of the charge to refund.", "amount": "(Optional, number) The amount to refund in cents."}, "task": "Create a refund for the charge with ID \"ch_123456789\" for the full amount."}, {"name": "listDisputes", "server": "Stripe", "description": "Lists all disputes in Stripe.", "parameter": {}, "task": "List all active disputes in the Stripe payment system."}, {"name": "updateDispute", "server": "Stripe", "description": "Updates an existing dispute in Stripe.", "parameter": {"dispute": "(string) The ID of the dispute to update.", "evidence": "(object) Evidence to submit for the dispute."}, "task": "Submit new evidence for the dispute with ID 'dp_123456789' in Stripe."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Tavily", "description": "1.使用Tavily进行实时网页搜索 2.使用Tavily提取网页内容、图片和元数据", "tools": [{"name": "tavily-search", "server": "Tavily", "description": "Performs real-time web searches with sophisticated filtering options and domain-specific search features.", "parameter": {}, "task": "Search for the latest advancements in quantum computing published in the last 6 months."}, {"name": "tavily-extract", "server": "Tavily", "description": "Extracts intelligent data from web pages, such as main content, images, and metadata.", "parameter": {}, "task": "Extract the main content, images, and metadata from the homepage of a specified website."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Thirdweb", "description": "Retrieve a list of tools for AI agents compatible with frameworks like LangChain and OpenAI Agents", "tools": [{"name": "get_tools", "server": "Thirdweb", "description": "Retrieves a list of tools for AI agents, which can be used with different frameworks like LangChain and OpenAI Agents.", "parameter": {"secret_key": "(string) The secret key required for authentication."}, "task": "Retrieve the list of available tools for AI agents using the provided authentication key."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "Tinybird", "description": "Tinybird Workspace operations, including: listing data sources and pipes, getting data source and pipe information, requesting pipe data, running select queries, adding business insights, accessing Tinybird documentation, saving events, analyzing pipe performance, and pushing datafiles", "tools": [{"name": "list-data-sources", "server": "Tinybird", "description": "Lists all Data Sources in the Tinybird Workspace", "parameter": {}, "task": "List all available data sources in the current Tinybird workspace."}, {"name": "list-pipes", "server": "Tinybird", "description": "Lists all Pipe Endpoints in the Tinybird Workspace", "parameter": {}, "task": "List all available Pipe Endpoints in the current Tinybird Workspace."}, {"name": "get-data-source", "server": "Tinybird", "description": "Gets the information of a Data Source given its name, including the schema", "parameter": {"name": "(string) The name of the Data Source"}, "task": "Retrieve the schema and details of the Data Source named \"Customer_Orders\"."}, {"name": "get-pipe", "server": "Tinybird", "description": "Gets the information of a Pipe Endpoint given its name, including its nodes and SQL transformation", "parameter": {"name": "(string) The name of the Pipe Endpoint"}, "task": "Retrieve the nodes and SQL transformation details for the Pipe Endpoint named \"customer_data_pipeline\"."}, {"name": "request-pipe-data", "server": "Tinybird", "description": "Requests data from a Pipe Endpoint via an HTTP request. Pipe endpoints can have parameters to filter the analytical data", "parameter": {"name": "(string) The name of the Pipe Endpoint", "parameters": "(Optional, object) Parameters to filter the data"}, "task": "Retrieve the last 30 days of sales data from the 'monthly-sales' endpoint, filtering by the 'region' parameter set to 'North America'."}, {"name": "run-select-query", "server": "Tinybird", "description": "Allows to run a select query over a Data Source to extract insights", "parameter": {"query": "(string) The SQL select query"}, "task": "Run a select query to retrieve the top 10 highest-selling products from the sales database for Q1 2024."}, {"name": "append-insight", "server": "Tinybird", "description": "Adds a new business insight to the memo resource", "parameter": {"insight": "(string) The business insight to add"}, "task": "Add a new business insight about the recent increase in customer retention rates to the memo resource."}, {"name": "llms-tinybird-docs", "server": "Tinybird", "description": "Contains the whole Tinybird product documentation, so you can use it to get context about what Tinybird is, what it does, API reference and more", "parameter": {}, "task": "Search the Tinybird product documentation for information about its API reference and core functionalities."}, {"name": "save-event", "server": "Tinybird", "description": "Sends an event to a Tinybird Data Source. Use it to save a user-generated prompt to the prompts Data Source", "parameter": {"event": "(object) The event data to send"}, "task": "Save a user-generated prompt event containing the text \"How can I improve my productivity?\" to the Tinybird Data Source."}, {"name": "analyze-pipe", "server": "Tinybird", "description": "Uses the Tinybird analyze API to run a ClickHouse explain on the Pipe Endpoint query and check if indexes, sorting key, and partition key are being used and propose optimization suggestions", "parameter": {"name": "(string) The name of the Pipe Endpoint"}, "task": "Analyze the query performance of the Pipe Endpoint named \"sales_data\" and provide optimization suggestions for indexes, sorting keys, and partition keys."}, {"name": "push-datafile", "server": "Tinybird", "description": "Creates a remote Data Source or Pipe in the Tinybird Workspace from a local datafile", "parameter": {"file_path": "(string) The path to the local datafile", "data_source_name": "(string) The name of the Data Source to create", "pipe_name": "(Optional, string) The name of the Pipe to create"}, "task": "Upload the local CSV file located at \"/data/sales_2024.csv\" to the Tinybird Workspace, creating a new Data Source named \"sales_2024\" and an optional Pipe named \"sales_pipeline\"."}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Unstructured", "description": "Unstructured API operations, including: 1. Source connector management (list, create, update, delete) 2. Destination connector management (list, create, update, delete) 3. Workflow management (list, create, run, update, delete) 4. Job management (list, get info, cancel) 5. Firecrawl integration (crawl HTML, check status, generate LLM-optimized text, cancel jobs)", "tools": [{"name": "list_sources", "server": "Unstructured", "description": "Lists available sources from the Unstructured API.", "parameter": {}, "task": "List all available sources accessible through the Unstructured API."}, {"name": "get_source_info", "server": "Unstructured", "description": "Get detailed information about a specific source connector.", "parameter": {}, "task": "Retrieve the detailed configuration and status of the specified source connector."}, {"name": "create_source_connector", "server": "Unstructured", "description": "Create a source connector.", "parameter": {}, "task": "Create a source connector to integrate data from an external system into the current platform. Specify the necessary configurations for seamless data ingestion."}, {"name": "update_source_connector", "server": "Unstructured", "description": "Update an existing source connector by params.", "parameter": {}, "task": "Update the configuration parameters of an existing source connector to reflect the latest changes in the data source settings. Ensure all required fields are properly modified and validated."}, {"name": "delete_source_connector", "server": "Unstructured", "description": "Delete a source connector by source id.", "parameter": {}, "task": "Delete the source connector with the specified source ID."}, {"name": "list_destinations", "server": "Unstructured", "description": "Lists available destinations from the Unstructured API.", "parameter": {}, "task": "List all available destinations from the Unstructured API."}, {"name": "get_destination_info", "server": "Unstructured", "description": "Get detailed info about a specific destination connector.", "parameter": {}, "task": "Retrieve detailed information about the destination connector currently in use."}, {"name": "create_destination_connector", "server": "Unstructured", "description": "Create a destination connector by params.", "parameter": {}, "task": "Create a destination connector with the specified parameters for data integration."}, {"name": "update_destination_connector", "server": "Unstructured", "description": "Update an existing destination connector by destination id.", "parameter": {}, "task": "Update the destination connector with ID 'DEST12345' to reflect the latest configuration changes."}, {"name": "delete_destination_connector", "server": "Unstructured", "description": "Delete a destination connector by destination id.", "parameter": {}, "task": "Delete the destination connector associated with the specified destination ID."}, {"name": "list_workflows", "server": "Unstructured", "description": "Lists workflows from the Unstructured API.", "parameter": {}, "task": "List all available workflows from the Unstructured API."}, {"name": "get_workflow_info", "server": "Unstructured", "description": "Get detailed information about a specific workflow.", "parameter": {}, "task": "Retrieve the detailed execution status and steps of the latest completed workflow."}, {"name": "create_workflow", "server": "Unstructured", "description": "Create a new workflow with source, destination id, etc.", "parameter": {}, "task": "Create a new workflow that transfers data from a specified source to a destination with a unique identifier."}, {"name": "run_workflow", "server": "Unstructured", "description": "Run a specific workflow with workflow id.", "parameter": {}, "task": "Run the workflow with ID \"WF-2024-001\" to execute its predefined steps."}, {"name": "update_workflow", "server": "Unstructured", "description": "Update an existing workflow by params.", "parameter": {}, "task": "Update the existing workflow with the latest configuration changes."}, {"name": "delete_workflow", "server": "Unstructured", "description": "Delete a specific workflow by id.", "parameter": {}, "task": "Delete the workflow with ID 'WF12345' from the system."}, {"name": "list_jobs", "server": "Unstructured", "description": "Lists jobs for a specific workflow from the Unstructured API.", "parameter": {}, "task": "List all jobs associated with the latest workflow processed by the Unstructured API."}, {"name": "get_job_info", "server": "Unstructured", "description": "Get detailed information about a specific job by job id.", "parameter": {}, "task": "Retrieve the detailed information for the job with ID \"JOB12345\"."}, {"name": "cancel_job", "server": "Unstructured", "description": "Delete a specific job by id.", "parameter": {}, "task": "Cancel the job with ID 'JOB12345'."}, {"name": "list_workflows_with_finished_jobs", "server": "Unstructured", "description": "Lists all workflows that have any completed job, together with information about source and destination details.", "parameter": {}, "task": "List all workflows that have completed jobs, including their source and destination details."}, {"name": "invoke_firecrawl_crawlhtml", "server": "Unstructured", "description": "Starts a crawl job using Firecrawl to retrieve HTML content.", "parameter": {}, "task": "Crawl and retrieve the HTML content of a specified website using Firecrawl."}, {"name": "check_crawlhtml_status", "server": "Unstructured", "description": "Checks the status of a crawl job.", "parameter": {}, "task": "Check the current status of the active web crawling job."}, {"name": "invoke_firecrawl_llmtxt", "server": "Unstructured", "description": "Generates LLM-optimized text from crawled pages.", "parameter": {}, "task": "Generate LLM-optimized text from the latest crawled web pages."}, {"name": "check_llmtxt_status", "server": "Unstructured", "description": "Retrieves the results of an LLM-optimized text generation job.", "parameter": {}, "task": "Retrieve the status and results of the latest text generation job optimized by the language model."}, {"name": "cancel_crawlhtml_job", "server": "Unstructured", "description": "Cancels a crawl job.", "parameter": {}, "task": "Cancel the currently running crawl job."}, {"name": "cancel_llmtxt_job", "server": "Unstructured", "description": "Cancels an LLM-optimized text generation job.", "parameter": {}, "task": "Cancel the currently running LLM-optimized text generation job."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Vectorize", "description": "1.执行向量搜索和文档检索 2.从文档中提取文本并分块为Markdown格式 3.从管道生成私有深度研究", "tools": [{"name": "retrieve", "server": "Vectorize", "description": "Performs vector search and retrieves documents.", "parameter": {"question": "(string) The query to search for.", "k": "(integer) The number of results to return."}, "task": "Retrieve the top 5 most relevant documents related to \"machine learning algorithms\" using vector search."}, {"name": "extract", "server": "Vectorize", "description": "Extracts text from a document and chunks it into Markdown format.", "parameter": {"base64document": "(string) The base64-encoded document to extract text from.", "contentType": "(string) The content type of the document."}, "task": "Extract and chunk the text from the provided PDF document into Markdown format."}, {"name": "deep-research", "server": "Vectorize", "description": "Generates a Private Deep Research from your pipeline.", "parameter": {"query": "(string) The query to generate the research report.", "webSearch": "(boolean, optional) Whether to include web search results."}, "task": "Generate a detailed research report on the impact of renewable energy adoption in Germany, including recent web search findings."}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Verodat", "description": "1. Retrieve available accounts 2. List workspaces within an account 3. List datasets in a workspace 4. Retrieve actual data from a dataset 5. Retrieve field definitions for a dataset 6. Retrieve existing AI queries 7. Get workspace context and data structure 8. Execute AI-powered queries on datasets 9. Create a new dataset with defined schema 10. Upload data rows to existing datasets", "tools": [{"name": "get-accounts", "server": "Verodat", "description": "Retrieve available accounts", "parameter": {}, "task": "Retrieve the list of all available accounts in the system."}, {"name": "get-workspaces", "server": "Verodat", "description": "List workspaces within an account", "parameter": {}, "task": "List all available workspaces within the current account."}, {"name": "get-datasets", "server": "Verodat", "description": "List datasets in a workspace", "parameter": {}, "task": "List all datasets available in the current workspace."}, {"name": "get-dataset-output", "server": "Verodat", "description": "Retrieve actual data from a dataset", "parameter": {}, "task": "Retrieve the latest 100 records from the specified dataset."}, {"name": "get-dataset-targetfields", "server": "Verodat", "description": "Retrieve field definitions for a dataset", "parameter": {}, "task": "Retrieve the field definitions for the latest imported dataset."}, {"name": "get-queries", "server": "Verodat", "description": "Retrieve existing AI queries", "parameter": {}, "task": "Retrieve the list of previously executed AI queries from the system."}, {"name": "get-ai-context", "server": "Verodat", "description": "Get workspace context and data structure", "parameter": {}, "task": "Retrieve the current workspace context and its associated data structure."}, {"name": "execute-ai-query", "server": "Verodat", "description": "Execute AI-powered queries on datasets", "parameter": {}, "task": "Run an AI-powered analysis on the provided dataset to identify key trends and insights."}, {"name": "create-dataset", "server": "Verodat", "description": "Create a new dataset with defined schema", "parameter": {}, "task": "Create a new dataset with fields for customer ID, purchase date, product category, and transaction amount."}, {"name": "upload-dataset-rows", "server": "Verodat", "description": "Upload data rows to existing datasets", "parameter": {}, "task": "Add 50 new data rows to the specified dataset for analysis."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}]}
{"name": "Xero", "description": "Xero财务软件操作,包括:账户/联系人/发票/信用票据/报价单/税务信息/付款记录查询与创建,工资单员工管理,财务报告生成(利润损失/试算平衡/应收应付账龄),以及工资单时间表审批与修改", "tools": [{"name": "list-accounts", "server": "Xero", "description": "Retrieve a list of accounts", "parameter": {}, "task": "Retrieve a list of all available accounts in the system."}, {"name": "list-contacts", "server": "Xero", "description": "Retrieve a list of contacts from Xero", "parameter": {}, "task": "Retrieve the full list of contacts from the Xero accounting platform."}, {"name": "list-credit-notes", "server": "Xero", "description": "Retrieve a list of credit notes", "parameter": {}, "task": "Retrieve the most recent 10 credit notes issued in the system."}, {"name": "list-invoices", "server": "Xero", "description": "Retrieve a list of invoices", "parameter": {}, "task": "Retrieve the latest 50 invoices from the system."}, {"name": "list-items", "server": "Xero", "description": "Retrieve a list of items", "parameter": {}, "task": "List all available items in the current inventory."}, {"name": "list-organisation-details", "server": "Xero", "description": "Retrieve details about an organisation", "parameter": {}, "task": "Retrieve the details of the current organization, including its name, address, and contact information."}, {"name": "list-profit-and-loss", "server": "Xero", "description": "Retrieve a profit and loss report", "parameter": {}, "task": "Generate a profit and loss report for the current fiscal year."}, {"name": "list-quotes", "server": "Xero", "description": "Retrieve a list of quotes", "parameter": {}, "task": "Retrieve a list of 10 random quotes."}, {"name": "list-tax-rates", "server": "Xero", "description": "Retrieve a list of tax rates", "parameter": {}, "task": "Retrieve the current list of all available tax rates."}, {"name": "list-payments", "server": "Xero", "description": "Retrieve a list of payments", "parameter": {}, "task": "Retrieve the most recent 10 payments processed in the system."}, {"name": "list-trial-balance", "server": "Xero", "description": "Retrieve a trial balance report", "parameter": {}, "task": "Generate a trial balance report for the current fiscal year."}, {"name": "list-payroll-employees", "server": "Xero", "description": "Retrieve a list of Payroll Employees", "parameter": {}, "task": "Retrieve the list of all employees currently enrolled in the payroll system."}, {"name": "list-payroll-employee-leave", "server": "Xero", "description": "Retrieve a Payroll Employee's leave records", "parameter": {}, "task": "Retrieve the leave records for all employees in the payroll system for the current year."}, {"name": "list-payroll-employee-leave-balances", "server": "Xero", "description": "Retrieve a Payroll Employee's leave balances", "parameter": {}, "task": "Retrieve the leave balances for all employees in the payroll system for the current year."}, {"name": "list-payroll-employee-leave-types", "server": "Xero", "description": "Retrieve a list of Payroll leave types", "parameter": {}, "task": "Retrieve the list of available leave types for employees in the Payroll system."}, {"name": "list-payroll-leave-periods", "server": "Xero", "description": "Retrieve a list of a Payroll Employee's leave periods", "parameter": {}, "task": "Retrieve the list of leave periods for all employees in the current payroll system."}, {"name": "list-aged-receivables-by-contact", "server": "Xero", "description": "Retrieves aged receivables for a contact", "parameter": {}, "task": "Retrieve the aged receivables for the contact with ID 'CT12345' from the past 90 days."}, {"name": "list-aged-payables-by-contact", "server": "Xero", "description": "Retrieves aged payables for a contact", "parameter": {}, "task": "Retrieve the aged payables for the specified contact within the last 90 days."}, {"name": "list-contact-groups", "server": "Xero", "description": "Retrieve a list of contact groups", "parameter": {}, "task": "List all available contact groups in the system."}, {"name": "create-contact", "server": "Xero", "description": "Create a new contact", "parameter": {}, "task": "Create a new contact entry with the following details: full name, email address, and phone number."}, {"name": "create-credit-note", "server": "Xero", "description": "Create a new credit note", "parameter": {}, "task": "Generate a credit note for the returned items from the latest customer order."}, {"name": "create-invoice", "server": "Xero", "description": "Create a new invoice", "parameter": {}, "task": "Generate a new invoice for the latest completed project, including all relevant details such as client name, project description, and total amount due."}, {"name": "create-payment", "server": "Xero", "description": "Create a new payment", "parameter": {}, "task": "Create a new payment transaction for the latest invoice."}, {"name": "create-quote", "server": "Xero", "description": "Create a new quote", "parameter": {}, "task": "Generate a motivational quote about perseverance and success."}, {"name": "update-contact", "server": "Xero", "description": "Update an existing contact", "parameter": {}, "task": "Update the contact details for 'John Doe' in the address book, including their new phone number and email address."}, {"name": "update-invoice", "server": "Xero", "description": "Update an existing draft invoice", "parameter": {}, "task": "Update the details of an existing draft invoice, including any changes to items, quantities, or pricing. Ensure all modifications are accurately reflected in the final version."}, {"name": "update-quote", "server": "Xero", "description": "Update an existing draft quote", "parameter": {}, "task": "Update the existing draft quote with the latest pricing and product details. Ensure all line items and terms are accurately reflected in the revision."}, {"name": "update-credit-note", "server": "Xero", "description": "Update an existing draft credit note", "parameter": {}, "task": "Update the details of an existing draft credit note with the latest adjustments. Ensure all necessary fields are revised and saved correctly."}, {"name": "update-payroll-timesheet-line", "server": "Xero", "description": "Update a line on an existing Payroll Timesheet", "parameter": {}, "task": "Update the hours worked for employee ID 12345 on the existing payroll timesheet for the week of 2024-03-18."}, {"name": "approve-payroll-timesheet", "server": "Xero", "description": "Approve a Payroll Timesheet", "parameter": {}, "task": "Approve the submitted payroll timesheet for the current pay period."}, {"name": "revert-payroll-timesheet", "server": "Xero", "description": "Revert an approved Payroll Timesheet", "parameter": {}, "task": "Revert the most recently approved payroll timesheet to its previous state for review."}, {"name": "add-payroll-timesheet-line", "server": "Xero", "description": "Add new line on an existing Payroll Timesheet", "parameter": {}, "task": "Add a new entry to the existing payroll timesheet for the current pay period."}, {"name": "delete-payroll-timesheet", "server": "Xero", "description": "Delete an existing Payroll Timesheet", "parameter": {}, "task": "Delete the existing payroll timesheet for the current month."}, {"name": "get-payroll-timesheet", "server": "Xero", "description": "Retrieve an existing Payroll Timesheet", "parameter": {}, "task": "Retrieve the most recent payroll timesheet for the current month."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Airbnb", "description": "1. Search for Airbnb listings 2. Get detailed information about a specific Airbnb listing", "tools": [{"name": "airbnb_search", "server": "Airbnb", "description": "Search for Airbnb listings", "parameter": {"location": "(string) The location to search for listings", "placeId": "(Optional, string) The place ID", "checkin": "(Optional, string, YYYY-MM-DD) Check-in date", "checkout": "(Optional, string, YYYY-MM-DD) Check-out date", "adults": "(Optional, number) Number of adults", "children": "(Optional, number) Number of children", "infants": "(Optional, number) Number of infants", "pets": "(Optional, number) Number of pets", "minPrice": "(Optional, number) Minimum price", "maxPrice": "(Optional, number) Maximum price", "cursor": "(Optional, string) Cursor for pagination", "ignoreRobotsText": "(Optional, boolean) Ignore robots.txt rules"}, "task": "Find available Airbnb listings in Paris for 2 adults and 1 child, with a check-in date of 2024-07-15 and a check-out date of 2024-07-22, priced between $100 and $300 per night."}, {"name": "airbnb_listing_details", "server": "Airbnb", "description": "Get detailed information about a specific Airbnb listing", "parameter": {"id": "(string) The ID of the listing", "checkin": "(Optional, string, YYYY-MM-DD) Check-in date", "checkout": "(Optional, string, YYYY-MM-DD) Check-out date", "adults": "(Optional, number) Number of adults", "children": "(Optional, number) Number of children", "infants": "(Optional, number) Number of infants", "pets": "(Optional, number) Number of pets", "ignoreRobotsText": "(Optional, boolean) Ignore robots.txt rules"}, "task": "Retrieve the details for Airbnb listing ID '12345678' with a check-in date of 2024-07-15 and a check-out date of 2024-07-20, accommodating 2 adults, 1 child, and 1 pet."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "AI Agent Marketplace Index", "description": "General search of AI Agents for information, websites, content, and metric statistics of web traffic", "tools": [{"name": "search_ai_agent", "server": "AI Agent Marketplace Index", "description": "General search of AI Agents for information, websites, content, and metric statistics of web traffic, etc.", "parameter": {"q": "(str) Query string for searching AI agents", "limit": "(Optional, int) Maximum number of results to return (default is 100)", "timeout": "(Optional, int) Timeout for the search request in seconds (default is 5)"}, "task": "Search for the top 5 AI agents related to natural language processing with a timeout of 10 seconds."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Airflow", "description": "Apache Airflow DAG and task management, including DAG operations (list, create, update, delete), task operations (list, update, clear), variable and connection management, dataset operations, and server health monitoring", "tools": [{"name": "List DAGs", "server": "Airflow", "description": "Lists all DAGs.", "parameter": {}, "task": "List all available Directed Acyclic Graphs (DAGs) in the current environment."}, {"name": "Get DAG Details", "server": "Airflow", "description": "Gets details of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Retrieve the execution details for the DAG with the ID \"customer_data_pipeline\"."}, {"name": "Pause DAG", "server": "Airflow", "description": "Pauses a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Pause the workflow identified by the DAG ID \"daily_data_processing\"."}, {"name": "Unpause DAG", "server": "Airflow", "description": "Unpauses a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Resume the execution of the DAG with the ID \"daily_data_pipeline\"."}, {"name": "Update DAG", "server": "Airflow", "description": "Updates a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Update the DAG with the ID 'sales_data_processing' to reflect the latest workflow changes."}, {"name": "Delete DAG", "server": "Airflow", "description": "Deletes a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Remove the DAG with the ID 'customer_data_processing' from the system."}, {"name": "Get DAG Source", "server": "Airflow", "description": "Gets the source code of a specific DAG.", "parameter": {"file_token": "(string) The token of the DAG source file."}, "task": "Retrieve the source code of the DAG associated with the provided file token."}, {"name": "Patch Multiple DAGs", "server": "Airflow", "description": "Patches multiple DAGs.", "parameter": {}, "task": "Update the configurations of multiple directed acyclic graphs (DAGs) in bulk."}, {"name": "Reparse DAG File", "server": "Airflow", "description": "Reparses a specific DAG file.", "parameter": {"file_token": "(string) The token of the DAG source file."}, "task": "Reparse the DAG source file associated with the provided file token."}, {"name": "List DAG Runs", "server": "Airflow", "description": "Lists all runs of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Retrieve all execution records for the workflow identified by the ID \"sales_data_processing\"."}, {"name": "Create DAG Run", "server": "Airflow", "description": "Creates a new run for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Create a new run for the DAG with the ID \"sales_data_processing\"."}, {"name": "Get DAG Run Details", "server": "Airflow", "description": "Gets details of a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "Retrieve the execution details for the DAG run with ID \"example_dag_run_123\" from the DAG identified as \"example_dag_456\"."}, {"name": "Update DAG Run", "server": "Airflow", "description": "Updates a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "Update the DAG run with ID 'sales_etl_20240615' for the DAG identified as 'daily_sales_processing'."}, {"name": "Delete DAG Run", "server": "Airflow", "description": "Deletes a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "Delete the DAG run with ID 'example_run_123' from the DAG identified as 'sample_dag_456'."}, {"name": "Get DAG Runs Batch", "server": "Airflow", "description": "Gets a batch of DAG runs.", "parameter": {}, "task": "Retrieve the latest 10 DAG runs from the Airflow scheduler."}, {"name": "Clear DAG Run", "server": "Airflow", "description": "Clears a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "Clear the DAG run with ID 'daily_report_20240515' for the DAG identified as 'data_pipeline'."}, {"name": "Set DAG Run Note", "server": "Airflow", "description": "Sets a note for a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "Add a note to the DAG run with ID \"example_run_123\" for the DAG identified as \"data_pipeline_2024\"."}, {"name": "Get Upstream Dataset Events", "server": "Airflow", "description": "Gets upstream dataset events for a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "Retrieve the upstream dataset events for the DAG run with ID \"example_dag_run_123\" in the DAG identified as \"sample_dag_456\"."}, {"name": "List DAG Tasks", "server": "Airflow", "description": "Lists all tasks of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "List all tasks associated with the DAG identified by \"sales_data_processing\"."}, {"name": "Get Task Details", "server": "Airflow", "description": "Gets details of a specific task.", "parameter": {"dag_id": "(string) The ID of the DAG.", "task_id": "(string) The ID of the task."}, "task": "Retrieve the execution details for task 'process_data' within the DAG 'etl_pipeline'."}, {"name": "Get Task Instance", "server": "Airflow", "description": "Gets a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}, "task": "Retrieve the status of the task with ID 'process_data' from the DAG run '2024-05-15' in the DAG 'daily_etl_pipeline'."}, {"name": "List Task Instances", "server": "Airflow", "description": "Lists all task instances of a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}, "task": "List all task instances for the DAG with ID \"daily_etl\" and DAG run ID \"run_20240501\"."}, {"name": "Update Task Instance", "server": "Airflow", "description": "Updates a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}, "task": "Update the task instance with ID \"process_data\" in the DAG run \"2024-05-15_run\" for the DAG \"data_pipeline\"."}, {"name": "Clear Task Instances", "server": "Airflow", "description": "Clears task instances.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Clear all task instances associated with the DAG identified by \"sales_data_processing\"."}, {"name": "Set Task Instances State", "server": "Airflow", "description": "Sets the state of task instances.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Set the state of all task instances for the DAG with ID 'sales_etl_pipeline' to 'running'."}, {"name": "List Variables", "server": "Airflow", "description": "Lists all variables.", "parameter": {}, "task": "List all available variables in the current environment."}, {"name": "Create Variable", "server": "Airflow", "description": "Creates a new variable.", "parameter": {}, "task": "Create a new variable to store the current date in the system."}, {"name": "Get Variable", "server": "Airflow", "description": "Gets a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}, "task": "Retrieve the value of the variable associated with the key \"user_session_token\"."}, {"name": "Update Variable", "server": "Airflow", "description": "Updates a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}, "task": "Update the variable with the key \"user_preferences\" to reflect the latest changes."}, {"name": "Delete Variable", "server": "Airflow", "description": "Deletes a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}, "task": "Delete the variable with the key \"user_session_token\" from the system."}, {"name": "List Connections", "server": "Airflow", "description": "Lists all connections.", "parameter": {}, "task": "List all active connections currently established in the system."}, {"name": "Create Connection", "server": "Airflow", "description": "Creates a new connection.", "parameter": {}, "task": "Create a new connection between two systems without specifying any additional parameters."}, {"name": "Get Connection", "server": "Airflow", "description": "Gets a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}, "task": "Retrieve the details of the connection with ID \"CONN_12345\"."}, {"name": "Update Connection", "server": "Airflow", "description": "Updates a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}, "task": "Update the connection settings for the connection with ID \"conn_12345\"."}, {"name": "Delete Connection", "server": "Airflow", "description": "Deletes a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}, "task": "Delete the connection with the ID \"CONN12345\"."}, {"name": "Test Connection", "server": "Airflow", "description": "Tests a specific connection.", "parameter": {}, "task": "Test the connection to the specified service or device."}, {"name": "List Pools", "server": "Airflow", "description": "Lists all pools.", "parameter": {}, "task": "List all available pools in the system."}, {"name": "Create Pool", "server": "Airflow", "description": "Creates a new pool.", "parameter": {}, "task": "Create a new pool with default settings."}, {"name": "Get Pool", "server": "Airflow", "description": "Gets a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}, "task": "Retrieve the details of the pool named \"Sunset Oasis\"."}, {"name": "Update Pool", "server": "Airflow", "description": "Updates a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}, "task": "Update the pool named \"Summer_2024\" with the latest configurations."}, {"name": "Delete Pool", "server": "Airflow", "description": "Deletes a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}, "task": "Delete the pool named \"Summer_2024_Swim_Classes\"."}, {"name": "List XComs", "server": "Airflow", "description": "Lists all XCom entries for a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}, "task": "List all XCom entries for the task with ID \"process_data\" in the DAG run \"2024-05-15T08:00:00\" of the DAG \"data_pipeline\"."}, {"name": "Get XCom Entry", "server": "Airflow", "description": "Gets a specific XCom entry.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task.", "xcom_key": "(string) The key of the XCom entry."}, "task": "Retrieve the XCom entry with the key 'processed_data' from task 'process_data' in DAG 'etl_pipeline' for run ID 'run_20240501'."}, {"name": "List Datasets", "server": "Airflow", "description": "Lists all datasets.", "parameter": {}, "task": "List all available datasets in the connected database."}, {"name": "Get Dataset", "server": "Airflow", "description": "Gets a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}, "task": "Retrieve the dataset located at the specified URI."}, {"name": "Get Dataset Events", "server": "Airflow", "description": "Gets events for a specific dataset.", "parameter": {}, "task": "Retrieve all recorded events associated with the specified dataset."}, {"name": "Create Dataset Event", "server": "Airflow", "description": "Creates a new dataset event.", "parameter": {}, "task": "Create a new dataset event for tracking changes in the sales data for Q2 2024."}, {"name": "Get DAG Dataset Queued Event", "server": "Airflow", "description": "Gets a queued dataset event for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG.", "uri": "(string) The URI of the dataset."}, "task": "Retrieve the queued dataset event for the DAG with ID 'sales_forecast' using the dataset URI 's3://data-lake/sales/2024-06-01.csv'."}, {"name": "Get DAG Dataset Queued Events", "server": "Airflow", "description": "Gets queued dataset events for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Retrieve the queued dataset events for the DAG with ID 'daily_data_pipeline'."}, {"name": "Delete DAG Dataset Queued Event", "server": "Airflow", "description": "Deletes a queued dataset event for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG.", "uri": "(string) The URI of the dataset."}, "task": "Remove the queued dataset event associated with the DAG identified by \"example_dag_id\" and the dataset located at \"example_uri\"."}, {"name": "Delete DAG Dataset Queued Events", "server": "Airflow", "description": "Deletes queued dataset events for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}, "task": "Remove all queued dataset events associated with the DAG identified as \"sales_forecast\"."}, {"name": "Get Dataset Queued Events", "server": "Airflow", "description": "Gets queued dataset events for a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}, "task": "Retrieve the list of queued events for the dataset located at \"https://example.com/datasets/sales-2024\"."}, {"name": "Delete Dataset Queued Events", "server": "Airflow", "description": "Deletes queued dataset events for a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}, "task": "Delete all queued events associated with the dataset located at \"https://example.com/datasets/sales-2024\"."}, {"name": "Get Health", "server": "Airflow", "description": "Gets the health status of the server.", "parameter": {}, "task": "Check the current health status of the server to ensure it is running optimally."}, {"name": "Get DAG Stats", "server": "Airflow", "description": "Gets statistics for all DAGs.", "parameter": {}, "task": "Retrieve the statistics for all directed acyclic graphs (DAGs) in the system."}, {"name": "Get Config", "server": "Airflow", "description": "Gets the configuration of the server.", "parameter": {}, "task": "Retrieve the current configuration settings from the server."}, {"name": "Get Plugins", "server": "Airflow", "description": "Gets a list of plugins.", "parameter": {}, "task": "List all available plugins in the system."}, {"name": "List Providers", "server": "Airflow", "description": "Lists all providers.", "parameter": {}, "task": "List all available service providers in the system."}, {"name": "List Event Logs", "server": "Airflow", "description": "Lists all event logs.", "parameter": {}, "task": "List all event logs recorded in the system within the last 30 days."}, {"name": "Get Event Log", "server": "Airflow", "description": "Gets a specific event log.", "parameter": {"event_log_id": "(string) The ID of the event log."}, "task": "Retrieve the event log with the ID \"EVT-2024-12345\"."}, {"name": "Get Import Errors", "server": "Airflow", "description": "Lists all import errors.", "parameter": {}, "task": "List all import errors recorded in the system."}, {"name": "Get Import Error Details", "server": "Airflow", "description": "Gets details of a specific import error.", "parameter": {"import_error_id": "(string) The ID of the import error."}, "task": "Retrieve the details of the import error with ID \"ERR-2024-0015\"."}, {"name": "Get Health Status", "server": "Airflow", "description": "Gets the health status of the server.", "parameter": {}, "task": "Check the current health status of the server."}, {"name": "Get Version", "server": "Airflow", "description": "Gets the version of the server.", "parameter": {}, "task": "Retrieve the current version of the server software."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}, {"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Airtable", "description": "Airtable operations, including: listing/searching records, managing bases/tables/fields, and performing CRUD operations on records", "tools": [{"name": "list_records", "server": "Airtable", "description": "Lists records from a specified Airtable table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to query", "maxRecords": "(number, optional) Maximum number of records to return. Defaults to 100.", "filterByFormula": "(string, optional) Airtable formula to filter records"}, "task": "Retrieve up to 50 records from the \"Customers\" table in Airtable base ID \"app123\", filtering for records where the \"Status\" field equals \"Active\"."}, {"name": "search_records", "server": "Airtable", "description": "Search for records containing specific text", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to query", "searchTerm": "(string, required) Text to search for in records", "fieldIds": "(array, optional) Specific field IDs to search in. If not provided, searches all text-based fields.", "maxRecords": "(number, optional) Maximum number of records to return. Defaults to 100."}, "task": "Search for records containing the term \"urgent\" in the \"tasks\" table of Airtable base \"project_management\", limiting results to 50 records and focusing only on the \"description\" and \"notes\" fields."}, {"name": "list_bases", "server": "Airtable", "description": "Lists all accessible Airtable bases", "parameter": {}, "task": "List all available Airtable bases that can be accessed with the current credentials."}, {"name": "list_tables", "server": "Airtable", "description": "Lists all tables in a specific base", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "detailLevel": "(string, optional) The amount of detail to get about the tables (tableIdentifiersOnly, identifiersOnly, or full)"}, "task": "List all tables in the Airtable base with ID 'app123456789' and provide full details for each table."}, {"name": "describe_table", "server": "Airtable", "description": "Gets detailed information about a specific table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to describe", "detailLevel": "(string, optional) The amount of detail to get about the table (tableIdentifiersOnly, identifiersOnly, or full)"}, "task": "Retrieve the full schema details including field types and relationships for table ID 'tbl123' in Airtable base 'app456'."}, {"name": "get_record", "server": "Airtable", "description": "Gets a specific record by ID", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "recordId": "(string, required) The ID of the record to retrieve"}, "task": "Retrieve the record with ID \"rec123\" from table \"tbl456\" in the Airtable base \"base789\"."}, {"name": "create_record", "server": "Airtable", "description": "Creates a new record in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "fields": "(object, required) The fields and values for the new record"}, "task": "Add a new record to the specified Airtable with the following details: customer name \"John Doe\", email \"john.doe@example.com\", and subscription date \"2024-05-15\"."}, {"name": "update_records", "server": "Airtable", "description": "Updates one or more records in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "records": "(array, required) Array of objects containing record ID and fields to update"}, "task": "Update the status field to \"Completed\" for records with IDs \"rec123\" and \"rec456\" in the specified Airtable base and table."}, {"name": "delete_records", "server": "Airtable", "description": "Deletes one or more records from a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "recordIds": "(array, required) Array of record IDs to delete"}, "task": "Delete all records with IDs [\"rec123\", \"rec456\", \"rec789\"] from table \"tblXYZ\" in Airtable base \"appABC\"."}, {"name": "create_table", "server": "Airtable", "description": "Creates a new table in a base", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "name": "(string, required) Name of the new table", "description": "(string, optional) Description of the table", "fields": "(array, required) Array of field definitions (name, type, description, options)"}, "task": "Create a new table in the specified Airtable base with the name \"Customer Orders\" and include fields for \"Order ID\" (text type), \"Customer Name\" (text type), \"Order Date\" (date type), and \"Total Amount\" (number type). Add an optional description stating \"Table for tracking customer orders and payments.\""}, {"name": "update_table", "server": "Airtable", "description": "Updates a table's name or description", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "name": "(string, optional) New name for the table", "description": "(string, optional) New description for the table"}, "task": "Update the description of the table with ID 'tbl123' in the Airtable base 'app456' to \"2024 customer contact information\"."}, {"name": "create_field", "server": "Airtable", "description": "Creates a new field in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "name": "(string, required) Name of the new field", "type": "(string, required) Type of the field", "description": "(string, optional) Description of the field", "options": "(object, optional) Field-specific options"}, "task": "Add a new text field named \"Customer Feedback\" to the \"Product Reviews\" table in the specified Airtable base, with a description explaining it stores user comments."}, {"name": "update_field", "server": "Airtable", "description": "Updates a field's name or description", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "fieldId": "(string, required) The ID of the field", "name": "(string, optional) New name for the field", "description": "(string, optional) New description for the field"}, "task": "Update the description of the field with ID 'fld123' in table 'tbl456' of Airtable base 'app789' to \"Updated field description for customer records\"."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Anki", "description": "1.标记卡片为已回答并评分 2.在默认Anki牌组中创建新卡片 3.获取待复习卡片 4.获取新卡片", "tools": [{"name": "update_cards", "server": "Anki", "description": "Marks cards with given card IDs as answered and gives them an ease score between 1 (Again) and 4 (Easy)", "parameter": {"answers": "(array) Array of objects with `cardId` (number) and `ease` (number) fields"}, "task": "Mark the cards with IDs 123, 456, and 789 as answered, assigning an ease score of 3 (Good) to each."}, {"name": "add_card", "server": "Anki", "description": "Creates a new card in the Default Anki deck", "parameter": {"front": "(string) Front of card", "back": "(string) Back of card"}, "task": "Create a new flashcard with \"Photosynthesis equation\" on the front and \"6CO2 + 6H2O → C6H12O6 + 6O2\" on the back in the default deck."}, {"name": "get_due_cards", "server": "Anki", "description": "Returns n number of cards currently due for review", "parameter": {"num": "(number) Number of cards"}, "task": "Retrieve 5 cards that are currently due for review."}, {"name": "get_new_cards", "server": "Anki", "description": "Returns n number of cards from new", "parameter": {"num": "(number) Number of cards"}, "task": "Draw 5 new cards from the deck."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Any Chat Completions", "description": "Relay questions to a configured AI Chat Provider", "tools": [{"name": "chat", "server": "Any Chat Completions", "description": "Relays a question to a configured AI Chat Provider.", "parameter": {}, "task": "Ask the AI chat provider to explain the concept of quantum computing in simple terms."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Apache Gravitino(incubating)", "description": "1.获取目录、模式、表和标签的基本信息列表 2.通过完全限定名称获取表和列的详细信息 3.将标签关联到表或列 4.获取与标签关联的对象列表 5.获取角色和用户的基本信息列表 6.授予或撤销用户的角色", "tools": [{"name": "get_list_of_catalogs", "server": "Apache Gravitino(incubating)", "description": "Get a list of catalogs with basic information", "parameter": {}, "task": "Retrieve the list of available catalogs along with their basic details."}, {"name": "get_list_of_schemas", "server": "Apache Gravitino(incubating)", "description": "Get a list of schemas with basic information", "parameter": {}, "task": "Retrieve the list of all available schemas along with their basic details."}, {"name": "get_list_of_tables", "server": "Apache Gravitino(incubating)", "description": "Get a paginated list of tables with basic information", "parameter": {}, "task": "Retrieve the first 10 tables from the database along with their basic details."}, {"name": "get_table_by_fqn", "server": "Apache Gravitino(incubating)", "description": "Get detailed table information by fully qualified name", "parameter": {}, "task": "Retrieve the detailed schema and metadata for the table identified by its fully qualified name."}, {"name": "get_table_columns_by_fqn", "server": "Apache Gravitino(incubating)", "description": "Get table columns information by fully qualified name", "parameter": {}, "task": "Retrieve the column details for the table identified by its fully qualified name."}, {"name": "get_list_of_tags", "server": "Apache Gravitino(incubating)", "description": "Get a list of tags with basic information", "parameter": {}, "task": "Retrieve the list of all available tags along with their basic details."}, {"name": "associate_tag_to_table", "server": "Apache Gravitino(incubating)", "description": "Associate a tag to a table", "parameter": {}, "task": "Associate the tag 'high_priority' to the table containing customer transaction records."}, {"name": "associate_tag_to_column", "server": "Apache Gravitino(incubating)", "description": "Associate a tag to a column", "parameter": {}, "task": "Associate a relevant tag to the specified column in the dataset."}, {"name": "list_objects_by_tag", "server": "Apache Gravitino(incubating)", "description": "Get a list of objects associated with a tag", "parameter": {}, "task": "List all objects tagged with 'ProjectX' in the system."}, {"name": "get_list_of_roles", "server": "Apache Gravitino(incubating)", "description": "Get a list of roles with basic information", "parameter": {}, "task": "Retrieve the list of all available roles along with their basic details."}, {"name": "get_list_of_users", "server": "Apache Gravitino(incubating)", "description": "Get a list of users with basic information", "parameter": {}, "task": "Retrieve a list of users including their basic details such as name, email, and registration date."}, {"name": "grant_role_to_user", "server": "Apache Gravitino(incubating)", "description": "Grant a role to a user", "parameter": {}, "task": "Grant the 'admin' role to the user with ID 'user123'."}, {"name": "revoke_role_from_user", "server": "Apache Gravitino(incubating)", "description": "Revoke a role from a user", "parameter": {}, "task": "Revoke the 'admin' role from the user with ID 'U12345' in the system."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "Apple Calendar", "description": "1.基于自然语言创建日历事件 2.提供用户日程信息并查找会议可用时间 3.基于自然语言更新现有日历事件 4.管理并提供可用日历信息", "tools": [{"name": "Event Creation", "server": "Apple Calendar", "description": "Creates calendar events based on natural language input.", "parameter": {"calendar": "(Optional, string) The calendar to add the event to.", "location": "(Optional, string) The location of the event.", "notes": "(Optional, string) Additional notes for the event.", "reminder": "(Optional, string) Reminder settings for the event.", "recurring": "(Optional, string) Recurrence pattern for the event."}, "task": "Create a recurring weekly team meeting event every Monday at 10 AM in the \"Work\" calendar, with the location set to \"Conference Room A\" and a 15-minute reminder notification. Include the notes \"Agenda: Project updates and action items.\""}, {"name": "Smart Schedule Management & Availability", "server": "Apple Calendar", "description": "Provides information about the user's schedule and finds available time slots for meetings.", "parameter": {}, "task": "Find available time slots for a 1-hour meeting between 9 AM and 5 PM over the next 3 business days."}, {"name": "Intelligent Event Updates", "server": "Apple Calendar", "description": "Updates existing calendar events based on natural language input.", "parameter": {"time": "(Optional, string) New time for the event.", "date": "(Optional, string) New date for the event.", "calendar": "(Optional, string) New calendar for the event.", "location": "(Optional, string) New location for the event.", "notes": "(Optional, string) Additional notes to add to the event.", "reminder": "(Optional, string) New reminder settings for the event.", "recurring": "(Optional, string) New recurrence pattern for the event."}, "task": "Update the existing team meeting event to reschedule it for 2024-07-15 at 2:00 PM in the \"Conference Room B\" location, with a 15-minute reminder notification."}, {"name": "Calendar Management", "server": "Apple Calendar", "description": "Manages and provides information about available calendars.", "parameter": {}, "task": "Check the availability of all calendars for scheduling a meeting next week."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Aranet4", "description": "1.配置Aranet4设备 2.扫描附近的蓝牙Aranet4设备 3.获取当前配置和数据库统计信息 4.设置配置文件中的值 5.从配置的Aranet4设备获取新数据并保存到本地数据库 6.从本地数据库获取最近的测量数据 7.从本地数据库获取特定时间范围内的数据", "tools": [{"name": "init_aranet4_config", "server": "Aranet4", "description": "Assisted configuration of the Aranet4 device.", "parameter": {}, "task": "Configure the Aranet4 device for initial setup and ensure all default settings are applied correctly."}, {"name": "scan_devices", "server": "Aranet4", "description": "Scan for nearby Bluetooth Aranet4 devices.", "parameter": {}, "task": "Scan for nearby Aranet4 devices within Bluetooth range."}, {"name": "get_configuration_and_db_stats", "server": "Aranet4", "description": "Get the current configuration and database statistics.", "parameter": {}, "task": "Retrieve the current configuration settings and database performance statistics."}, {"name": "set_configuration", "server": "Aranet4", "description": "Set values in the configuration file.", "parameter": {}, "task": "Update the configuration file with new settings for the application's logging level."}, {"name": "fetch_new_data", "server": "Aranet4", "description": "Fetch new data from the configured nearby Aranet4 device and save it to the local database.", "parameter": {}, "task": "Fetch the latest sensor readings from the nearby Aranet4 device and store them in the local database."}, {"name": "get_recent_data", "server": "Aranet4", "description": "Get recent data from the local database. Can specify the number of measurements.", "parameter": {"measurements": "(Optional, int) Number of recent measurements to retrieve."}, "task": "Retrieve the last 5 measurements from the local database."}, {"name": "get_data_by_timerange", "server": "Aranet4", "description": "Get data within a specific time range from the local database. Can specify the number of measurements.", "parameter": {"start_time": "(str) Start time of the range.", "end_time": "(str) End time of the range.", "measurements": "(Optional, int) Number of measurements to retrieve."}, "task": "Retrieve the last 50 measurements recorded between 2024-01-01 00:00:00 and 2024-01-31 23:59:59 from the local database."}], "domains": [{"name": "Healthcare Service", "description": "医疗健康服务,包括在线问诊、电子病历、健康数据记录及医疗资源预约"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "ArangoDB", "description": "ArangoDB数据库操作,包括：执行AQL查询、文档插入、更新、删除、备份集合、列出所有集合、创建新集合", "tools": [{"name": "arango_query", "server": "ArangoDB", "description": "Execute AQL queries", "parameter": {"query": "(string) AQL query string", "bindVariables": "(Optional, object) Bind variables for parameterized queries"}, "task": "Query the top 10 most active users from the ArangoDB database using an AQL query with bind variables for the date range '2024-01-01' to '2024-03-31'."}, {"name": "arango_insert", "server": "ArangoDB", "description": "Insert documents into collections", "parameter": {"collection": "(string) Collection name", "document": "(object) Document object"}, "task": "Insert a new document containing user details (name: \"Alice\", age: 28, email: \"alice@example.com\") into the \"users\" collection."}, {"name": "arango_update", "server": "ArangoDB", "description": "Update existing documents", "parameter": {"collection": "(string) Collection name", "key": "(string) Document key", "update": "(object) Update object"}, "task": "Update the document with key \"user123\" in the \"customers\" collection by changing the \"status\" field to \"active\"."}, {"name": "arango_remove", "server": "ArangoDB", "description": "Remove documents from collections", "parameter": {"collection": "(string) Collection name", "key": "(string) Document key"}, "task": "Remove the document with the key \"user123\" from the \"customers\" collection."}, {"name": "arango_backup", "server": "ArangoDB", "description": "Backup all collections to JSON files", "parameter": {"outputDir": "(string) Output directory path", "collection": "(Optional, string) Collection name to backup", "docLimit": "(Optional, number) Maximum number of documents to backup per collection"}, "task": "Backup all collections to JSON files in the specified output directory, limiting each collection to 1000 documents."}, {"name": "arango_list_collections", "server": "ArangoDB", "description": "List all collections in the database", "parameter": {}, "task": "List all collections in the connected ArangoDB database."}, {"name": "arango_create_collection", "server": "ArangoDB", "description": "Create a new collection in the database", "parameter": {"name": "(string) Collection name", "type": "(Optional, string) Collection type (document or edge collection)", "waitForSync": "(Optional, boolean) Configure waitForSync behavior for write operations"}, "task": "Create a new document collection named \"customer_data\" with waitForSync enabled in the database."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Atlassian", "description": "Jira and Confluence operations, including: issue management (get, search, create, update, transition, comment), page management (search, get, create, update)", "tools": [{"name": "jira_get_issue", "server": "Atlassian", "description": "Get details of a specific issue", "parameter": {}, "task": "Retrieve the details of issue ID JIRA-1234 from the project management system."}, {"name": "jira_search", "server": "Atlassian", "description": "Search issues using JQL", "parameter": {}, "task": "Search for all open issues assigned to the current user in the Jira project using JQL."}, {"name": "jira_create_issue", "server": "Atlassian", "description": "Create a new issue", "parameter": {}, "task": "Create a new issue in the project management system with the following details: title \"Implement User Authentication\", description \"Develop and integrate user authentication using OAuth 2.0\", and assign it to the \"Development\" team."}, {"name": "jira_update_issue", "server": "Atlassian", "description": "Update an existing issue", "parameter": {}, "task": "Update the status of an existing Jira issue to \"In Progress\" and assign it to the current user."}, {"name": "jira_transition_issue", "server": "Atlassian", "description": "Transition an issue to a new status", "parameter": {}, "task": "Transition the issue with ID 'PROJ-123' to the 'In Progress' status in Jira."}, {"name": "jira_add_comment", "server": "Atlassian", "description": "Add a comment to an issue", "parameter": {}, "task": "Add a comment to the Jira issue with ID \"PROJ-123\" stating that the task is complete and awaiting review."}, {"name": "confluence_search", "server": "Atlassian", "description": "Search Confluence content using CQL", "parameter": {}, "task": "Search for documentation related to \"Project Orion\" in Confluence using CQL."}, {"name": "confluence_get_page", "server": "Atlassian", "description": "Get content of a specific page", "parameter": {}, "task": "Retrieve the content of the latest project documentation page from the team's knowledge base."}, {"name": "confluence_create_page", "server": "Atlassian", "description": "Create a new page", "parameter": {}, "task": "Create a new documentation page in the team's knowledge base with the title \"Project Onboarding Guide\" and include sections for setup instructions, common issues, and contact information."}, {"name": "confluence_update_page", "server": "Atlassian", "description": "Update an existing page", "parameter": {}, "task": "Update the content of an existing page in the Confluence workspace with the latest project documentation."}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "AWS Athena", "description": "AWS Athena operations including: executing SQL queries, checking query status, retrieving query results, listing saved queries, and running saved queries by ID", "tools": [{"name": "run_query", "server": "AWS Athena", "description": "Execute a SQL query using AWS Athena", "parameter": {"database": "(string) The Athena database to query", "query": "(string) SQL query to execute", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000, max: 10000)"}, "task": "Retrieve the top 500 customer records from the \"sales_data\" database where the purchase amount exceeds $1000."}, {"name": "get_status", "server": "AWS Athena", "description": "Check the status of a query execution", "parameter": {"queryExecutionId": "(string) The ID returned from run_query"}, "task": "Check the execution status of the query with ID \"q12345\"."}, {"name": "get_result", "server": "AWS Athena", "description": "Retrieve results for a completed query", "parameter": {"queryExecutionId": "(string) The ID returned from run_query", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000, max: 10000)"}, "task": "Retrieve the first 500 rows of results for the completed query with execution ID \"Q123456789\"."}, {"name": "list_saved_queries", "server": "AWS Athena", "description": "List all saved (named) queries in Athena", "parameter": {}, "task": "List all named queries stored in the Athena database."}, {"name": "run_saved_query", "server": "AWS Athena", "description": "Run a previously saved query by its ID", "parameter": {"namedQueryId": "(string) ID of the saved query", "databaseOverride": "(Optional, string) Optional override of the saved query's default database", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000)", "timeoutMs": "(Optional, integer) Timeout in milliseconds (default: 60000)"}, "task": "Run the saved query with ID 'sales_report_2024' on the 'ecommerce' database, returning a maximum of 500 rows with a timeout of 30 seconds."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "AWS Cost Explorer", "description": "1. Retrieve EC2 spending data for the previous day 2. Deliver comprehensive cost analysis by region, service, and instance type 3. Provide daily and hourly breakdown of AWS Bedrock model usage by region and users", "tools": [{"name": "get_ec2_spend_last_day", "server": "AWS Cost Explorer", "description": "Retrieves EC2 spending data for the previous day", "parameter": {}, "task": "Retrieve the total EC2 spending data for the previous day."}, {"name": "get_detailed_breakdown_by_day", "server": "AWS Cost Explorer", "description": "Delivers a comprehensive analysis of costs by region, service, and instance type", "parameter": {"days": "(int) Number of days to analyze (default: 7)"}, "task": "Generate a detailed cost analysis report for the past 14 days, broken down by region, service, and instance type."}, {"name": "get_bedrock_daily_usage_stats", "server": "AWS Cost Explorer", "description": "Delivers a per-day breakdown of model usage by region and users", "parameter": {"days": "(int) Number of days to analyze (default: 7)", "region": "(str) AWS region (default: 'us-east-1')", "log_group_name": "(str) Name of the CloudWatch Log Group (default: 'BedrockModelInvocationLogGroup')"}, "task": "Generate a daily breakdown of model usage for the past 14 days in the 'eu-west-1' region from the default CloudWatch Log Group."}, {"name": "get_bedrock_hourly_usage_stats", "server": "AWS Cost Explorer", "description": "Delivers a per-day per-hour breakdown of model usage by region and users", "parameter": {"days": "(int) Number of days to analyze (default: 7)", "region": "(str) AWS region (default: 'us-east-1')", "log_group_name": "(str) Name of the CloudWatch Log Group (default: 'BedrockModelInvocationLogGroup')"}, "task": "Generate a daily per-hour breakdown of model usage in the 'us-west-2' AWS region for the past 14 days, using the default CloudWatch Log Group."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "AWS Resources Operations", "description": "Execute a boto3 code snippet to query or modify AWS resources", "tools": [{"name": "aws_resources_query_or_modify", "server": "AWS Resources Operations", "description": "Execute a boto3 code snippet to query or modify AWS resources", "parameter": {"code_snippet": "(string) Python code using boto3 to query AWS resources. The code must set a `result` variable with the query output."}, "task": "Run a boto3 script to retrieve the current status of all EC2 instances in the us-east-1 region and store the output in the `result` variable."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "AWS S3", "description": "Amazon S3 bucket and object management, including listing buckets, listing objects, and retrieving objects", "tools": [{"name": "ListBuckets", "server": "AWS S3", "description": "Returns a list of all buckets owned by the authenticated sender of the request", "parameter": {}, "task": "List all available storage buckets owned by the authenticated user."}, {"name": "ListObjectsV2", "server": "AWS S3", "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request", "parameter": {}, "task": "List all objects in the specified S3 bucket, retrieving up to the maximum limit of 1,000 items per request."}, {"name": "GetObject", "server": "AWS S3", "description": "Retrieves an object from Amazon S3. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported", "parameter": {}, "task": "Retrieve the file named \"quarterly_report_2024.pdf\" from the specified Amazon S3 bucket."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Azure ADX", "description": "Azure Data Explorer operations, including: KQL query execution, table listing, schema retrieval, and table data sampling", "tools": [{"name": "execute_query", "server": "Azure ADX", "description": "Execute a KQL query against Azure Data Explorer", "parameter": {"query": "(string) The KQL query to execute"}, "task": "Query the Azure Data Explorer database to retrieve all records from the 'Sales' table where the transaction amount exceeds $1000."}, {"name": "list_tables", "server": "Azure ADX", "description": "List all tables in the configured database", "parameter": {}, "task": "List all tables available in the currently connected database."}, {"name": "get_table_schema", "server": "Azure ADX", "description": "Get the schema for a specific table", "parameter": {"table_name": "(string) The name of the table to get the schema for"}, "task": "Retrieve the schema details for the 'customer_data' table."}, {"name": "sample_table_data", "server": "Azure ADX", "description": "Get sample data from a table with optional sample size", "parameter": {"table_name": "(string) The name of the table to sample data from", "sample_size": "(Optional, int) The number of rows to sample (default is 10)"}, "task": "Retrieve 15 sample rows from the 'customer_feedback' table."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Azure DevOps", "description": "Azure DevOps work item management, including: querying work items, creating/updating work items, adding/viewing comments, accessing project/team information, and managing team configurations", "tools": [{"name": "Query Work Items", "server": "Azure DevOps", "description": "Search for work items using WIQL queries", "parameter": {}, "task": "Search for all active work items assigned to the current user using a WIQL query."}, {"name": "Get Work Item Details", "server": "Azure DevOps", "description": "View complete work item information", "parameter": {}, "task": "Retrieve the full details of the latest work item assigned to the current user."}, {"name": "Create Work Items", "server": "Azure DevOps", "description": "Add new tasks, bugs, user stories, and other work item types", "parameter": {}, "task": "Create a new user story for implementing a login feature with OAuth 2.0 authentication."}, {"name": "Update Work Items", "server": "Azure DevOps", "description": "Modify existing work items' fields and properties", "parameter": {}, "task": "Update the priority field of all active work items to 'High' in the current sprint."}, {"name": "Add Comments", "server": "Azure DevOps", "description": "Post comments on work items", "parameter": {}, "task": "Add a comment to the current work item discussing the next steps for the project."}, {"name": "View Comments", "server": "Azure DevOps", "description": "Retrieve the comment history for a work item", "parameter": {}, "task": "Retrieve the comment history for the latest work item in the system."}, {"name": "Get Projects", "server": "Azure DevOps", "description": "View all accessible projects in the organization", "parameter": {}, "task": "List all accessible projects within the organization's scope."}, {"name": "Get Teams", "server": "Azure DevOps", "description": "List all teams within the organization", "parameter": {}, "task": "List all teams currently existing in the organization's directory."}, {"name": "Team Members", "server": "Azure DevOps", "description": "View team membership information", "parameter": {}, "task": "List all members of the current team along with their roles and join dates."}, {"name": "Team Area Paths", "server": "Azure DevOps", "description": "Retrieve area paths assigned to teams", "parameter": {}, "task": "Retrieve the list of area paths currently assigned to all teams in the organization."}, {"name": "Team Iterations", "server": "Azure DevOps", "description": "Access team iteration/sprint configurations", "parameter": {}, "task": "Retrieve the current sprint configuration details for the active development team."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Baidu AI Search", "description": "1.调用大模型并支持自定义prompt模板和模型参数 2.结合百度搜索和ERNIE模型提供更准确的搜索结果 3.访问和管理百度智能云千帆AppBuilder网页端发布的AI原生应用", "tools": [{"name": "Playground", "server": "Baidu AI Search", "description": "用于调用大模型，支持自定义prompt模板和模型参数。", "parameter": {"prompt_template": "(string) 自定义的prompt模板", "model": "(string) 调用的模型名称", "stream": "(Optional, boolean) 是否以流式方式返回结果", "temperature": "(Optional, float) 模型的温度参数，控制输出的随机性"}, "task": "Generate a creative story about a futuristic city using a custom prompt template with a temperature setting of 0.7."}, {"name": "RagWithBaiduSearchPro", "server": "Baidu AI Search", "description": "结合百度搜索的搜索引擎技术和ERNIE模型的语义理解能力，提供更准确的搜索结果。", "parameter": {"message": "(Message) 输入的消息", "instruction": "(Message) 指令消息"}, "task": "Search for the latest advancements in artificial intelligence using semantic understanding technology."}, {"name": "AppBuilderClient", "server": "Baidu AI Search", "description": "用于访问和管理在百度智能云千帆AppBuilder网页端发布的AI原生应用，支持创建会话和运行应用。", "parameter": {"app_id": "(string) 应用ID", "conversation_id": "(string) 会话ID"}, "task": "Create a new session for the AI application with ID \"abc123\" on Baidu's Qianfan AppBuilder platform."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Base Free USDC Transfer", "description": "1.分析购买物品价值并通过Base链安排USDC转账 2.创建Coinbase MPC钱包地址", "tools": [{"name": "tranfer-usdc", "server": "Base Free USDC Transfer", "description": "Analyzes the value of the purchased items and schedules a USDC transfer to the recipient via the Base chain. Does not wait for the transaction to complete.", "parameter": {"usdc_amount": "(number) USDC amount, greater than 0.", "recipient": "(string) Recipient's on-chain address or ENS domain (e.g., example.eth)."}, "task": "Transfer 500 USDC to the recipient with the on-chain address 0x123...abc via the Base chain."}, {"name": "create_coinbase_mpc_wallet", "server": "Base Free USDC Transfer", "description": "Creates a new Coinbase MPC wallet address. If a wallet already exists, returns the existing wallet address.", "parameter": {}, "task": "Generate a new MPC wallet address for Coinbase. If a wallet already exists, retrieve the existing address."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Basic Memory", "description": "1. Create or update notes in the knowledge base 2. Read notes by title or permalink 3. Navigate the knowledge graph via memory:// URLs 4. Search across the knowledge base 5. Find recently updated information 6. Generate knowledge visualizations", "tools": [{"name": "write_note", "server": "Basic Memory", "description": "Create or update notes in the knowledge base.", "parameter": {"title": "(string) The title of the note", "content": "(string) The content of the note", "folder": "(string) The folder where the note should be saved", "tags": "(array) Tags to associate with the note"}, "task": "Create a new note titled \"Project Kickoff Meeting\" with the content \"Discussed project scope, timelines, and deliverables\" in the \"Meetings\" folder, and tag it with \"project\" and \"meeting\"."}, {"name": "read_note", "server": "Basic Memory", "description": "Read notes by title or permalink.", "parameter": {"identifier": "(string) The title or permalink of the note", "page": "(integer) The page number for paginated results", "page_size": "(integer) The number of items per page"}, "task": "Retrieve the content of the note titled \"Project Meeting Minutes\" with 10 items per page on page 2."}, {"name": "build_context", "server": "Basic Memory", "description": "Navigate the knowledge graph via memory:// URLs.", "parameter": {"url": "(string) The memory:// URL to start from", "depth": "(integer) The depth to traverse the graph", "timeframe": "(string) The timeframe to consider (e.g., 'past week')"}, "task": "Traverse the knowledge graph starting from the memory://projects/2024 URL, exploring up to 3 levels deep, and focus on entries from the past month."}, {"name": "search_notes", "server": "Basic Memory", "description": "Search across the knowledge base.", "parameter": {"query": "(string) The search query", "page": "(integer) The page number for paginated results", "page_size": "(integer) The number of items per page"}, "task": "Search for documents related to \"machine learning algorithms\" in the knowledge base, displaying 10 results per page on the first page."}, {"name": "recent_activity", "server": "Basic Memory", "description": "Find recently updated information.", "parameter": {"type": "(string) The type of activity to filter by (e.g., 'note', 'update')", "depth": "(integer) The depth to traverse the graph", "timeframe": "(string) The timeframe to consider (e.g., 'past week')"}, "task": "Retrieve all note updates from the past week, traversing up to 3 levels of related activity."}, {"name": "canvas", "server": "Basic Memory", "description": "Generate knowledge visualizations.", "parameter": {"nodes": "(array) The nodes to include in the visualization", "edges": "(array) The edges to connect the nodes", "title": "(string) The title of the visualization", "folder": "(string) The folder where the visualization should be saved"}, "task": "Create a knowledge visualization titled \"Project Dependencies\" that includes nodes for each project component and edges to represent their relationships, then save it in the \"ProjectDocs\" folder."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "Calculator", "description": "Calculates/evaluates the given expression", "tools": [{"name": "calculate", "server": "Calculator", "description": "Calculates/evaluates the given expression.", "parameter": {"expression": "(string, required) Expression to be calculated"}, "task": "Calculate the result of the mathematical expression \"5 * (3 + 2) - 10 / 2\"."}], "domains": [{"name": "Scientific Computing", "description": "科学计算,支持数值模拟、数学建模、数据分析及学科算法实现"}]}
{"name": "CFBD API", "description": "1. Retrieve game data 2. Get team records 3. Access team game statistics 4. Query play-by-play data 5. Analyze drive information 6. View play statistics 7. Check team rankings 8. See win probabilities 9. Access detailed game statistics and analytics", "tools": [{"name": "get-games", "server": "CFBD API", "description": "Retrieve game data", "parameter": {}, "task": "Retrieve the latest 10 game records from the database."}, {"name": "get-records", "server": "CFBD API", "description": "Get team records", "parameter": {}, "task": "Retrieve the latest performance records for the team."}, {"name": "get-games-teams", "server": "CFBD API", "description": "Access team game statistics", "parameter": {}, "task": "Retrieve the latest game statistics for all teams in the current season."}, {"name": "get-plays", "server": "CFBD API", "description": "Query play-by-play data", "parameter": {}, "task": "Retrieve the play-by-play data for the most recent basketball game."}, {"name": "get-drives", "server": "CFBD API", "description": "Analyze drive information", "parameter": {}, "task": "Analyze the information of all available drives on the system."}, {"name": "get-play-stats", "server": "CFBD API", "description": "View play statistics", "parameter": {}, "task": "View the play statistics for the current session."}, {"name": "get-rankings", "server": "CFBD API", "description": "Check team rankings", "parameter": {}, "task": "Retrieve the current rankings of all teams in the league."}, {"name": "get-pregame-win-probability", "server": "CFBD API", "description": "See win probabilities", "parameter": {}, "task": "Check the pregame win probabilities for the upcoming match."}, {"name": "get-advanced-box-score", "server": "CFBD API", "description": "Access detailed game statistics and analytics", "parameter": {}, "task": "Retrieve the detailed statistics and analytics for the most recent basketball game."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "ChatSum", "description": "Query and summarize chat messages based on given parameters", "tools": [{"name": "query_chat_messages", "server": "ChatSum", "description": "Query chat messages with given parameters and summarize chat messages based on the query prompt.", "parameter": {}, "task": "Retrieve and summarize the latest 50 chat messages from the current conversation."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Chess.com", "description": "Chess.com player and club data retrieval, including: player profiles, stats, online status, titled players, ongoing games, monthly games, game archives, PGN downloads, club profiles, and club members", "tools": [{"name": "get_player_profile", "server": "Chess.com", "description": "Get a player's profile from Chess.com", "parameter": {}, "task": "Retrieve the profile details of the player with the username \"chessmaster123\" from Chess.com."}, {"name": "get_player_stats", "server": "Chess.com", "description": "Get a player's stats from Chess.com", "parameter": {}, "task": "Retrieve the latest statistics for a specified player from Chess.com."}, {"name": "is_player_online", "server": "Chess.com", "description": "Check if a player is currently online on Chess.com", "parameter": {}, "task": "Check if the player 'JohnDoe' is currently online on Chess.com."}, {"name": "get_titled_players", "server": "Chess.com", "description": "Get a list of titled players from Chess.com", "parameter": {}, "task": "Retrieve the current list of titled players (e.g., GM, IM, FM) from Chess.com."}, {"name": "get_player_current_games", "server": "Chess.com", "description": "Get a player's ongoing games on Chess.com", "parameter": {}, "task": "Check the ongoing Chess.com games for the specified player."}, {"name": "get_player_games_by_month", "server": "Chess.com", "description": "Get a player's games for a specific month from Chess.com", "parameter": {}, "task": "Retrieve all chess games played by a specific player during March 2024 from Chess.com."}, {"name": "get_player_game_archives", "server": "Chess.com", "description": "Get a list of available monthly game archives for a player on Chess.com", "parameter": {}, "task": "Retrieve the list of monthly game archives for a specific player on Chess.com."}, {"name": "download_player_games_pgn", "server": "Chess.com", "description": "Download PGN files for all games in a specific month from Chess.com", "parameter": {}, "task": "Download all chess games played in January 2024 from Chess.com in PGN format."}, {"name": "get_club_profile", "server": "Chess.com", "description": "Get information about a club on Chess.com", "parameter": {}, "task": "Retrieve the latest profile details for a specified chess club on Chess.com."}, {"name": "get_club_members", "server": "Chess.com", "description": "Get members of a club on Chess.com", "parameter": {}, "task": "Retrieve the list of members currently registered in the specified Chess.com club."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "ClickUp", "description": "1.任务管理，包括创建、更新、删除、移动和复制任务 2.列表和文件夹管理，包括创建、更新和删除 3.标签管理，包括创建、更新、删除和关联任务 4.时间跟踪，包括开始、停止和记录时间条目 5.文档管理，包括创建、获取和更新文档页面", "tools": [{"name": "get_workspace_hierarchy", "server": "ClickUp", "description": "Get workspace structure", "parameter": {}, "task": "Retrieve the hierarchical structure of the current workspace, including all nested folders and files."}, {"name": "create_task", "server": "ClickUp", "description": "Create a task", "parameter": {"name": "(string) The name of the task", "listId": "(Optional, string) The ID of the list where the task will be created", "listName": "(Optional, string) The name of the list where the task will be created"}, "task": "Create a task named \"Complete project documentation\" in the list with ID \"L12345\"."}, {"name": "create_bulk_tasks", "server": "ClickUp", "description": "Create multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to create"}, "task": "Create a list of 5 new tasks for the upcoming project deadline, including their titles, descriptions, and due dates."}, {"name": "update_task", "server": "ClickUp", "description": "Modify task", "parameter": {"taskId": "(string) The ID of the task to update", "taskName": "(Optional, string) The name of the task to update"}, "task": "Update the task with ID \"TASK12345\" to have the new name \"Complete Project Documentation\"."}, {"name": "update_bulk_tasks", "server": "ClickUp", "description": "Update multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to update, each containing IDs or names"}, "task": "Update the status of three tasks with IDs \"TASK001\", \"TASK002\", and \"TASK003\" to \"completed\"."}, {"name": "get_tasks", "server": "ClickUp", "description": "Get tasks from list", "parameter": {"listId": "(string) The ID of the list to get tasks from", "listName": "(Optional, string) The name of the list to get tasks from"}, "task": "Retrieve all tasks from the list with ID \"L12345\"."}, {"name": "get_task", "server": "ClickUp", "description": "Get single task details", "parameter": {"taskId": "(string) The ID of the task to get", "taskName": "(Optional, string) The name of the task to get (with smart disambiguation)"}, "task": "Retrieve the details of the task with ID \"TASK-12345\" or, if not found, search for a task named \"Q2 Marketing Campaign\" using smart disambiguation."}, {"name": "get_workspace_tasks", "server": "ClickUp", "description": "Get tasks with filtering", "parameter": {"tags": "(Optional, array) Tags to filter tasks by", "list_ids": "(Optional, array) List IDs to filter tasks by", "space_ids": "(Optional, array) Space IDs to filter tasks by"}, "task": "Retrieve all tasks tagged with \"urgent\" from the specified workspace lists."}, {"name": "get_task_comments", "server": "ClickUp", "description": "Get comments on a task", "parameter": {"taskId": "(string) The ID of the task to get comments from", "taskName": "(Optional, string) The name of the task to get comments from"}, "task": "Retrieve all comments associated with the task with ID \"TSK-12345\"."}, {"name": "create_task_comment", "server": "ClickUp", "description": "Add a comment to a task", "parameter": {"commentText": "(string) The text of the comment", "taskId": "(string) The ID of the task to add the comment to", "taskName": "(Optional, string) The name of the task to add the comment to", "listName": "(Optional, string) The name of the list containing the task"}, "task": "Add a comment with the text \"Please review the attached documents by EOD\" to the task with ID \"TASK12345\" in the \"Project Review\" list."}, {"name": "attach_task_file", "server": "ClickUp", "description": "Attach file to a task", "parameter": {"taskId": "(string) The ID of the task to attach the file to", "taskName": "(Optional, string) The name of the task to attach the file to", "file_data": "(Optional, string) The file data to attach", "file_url": "(Optional, string) The URL of the file to attach"}, "task": "Attach the document located at \"https://example.com/report.pdf\" to the task with ID \"TASK-12345\"."}, {"name": "delete_task", "server": "ClickUp", "description": "Remove task", "parameter": {"taskId": "(string) The ID of the task to delete", "taskName": "(Optional, string) The name of the task to delete"}, "task": "Delete the task with ID \"TASK12345\" from the system."}, {"name": "delete_bulk_tasks", "server": "ClickUp", "description": "Remove multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to delete, each containing IDs or names"}, "task": "Delete all tasks with IDs [\"TASK001\", \"TASK002\", \"TASK003\"] from the system."}, {"name": "move_task", "server": "ClickUp", "description": "Move task", "parameter": {"taskId": "(string) The ID of the task to move", "taskName": "(Optional, string) The name of the task to move", "listId": "(string) The ID of the target list", "listName": "(Optional, string) The name of the target list"}, "task": "Move the task with ID 'TASK123' to the target list with ID 'LIST456'. If the task name is 'Update Project Plan', ensure it is correctly identified and moved. Optionally, specify the target list name as 'In Progress' for clarity."}, {"name": "move_bulk_tasks", "server": "ClickUp", "description": "Move multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to move, each containing IDs or names", "targetList": "(string) The ID or name of the target list"}, "task": "Move an array of 5 specified tasks to the target list named \"Completed Projects\"."}, {"name": "duplicate_task", "server": "ClickUp", "description": "Copy task", "parameter": {"taskId": "(string) The ID of the task to duplicate", "taskName": "(Optional, string) The name of the task to duplicate", "listId": "(string) The ID of the target list", "listName": "(Optional, string) The name of the target list"}, "task": "Create a copy of the task with ID \"TSK123\" and move it to the target list with ID \"LST456\"."}, {"name": "create_list", "server": "ClickUp", "description": "Create list in space", "parameter": {"name": "(string) The name of the list to create", "spaceId": "(string) The ID of the space where the list will be created", "spaceName": "(Optional, string) The name of the space where the list will be created"}, "task": "Create a new list named \"Project Tasks\" in the space with ID \"SP12345\"."}, {"name": "create_folder", "server": "ClickUp", "description": "Create folder", "parameter": {"name": "(string) The name of the folder to create", "spaceId": "(string) The ID of the space where the folder will be created", "spaceName": "(Optional, string) The name of the space where the folder will be created"}, "task": "Create a new folder named \"Project_Documents\" in the space with ID \"SP12345\"."}, {"name": "create_list_in_folder", "server": "ClickUp", "description": "Create list in folder", "parameter": {"name": "(string) The name of the list to create", "folderId": "(string) The ID of the folder where the list will be created", "folderName": "(Optional, string) The name of the folder where the list will be created"}, "task": "Create a new list named \"Project Tasks\" inside the folder with ID \"F12345\"."}, {"name": "get_folder", "server": "ClickUp", "description": "Get folder details", "parameter": {"folderId": "(string) The ID of the folder to get", "folderName": "(Optional, string) The name of the folder to get"}, "task": "Retrieve the details of the folder with ID \"F12345\" from the system. If the folder name \"Project Documents\" is provided, use it as an additional identifier."}, {"name": "update_folder", "server": "ClickUp", "description": "Update folder properties", "parameter": {"folderId": "(string) The ID of the folder to update", "folderName": "(Optional, string) The name of the folder to update"}, "task": "Update the name of the folder with ID \"F12345\" to \"Project Documents 2024\"."}, {"name": "delete_folder", "server": "ClickUp", "description": "Delete folder", "parameter": {"folderId": "(string) The ID of the folder to delete", "folderName": "(Optional, string) The name of the folder to delete"}, "task": "Delete the folder with ID \"F12345\" from the storage system. If the folder name is provided as \"Project_Backup\", ensure it matches before deletion."}, {"name": "get_list", "server": "ClickUp", "description": "Get list details", "parameter": {"listId": "(string) The ID of the list to get", "listName": "(Optional, string) The name of the list to get"}, "task": "Retrieve the details of the list with the ID \"L12345\" and optionally include the name if available."}, {"name": "update_list", "server": "ClickUp", "description": "Update list properties", "parameter": {"listId": "(string) The ID of the list to update", "listName": "(Optional, string) The name of the list to update"}, "task": "Update the name of the list with ID \"L12345\" to \"Project Tasks\"."}, {"name": "delete_list", "server": "ClickUp", "description": "Delete list", "parameter": {"listId": "(string) The ID of the list to delete", "listName": "(Optional, string) The name of the list to delete"}, "task": "Delete the list with the ID \"L12345\" from the system. If the ID is not available, delete the list named \"Project Tasks\" instead."}, {"name": "get_space_tags", "server": "ClickUp", "description": "Get space tags", "parameter": {"spaceId": "(string) The ID of the space to get tags from", "spaceName": "(Optional, string) The name of the space to get tags from"}, "task": "Retrieve all tags associated with the space identified by the ID \"SP12345\"."}, {"name": "create_space_tag", "server": "ClickUp", "description": "Create tag", "parameter": {"tagName": "(string) The name of the tag to create", "spaceId": "(string) The ID of the space where the tag will be created", "spaceName": "(Optional, string) The name of the space where the tag will be created"}, "task": "Create a tag named \"Project X\" in the space with ID \"spc12345\"."}, {"name": "update_space_tag", "server": "ClickUp", "description": "Update tag", "parameter": {"tagName": "(string) The name of the tag to update", "spaceId": "(string) The ID of the space where the tag exists", "spaceName": "(Optional, string) The name of the space where the tag exists"}, "task": "Update the tag named \"ProjectX\" in the space with ID \"SP12345\" to reflect its current status."}, {"name": "delete_space_tag", "server": "ClickUp", "description": "Delete tag", "parameter": {"tagName": "(string) The name of the tag to delete", "spaceId": "(string) The ID of the space where the tag exists", "spaceName": "(Optional, string) The name of the space where the tag exists"}, "task": "Remove the tag named \"inactive\" from the space with ID \"SP12345\"."}, {"name": "add_tag_to_task", "server": "ClickUp", "description": "Add tag to task", "parameter": {"tagName": "(string) The name of the tag to add", "taskId": "(string) The ID of the task to add the tag to", "taskName": "(Optional, string) The name of the task to add the tag to", "listName": "(Optional, string) The name of the list containing the task"}, "task": "Add the tag \"urgent\" to the task with ID \"TSK-2024-001\" in the \"Project Deliverables\" list."}, {"name": "remove_tag_from_task", "server": "ClickUp", "description": "Remove tag from task", "parameter": {"tagName": "(string) The name of the tag to remove", "taskId": "(string) The ID of the task to remove the tag from", "taskName": "(Optional, string) The name of the task to remove the tag from", "listName": "(Optional, string) The name of the list containing the task"}, "task": "Remove the tag \"urgent\" from the task with ID \"TSK12345\" in the \"Project X\" list."}, {"name": "get_task_time_entries", "server": "ClickUp", "description": "Get time entries for a task", "parameter": {"taskId": "(string) The ID of the task to get time entries for", "taskName": "(Optional, string) The name of the task to get time entries for"}, "task": "Retrieve all time entries logged for the task with ID \"TASK12345\". \n\nAlternatively, if the task name is provided: Retrieve all time entries logged for the task named \"Website Redesign Project\". \n\n(Note: The task can be identified either by its ID or name, but not both simultaneously.)"}, {"name": "start_time_tracking", "server": "ClickUp", "description": "Start time tracking on a task", "parameter": {"taskId": "(string) The ID of the task to start time tracking on", "taskName": "(Optional, string) The name of the task to start time tracking on"}, "task": "Start time tracking for the task with ID \"TSK-12345\" and name \"Website Redesign Project\"."}, {"name": "stop_time_tracking", "server": "ClickUp", "description": "Stop current time tracking", "parameter": {}, "task": "Stop the currently running time tracking session."}, {"name": "add_time_entry", "server": "ClickUp", "description": "Add manual time entry to a task", "parameter": {"taskId": "(string) The ID of the task to add the time entry to", "taskName": "(Optional, string) The name of the task to add the time entry to", "start": "(string) The start time of the time entry", "duration": "(string) The duration of the time entry"}, "task": "Log a 2-hour time entry starting at 9:00 AM for the task with ID \"TASK-123\"."}, {"name": "delete_time_entry", "server": "ClickUp", "description": "Delete a time entry", "parameter": {"timeEntryId": "(string) The ID of the time entry to delete"}, "task": "Delete the time entry with the ID \"TE123456789\" from the system."}, {"name": "get_current_time_entry", "server": "ClickUp", "description": "Get currently running timer", "parameter": {}, "task": "Check the details of the currently active timer."}, {"name": "create_document", "server": "ClickUp", "description": "Create a document", "parameter": {"workspaceId": "(string) The ID of the workspace where the document will be created", "name": "(string) The name of the document", "parentId": "(Optional, string) The ID of the parent item", "parentType": "(Optional, string) The type of the parent item", "visibility": "(Optional, string) The visibility of the document", "create_pages": "(Optional, boolean) Whether to create initial pages"}, "task": "Create a document named \"Project Plan 2024\" in workspace \"WS-1234\" with visibility set to \"private\" and include initial pages."}, {"name": "get_document", "server": "ClickUp", "description": "Get a document", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(Optional, string) The ID of the document", "creator": "(Optional, string) The creator of the document", "deleted": "(Optional, boolean) Whether to include deleted documents", "archived": "(Optional, boolean) Whether to include archived documents", "parent_id": "(Optional, string) The ID of the parent item", "parent_type": "(Optional, string) The type of the parent item", "limit": "(Optional, integer) The maximum number of documents to return", "next_cursor": "(Optional, string) The cursor for pagination"}, "task": "Retrieve up to 20 non-deleted and non-archived documents created by \"John Doe\" in workspace \"WS12345\"."}, {"name": "list_documents", "server": "ClickUp", "description": "List documents", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(Optional, string) The ID of the document", "creator": "(Optional, string) The creator of the document", "deleted": "(Optional, boolean) Whether to include deleted documents", "archived": "(Optional, boolean) Whether to include archived documents", "parent_id": "(Optional, string) The ID of the parent item", "parent_type": "(Optional, string) The type of the parent item", "limit": "(Optional, integer) The maximum number of documents to return", "next_cursor": "(Optional, string) The cursor for pagination"}, "task": "List all active documents in workspace \"WS123\" created by \"user1\", excluding deleted and archived items, with a limit of 50 documents per page."}, {"name": "list_document_pages", "server": "ClickUp", "description": "List document pages", "parameter": {"documentId": "(string) The ID of the document", "documentName": "(Optional, string) The name of the document"}, "task": "Retrieve all pages from the document with ID \"DOC12345\"."}, {"name": "get_document_pages", "server": "ClickUp", "description": "Get document pages", "parameter": {"documentId": "(string) The ID of the document", "documentName": "(Optional, string) The name of the document", "pageIds": "(Optional, array) The IDs of the pages to get"}, "task": "Retrieve pages 5 to 10 from the document with ID \"DOC12345\"."}, {"name": "create_document_pages", "server": "ClickUp", "description": "Create a document page", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(string) The ID of the document", "parent_page_id": "(Optional, string) The ID of the parent page", "name": "(string) The name of the page", "sub_title": "(Optional, string) The subtitle of the page", "content": "(string) The content of the page", "content_format": "(Optional, string) The format of the content"}, "task": "Create a new page titled \"Project Timeline\" with the content \"Q2 2024 deliverables\" in the specified workspace and document, setting the content format to plain text."}, {"name": "update_document_page", "server": "ClickUp", "description": "Update a document page", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(string) The ID of the document", "name": "(string) The name of the page", "sub_title": "(Optional, string) The subtitle of the page", "content": "(string) The content of the page", "content_edit_mode": "(Optional, string) The edit mode of the content", "content_format": "(Optional, string) The format of the content"}, "task": "Update the page titled \"Project Timeline\" in document ID \"DOC123\" within workspace \"WS456\" to include the subtitle \"Q2 2024 Milestones\" and formatted content detailing the key deliverables for April to June. Use markdown format for the content."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Cloudinary", "description": "Upload images and videos to Cloudinary", "tools": [{"name": "upload", "server": "Cloudinary", "description": "Upload images and videos to Cloudinary.", "parameter": {"file": "(required) Path to file, URL, or base64 data URI to upload", "resource_type": "(optional) Type of resource ('image', 'video', or 'raw')", "public_id": "(optional) Custom public ID for the uploaded asset", "overwrite": "(optional) Whether to overwrite existing assets with the same public ID", "tags": "(optional) Array of tags to assign to the uploaded asset"}, "task": "Upload the image file located at \"/path/to/image.jpg\" to Cloudinary with the public ID \"profile_picture\" and assign the tags [\"user\", \"profile\"]. Ensure the resource type is set to \"image\" and overwrite any existing asset with the same public ID."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "code-executor", "description": "1.在配置环境中执行Python代码 2.安装Python包 3.检查已安装的包 4.动态更改环境配置 5.获取当前环境配置", "tools": [{"name": "execute_code", "server": "code-executor", "description": "Executes Python code in the configured environment.", "parameter": {"code": "(string) The Python code to execute", "filename": "(string) The filename to store the generated code"}, "task": "Run the provided Python code snippet that calculates the factorial of 5 and save it to a file named \"factorial_calculation.py\"."}, {"name": "install_dependencies", "server": "code-executor", "description": "Installs Python packages in the environment.", "parameter": {"packages": "(array) List of package names to install"}, "task": "Install the Python packages 'numpy', 'pandas', and 'matplotlib' in the current environment."}, {"name": "check_installed_packages", "server": "code-executor", "description": "Checks if packages are already installed in the environment.", "parameter": {"packages": "(array) List of package names to check"}, "task": "Check if the packages 'numpy', 'pandas', and 'matplotlib' are installed in the current environment."}, {"name": "configure_environment", "server": "code-executor", "description": "Dynamically changes the environment configuration.", "parameter": {"type": "(string) The type of environment (e.g., 'conda', 'venv')", "conda_name": "(string) The name of the Conda environment to use (if applicable)"}, "task": "Set up a Conda environment named \"data_science\" for running Python 3.9 applications."}, {"name": "get_environment_config", "server": "code-executor", "description": "Gets the current environment configuration.", "parameter": {}, "task": "Retrieve the current environment configuration settings for review."}], "domains": [{"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "code-sandbox-mcp", "description": "1. Initialize a compute environment with Docker 2. Copy directories/files to sandboxed filesystem 3. Execute commands in sandboxed environment 4. Stop and remove container sandbox", "tools": [{"name": "sandbox_initialize", "server": "code-sandbox-mcp", "description": "Initialize a new compute environment for code execution. Creates a container based on the specified Docker image.", "parameter": {"image": "(string, optional) Docker image to use as the base environment. Default: 'python:3.12-slim-bookworm'"}, "task": "Set up a new compute environment using the default Python 3.12 slim bookworm Docker image."}, {"name": "copy_project", "server": "code-sandbox-mcp", "description": "Copy a directory to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "local_src_dir": "(string, required) Path to a directory in the local file system", "dest_dir": "(string, optional) Path to save the src directory in the sandbox environment"}, "task": "Copy the contents of the local directory `/projects/app_data` to the sandbox environment's `/sandbox/projects` directory."}, {"name": "write_file", "server": "code-sandbox-mcp", "description": "Write a file to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "file_name": "(string, required) Name of the file to create", "file_contents": "(string, required) Contents to write to the file", "dest_dir": "(string, optional) Directory to create the file in (Default: ${WORKDIR})"}, "task": "Create a file named \"config.json\" in the default directory with the contents \"{ \\\"debug\\\": true, \\\"logLevel\\\": \\\"info\\\" }\"."}, {"name": "sandbox_exec", "server": "code-sandbox-mcp", "description": "Execute commands in the sandboxed environment.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "commands": "(array, required) List of command(s) to run in the sandboxed environment"}, "task": "Run a list of commands including \"ls -la\" and \"pwd\" in the specified sandboxed container environment."}, {"name": "copy_file", "server": "code-sandbox-mcp", "description": "Copy a single file to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "local_src_file": "(string, required) Path to a file in the local file system", "dest_path": "(string, optional) Path to save the file in the sandbox environment"}, "task": "Copy the local file located at `/home/user/data/report.pdf` to the sandbox environment under the path `/sandbox/reports/`."}, {"name": "sandbox_stop", "server": "code-sandbox-mcp", "description": "Stop and remove a running container sandbox. Gracefully stops the specified container with a 10-second timeout and removes it along with its volumes.", "parameter": {"container_id": "(string, required) ID of the container to stop and remove"}, "task": "Stop and remove the running container with ID 'abc123' using a 10-second timeout and ensure all associated volumes are also removed."}], "domains": [{"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "consul-mcp", "description": "Consul服务管理,包括:服务注册与注销、健康检查管理、KV存储操作、会话管理、事件处理、查询执行、集群节点信息获取", "tools": [{"name": "List running services", "server": "consul-mcp", "description": "Lists all currently running services.", "parameter": {}, "task": "List all services that are currently active and running on the system."}, {"name": "Register and deregister services", "server": "consul-mcp", "description": "Registers new services and deregisters existing ones.", "parameter": {}, "task": "Register a new service named \"PaymentGateway\" with the service registry."}, {"name": "Get service information", "server": "consul-mcp", "description": "Retrieves detailed information about a specific service.", "parameter": {}, "task": "Retrieve detailed information about the currently active customer support service."}, {"name": "List catalog services", "server": "consul-mcp", "description": "Lists all services in the Consul catalog.", "parameter": {}, "task": "List all registered services in the Consul catalog."}, {"name": "Get catalog service information", "server": "consul-mcp", "description": "Retrieves detailed information about a specific service in the Consul catalog.", "parameter": {}, "task": "Retrieve the detailed information for the 'payment-processing' service from the Consul catalog."}, {"name": "Register health checks", "server": "consul-mcp", "description": "Registers new health checks for services.", "parameter": {}, "task": "Register health checks for all active services in the production environment."}, {"name": "Deregister health checks", "server": "consul-mcp", "description": "Deregisters existing health checks for services.", "parameter": {}, "task": "Deregister all active health checks for the current service instances."}, {"name": "Get health checks for services", "server": "consul-mcp", "description": "Retrieves health check information for specific services.", "parameter": {}, "task": "Retrieve the health status details for all currently running services."}, {"name": "Get values from KV store", "server": "consul-mcp", "description": "Retrieves values from the Consul key-value store.", "parameter": {}, "task": "Retrieve the latest configuration values from the Consul key-value store for the production environment."}, {"name": "List keys in KV store", "server": "consul-mcp", "description": "Lists all keys in the Consul key-value store.", "parameter": {}, "task": "List all keys currently stored in the Consul key-value store."}, {"name": "Put values in KV store", "server": "consul-mcp", "description": "Adds or updates values in the Consul key-value store.", "parameter": {}, "task": "Store the configuration settings for the production environment in the key-value store."}, {"name": "Delete keys from KV store", "server": "consul-mcp", "description": "Deletes keys from the Consul key-value store.", "parameter": {}, "task": "Delete all keys from the Consul key-value store."}, {"name": "List sessions", "server": "consul-mcp", "description": "Lists all active sessions.", "parameter": {}, "task": "List all currently active user sessions in the system."}, {"name": "Destroy sessions", "server": "consul-mcp", "description": "Destroys specified sessions.", "parameter": {}, "task": "Terminate all active sessions for the current user account."}, {"name": "Fire events", "server": "consul-mcp", "description": "Fires user-defined events.", "parameter": {}, "task": "Trigger a custom event for user activity tracking."}, {"name": "List events", "server": "consul-mcp", "description": "Lists all fired events.", "parameter": {}, "task": "List all the events that have been fired in the system."}, {"name": "Create prepared queries", "server": "consul-mcp", "description": "Creates prepared queries for efficient service discovery.", "parameter": {}, "task": "Create prepared queries to optimize the efficiency of service discovery operations."}, {"name": "Execute prepared queries", "server": "consul-mcp", "description": "Executes previously created prepared queries.", "parameter": {}, "task": "Execute the previously created prepared query to retrieve the latest customer data."}, {"name": "Get current leader", "server": "consul-mcp", "description": "Retrieves the current leader node in the Consul cluster.", "parameter": {}, "task": "Retrieve the current leader node from the Consul cluster."}, {"name": "Get current peers", "server": "consul-mcp", "description": "Retrieves the current peer nodes in the Consul cluster.", "parameter": {}, "task": "Retrieve the list of active peer nodes currently connected to the Consul cluster."}, {"name": "Get agent members", "server": "consul-mcp", "description": "Retrieves information about the members of the local Consul agent.", "parameter": {}, "task": "Retrieve the list of active members from the local Consul agent."}, {"name": "Get agent self information", "server": "consul-mcp", "description": "Retrieves information about the local Consul agent itself.", "parameter": {}, "task": "Retrieve the current status and configuration details of the local Consul agent."}, {"name": "Get system health service information", "server": "consul-mcp", "description": "Retrieves system health service information.", "parameter": {}, "task": "Retrieve the current health status of all system services."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "cognee-mcp", "description": "1.添加文本到cognee系统 2.从添加的数据生成知识图谱 3.用搜索词查询知识图谱", "tools": [{"name": "add", "server": "cognee-mcp", "description": "Adds text to the cognee system.", "parameter": {"text": "(string) The text to be added."}, "task": "Add the following paragraph to the system: \"The rapid advancement of artificial intelligence has revolutionized various industries, from healthcare to finance, by enabling faster and more accurate decision-making processes.\""}, {"name": "cognify", "server": "cognee-mcp", "description": "Generates a knowledge graph from the added data.", "parameter": {}, "task": "Generate a knowledge graph from the provided dataset to visualize relationships and connections."}, {"name": "search", "server": "cognee-mcp", "description": "Queries the knowledge graph with a given search term.", "parameter": {"query": "(string) The search term to query the knowledge graph."}, "task": "Search for the latest research papers on quantum computing using the knowledge graph."}], "domains": [{"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "coin_api_mcp", "description": "1.Fetch paginated list of all active cryptocurrencies with market data 2.Retrieve detailed information about a specific cryptocurrency 3.Fetch latest market quotes for cryptocurrencies", "tools": [{"name": "listing-coins", "server": "coin_api_mcp", "description": "Fetches a paginated list of all active cryptocurrencies with the latest market data.", "parameter": {"start": "(integer, optional) Offset the start (1-based index) of the paginated list of items to return.", "limit": "(integer, optional) Number of results to return (default: 10, max: 5000).", "price_min": "(number, optional) Minimum USD price to filter results.", "price_max": "(number, optional) Maximum USD price to filter results.", "market_cap_min": "(number, optional) Minimum market cap to filter results.", "market_cap_max": "(number, optional) Maximum market cap to filter results.", "convert": "(string, optional) Calculate market quotes in multiple currencies.", "sort": "(string, optional) Field to sort the list of cryptocurrencies by.", "sort_dir": "(string, optional) Direction to order cryptocurrencies (asc or desc)."}, "task": "Fetch the top 50 cryptocurrencies sorted by market cap in descending order, with a minimum market cap of $1 billion and a maximum price of $1000. Include quotes in both USD and EUR."}, {"name": "get-coin-info", "server": "coin_api_mcp", "description": "Retrieves detailed information about a specific cryptocurrency.", "parameter": {"id": "(string, optional) One or more comma-separated CoinMarketCap cryptocurrency IDs.", "slug": "(string, optional) A comma-separated list of cryptocurrency slugs.", "symbol": "(string, optional) One or more comma-separated cryptocurrency symbols."}, "task": "Retrieve the current market details for Bitcoin and Ethereum using their respective symbols."}, {"name": "get-coin-quotes", "server": "coin_api_mcp", "description": "Fetches the latest market quotes for one or more cryptocurrencies.", "parameter": {"id": "(string, optional) One or more comma-separated cryptocurrency CoinMarketCap IDs.", "slug": "(string, optional) A comma-separated list of cryptocurrency slugs.", "symbol": "(string, optional) One or more comma-separated cryptocurrency symbols."}, "task": "Fetch the latest market quotes for Bitcoin and Ethereum using their symbols (BTC and ETH)."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "CoinMarketCap", "description": "Cryptocurrency data services including: cryptocurrency mapping, metadata retrieval, market quotes, categories, exchange information, DEX data, global metrics, price conversion, API key management, Fear & Greed Index, airdrops, historical data, trending analysis, OHLCV data, price performance statistics, market pairs, news and content, community trends, and blockchain statistics", "tools": [{"name": "cryptoCurrencyMap", "server": "CoinMarketCap", "description": "Get mapping of all cryptocurrencies", "parameter": {}, "task": "Retrieve the complete list of all available cryptocurrencies along with their respective symbols and identifiers."}, {"name": "getCryptoMetadata", "server": "CoinMarketCap", "description": "Get metadata for one or more cryptocurrencies", "parameter": {}, "task": "Retrieve the metadata for the top 5 cryptocurrencies by market capitalization."}, {"name": "allCryptocurrencyListings", "server": "CoinMarketCap", "description": "Get latest market quote for 1-5000 cryptocurrencies", "parameter": {}, "task": "Retrieve the latest market quotes for the top 100 cryptocurrencies by market capitalization."}, {"name": "cryptoQuotesLatest", "server": "CoinMarketCap", "description": "Get latest market quote for 1 or more cryptocurrencies", "parameter": {}, "task": "Get the latest market quotes for Bitcoin, Ethereum, and Litecoin."}, {"name": "cryptoCategories", "server": "CoinMarketCap", "description": "Get list of all cryptocurrency categories", "parameter": {}, "task": "List all available cryptocurrency categories with their current market data."}, {"name": "cryptoCategory", "server": "CoinMarketCap", "description": "Get metadata about a cryptocurrency category", "parameter": {}, "task": "Retrieve the latest metadata for all available cryptocurrency categories."}, {"name": "exchangeMap", "server": "CoinMarketCap", "description": "Get mapping of all exchanges", "parameter": {}, "task": "Retrieve the complete list of available exchanges along with their details."}, {"name": "exchangeInfo", "server": "CoinMarketCap", "description": "Get metadata for one or more exchanges", "parameter": {}, "task": "Retrieve the metadata for all available exchanges."}, {"name": "exchangeAssets", "server": "CoinMarketCap", "description": "Get list of all assets available on an exchange", "parameter": {}, "task": "List all available assets on the specified cryptocurrency exchange."}, {"name": "dexInfo", "server": "CoinMarketCap", "description": "Get metadata for one or more decentralised exchanges", "parameter": {}, "task": "Retrieve the metadata for the top 5 decentralised exchanges by trading volume."}, {"name": "dexListingsLatest", "server": "CoinMarketCap", "description": "Get latest market data for all DEXes", "parameter": {}, "task": "Retrieve the most recent market data for all decentralized exchanges (DEXes)."}, {"name": "dexNetworksList", "server": "CoinMarketCap", "description": "Get list of all networks with unique IDs", "parameter": {}, "task": "List all available networks along with their unique identifiers."}, {"name": "dexSpotPairsLatest", "server": "CoinMarketCap", "description": "Get latest market data for all active DEX spot pairs", "parameter": {}, "task": "Retrieve the latest market data for all active decentralized exchange spot trading pairs."}, {"name": "dexPairsQuotesLatest", "server": "CoinMarketCap", "description": "Get latest market quotes for spot pairs", "parameter": {}, "task": "Fetch the latest market quotes for all available spot trading pairs."}, {"name": "dexPairsOhlcvLatest", "server": "CoinMarketCap", "description": "Get latest OHLCV data for spot pairs", "parameter": {}, "task": "Retrieve the latest OHLCV (Open, High, Low, Close, Volume) data for all available spot trading pairs."}, {"name": "dexPairsOhlcvHistorical", "server": "CoinMarketCap", "description": "Get historical OHLCV data for spot pairs", "parameter": {}, "task": "Retrieve the historical OHLCV (Open, High, Low, Close, Volume) data for the last 30 days for all available spot trading pairs."}, {"name": "dexPairsTradeLatest", "server": "CoinMarketCap", "description": "Get latest trades for spot pairs", "parameter": {}, "task": "Retrieve the most recent trades for all available spot trading pairs."}, {"name": "globalMetricsLatest", "server": "CoinMarketCap", "description": "Get latest global cryptocurrency metrics", "parameter": {}, "task": "Retrieve the most recent global cryptocurrency market data, including total market capitalization, trading volume, and active cryptocurrencies."}, {"name": "cmc100IndexLatest", "server": "CoinMarketCap", "description": "Get latest CoinMarketCap 100 Index value and constituents", "parameter": {}, "task": "Get the latest value and list of constituents for the CoinMarketCap 100 Index."}, {"name": "cmc100IndexHistorical", "server": "CoinMarketCap", "description": "Get historical CoinMarketCap 100 Index values", "parameter": {}, "task": "Retrieve the historical values of the top 100 cryptocurrencies from CoinMarketCap for the past 30 days."}, {"name": "priceConversion", "server": "CoinMarketCap", "description": "Convert an amount of one cryptocurrency or fiat currency into another", "parameter": {}, "task": "Convert 500 US dollars to Bitcoin at the current exchange rate."}, {"name": "getPostmanCollection", "server": "CoinMarketCap", "description": "Get Postman collection for the API", "parameter": {}, "task": "Retrieve the Postman collection containing all available API endpoints and their configurations."}, {"name": "fiatMap", "server": "CoinMarketCap", "description": "Get mapping of all fiat currencies", "parameter": {}, "task": "Retrieve the complete list of all available fiat currencies with their corresponding mappings."}, {"name": "keyInfo", "server": "CoinMarketCap", "description": "Get API key usage and status", "parameter": {}, "task": "Check the current usage and status of the API key."}, {"name": "fearAndGreedLatest", "server": "CoinMarketCap", "description": "Get latest Fear & Greed Index", "parameter": {}, "task": "Retrieve the most recent Fear & Greed Index value."}, {"name": "fearAndGreedHistorical", "server": "CoinMarketCap", "description": "Get historical Fear & Greed Index values", "parameter": {}, "task": "Retrieve the historical Fear & Greed Index values for the past 30 days."}, {"name": "cryptoAirdrops", "server": "CoinMarketCap", "description": "Get list of all cryptocurrency airdrops", "parameter": {}, "task": "List all available cryptocurrency airdrops currently active in the market."}, {"name": "cryptoAirdrop", "server": "CoinMarketCap", "description": "Get metadata about a specific airdrop", "parameter": {}, "task": "Retrieve the latest metadata for an active cryptocurrency airdrop campaign."}, {"name": "historicalCryptocurrencyListings", "server": "CoinMarketCap", "description": "Get historical market quotes for any cryptocurrency", "parameter": {}, "task": "Retrieve the historical market data for the top 10 cryptocurrencies by market capitalization over the past 30 days."}, {"name": "cryptoQuotesHistorical", "server": "CoinMarketCap", "description": "Get historical market quotes for any cryptocurrency", "parameter": {}, "task": "Retrieve the historical market price data for Bitcoin over the past 30 days."}, {"name": "cryptoQuotesHistoricalV3", "server": "CoinMarketCap", "description": "Get historical market quotes with advanced time-based intervals", "parameter": {}, "task": "Retrieve the historical market quotes for Bitcoin over the past 30 days with daily intervals."}, {"name": "exchangeQuotesHistorical", "server": "CoinMarketCap", "description": "Get historical quotes for any exchange", "parameter": {}, "task": "Retrieve the historical exchange rate data for the past 30 days between USD and EUR."}, {"name": "globalMetricsHistorical", "server": "CoinMarketCap", "description": "Get historical global cryptocurrency metrics", "parameter": {}, "task": "Retrieve the historical global cryptocurrency metrics for the past 30 days."}, {"name": "newCryptocurrencyListings", "server": "CoinMarketCap", "description": "Get list of most recently added cryptocurrencies", "parameter": {}, "task": "Retrieve the list of the 10 most recently added cryptocurrencies."}, {"name": "cryptoTrendingGainersLosers", "server": "CoinMarketCap", "description": "Get biggest gainers and losers in a given time period", "parameter": {}, "task": "Identify the top 5 cryptocurrency gainers and losers over the past 24 hours."}, {"name": "cryptoTrendingLatest", "server": "CoinMarketCap", "description": "Get top cryptocurrencies by search volume", "parameter": {}, "task": "Retrieve the top 10 cryptocurrencies currently trending based on search volume."}, {"name": "cryptoTrendingMostVisited", "server": "CoinMarketCap", "description": "Get most visited cryptocurrencies", "parameter": {}, "task": "List the top 10 most visited cryptocurrencies in the last 24 hours."}, {"name": "cryptoOhlcvLatest", "server": "CoinMarketCap", "description": "Get latest OHLCV market data for any cryptocurrency", "parameter": {}, "task": "Retrieve the latest open, high, low, close, and volume data for the top 5 cryptocurrencies by market capitalization."}, {"name": "cryptoOhlcvHistorical", "server": "CoinMarketCap", "description": "Get historical OHLCV market data for any cryptocurrency", "parameter": {}, "task": "Retrieve the historical OHLCV market data for Bitcoin over the past 30 days."}, {"name": "cryptoPricePerformanceStatsLatest", "server": "CoinMarketCap", "description": "Get price performance statistics for any cryptocurrency", "parameter": {}, "task": "Get the latest price performance statistics for the top 5 cryptocurrencies by market capitalization."}, {"name": "cryptoMarketPairsLatest", "server": "CoinMarketCap", "description": "Get latest market pairs for any cryptocurrency", "parameter": {}, "task": "Retrieve the latest trading pairs for Bitcoin across all available exchanges."}, {"name": "exchangeListingsLatest", "server": "CoinMarketCap", "description": "Get latest market data for all exchanges", "parameter": {}, "task": "Retrieve the most recent market data for all available cryptocurrency exchanges."}, {"name": "exchangeMarketPairsLatest", "server": "CoinMarketCap", "description": "Get latest market pairs for any exchange", "parameter": {}, "task": "Retrieve the latest market pairs data from the top 10 cryptocurrency exchanges."}, {"name": "exchangeQuotesLatest", "server": "CoinMarketCap", "description": "Get latest market quotes for one or more exchanges", "parameter": {}, "task": "Get the latest market quotes for all available exchanges."}, {"name": "contentLatest", "server": "CoinMarketCap", "description": "Get latest cryptocurrency news and content", "parameter": {}, "task": "Fetch the latest news and updates about cryptocurrencies."}, {"name": "contentPostsTop", "server": "CoinMarketCap", "description": "Get top cryptocurrency posts", "parameter": {}, "task": "Retrieve the 10 most popular cryptocurrency posts currently trending."}, {"name": "contentPostsLatest", "server": "CoinMarketCap", "description": "Get latest cryptocurrency posts", "parameter": {}, "task": "Retrieve the 10 most recent posts about cryptocurrency."}, {"name": "contentPostsComments", "server": "CoinMarketCap", "description": "Get comments for a specific post", "parameter": {}, "task": "Retrieve all comments associated with the latest published post."}, {"name": "communityTrendingTopic", "server": "CoinMarketCap", "description": "Get trending topics in the cryptocurrency community", "parameter": {}, "task": "Identify the top 5 trending topics currently discussed in the cryptocurrency community."}, {"name": "communityTrendingToken", "server": "CoinMarketCap", "description": "Get trending tokens in the cryptocurrency community", "parameter": {}, "task": "Identify the top 5 trending tokens in the cryptocurrency community over the past 24 hours."}, {"name": "blockchainStatisticsLatest", "server": "CoinMarketCap", "description": "Get latest statistics for one or more blockchains", "parameter": {}, "task": "Retrieve the most recent statistics for the top 5 blockchains by market capitalization."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Computer-Use - Remote MacOS Use", "description": "Remote macOS machine interaction, including: desktop screenshot capture, keyboard input simulation, mouse movement/click/double-click/scroll/drag-and-drop operations, and application launching", "tools": [{"name": "remote_macos_get_screen", "server": "Computer-Use - Remote MacOS Use", "description": "Connect to a remote macOS machine and get a screenshot of the remote desktop.", "parameter": {}, "task": "Capture a screenshot of the remote macOS desktop currently in use."}, {"name": "remote_macos_send_keys", "server": "Computer-Use - Remote MacOS Use", "description": "Send keyboard input to a remote macOS machine.", "parameter": {}, "task": "Send the keyboard input \"Hello, World!\" to the remote macOS machine."}, {"name": "remote_macos_mouse_move", "server": "Computer-Use - Remote MacOS Use", "description": "Move the mouse cursor to specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": "Move the mouse cursor to coordinates (500, 300) on the remote macOS machine."}, {"name": "remote_macos_mouse_click", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse click at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": "Click at the coordinates (500, 300) on the remote macOS machine's screen."}, {"name": "remote_macos_mouse_double_click", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse double-click at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": "Double-click at the current cursor position on the connected macOS machine."}, {"name": "remote_macos_mouse_scroll", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse scroll at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": "Scroll the mouse vertically by 200 units on the remote macOS machine."}, {"name": "remote_macos_open_application", "server": "Computer-Use - Remote MacOS Use", "description": "Opens/activates an application and returns its PID for further interactions.", "parameter": {}, "task": "Open the Safari web browser on the remote macOS system and retrieve its process ID."}, {"name": "remote_macos_mouse_drag_n_drop", "server": "Computer-Use - Remote MacOS Use", "description": "Perform a mouse drag operation from start point and drop to end point on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}, "task": "Drag a file from the top-left corner of the screen to the bottom-right corner on the remote macOS machine."}], "domains": [{"name": "Remote Desktop Control", "description": "远程桌面控制，包括屏幕捕获、输入模拟（键盘/鼠标）、应用程序控制及自动化操作"}]}
{"name": "Contentful-mcp", "description": "Contentful CMS operations including: entry search, creation, retrieval, update, deletion, publishing, unpublishing, bulk operations; asset listing, upload, retrieval, update, deletion, publishing, unpublishing; space listing and details; environment listing, creation, deletion; content type listing, creation, update, deletion, publishing", "tools": [{"name": "search_entries", "server": "Contentful-mcp", "description": "Search for entries using query parameters", "parameter": {}, "task": "Search for entries matching the keyword \"customer feedback\" in the database."}, {"name": "create_entry", "server": "Contentful-mcp", "description": "Create new entries", "parameter": {}, "task": "Create a new entry in the system with the following details: title \"Project Kickoff\", description \"Initial meeting to discuss project goals and timelines\", and due date \"2024-07-15\"."}, {"name": "get_entry", "server": "Contentful-mcp", "description": "Retrieve existing entries", "parameter": {}, "task": "Retrieve the latest 5 entries from the database."}, {"name": "update_entry", "server": "Contentful-mcp", "description": "Update entry fields", "parameter": {}, "task": "Update the entry fields for the latest customer record in the database."}, {"name": "delete_entry", "server": "Contentful-mcp", "description": "Remove entries", "parameter": {}, "task": "Remove the specified entry from the system."}, {"name": "publish_entry", "server": "Contentful-mcp", "description": "Publish entries", "parameter": {}, "task": "Publish the latest blog entry to the website."}, {"name": "unpublish_entry", "server": "Contentful-mcp", "description": "Unpublish entries", "parameter": {}, "task": "Unpublish all currently published entries in the system."}, {"name": "bulk_publish", "server": "Contentful-mcp", "description": "Publish multiple entries and assets in a single operation. Accepts an array of entities (entries and assets) and processes their publication as a batch.", "parameter": {}, "task": "Publish all draft entries and assets in the current workspace as a single batch operation."}, {"name": "bulk_unpublish", "server": "Contentful-mcp", "description": "Unpublish multiple entries and assets in a single operation. Similar to bulk_publish but removes content from the delivery API.", "parameter": {}, "task": "Unpublish all draft entries and assets from the delivery API in a single operation."}, {"name": "bulk_validate", "server": "Contentful-mcp", "description": "Validate multiple entries for content consistency, references, and required fields. Returns validation results without modifying content.", "parameter": {}, "task": "Validate the content consistency, references, and required fields for a batch of 50 customer records without modifying the data."}, {"name": "list_assets", "server": "Contentful-mcp", "description": "List assets with pagination (3 items per page)", "parameter": {}, "task": "List the first 3 assets from the available inventory."}, {"name": "upload_asset", "server": "Contentful-mcp", "description": "Upload new assets with metadata", "parameter": {}, "task": "Upload a new asset file with the following metadata: title \"Summer Campaign 2024\", description \"Marketing materials for the summer promotion\", and tags [\"promotion\", \"summer\", \"2024\"]."}, {"name": "get_asset", "server": "Contentful-mcp", "description": "Retrieve asset details and information", "parameter": {}, "task": "Retrieve the details and information for the specified asset."}, {"name": "update_asset", "server": "Contentful-mcp", "description": "Update asset metadata and files", "parameter": {}, "task": "Update the metadata and associated files for the latest version of the digital asset in the repository."}, {"name": "delete_asset", "server": "Contentful-mcp", "description": "Remove assets from space", "parameter": {}, "task": "Remove all assets from the designated space."}, {"name": "publish_asset", "server": "Contentful-mcp", "description": "Publish assets to delivery API", "parameter": {}, "task": "Publish the latest marketing campaign assets to the delivery platform."}, {"name": "unpublish_asset", "server": "Contentful-mcp", "description": "Unpublish assets from delivery API", "parameter": {}, "task": "Remove all published assets from the delivery API."}, {"name": "list_spaces", "server": "Contentful-mcp", "description": "List available spaces", "parameter": {}, "task": "List all available spaces in the current environment."}, {"name": "get_space", "server": "Contentful-mcp", "description": "Get space details", "parameter": {}, "task": "Retrieve the details of the available storage space."}, {"name": "list_environments", "server": "Contentful-mcp", "description": "List environments in a space", "parameter": {}, "task": "List all environments available in the current space."}, {"name": "create_environment", "server": "Contentful-mcp", "description": "Create new environment", "parameter": {}, "task": "Create a new development environment with default configurations."}, {"name": "delete_environment", "server": "Contentful-mcp", "description": "Remove environment", "parameter": {}, "task": "Remove the current development environment and all associated resources."}, {"name": "list_content_types", "server": "Contentful-mcp", "description": "List available content types", "parameter": {}, "task": "List all available content types in the system."}, {"name": "get_content_type", "server": "Contentful-mcp", "description": "Get content type details", "parameter": {}, "task": "Retrieve the content type details of the specified resource."}, {"name": "create_content_type", "server": "Contentful-mcp", "description": "Create new content type", "parameter": {}, "task": "Create a new content type for organizing blog posts with fields for title, author, and publication date."}, {"name": "update_content_type", "server": "Contentful-mcp", "description": "Update content type", "parameter": {}, "task": "Update the content type settings for the current document or resource."}, {"name": "delete_content_type", "server": "Contentful-mcp", "description": "Remove content type", "parameter": {}, "task": "Remove the specified content type from the system. Ensure all associated entries and configurations are also deleted."}, {"name": "publish_content_type", "server": "Contentful-mcp", "description": "Publish a content type", "parameter": {}, "task": "Publish a new content type with all required fields and configurations."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "crypto-feargreed-mcp", "description": "1. Retrieve the latest Fear & Greed Index value and classification 2. Fetch historical index values for specified days 3. Analyze trends with statistics like average value and trend direction", "tools": [{"name": "get_current_fng_tool", "server": "crypto-feargreed-mcp", "description": "Retrieves the latest Fear & Greed Index value and classification.", "parameter": {}, "task": "Retrieve the current Fear & Greed Index value and its classification (e.g., Extreme Fear, Greed, etc.)."}, {"name": "get_historical_fng_tool", "server": "crypto-feargreed-mcp", "description": "Fetches historical index values for a specified number of days.", "parameter": {"days": "(int) Number of days to fetch historical data for."}, "task": "Fetch the historical index values for the past 30 days."}, {"name": "analyze_fng_trend", "server": "crypto-feargreed-mcp", "description": "Analyzes trends over time with statistics like average value and trend direction.", "parameter": {"days": "(int) Number of days to analyze the trend for."}, "task": "Analyze the trend direction and average value over the past 30 days."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "cryptopanic-mcp-server", "description": "Fetch cryptocurrency news, analysis, or videos from CryptoPanic", "tools": [{"name": "get_crypto_news", "server": "cryptopanic-mcp-server", "description": "Fetches cryptocurrency news, analysis, or videos from CryptoPanic.", "parameter": {"kind": "(str) Content type (news, analysis, videos)", "num_pages": "(Optional, int) Number of pages to fetch (default: 1, max: 10)"}, "task": "Fetch the latest cryptocurrency news articles from CryptoPanic, retrieving content from the first 3 pages."}], "domains": [{"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Databricks", "description": "1.在Databricks SQL仓库上执行SQL查询 2.列出所有Databricks作业 3.通过ID获取特定Databricks作业的状态 4.获取特定Databricks作业的详细信息", "tools": [{"name": "run_sql_query", "server": "Databricks", "description": "Execute SQL queries on your Databricks SQL warehouse", "parameter": {"sql": "(str) The SQL query to execute"}, "task": "Retrieve the top 10 highest revenue transactions from the sales table in the Databricks SQL warehouse."}, {"name": "list_jobs", "server": "Databricks", "description": "List all Databricks jobs in your workspace", "parameter": {}, "task": "List all the jobs currently available in the Databricks workspace."}, {"name": "get_job_status", "server": "Databricks", "description": "Get the status of a specific Databricks job by ID", "parameter": {"job_id": "(int) The ID of the Databricks job"}, "task": "Retrieve the current status of the Databricks job with ID 12345."}, {"name": "get_job_details", "server": "Databricks", "description": "Get detailed information about a specific Databricks job", "parameter": {"job_id": "(int) The ID of the Databricks job"}, "task": "Retrieve the detailed information for the Databricks job with ID 12345."}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}]}
{"name": "Datadog", "description": "1. Fetch monitors with optional filtering 2. Get details of a specific monitor by ID 3. List all dashboards 4. Get a specific dashboard by ID 5. List available metrics 6. Get metadata for a specific metric 7. Fetch events within a time range 8. List incidents with optional filtering 9. Search logs with advanced query filtering 10. Perform analytics and aggregations on log data", "tools": [{"name": "get-monitors", "server": "Datadog", "description": "Fetch monitors with optional filtering", "parameter": {"groupStates": "(Optional, array) States to filter monitors by", "limit": "(Optional, number) Maximum number of monitors to return"}, "task": "Fetch up to 50 monitors with a filtered state of \"active\" from the monitoring system."}, {"name": "get-monitor", "server": "Datadog", "description": "Get details of a specific monitor by ID", "parameter": {"monitorId": "(string) ID of the monitor to fetch"}, "task": "Retrieve the details of the monitor with ID \"MNT-2024-001\"."}, {"name": "get-dashboards", "server": "Datadog", "description": "List all dashboards", "parameter": {}, "task": "List all available dashboards in the system."}, {"name": "get-dashboard", "server": "Datadog", "description": "Get a specific dashboard by ID", "parameter": {"dashboardId": "(string) ID of the dashboard to fetch"}, "task": "Retrieve the dashboard with the ID \"DASH-12345\" for review."}, {"name": "get-metrics", "server": "Datadog", "description": "List available metrics", "parameter": {}, "task": "List all available metrics that can be monitored."}, {"name": "get-metric-metadata", "server": "Datadog", "description": "Get metadata for a specific metric", "parameter": {"metricName": "(string) Name of the metric to fetch metadata for"}, "task": "Retrieve the metadata for the 'response_time' metric."}, {"name": "get-events", "server": "Datadog", "description": "Fetch events within a time range", "parameter": {"start": "(number) Start time in milliseconds since epoch", "end": "(number) End time in milliseconds since epoch", "priority": "(Optional, string) Priority of events to fetch", "tags": "(Optional, array) Tags to filter events by"}, "task": "Fetch all events with the \"urgent\" priority between January 1, 2024, and January 31, 2024, in milliseconds since epoch. Include only events tagged with \"meeting\" or \"deadline\"."}, {"name": "get-incidents", "server": "Datadog", "description": "List incidents with optional filtering", "parameter": {"includeArchived": "(Optional, boolean) Include archived incidents", "query": "(Optional, string) Query to filter incidents by", "pageSize": "(Optional, number) Number of incidents to return per page"}, "task": "Retrieve the first 20 active incidents matching the search term \"server outage\" from the incident management system."}, {"name": "search-logs", "server": "Datadog", "description": "Search logs with advanced query filtering", "parameter": {"filter": "(object) Filter object containing query, from, and to", "sort": "(Optional, string) Sorting order (e.g., -timestamp)", "limit": "(Optional, number) Maximum number of logs to return"}, "task": "Search the logs for entries containing the keyword \"authentication error\" between 2024-01-01 and 2024-01-31, sorted by timestamp in descending order, and return a maximum of 50 logs."}, {"name": "aggregate-logs", "server": "Datadog", "description": "Perform analytics and aggregations on log data", "parameter": {"filter": "(object) Filter object containing query, from, and to", "compute": "(array) Array of compute objects for aggregations", "groupBy": "(array) Array of groupBy objects for grouping results"}, "task": "Aggregate and analyze log data from the past 7 days, grouping the results by error type and computing the total count for each type. Apply a filter to include only logs with severity level \"error\" or higher."}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Data Exploration", "description": "1. Load CSV files into a DataFrame 2. Execute Python scripts", "tools": [{"name": "load-csv", "server": "Data Exploration", "description": "Loads a CSV file into a DataFrame.", "parameter": {"csv_path": "(string, required) Path to the CSV file", "df_name": "(string, optional) Name for the DataFrame. Defaults to df_1, df_2, etc., if not provided"}, "task": "Load the sales data from the CSV file located at \"/data/sales_2024.csv\" into a DataFrame named \"sales_df\"."}, {"name": "run-script", "server": "Data Exploration", "description": "Executes a Python script.", "parameter": {"script": "(string, required) The script to execute"}, "task": "Execute the Python script that calculates the average of a list of numbers."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "DaVinci Resolve", "description": "DaVinci Resolve操作，包括：获取版本和当前页面信息、切换页面、项目管理（创建、打开、保存、列出）、时间线管理（创建、切换、添加标记）、媒体池操作（列出剪辑、导入媒体文件、创建媒体箱、添加剪辑到时间线）", "tools": [{"name": "get_da_vinci_resolve_version", "server": "DaVinci Resolve", "description": "Gets the version of DaVinci Resolve currently running.", "parameter": {}, "task": "Check the current version of the installed DaVinci Resolve software."}, {"name": "get_current_page", "server": "DaVinci Resolve", "description": "Gets the current page (e.g., Edit, Color, Fusion) in DaVinci Resolve.", "parameter": {}, "task": "Check the current active page in DaVinci Resolve (e.g., Edit, Color, Fusion)."}, {"name": "switch_page", "server": "DaVinci Resolve", "description": "Switches the current page in DaVinci Resolve.", "parameter": {"page": "(string) The page to switch to (e.g., 'Edit', 'Color', 'Fusion')."}, "task": "Switch to the 'Color' page in the current DaVinci Resolve project."}, {"name": "list_projects", "server": "DaVinci Resolve", "description": "Lists all available projects in DaVinci Resolve.", "parameter": {}, "task": "List all available projects in the current DaVinci Resolve workspace."}, {"name": "get_current_project_name", "server": "DaVinci Resolve", "description": "Gets the name of the current project in DaVinci Resolve.", "parameter": {}, "task": "Retrieve the name of the currently open project in DaVinci Resolve."}, {"name": "open_project", "server": "DaVinci Resolve", "description": "Opens a project by name in DaVinci Resolve.", "parameter": {"project_name": "(string) The name of the project to open."}, "task": "Open the project named \"Summer_Ad_Campaign\" in DaVinci Resolve."}, {"name": "create_new_project", "server": "DaVinci Resolve", "description": "Creates a new project in DaVinci Resolve.", "parameter": {"project_name": "(string) The name of the new project."}, "task": "Create a new video editing project named \"Summer_Vacation_2024\" in DaVinci Resolve."}, {"name": "save_current_project", "server": "DaVinci Resolve", "description": "Saves the current project in DaVinci Resolve.", "parameter": {}, "task": "Save the currently open project in DaVinci Resolve with its current settings and timeline."}, {"name": "list_timelines", "server": "DaVinci Resolve", "description": "Lists all timelines in the current project.", "parameter": {}, "task": "List all available timelines in the current project."}, {"name": "get_current_timeline_info", "server": "DaVinci Resolve", "description": "Gets information about the current timeline.", "parameter": {}, "task": "Retrieve the latest details about the current timeline, including any relevant updates or events."}, {"name": "create_new_timeline", "server": "DaVinci Resolve", "description": "Creates a new timeline in the current project.", "parameter": {"timeline_name": "(string) The name of the new timeline."}, "task": "Create a new timeline named \"Product Launch Q3 2024\" in the current project."}, {"name": "switch_to_timeline", "server": "DaVinci Resolve", "description": "Switches to a timeline by name.", "parameter": {"timeline_name": "(string) The name of the timeline to switch to."}, "task": "Switch to the timeline named \"Project Milestones\" for the current session."}, {"name": "add_marker_to_timeline", "server": "DaVinci Resolve", "description": "Adds a marker to the current timeline.", "parameter": {}, "task": "Add a new marker to the ongoing timeline at the current position."}, {"name": "list_media_pool_clips", "server": "DaVinci Resolve", "description": "Lists all clips in the media pool.", "parameter": {}, "task": "List all video clips currently available in the media pool."}, {"name": "import_media_file", "server": "DaVinci Resolve", "description": "Imports a media file into the media pool.", "parameter": {"file_path": "(string) The path to the media file to import."}, "task": "Import the media file located at \"/videos/summer_vacation.mp4\" into the media pool."}, {"name": "create_media_bin", "server": "DaVinci Resolve", "description": "Creates a new media bin in the media pool.", "parameter": {"bin_name": "(string) The name of the new media bin."}, "task": "Create a new media bin named \"Project_Assets\" in the media pool."}, {"name": "add_clip_to_timeline", "server": "DaVinci Resolve", "description": "Adds a clip to the current timeline.", "parameter": {"clip_name": "(string) The name of the clip to add."}, "task": "Add a clip named \"Summer_Vacation_2024\" to the current editing timeline."}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Dataset Viewer", "description": "1.验证数据集是否存在并可访问 2.获取数据集详细信息 3.获取数据集分页内容 4.获取数据集分割的首行 5.获取数据集分割的统计信息 6.在数据集中搜索文本 7.使用类似SQL的条件过滤行 8.以Parquet格式下载整个数据集", "tools": [{"name": "validate", "server": "Dataset Viewer", "description": "Check if a dataset exists and is accessible", "parameter": {"dataset": "string, Dataset identifier (e.g. 'stanfordnlp/imdb')", "auth_token": "(Optional, string) For private datasets"}, "task": "Check if the dataset 'stanfordnlp/imdb' is accessible without an authentication token."}, {"name": "get_info", "server": "Dataset Viewer", "description": "Get detailed information about a dataset", "parameter": {"dataset": "string, Dataset identifier", "auth_token": "(Optional, string) For private datasets"}, "task": "Retrieve the metadata and schema details for the dataset identified as \"sales_2024\" using the provided authentication token."}, {"name": "get_rows", "server": "Dataset Viewer", "description": "Get paginated contents of a dataset", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "page": "(Optional, integer) Page number (0-based)", "auth_token": "(Optional, string) For private datasets"}, "task": "Retrieve the first 50 entries from the \"customer_reviews\" dataset using the \"default\" configuration and \"train\" split."}, {"name": "get_first_rows", "server": "Dataset Viewer", "description": "Get first rows from a dataset split", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "auth_token": "(Optional, string) For private datasets"}, "task": "Retrieve the first 50 rows from the \"training\" split of the \"imdb_reviews\" dataset using the \"default\" configuration."}, {"name": "get_statistics", "server": "Dataset Viewer", "description": "Get statistics about a dataset split", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "auth_token": "(Optional, string) For private datasets"}, "task": "Retrieve the statistics for the \"validation\" split of the \"imagenet\" dataset using the \"default\" configuration."}, {"name": "search_dataset", "server": "Dataset Viewer", "description": "Search for text within a dataset", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "query": "string, Text to search for", "auth_token": "(Optional, string) For private datasets"}, "task": "Search for the phrase \"customer feedback\" in the \"product_reviews\" dataset using the \"default\" configuration and \"train\" split."}, {"name": "filter", "server": "Dataset Viewer", "description": "Filter rows using SQL-like conditions", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "where": "string, SQL WHERE clause (e.g. 'score > 0.5')", "orderby": "(Optional, string) SQL ORDER BY clause", "page": "(Optional, integer) Page number (0-based)", "auth_token": "(Optional, string) For private datasets"}, "task": "Filter rows from the dataset 'customer_feedback' where the sentiment score is greater than 0.7, ordered by date in descending order, and return the first page of results."}, {"name": "get_parquet", "server": "Dataset Viewer", "description": "Download entire dataset in Parquet format", "parameter": {"dataset": "string, Dataset identifier", "auth_token": "(Optional, string) For private datasets"}, "task": "Download the dataset with identifier \"sales_data_2024\" in Parquet format, including authentication for private access."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "DBHub", "description": "1.在连接的数据库上执行SQL查询 2.列出可用的数据库连接器 3.根据上下文生成SQL语句 4.解释数据库元素（如表、索引和过程）", "tools": [{"name": "execute_sql", "server": "DBHub", "description": "Executes SQL queries on the connected database.", "parameter": {"dsn": "(string) The database connection string.", "sql": "(string) The SQL query to execute."}, "task": "Execute a SQL query to retrieve the top 10 highest-paid employees from the HR database using the provided connection string."}, {"name": "list_connectors", "server": "DBHub", "description": "Lists available connectors for database connections.", "parameter": {}, "task": "List all available database connectors that can be used for establishing connections."}, {"name": "generate_sql", "server": "DBHub", "description": "Generates SQL statements based on the provided context.", "parameter": {"context": "(string) The context for generating the SQL statement."}, "task": "Generate a SQL statement to retrieve all customer records from the 'customers' table where the registration date is after January 1, 2023."}, {"name": "explain_db", "server": "DBHub", "description": "Explains database elements such as tables, indexes, and procedures.", "parameter": {"element_type": "(string) The type of database element to explain (e.g., 'table', 'index', 'procedure').", "element_name": "(string) The name of the database element to explain."}, "task": "Explain the structure and details of the 'customer_orders' table in the database."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Deepseek_R1", "description": "Generate advanced text using the Deepseek R1 model with configurable parameters", "tools": [{"name": "deepseek_r1", "server": "Deepseek_R1", "description": "Generates advanced text using the Deepseek R1 model with configurable parameters.", "parameter": {"prompt": "(string) The input prompt for text generation", "max_tokens": "(number) Maximum tokens to generate", "temperature": "(number) Controls randomness, default is 0.2"}, "task": "Generate a creative story about a futuristic city using 500 tokens, with a randomness setting of 0.5."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "deepseek-thinker-mcp", "description": "Perform reasoning using the Deepseek model", "tools": [{"name": "get-deepseek-thinker", "server": "deepseek-thinker-mcp", "description": "Perform reasoning using the Deepseek model", "parameter": {"originPrompt": "(string) User's original prompt"}, "task": "Analyze and provide a detailed reasoning response for the user's prompt about the impact of artificial intelligence on modern education."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Descope", "description": "1. Retrieve audit log entries from Descope project 2. Retrieve user records from Descope project 3. Create new user in Descope project 4. Invite new user to Descope project", "tools": [{"name": "search-audits", "server": "Descope", "description": "Retrieves up to 10 audit log entries from your Descope project.", "parameter": {}, "task": "Retrieve the latest 10 audit log entries from the Descope project."}, {"name": "search-users", "server": "Descope", "description": "Retrieves up to 10 user records from your Descope project.", "parameter": {}, "task": "Retrieve the latest 10 user records from the Descope project."}, {"name": "create-user", "server": "Descope", "description": "Creates a new user in your Descope project.", "parameter": {}, "task": "Create a new user account in the Descope project with default settings."}, {"name": "invite-user", "server": "Descope", "description": "Invites a new user to your Descope project.", "parameter": {}, "task": "Invite a new user to the current Descope project."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "DevDb", "description": "1. Copy MCP settings for IDE and AI-tool integration 2. Open database tables from external applications via URI", "tools": [{"name": "MCP Configuration", "server": "DevDb", "description": "Allows copying of MCP settings to integrate with IDEs and AI-tools for database access.", "parameter": {}, "task": "Copy the MCP settings to integrate with an IDE for seamless database access."}, {"name": "URI Handler", "server": "DevDb", "description": "Enables opening specific database tables directly from external applications or links.", "parameter": {"connectionId": "(string) The ID of the database connection", "database": "(string) The database name", "table": "(string) The table name to open", "workspace": "(Optional, string) The workspace path", "authority": "(Optional, string) The authority for the URI"}, "task": "Open the 'customers' table in the 'sales' database using the connection ID 'conn_12345' from the 'east_region' workspace."}], "domains": [{"name": "DataBase Management", "description": "数据库管理,涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}]}
{"name": "DevRev", "description": "1. Search for information using the DevRev search API 2. Get all information about a DevRev object using its ID", "tools": [{"name": "search", "server": "DevRev", "description": "Search for information using the DevRev search API with the provided query and namespace.", "parameter": {}, "task": "Search for all open tickets related to customer onboarding in the DevRev system."}, {"name": "get_object", "server": "DevRev", "description": "Get all information about a DevRev object using its ID.", "parameter": {}, "task": "Retrieve all details of the DevRev object with ID 'DEV-12345'."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Dicom", "description": "1.查询患者、研究、系列和实例数据 2.从DICOM实例中提取PDF文本 3.发送DICOM系列或研究到其他节点 4.管理DICOM节点连接和配置 5.获取元数据查询结果的详细级别", "tools": [{"name": "query_patients", "server": "Dicom", "description": "Search for patients based on criteria like name, ID, or birth date.", "parameter": {}, "task": "Search for patients born on or after January 1, 2000, with the last name \"Smith\"."}, {"name": "query_studies", "server": "Dicom", "description": "Find studies using patient ID, date, modality, description, accession number, or Study UID.", "parameter": {}, "task": "Find all studies for patient ID 'P12345' conducted between 2023-01-01 and 2023-12-31 with the modality 'MRI'."}, {"name": "query_series", "server": "Dicom", "description": "Locate series within a specific study using modality, series number/description, or Series UID.", "parameter": {}, "task": "Locate all series within the study labeled \"CT_Abdomen_2024\" that were acquired using the MRI modality."}, {"name": "query_instances", "server": "Dicom", "description": "Find individual instances (images/objects) within a series using instance number or SOP Instance UID.", "parameter": {}, "task": "Find the image instance with SOP Instance UID \"1.2.840.113619.2.55.3.2831164627.483.1599753167.775\" within the specified series."}, {"name": "extract_pdf_text_from_dicom", "server": "Dicom", "description": "Retrieve a specific DICOM instance containing an encapsulated PDF and extract its text content.", "parameter": {}, "task": "Extract the text content from a DICOM instance that contains an encapsulated PDF file."}, {"name": "move_series", "server": "Dicom", "description": "Send a specific DICOM series to another configured DICOM node using C-MOVE.", "parameter": {}, "task": "Send the specified DICOM series to the pre-configured destination DICOM node using C-MOVE."}, {"name": "move_study", "server": "Dicom", "description": "Send an entire DICOM study to another configured DICOM node using C-MOVE.", "parameter": {}, "task": "Send the entire DICOM study from the current node to the configured destination node using C-MOVE."}, {"name": "list_dicom_nodes", "server": "Dicom", "description": "Show the currently active DICOM node and list all configured nodes.", "parameter": {}, "task": "List all currently configured DICOM nodes and identify the active one."}, {"name": "switch_dicom_node", "server": "Dicom", "description": "Change the active DICOM node for subsequent operations.", "parameter": {}, "task": "Switch the active DICOM node to prepare for the next imaging operation."}, {"name": "verify_connection", "server": "Dicom", "description": "Test the DICOM network connection to the currently active node using C-ECHO.", "parameter": {}, "task": "Test the DICOM network connection to the currently active node using a C-ECHO request."}, {"name": "get_attribute_presets", "server": "Dicom", "description": "List the available levels of detail (minimal, standard, extended) for metadata query results.", "parameter": {}, "task": "List the available levels of detail for metadata query results, specifying whether they are minimal, standard, or extended."}], "domains": [{"name": "Healthcare Service", "description": "医疗健康服务,包括在线问诊、电子病历、健康数据记录及医疗资源预约"}, {"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Discord", "description": "1.向指定Discord频道发送消息 2.从指定Discord频道读取最近消息", "tools": [{"name": "send-message", "server": "Discord", "description": "Sends a message to a specified Discord channel.", "parameter": {"server": "(Optional, string) Server name or ID (required if bot is in multiple servers)", "channel": "(string) Channel name (e.g., 'general') or ID", "message": "(string) Message content to send"}, "task": "Send a message with the content \"Reminder: Team meeting at 3 PM today\" to the 'general' channel in Discord."}, {"name": "read-messages", "server": "Discord", "description": "Reads recent messages from a specified Discord channel.", "parameter": {"server": "(Optional, string) Server name or ID (required if bot is in multiple servers)", "channel": "(string) Channel name (e.g., 'general') or ID", "limit": "(Optional, number) Number of messages to fetch (default: 50, max: 100)"}, "task": "Retrieve the last 75 messages from the 'announcements' channel in the specified Discord server."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Discourse", "description": "Search posts on a Discourse forum", "tools": [{"name": "search_posts", "server": "Discourse", "description": "Searches posts on a Discourse forum.", "parameter": {"query": "(string) The search query to use."}, "task": "Search for posts containing the keyword \"Python tutorials\" on the Discourse forum."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Docker", "description": "Docker容器管理,包括:容器列表、创建、运行、重启、启动、日志获取、停止、删除; Docker镜像管理,包括:镜像列表、拉取、推送、构建、删除; Docker网络管理,包括:网络列表、创建、删除; Docker卷管理,包括:卷列表、创建、删除", "tools": [{"name": "list_containers", "server": "Docker", "description": "Lists all existing containers.", "parameter": {}, "task": "List all the currently existing containers in the system."}, {"name": "create_container", "server": "Docker", "description": "Creates a new container.", "parameter": {}, "task": "Create a new container instance with default settings."}, {"name": "run_container", "server": "Docker", "description": "Runs a container.", "parameter": {}, "task": "Run a container with the default configuration."}, {"name": "recreate_container", "server": "Docker", "description": "Recreates a container.", "parameter": {}, "task": "Recreate the container with the latest configuration and settings."}, {"name": "start_container", "server": "Docker", "description": "Starts a container.", "parameter": {}, "task": "Start a container with the default configuration."}, {"name": "fetch_container_logs", "server": "Docker", "description": "Fetches logs from a container.", "parameter": {}, "task": "Fetch the latest logs from the specified container."}, {"name": "stop_container", "server": "Docker", "description": "Stops a container.", "parameter": {}, "task": "Stop the currently running container with ID 'abc123'."}, {"name": "remove_container", "server": "Docker", "description": "Removes a container.", "parameter": {}, "task": "Remove the specified container from the system."}, {"name": "list_images", "server": "Docker", "description": "Lists all Docker images.", "parameter": {}, "task": "List all Docker images currently available in the local repository."}, {"name": "pull_image", "server": "Docker", "description": "Pulls a Docker image from a registry.", "parameter": {}, "task": "Pull the latest version of the 'nginx' Docker image from the default registry."}, {"name": "push_image", "server": "Docker", "description": "Pushes a Docker image to a registry.", "parameter": {}, "task": "Push the Docker image named 'web-app:latest' to the default Docker registry."}, {"name": "build_image", "server": "Docker", "description": "Builds a Docker image from a Dockerfile.", "parameter": {}, "task": "Build a Docker image from the provided Dockerfile in the current directory."}, {"name": "remove_image", "server": "Docker", "description": "Removes a Docker image.", "parameter": {}, "task": "Remove the specified Docker image from the local repository."}, {"name": "list_networks", "server": "Docker", "description": "Lists all Docker networks.", "parameter": {}, "task": "List all available Docker networks currently configured on the system."}, {"name": "create_network", "server": "Docker", "description": "Creates a new Docker network.", "parameter": {}, "task": "Create a new Docker network for container communication."}, {"name": "remove_network", "server": "Docker", "description": "Removes a Docker network.", "parameter": {}, "task": "Remove the currently unused Docker network to free up system resources."}, {"name": "list_volumes", "server": "Docker", "description": "Lists all Docker volumes.", "parameter": {}, "task": "List all available Docker volumes currently present in the system."}, {"name": "create_volume", "server": "Docker", "description": "Creates a new Docker volume.", "parameter": {}, "task": "Create a new Docker volume for storing persistent data."}, {"name": "remove_volume", "server": "Docker", "description": "Removes a Docker volume.", "parameter": {}, "task": "Remove the unused Docker volume named 'data_backup' from the system."}], "domains": [{"name": "Visual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "DPLP", "description": "DBLP学术出版物检索与导出，包括：布尔查询、模糊标题匹配、作者出版物检索、出版物场地信息获取、统计计算及BibTeX导出", "tools": [{"name": "search", "server": "DPLP", "description": "Search DBLP for publications using boolean queries.", "parameter": {"query": "(string, required) A query string that may include boolean operators 'and' and 'or' (case-insensitive)", "max_results": "(number, optional) Maximum number of publications to return. Default is 10", "year_from": "(number, optional) Lower bound for publication year", "year_to": "(number, optional) Upper bound for publication year", "venue_filter": "(string, optional) Case-insensitive substring filter for publication venues (e.g., 'iclr')", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}, "task": "Search for publications related to \"machine learning and deep learning\" published between 2018 and 2023 in venues containing \"neurips\", returning a maximum of 15 results with BibTeX entries included."}, {"name": "fuzzy_title_search", "server": "DPLP", "description": "Search publications with fuzzy title matching.", "parameter": {"title": "(string, required) Full or partial title of the publication (case-insensitive)", "similarity_threshold": "(number, required) A float between 0 and 1 where 1.0 means an exact match", "max_results": "(number, optional) Maximum number of publications to return. Default is 10", "year_from": "(number, optional) Lower bound for publication year", "year_to": "(number, optional) Upper bound for publication year", "venue_filter": "(string, optional) Case-insensitive substring filter for publication venues", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}, "task": "Search for publications with titles containing \"machine learning\" and a similarity threshold of 0.8, limited to the last 5 years (2019-2024), and include BibTeX entries in the results. Return a maximum of 15 publications."}, {"name": "get_author_publications", "server": "DPLP", "description": "Retrieve publication details for a specific author with fuzzy matching.", "parameter": {"author_name": "(string, required) Full or partial author name (case-insensitive)", "similarity_threshold": "(number, required) A float between 0 and 1 where 1.0 means an exact match", "max_results": "(number, optional) Maximum number of publications to return. Default is 20", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}, "task": "Retrieve up to 15 publications for authors matching the name \"John Smith\" with a similarity threshold of 0.8, including BibTeX entries."}, {"name": "get_venue_info", "server": "DPLP", "description": "Retrieve detailed information about a publication venue.", "parameter": {"venue_name": "(string, required) Venue name or abbreviation (e.g., 'ICLR' or full name)"}, "task": "Retrieve the publication frequency and submission guidelines for the venue 'NeurIPS' (Neural Information Processing Systems)."}, {"name": "calculate_statistics", "server": "DPLP", "description": "Calculate statistics from a list of publication results.", "parameter": {"results": "(array, required) An array of publication objects, each with at least 'title', 'authors', 'venue', and 'year'"}, "task": "Calculate the average number of publications per year from the provided list of research papers, ensuring each paper includes 'title', 'authors', 'venue', and 'year' details."}, {"name": "export_bibtex", "server": "DPLP", "description": "Export BibTeX entries directly from DBLP to a local file.", "parameter": {"links": "(string, required) HTML string containing one or more <a href=biburl>key</a> links"}, "task": "Export BibTeX entries from the provided HTML links containing DBLP references to a local file."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "dune-analytics-mcp", "description": "1. Retrieve the latest results of a specified Dune query 2. Execute a Dune query and return the results", "tools": [{"name": "get_latest_result", "server": "dune-analytics-mcp", "description": "Retrieves the latest results of a specified Dune query.", "parameter": {"query_id": "(int) The ID of the Dune query."}, "task": "Retrieve the most recent results from Dune query ID 12345."}, {"name": "run_query", "server": "dune-analytics-mcp", "description": "Executes a Dune query and returns the results.", "parameter": {"query_id": "(int) The ID of the Dune query to run."}, "task": "Run the Dune query with ID 12345 and retrieve the results."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "EdgeOne Pages MCP", "description": "Deploy HTML content to EdgeOne Pages and return a publicly accessible URL", "tools": [{"name": "deploy-html", "server": "EdgeOne Pages MCP", "description": "Deploys HTML content to EdgeOne Pages and returns a publicly accessible URL.", "parameter": {}, "task": "Deploy a static HTML page containing a contact form to EdgeOne Pages and retrieve the public URL."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "ElevenLabs", "description": "1.使用默认语音设置从纯文本生成音频 2.从结构化脚本生成多语音和演员的音频 3.按ID删除作业 4.按ID获取音频文件 5.列出所有可用语音 6.获取语音作业历史记录", "tools": [{"name": "generate_audio_simple", "server": "ElevenLabs", "description": "Generate audio from plain text using default voice settings", "parameter": {}, "task": "Convert the provided text \"Hello, welcome to our service. How can I assist you today?\" into an audio file using default voice settings."}, {"name": "generate_audio_script", "server": "ElevenLabs", "description": "Generate audio from a structured script with multiple voices and actors", "parameter": {}, "task": "Generate an audio script featuring a conversation between two distinct voices, one male and one female, discussing the benefits of renewable energy."}, {"name": "delete_job", "server": "ElevenLabs", "description": "Delete a job by its ID", "parameter": {}, "task": "Delete the job with ID 'JOB12345'."}, {"name": "get_audio_file", "server": "ElevenLabs", "description": "Get the audio file by its ID", "parameter": {}, "task": "Retrieve the audio file associated with the specified unique identifier."}, {"name": "list_voices", "server": "ElevenLabs", "description": "List all available voices", "parameter": {}, "task": "List all available voice options for text-to-speech conversion."}, {"name": "get_voiceover_history", "server": "ElevenLabs", "description": "Get voiceover job history. Optionally specify a job ID for a specific job.", "parameter": {"job_id": "(Optional, string) The ID of the specific job to retrieve history for"}, "task": "Retrieve the history of the last 10 voiceover jobs. If a specific job ID is provided, fetch the details for that job only."}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "EVM MCP Server", "description": "1.获取ERC20代币元数据 2.检查ERC20代币余额 3.转移ERC20代币 4.批准代币支出 5.获取NFT元数据 6.验证NFT所有权 7.转移NFT 8.计算拥有的NFT数量 9.获取ERC1155元数据 10.检查ERC1155余额 11.转移ERC1155代币 12.获取网络信息 13.获取原生代币余额 14.发送原生代币 15.获取交易详情 16.读取智能合约状态 17.写入智能合约 18.检查地址是否为合约 19.解析ENS名称到地址", "tools": [{"name": "get-token-info", "server": "EVM MCP Server", "description": "Get ERC20 token metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the token", "network": "(string) The network identifier"}, "task": "Retrieve the metadata for the ERC20 token with the address '0x123abc' on the Ethereum mainnet."}, {"name": "get-token-balance", "server": "EVM MCP Server", "description": "Check ERC20 token balance", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the token", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": "Check the balance of the ERC20 token at address 0x123...abc for the owner with address 0x456...def on the Ethereum mainnet."}, {"name": "transfer-token", "server": "EVM MCP Server", "description": "Transfer ERC20 tokens", "parameter": {"privateKey": "(string) The private key of the sender", "tokenAddress": "(address/ENS) The address or ENS name of the token", "toAddress": "(address/ENS) The address or ENS name of the recipient", "amount": "(number) The amount of tokens to transfer", "network": "(string) The network identifier"}, "task": "Transfer 100 USDT tokens from the sender's wallet to the recipient's address on the Ethereum mainnet."}, {"name": "approve-token-spending", "server": "EVM MCP Server", "description": "Approve token allowances", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the token", "spenderAddress": "(address/ENS) The address or ENS name of the spender", "amount": "(number) The amount of tokens to approve", "network": "(string) The network identifier"}, "task": "Approve the spending of 1000 tokens by the specified spender address on the Ethereum mainnet for the given token contract."}, {"name": "get-nft-info", "server": "EVM MCP Server", "description": "Get NFT metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "network": "(string) The network identifier"}, "task": "Retrieve the metadata for the NFT with token ID \"12345\" from the Ethereum network, associated with the token address \"0x123abc\"."}, {"name": "check-nft-ownership", "server": "EVM MCP Server", "description": "Verify NFT ownership", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": "Verify if the wallet address '0x123abc' owns the NFT with token ID '456' from the collection at address '0x789def' on the Ethereum network."}, {"name": "transfer-nft", "server": "EVM MCP Server", "description": "Transfer an NFT", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "toAddress": "(address/ENS) The address or ENS name of the recipient", "network": "(string) The network identifier"}, "task": "Transfer the NFT with token ID \"12345\" from the owner's wallet to the recipient's address \"0x123...abc\" on the Ethereum mainnet. Ensure the transaction is signed using the owner's private key."}, {"name": "get-nft-balance", "server": "EVM MCP Server", "description": "Count NFTs owned", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": "Count the number of NFTs owned by the address \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\" for the token contract \"0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D\" on the Ethereum network."}, {"name": "get-erc1155-token-uri", "server": "EVM MCP Server", "description": "Get ERC1155 metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "network": "(string) The network identifier"}, "task": "Retrieve the metadata for token ID 12345 from the ERC1155 contract deployed on the Ethereum mainnet."}, {"name": "get-erc1155-balance", "server": "EVM MCP Server", "description": "Check ERC1155 balance", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}, "task": "Check the balance of token ID \"12345\" owned by \"0x123abc\" on the Ethereum mainnet for the ERC1155 token at address \"0x456def\"."}, {"name": "transfer-erc1155", "server": "EVM MCP Server", "description": "Transfer ERC1155 tokens", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "amount": "(number) The amount of tokens to transfer", "toAddress": "(address/ENS) The address or ENS name of the recipient", "network": "(string) The network identifier"}, "task": "Transfer 5 ERC1155 tokens with ID \"12345\" from the owner's wallet to the recipient's address \"0x123...abc\" on the Ethereum mainnet."}, {"name": "get-chain-info", "server": "EVM MCP Server", "description": "Get network information", "parameter": {"network": "(string) The network identifier"}, "task": "Retrieve the current network information for the blockchain identified as \"Ethereum Mainnet\"."}, {"name": "get-balance", "server": "EVM MCP Server", "description": "Get native token balance", "parameter": {"address": "(address/ENS) The address or ENS name of the account", "network": "(string) The network identifier"}, "task": "Check the native token balance for the Ethereum address '0x742d35Cc6634C0532925a3b844Bc454e4438f44e' on the Ethereum mainnet."}, {"name": "transfer-eth", "server": "EVM MCP Server", "description": "Send native tokens", "parameter": {"privateKey": "(string) The private key of the sender", "to": "(address/ENS) The address or ENS name of the recipient", "amount": "(number) The amount of native tokens to transfer", "network": "(string) The network identifier"}, "task": "Transfer 0.5 ETH from the sender's wallet to the recipient address \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\" on the Ethereum mainnet."}, {"name": "get-transaction", "server": "EVM MCP Server", "description": "Get transaction details", "parameter": {"txHash": "(string) The transaction hash", "network": "(string) The network identifier"}, "task": "Retrieve the details of the transaction with the hash \"0x123abc456def789ghi\" on the Ethereum network."}, {"name": "read-contract", "server": "EVM MCP Server", "description": "Read smart contract state", "parameter": {"contractAddress": "(address/ENS) The address or ENS name of the contract", "abi": "(array) The ABI of the contract", "functionName": "(string) The name of the function to call", "args": "(array) The arguments to pass to the function", "network": "(string) The network identifier"}, "task": "Retrieve the current owner of the smart contract deployed at 0x123... on the Ethereum mainnet using the provided ABI and function call."}, {"name": "write-contract", "server": "EVM MCP Server", "description": "Write to smart contract", "parameter": {"contractAddress": "(address/ENS) The address or ENS name of the contract", "abi": "(array) The ABI of the contract", "functionName": "(string) The name of the function to call", "args": "(array) The arguments to pass to the function", "privateKey": "(string) The private key of the caller", "network": "(string) The network identifier"}, "task": "Call the \"transfer\" function on the smart contract at address 0x123... with arguments [0x456..., 1000] using the provided private key on the Ethereum mainnet."}, {"name": "is-contract", "server": "EVM MCP Server", "description": "Check if address is a contract", "parameter": {"address": "(address/ENS) The address or ENS name to check", "network": "(string) The network identifier"}, "task": "Check if the Ethereum address '0x742d35Cc6634C0532925a3b844Bc454e4438f44e' is a contract on the mainnet network."}, {"name": "resolve-ens", "server": "EVM MCP Server", "description": "Resolve ENS name to address", "parameter": {"ensName": "(string) The ENS name to resolve", "network": "(string) The network identifier"}, "task": "Resolve the Ethereum address for the ENS name 'vitalik.eth' on the Ethereum mainnet."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}]}
{"name": "Everything Search", "description": "Search for files and folders across the system", "tools": [{"name": "search", "server": "Everything Search", "description": "Search for files and folders across the system. The search capabilities and syntax support vary by platform.", "parameter": {"query": "(required) Search query string. See platform-specific notes below.", "max_results": "(optional, integer) Maximum number of results to return (default: 100, max: 1000)", "match_path": "(optional, boolean) Match against full path instead of filename only (default: false)", "match_case": "(optional, boolean) Enable case-sensitive search (default: false)", "match_whole_word": "(optional, boolean) Match whole words only (default: false)", "match_regex": "(optional, boolean) Enable regex search (default: false)", "sort_by": "(optional, integer) Sort order for results (default: 1). Available options: 1 (filename A to Z), 2 (filename Z to A), 3 (path A to Z), 4 (path Z to A), 5 (size smallest first), 6 (size largest first), 7 (extension A to Z), 8 (extension Z to A), 11 (creation date oldest first), 12 (creation date newest first), 13 (modification date oldest first), 14 (modification date newest first)"}, "task": "Search for all PDF files modified in the last 30 days, sorted by modification date (newest first), with a maximum of 500 results. Match against the full path and enable case-sensitive search."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Fantasy PL", "description": "Fantasy Premier League (FPL) data analysis and management, including: gameweek status retrieval, player fixture analysis, blank/double gameweek information, player comparison, team viewing, and authentication checks", "tools": [{"name": "get_gameweek_status", "server": "Fantasy PL", "description": "Get precise information about current, previous, and next gameweeks", "parameter": {}, "task": "Check the status of the current, previous, and next gameweeks in the football league."}, {"name": "analyze_player_fixtures", "server": "Fantasy PL", "description": "Analyze upcoming fixtures for a player with difficulty ratings", "parameter": {}, "task": "Analyze the upcoming fixtures for a player and provide difficulty ratings for each match."}, {"name": "get_blank_gameweeks", "server": "Fantasy PL", "description": "Get information about upcoming blank gameweeks", "parameter": {}, "task": "Check the schedule for upcoming blank gameweeks in the current season."}, {"name": "get_double_gameweeks", "server": "Fantasy PL", "description": "Get information about upcoming double gameweeks", "parameter": {}, "task": "Check for any upcoming double gameweeks in the current season's schedule."}, {"name": "analyze_players", "server": "Fantasy PL", "description": "Filter and analyze FPL players based on multiple criteria", "parameter": {}, "task": "Filter and analyze Fantasy Premier League (FPL) players who have scored more than 100 points in the current season."}, {"name": "analyze_fixtures", "server": "Fantasy PL", "description": "Analyze upcoming fixtures for players, teams, or positions", "parameter": {}, "task": "Analyze the upcoming fixtures for all players in the Premier League for the next two weeks."}, {"name": "compare_players", "server": "Fantasy PL", "description": "Compare multiple players across various metrics", "parameter": {}, "task": "Compare the performance metrics of three top-tier basketball players from the 2023 season."}, {"name": "check_fpl_authentication", "server": "Fantasy PL", "description": "Check if FPL authentication is working correctly", "parameter": {}, "task": "Check if the authentication system for FPL is functioning properly."}, {"name": "get_my_team", "server": "Fantasy PL", "description": "View your authenticated team (requires authentication)", "parameter": {}, "task": "Retrieve the details of your currently authenticated team."}, {"name": "get_team", "server": "Fantasy PL", "description": "View any team with a specific ID (requires authentication)", "parameter": {}, "task": "Retrieve the details of the team with ID \"T12345\" (requires authentication)."}, {"name": "get_manager_info", "server": "Fantasy PL", "description": "Get manager details (requires authentication)", "parameter": {}, "task": "Retrieve the authenticated user's manager details including name, email, and department."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Fetch", "description": "Fetch website content in various formats including HTML, JSON, plain text, and Markdown", "tools": [{"name": "fetch_html", "server": "Fetch", "description": "Fetch a website and return the content as HTML", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": "Fetch the HTML content of the website \"https://example.com\" with custom headers including \"User-Agent: Mozilla/5.0\"."}, {"name": "fetch_json", "server": "Fetch", "description": "Fetch a JSON file from a URL", "parameter": {"url": "(string, required): URL of the JSON to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": "Fetch the JSON data from the URL \"https://api.example.com/data\" with custom headers including \"Authorization: Bearer token123\"."}, {"name": "fetch_txt", "server": "Fetch", "description": "Fetch a website and return the content as plain text (no HTML)", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": "Fetch the plain text content from the website at \"https://example.com/about\" without any HTML formatting."}, {"name": "fetch_markdown", "server": "Fetch", "description": "Fetch a website and return the content as Markdown", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}, "task": "Fetch the content of the website \"https://example.com/blog\" and convert it into Markdown format, including any custom headers if specified."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Firebase", "description": "1.文件上传与管理，包括从文本、base64内容或本地路径上传文件，以及从外部URL导入文件 2.Firestore文档操作，包括添加、列出、获取、更新、删除文档，以及列出根集合和查询子集合 3.文件系统操作，包括列出目录中的文件和获取文件元数据及URL 4.用户认证，包括通过ID或电子邮件获取用户信息", "tools": [{"name": "storage_upload", "server": "Firebase", "description": "Upload files from text, base64 content, or local file paths", "parameter": {"filePath": "(string) The path where the file will be stored in Firebase Storage", "content": "(string) The content of the file to upload, can be a local file path, base64 data URL, or plain text"}, "task": "Upload a text file containing \"Project Report 2024\" to the \"reports\" directory in Firebase Storage."}, {"name": "storage_upload_from_url", "server": "Firebase", "description": "Import files directly from external URLs", "parameter": {"filePath": "(string) The path where the file will be stored in Firebase Storage", "url": "(string) The external URL of the file to upload"}, "task": "Download the file from the provided URL and save it to the specified path in Firebase Storage."}, {"name": "firestore_add_document", "server": "Firebase", "description": "Add a document to a collection", "parameter": {"collection": "(string) The name of the collection", "data": "(object) The data to add to the document"}, "task": "Add a new document containing user details (name: \"Alice\", age: 28, email: \"alice@example.com\") to the \"users\" collection."}, {"name": "firestore_list_documents", "server": "Firebase", "description": "List documents with filtering", "parameter": {"collection": "(string) The name of the collection"}, "task": "List all documents in the 'user_profiles' collection with filtering applied."}, {"name": "firestore_get_document", "server": "Firebase", "description": "Get a specific document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document"}, "task": "Retrieve the document with ID \"user123\" from the \"customers\" collection in Firestore."}, {"name": "firestore_update_document", "server": "Firebase", "description": "Update an existing document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document", "data": "(object) The data to update in the document"}, "task": "Update the document with ID \"user123\" in the \"customers\" collection by changing the \"status\" field to \"active\"."}, {"name": "firestore_delete_document", "server": "Firebase", "description": "Delete a document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document"}, "task": "Delete the document with ID \"user123\" from the \"customers\" collection."}, {"name": "firestore_list_collections", "server": "Firebase", "description": "List root collections", "parameter": {}, "task": "List all root collections in the Firestore database."}, {"name": "firestore_query_collection_group", "server": "Firebase", "description": "Query across subcollections", "parameter": {"collectionId": "(string) The ID of the collection group"}, "task": "Retrieve all documents from the subcollections under the 'users' collection group."}, {"name": "storage_list_files", "server": "Firebase", "description": "List files in a directory", "parameter": {"directoryPath": "(Optional, string) The path of the directory to list files from"}, "task": "List all files in the \"documents/reports\" directory."}, {"name": "storage_get_file_info", "server": "Firebase", "description": "Get file metadata and URL", "parameter": {"filePath": "(string) The path of the file in Firebase Storage"}, "task": "Retrieve the metadata and download URL for the file located at \"user_uploads/profile_picture.jpg\" in Firebase Storage."}, {"name": "auth_get_user", "server": "Firebase", "description": "Get user by ID or email", "parameter": {"identifier": "(string) The user ID or email"}, "task": "Retrieve the user details using either the ID \"user123\" or the email \"user123@example.com\"."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "FireCrawl", "description": "Firecrawl web content scraping and analysis, including: single URL scraping, batch URL scraping with rate limiting, batch operation status checking, web search with content extraction, asynchronous crawling, structured information extraction using LLM, deep web research with LLM analysis, and llms.txt file generation", "tools": [{"name": "firecrawl_scrape", "server": "FireCrawl", "description": "Scrape content from a single URL with advanced options.", "parameter": {"url": "(string) The URL to scrape.", "formats": "(array) List of formats to return the content in (e.g., ['markdown']).", "onlyMainContent": "(boolean) Whether to only extract the main content.", "waitFor": "(number) Time to wait for page elements to load (in milliseconds).", "timeout": "(number) Maximum time to wait for the scrape operation (in milliseconds).", "mobile": "(boolean) Whether to emulate a mobile device.", "includeTags": "(array) List of HTML tags to include in the scrape.", "excludeTags": "(array) List of HTML tags to exclude from the scrape.", "skipTlsVerification": "(boolean) Whether to skip TLS verification."}, "task": "Scrape the main content in markdown format from the specified URL, waiting 3000 milliseconds for page elements to load and skipping TLS verification. Exclude any content within `<script>` and `<style>` tags."}, {"name": "firecrawl_batch_scrape", "server": "FireCrawl", "description": "Scrape multiple URLs efficiently with built-in rate limiting and parallel processing.", "parameter": {"urls": "(array) List of URLs to scrape.", "options": "(object) Additional options for the scrape operation, including 'formats' and 'onlyMainContent'."}, "task": "Scrape the main content from the following URLs in HTML format: [\"https://example.com/page1\", \"https://example.com/page2\", \"https://example.com/page3\"]."}, {"name": "firecrawl_check_batch_status", "server": "FireCrawl", "description": "Check the status of a batch operation.", "parameter": {"id": "(string) The ID of the batch operation to check."}, "task": "Check the status of the batch operation with ID \"BATCH12345\"."}, {"name": "firecrawl_search", "server": "FireCrawl", "description": "Search the web and optionally extract content from search results.", "parameter": {"query": "(string) The search query.", "limit": "(number) Maximum number of results to return.", "lang": "(string) Language for the search.", "country": "(string) Country for the search.", "scrapeOptions": "(object) Additional options for scraping the search results, including 'formats' and 'onlyMainContent'."}, "task": "Search for the latest 5 articles about renewable energy advancements in Germany, focusing on the main content only, and return the results in English."}, {"name": "firecrawl_crawl", "server": "FireCrawl", "description": "Start an asynchronous crawl with advanced options.", "parameter": {"url": "(string) The starting URL for the crawl.", "maxDepth": "(number) Maximum recursive depth for the crawl.", "limit": "(number) Maximum number of URLs to crawl.", "allowExternalLinks": "(boolean) Whether to follow external links.", "deduplicateSimilarURLs": "(boolean) Whether to deduplicate similar URLs."}, "task": "Crawl the website starting from \"https://example.com\" with a maximum depth of 3, limit the crawl to 50 pages, and ensure external links are not followed while deduplicating similar URLs."}, {"name": "firecrawl_extract", "server": "FireCrawl", "description": "Extract structured information from web pages using LLM capabilities.", "parameter": {"urls": "(array) List of URLs to extract information from.", "prompt": "(string) Custom prompt for the LLM extraction.", "systemPrompt": "(string) System prompt to guide the LLM.", "schema": "(object) JSON schema for structured data extraction.", "allowExternalLinks": "(boolean) Allow extraction from external links.", "enableWebSearch": "(boolean) Enable web search for additional context.", "includeSubdomains": "(boolean) Include subdomains in extraction."}, "task": "Extract structured product details including name, price, and description from the specified e-commerce website URLs, using a custom prompt to focus on electronics category items. Ensure the extraction follows the provided JSON schema and includes subdomains for comprehensive data collection."}, {"name": "firecrawl_deep_research", "server": "FireCrawl", "description": "Conduct deep web research on a query using intelligent crawling, search, and LLM analysis.", "parameter": {"query": "(string, required) The research question or topic to explore.", "maxDepth": "(number, optional) Maximum recursive depth for crawling/search (default: 3).", "timeLimit": "(number, optional) Time limit in seconds for the research session (default: 120).", "maxUrls": "(number, optional) Maximum number of URLs to analyze (default: 50)."}, "task": "Conduct a deep web research on \"renewable energy advancements in 2024\" with a maximum recursive depth of 4, analyzing up to 60 URLs within a 180-second time limit."}, {"name": "firecrawl_generate_llmstxt", "server": "FireCrawl", "description": "Generate a standardized llms.txt (and optionally llms-full.txt) file for a given domain.", "parameter": {"url": "(string, required) The base URL of the website to analyze.", "maxUrls": "(number, optional) Max number of URLs to include (default: 10).", "showFullText": "(boolean, optional) Whether to include llms-full.txt contents in the response."}, "task": "Generate a standardized llms.txt file for the website \"example.com\" including up to 15 URLs, and ensure the response contains the full text content."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "Ghost", "description": "1.管理文章、成员、新闻简报、优惠、邀请、角色、标签、层级、用户和Webhooks的增删改查操作", "tools": [{"name": "Browse Posts", "server": "Ghost", "description": "List posts with optional filters, pagination, and ordering.", "parameter": {}, "task": "List the latest 10 posts sorted by creation date in descending order."}, {"name": "Read Post", "server": "Ghost", "description": "Retrieve a post by ID or slug.", "parameter": {}, "task": "Retrieve the post with the ID '12345' or the slug 'latest-updates'."}, {"name": "Add Post", "server": "Ghost", "description": "Create a new post with title, content, and status.", "parameter": {}, "task": "Create a new post with the title \"Latest Updates\", content \"Check out our newest features and improvements\", and set the status to \"published\"."}, {"name": "Edit Post", "server": "Ghost", "description": "Update an existing post by ID.", "parameter": {}, "task": "Update the content of the post with ID 12345 to include the latest project updates."}, {"name": "Delete Post", "server": "Ghost", "description": "Remove a post by ID.", "parameter": {}, "task": "Remove the post with ID '12345' from the system."}, {"name": "Browse Members", "server": "Ghost", "description": "List members with filters and pagination.", "parameter": {}, "task": "List all members with pagination, displaying 10 members per page."}, {"name": "Read Member", "server": "Ghost", "description": "Retrieve a member by ID or email.", "parameter": {}, "task": "Retrieve the member details using their unique ID or registered email address."}, {"name": "Add Member", "server": "Ghost", "description": "Create a new member.", "parameter": {}, "task": "Add a new member to the system with the provided details."}, {"name": "Edit Member", "server": "Ghost", "description": "Update member details.", "parameter": {}, "task": "Update the contact information for the member with ID 'MEM12345' to reflect their new phone number and email address."}, {"name": "Delete Member", "server": "Ghost", "description": "Remove a member.", "parameter": {}, "task": "Remove a member from the system."}, {"name": "Browse Newsletters", "server": "Ghost", "description": "List newsletters.", "parameter": {}, "task": "List the latest 10 newsletters available in the system."}, {"name": "Read Newsletter", "server": "Ghost", "description": "Retrieve a newsletter by ID.", "parameter": {}, "task": "Retrieve the latest newsletter by its unique identifier."}, {"name": "Add Newsletter", "server": "Ghost", "description": "Create a new newsletter.", "parameter": {}, "task": "Create a new newsletter with the latest company updates and upcoming events."}, {"name": "Edit Newsletter", "server": "Ghost", "description": "Update newsletter details.", "parameter": {}, "task": "Update the latest issue of the company newsletter with new content and formatting."}, {"name": "Delete Newsletter", "server": "Ghost", "description": "Remove a newsletter.", "parameter": {}, "task": "Delete the latest newsletter from the system."}, {"name": "Browse Offers", "server": "Ghost", "description": "List offers.", "parameter": {}, "task": "List all available offers currently active in the system."}, {"name": "Read Offer", "server": "Ghost", "description": "Retrieve an offer by ID.", "parameter": {}, "task": "Retrieve the details of the offer with ID 'OFF12345'."}, {"name": "Add Offer", "server": "Ghost", "description": "Create a new offer.", "parameter": {}, "task": "Create a new promotional offer with a 20% discount on all products in the electronics category."}, {"name": "Edit Offer", "server": "Ghost", "description": "Update offer details.", "parameter": {}, "task": "Update the details of the current promotional offer to reflect a 20% discount on all summer collection items."}, {"name": "Delete Offer", "server": "Ghost", "description": "Remove an offer.", "parameter": {}, "task": "Remove the current active offer from the system."}, {"name": "Browse Invites", "server": "Ghost", "description": "List invites.", "parameter": {}, "task": "List all pending invites in the system."}, {"name": "Add Invite", "server": "Ghost", "description": "Create a new invite.", "parameter": {}, "task": "Generate a new invite for an upcoming team meeting."}, {"name": "Delete Invite", "server": "Ghost", "description": "Remove an invite.", "parameter": {}, "task": "Remove the most recently generated invite from the system."}, {"name": "Browse Roles", "server": "Ghost", "description": "List roles.", "parameter": {}, "task": "List all available roles in the system."}, {"name": "Read Role", "server": "Ghost", "description": "Retrieve a role by ID.", "parameter": {}, "task": "Retrieve the details of the role with ID 'ROLE_12345'."}, {"name": "Browse Tags", "server": "Ghost", "description": "List tags.", "parameter": {}, "task": "List all available tags in the system."}, {"name": "Read Tag", "server": "Ghost", "description": "Retrieve a tag by ID or slug.", "parameter": {}, "task": "Retrieve the tag with the ID \"featured\" from the database."}, {"name": "Add Tag", "server": "Ghost", "description": "Create a new tag.", "parameter": {}, "task": "Create a new tag labeled \"Important\" for organizing project files."}, {"name": "Edit Tag", "server": "Ghost", "description": "Update tag details.", "parameter": {}, "task": "Update the details of an existing tag in the system."}, {"name": "Delete Tag", "server": "Ghost", "description": "Remove a tag.", "parameter": {}, "task": "Remove the specified tag from the system."}, {"name": "Browse Tiers", "server": "Ghost", "description": "List tiers.", "parameter": {}, "task": "List all available tiers in the system."}, {"name": "Read Tier", "server": "Ghost", "description": "Retrieve a tier by ID.", "parameter": {}, "task": "Retrieve the details of the tier with ID '12345'."}, {"name": "Add Tier", "server": "Ghost", "description": "Create a new tier.", "parameter": {}, "task": "Create a new tier with default settings in the current system."}, {"name": "Edit Tier", "server": "Ghost", "description": "Update tier details.", "parameter": {}, "task": "Update the tier details for the premium membership level to include additional benefits and adjust the pricing structure."}, {"name": "Delete Tier", "server": "Ghost", "description": "Remove a tier.", "parameter": {}, "task": "Remove the specified tier from the system."}, {"name": "Browse Users", "server": "Ghost", "description": "List users.", "parameter": {}, "task": "List all registered users in the system."}, {"name": "Read User", "server": "Ghost", "description": "Retrieve a user by ID or slug.", "parameter": {}, "task": "Retrieve the user details for the account with ID '12345'."}, {"name": "Edit User", "server": "Ghost", "description": "Update user details.", "parameter": {}, "task": "Update the details of the user with ID 'U12345' to reflect their new role as 'Project Manager' and updated contact information."}, {"name": "Delete User", "server": "Ghost", "description": "Remove a user.", "parameter": {}, "task": "Remove the specified user account from the system."}, {"name": "Browse Webhooks", "server": "Ghost", "description": "List webhooks.", "parameter": {}, "task": "List all available webhooks in the system."}, {"name": "Add Webhook", "server": "Ghost", "description": "Create a new webhook.", "parameter": {}, "task": "Set up a new webhook to receive real-time notifications for repository events."}, {"name": "Delete Webhook", "server": "Ghost", "description": "Remove a webhook.", "parameter": {}, "task": "Remove the currently active webhook from the system."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Git", "description": "Git版本控制操作,包括:状态查看、差异比较、提交记录、分支管理、仓库初始化、推送至远程仓库", "tools": [{"name": "git_status", "server": "Git", "description": "Shows the working tree status", "parameter": {}, "task": "Check the current status of the working tree in the local Git repository."}, {"name": "git_diff_unstaged", "server": "Git", "description": "Shows changes in the working directory that are not yet staged", "parameter": {}, "task": "Show the unstaged changes in the current Git working directory."}, {"name": "git_diff_staged", "server": "Git", "description": "Shows changes that are staged for commit", "parameter": {}, "task": "Display the changes that have been staged for the next commit in the current Git repository."}, {"name": "git_diff", "server": "Git", "description": "Shows differences between branches or commits", "parameter": {}, "task": "Compare the differences between the 'main' branch and the 'feature/login' branch in the current Git repository."}, {"name": "git_commit", "server": "Git", "description": "Records changes to the repository", "parameter": {}, "task": "Commit the latest changes to the local Git repository with a descriptive message."}, {"name": "git_add", "server": "Git", "description": "Adds file contents to the staging area", "parameter": {}, "task": "Add all modified files in the current directory to the staging area for the next commit."}, {"name": "git_reset", "server": "Git", "description": "Unstages all staged changes", "parameter": {}, "task": "Unstage all currently staged changes in the Git repository."}, {"name": "git_log", "server": "Git", "description": "Shows the commit logs", "parameter": {}, "task": "Show the commit logs for the current Git repository."}, {"name": "git_create_branch", "server": "Git", "description": "Creates a new branch from an optional base branch", "parameter": {}, "task": "Create a new branch from the main branch in the current Git repository."}, {"name": "git_checkout", "server": "Git", "description": "Switches branches", "parameter": {}, "task": "Switch to the 'development' branch in the current Git repository."}, {"name": "git_show", "server": "Git", "description": "Shows the contents of a commit", "parameter": {}, "task": "Show the contents of the most recent commit in the current Git repository."}, {"name": "git_init", "server": "Git", "description": "Initialize a new Git repository", "parameter": {}, "task": "Initialize a new Git repository in the current project directory."}, {"name": "git_push", "server": "Git", "description": "Pushes local commits to a remote repository (requires --write-access flag)", "parameter": {}, "task": "Push the latest local commits to the connected remote repository."}, {"name": "git_list_repositories", "server": "Git", "description": "Lists all available Git repositories", "parameter": {}, "task": "List all available Git repositories in the current workspace."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Github Actions", "description": "GitHub workflows management, including: listing workflows, getting workflow details and usage statistics, listing and managing workflow runs, triggering, canceling, and re-running workflows", "tools": [{"name": "list_workflows", "server": "Github Actions", "description": "List workflows in a GitHub repository", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": "List all workflows in the GitHub repository named \"example-repo\" owned by \"example-org\", displaying 50 workflows per page."}, {"name": "get_workflow", "server": "Github Actions", "description": "Get details of a specific workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename"}, "task": "Retrieve the details of the workflow with ID 'build-and-deploy' from the repository 'web-app' owned by 'acme-org'."}, {"name": "get_workflow_usage", "server": "Github Actions", "description": "Get usage statistics of a workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename"}, "task": "Get the usage statistics for the workflow with ID \"build-and-deploy\" in the repository \"api-service\" owned by \"acme-org\"."}, {"name": "list_workflow_runs", "server": "Github Actions", "description": "List all workflow runs for a repository or a specific workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(optional string or number) The ID of the workflow or filename", "actor": "(optional string) Filter by user who triggered the workflow", "branch": "(optional string) Filter by branch", "event": "(optional string) Filter by event type", "status": "(optional string) Filter by status", "created": "(optional string) Filter by creation date (YYYY-MM-DD)", "excludePullRequests": "(optional boolean) Exclude PR-triggered runs", "checkSuiteId": "(optional number) Filter by check suite ID", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": "List all workflow runs for the repository \"example-repo\" owned by \"org-example\" that were triggered by the user \"dev-user\" on the \"main\" branch with a status of \"completed\". Limit the results to 50 per page."}, {"name": "get_workflow_run", "server": "Github Actions", "description": "Get details of a specific workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}, "task": "Retrieve the details of workflow run with ID 12345 from the repository named \"example-repo\" owned by the organization \"github-org\"."}, {"name": "get_workflow_run_jobs", "server": "Github Actions", "description": "Get jobs for a specific workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run", "filter": "(optional string) Filter jobs by completion status ('latest', 'all')", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": "Retrieve all jobs associated with workflow run ID 12345 from the repository \"example-repo\" owned by \"example-org,\" filtering for the latest completion status. Limit the results to 50 per page."}, {"name": "trigger_workflow", "server": "Github Actions", "description": "Trigger a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename", "ref": "(string) The reference to run the workflow on (branch, tag, or SHA)", "inputs": "(optional object) Input parameters for the workflow"}, "task": "Trigger a workflow run for the repository \"api-service\" owned by \"tech-org\" using the workflow ID \"deploy-prod.yml\" on the \"main\" branch with the input parameter \"environment=production\"."}, {"name": "cancel_workflow_run", "server": "Github Actions", "description": "Cancel a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}, "task": "Cancel the workflow run with ID 12345 in the repository named \"example-repo\" owned by the organization \"example-org\"."}, {"name": "rerun_workflow", "server": "Github Actions", "description": "Re-run a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}, "task": "Re-run the GitHub workflow with ID 12345 in the repository \"example-repo\" owned by \"example-org\"."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Glean", "description": "1.提供基于查询的搜索结果列表 2.支持与聊天机器人进行问答交互", "tools": [{"name": "Search", "server": "Glean", "description": "Provides a list of search results given a query.", "parameter": {}, "task": "Search for the top 5 most recent articles about artificial intelligence advancements."}, {"name": "Chat", "server": "Glean", "description": "Enables Q&A interactions with a chatbot.", "parameter": {}, "task": "Ask the chatbot to explain the concept of quantum computing in simple terms."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Gmail", "description": "Gmail邮件管理，包括：发送邮件、草稿创建、邮件内容检索、邮件搜索、标签管理（创建/更新/删除）、批量邮件操作（标签修改/删除）", "tools": [{"name": "send_email", "server": "Gmail", "description": "Sends a new email immediately.", "parameter": {"to": "(array) List of recipient email addresses", "subject": "(string) Subject of the email", "body": "(string) Body content of the email", "cc": "(Optional, array) List of CC recipient email addresses", "bcc": "(Optional, array) List of BCC recipient email addresses"}, "task": "Send an email to john.doe@example.com and jane.smith@example.com with the subject \"Project Update: Q2 2024\" and the body \"Please find attached the quarterly project report for your review.\" Include marketing.team@example.com in CC."}, {"name": "draft_email", "server": "Gmail", "description": "Creates a draft email without sending it.", "parameter": {"to": "(array) List of recipient email addresses", "subject": "(string) Subject of the email", "body": "(string) Body content of the email", "cc": "(Optional, array) List of CC recipient email addresses"}, "task": "Compose a draft email with the subject \"Project Update Meeting\" addressed to [\"team@example.com\"], CC [\"manager@example.com\"], and the body \"Please find attached the latest project updates for review before our meeting tomorrow.\""}, {"name": "read_email", "server": "Gmail", "description": "Retrieves the content of a specific email by its ID.", "parameter": {"messageId": "(string) ID of the email message"}, "task": "Retrieve the content of the email with the message ID \"ABC123XYZ\"."}, {"name": "search_emails", "server": "Gmail", "description": "Searches for emails using Gmail search syntax.", "parameter": {"query": "(string) Gmail search query", "maxResults": "(Optional, integer) Maximum number of results to return"}, "task": "Search for the 10 most recent emails containing the keyword \"invoice\" in the subject line using Gmail search syntax."}, {"name": "modify_email", "server": "Gmail", "description": "Adds or removes labels from emails (move to different folders, archive, etc.).", "parameter": {"messageId": "(string) ID of the email message", "addLabelIds": "(array) List of label IDs to add", "removeLabelIds": "(array) List of label IDs to remove"}, "task": "Move the email with ID \"ABC123\" to the \"Archive\" folder by adding the corresponding label and removing the \"Inbox\" label."}, {"name": "delete_email", "server": "Gmail", "description": "Permanently deletes an email.", "parameter": {"messageId": "(string) ID of the email message"}, "task": "Permanently delete the email with the message ID \"ABC123XYZ456\"."}, {"name": "list_email_labels", "server": "Gmail", "description": "Retrieves all available Gmail labels.", "parameter": {}, "task": "List all available labels in the connected Gmail account."}, {"name": "create_label", "server": "Gmail", "description": "Creates a new Gmail label.", "parameter": {"name": "(string) Name of the label", "messageListVisibility": "(string) Visibility setting for message list (show or hide)", "labelListVisibility": "(string) Visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}, "task": "Create a new Gmail label named \"Important\" with message list visibility set to \"show\" and label list visibility set to \"labelShowIfUnread\"."}, {"name": "update_label", "server": "Gmail", "description": "Updates an existing Gmail label.", "parameter": {"id": "(string) ID of the label", "name": "(string) New name of the label", "messageListVisibility": "(string) New visibility setting for message list (show or hide)", "labelListVisibility": "(string) New visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}, "task": "Update the Gmail label with ID 'Label_123' to have the new name 'Important', set the message list visibility to 'show', and the label list visibility to 'labelShowIfUnread'."}, {"name": "delete_label", "server": "Gmail", "description": "Deletes a Gmail label.", "parameter": {"id": "(string) ID of the label"}, "task": "Delete the Gmail label with the ID 'Label_12345'."}, {"name": "get_or_create_label", "server": "Gmail", "description": "Gets an existing label by name or creates it if it doesn't exist.", "parameter": {"name": "(string) Name of the label", "messageListVisibility": "(string) Visibility setting for message list (show or hide)", "labelListVisibility": "(string) Visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}, "task": "Create a label named \"Important\" with visibility settings set to show in the message list and labelShowIfUnread in the label list."}, {"name": "batch_modify_emails", "server": "Gmail", "description": "Modifies labels for multiple emails in efficient batches.", "parameter": {"messageIds": "(array) List of email message IDs", "addLabelIds": "(array) List of label IDs to add", "removeLabelIds": "(array) List of label IDs to remove", "batchSize": "(Optional, integer) Number of emails to process in each batch"}, "task": "Add the label \"Important\" and remove the label \"Draft\" from the selected 50 emails in batches of 10."}, {"name": "batch_delete_emails", "server": "Gmail", "description": "Permanently deletes multiple emails in efficient batches.", "parameter": {"messageIds": "(array) List of email message IDs", "batchSize": "(Optional, integer) Number of emails to process in each batch"}, "task": "Permanently delete 50 emails in batches of 10, using their respective message IDs."}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "Gmail Headless", "description": "Gmail邮件操作,包括:刷新访问令牌、获取最近邮件、获取完整邮件内容、发送邮件", "tools": [{"name": "gmail_refresh_token", "server": "Gmail Headless", "description": "Refreshes the access token using the refresh token, client ID, and client secret.", "parameter": {"google_refresh_token": "(string) The refresh token used to obtain a new access token.", "google_client_id": "(string) The client ID obtained from Google API credentials.", "google_client_secret": "(string) The client secret obtained from Google API credentials."}, "task": "Generate a new access token using the provided refresh token, client ID, and client secret for Gmail API authentication."}, {"name": "get_recent_emails", "server": "Gmail Headless", "description": "Retrieves recent emails with the first 1k characters of each email body.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "max_results": "(Optional, integer) The maximum number of emails to retrieve. Default is 5.", "unread_only": "(Optional, boolean) Whether to retrieve only unread emails. Default is false."}, "task": "Retrieve the first 3 unread emails from the connected Gmail account, including the initial 1000 characters of each email body."}, {"name": "get_full_email_body_content", "server": "Gmail Headless", "description": "Retrieves the full content of an email in chunks of 1k characters.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "message_id": "(string) The unique identifier of the email message.", "offset": "(integer) The starting point in the email body for the chunk to be retrieved."}, "task": "Retrieve the full content of the email with ID \"ABC123\" starting from the 2000th character."}, {"name": "send_email", "server": "Gmail Headless", "description": "Sends an email through Gmail.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "to": "(string) The recipient's email address.", "subject": "(string) The subject of the email.", "body": "(string) The plain text body of the email.", "html_body": "(Optional, string) The HTML body of the email."}, "task": "Send an email to \"example@domain.com\" with the subject \"Meeting Reminder\" and a plain text body reminding them about the team meeting scheduled for tomorrow at 10 AM."}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "GOAT", "description": "1. Token swapping and liquidity provision on various platforms (0x, Starknet, Balancer, Balmy, Jupiter, KIM, Uniswap) 2. Wallet and token management (1inch, Crossmint, DeBridge, ERC20/ERC721, SPL, Starknet tokens) 3. NFT operations (Crossmint, Magic Eden, OpenSea, Solana NFTs) 4. Financial services (Hedgey rewards, Ionic borrowing/lending, Lulo USDC deposits, Polymarket betting, Pump.fun token launches) 5. Data and insights (Allora price predictions, BirdEye/BMX token insights, CoinGecko/Coinmarketcap coin info, Dexscreener token info, Nansen info, Synth Subnet price data) 6. Blockchain interactions (Cosmos tokens, Irys datachain, JSON RPC, SNS, Zilliqa) 7. Governance and proposals (Mode governance, voting, token spraying) 8. Casino games (BetSwirl) 9. Physical asset purchases (Worldstore) 10. Address management (ENS resolution, ZeroDev global address)", "tools": [{"name": "Get quotes and swap on 0x", "server": "GOAT", "description": "Allows agents to get quotes and perform swaps using the 0x protocol.", "parameter": {}, "task": "Get a quote for swapping 1 ETH to USDC using the 0x protocol."}, {"name": "Get the balances of a wallet using 1inch API", "server": "GOAT", "description": "Retrieves the balances of a wallet using the 1inch API.", "parameter": {}, "task": "Retrieve the current token balances for the specified Ethereum wallet address using the 1inch API."}, {"name": "Get price predictions using Allora API", "server": "GOAT", "description": "Fetches price predictions using the Allora API.", "parameter": {}, "task": "Fetch the latest price predictions for cryptocurrencies using the Allora API."}, {"name": "Swap tokens on Starknet", "server": "GOAT", "description": "Enables token swapping on the Starknet network.", "parameter": {}, "task": "Swap 100 USDC for ETH on the Starknet network."}, {"name": "Swap tokens and provide liquidity on Balancer", "server": "GOAT", "description": "Facilitates token swapping and liquidity provision on Balancer.", "parameter": {}, "task": "Swap 100 USDC for DAI and add the resulting tokens to a liquidity pool on Balancer."}, {"name": "Swap tokens on Balmy", "server": "GOAT", "description": "Allows token swapping on the Balmy platform.", "parameter": {}, "task": "Swap 100 USDC for ETH on the Balmy platform."}, {"name": "Play casino games", "server": "GOAT", "description": "Enables agents to play casino games using the BetSwirl platform.", "parameter": {}, "task": "Play a round of blackjack on the BetSwirl platform."}, {"name": "Get token insights using BirdEye API", "server": "GOAT", "description": "Provides token insights using the BirdEye API.", "parameter": {}, "task": "Retrieve the latest insights for the top 5 trending tokens in the market."}, {"name": "Get token insights using BMX API", "server": "GOAT", "description": "Fetches token insights using the BMX API.", "parameter": {}, "task": "Fetch insights for the top 10 tokens using the BMX API."}, {"name": "Get coin information using CoinGecko API", "server": "GOAT", "description": "Retrieves coin information using the CoinGecko API.", "parameter": {}, "task": "Retrieve the latest market data for Bitcoin using the CoinGecko API."}, {"name": "Get coin information using Coinmarketcap API", "server": "GOAT", "description": "Fetches coin information using the Coinmarketcap API.", "parameter": {}, "task": "Retrieve the latest market data for the top 10 cryptocurrencies by market capitalization."}, {"name": "Interact with Cosmos tokens", "server": "GOAT", "description": "Enables interaction with Cosmos tokens.", "parameter": {}, "task": "Transfer 100 ATOM tokens from one Cosmos wallet address to another."}, {"name": "Purchase any NFT on any chain using Crossmint", "server": "GOAT", "description": "Allows the purchase of NFTs on any supported chain using Crossmint.", "parameter": {}, "task": "Purchase an NFT from the Ethereum blockchain using Crossmint's multi-chain support."}, {"name": "Create a wallet, mint tokens and get test tokens on any chain using Crossmint", "server": "GOAT", "description": "Facilitates the creation of wallets, minting of tokens, and retrieval of test tokens on any supported chain using Crossmint.", "parameter": {}, "task": "Create a new wallet and mint 100 test tokens on the Ethereum chain using Crossmint."}, {"name": "Bridge tokens on DeBridge", "server": "GOAT", "description": "Enables token bridging on the DeBridge network.", "parameter": {}, "task": "Bridge 100 USDC tokens from Ethereum to Polygon using DeBridge."}, {"name": "Get token information using Dexscreener API", "server": "GOAT", "description": "Provides token information using the Dexscreener API.", "parameter": {}, "task": "Retrieve the latest price and trading volume data for the top 5 trending tokens on the Ethereum network."}, {"name": "Push based real time data streams", "server": "GOAT", "description": "Enables push-based real-time data streams.", "parameter": {}, "task": "Set up a push-based real-time data stream to monitor and deliver live updates from the connected data source."}, {"name": "Resolve ENS names to addresses", "server": "GOAT", "description": "Resolves ENS names to their corresponding addresses.", "parameter": {}, "task": "Resolve the Ethereum address associated with the ENS name 'example.eth'."}, {"name": "Find the most optimal route between tokens", "server": "GOAT", "description": "Finds the most optimal route for token swaps.", "parameter": {}, "task": "Find the most efficient path for swapping between the specified cryptocurrency tokens."}, {"name": "Interact with any ERC20 token", "server": "GOAT", "description": "Enables interaction with ERC20 tokens.", "parameter": {}, "task": "Transfer 100 units of an ERC20 token from one wallet address to another."}, {"name": "Interact with any ERC721 token", "server": "GOAT", "description": "Enables interaction with ERC721 tokens.", "parameter": {}, "task": "Transfer ownership of an ERC721 token from one Ethereum wallet address to another."}, {"name": "Get transaction information using Etherscan API", "server": "GOAT", "description": "Retrieves transaction information using the Etherscan API.", "parameter": {}, "task": "Retrieve the latest 10 transactions from the Ethereum blockchain using Etherscan."}, {"name": "Read and post casts on Farcaster", "server": "GOAT", "description": "Enables reading and posting casts on the Farcaster platform.", "parameter": {}, "task": "Read the latest 10 casts from the Farcaster platform and post a new cast with the content \"Excited to join the Farcaster community!\"."}, {"name": "Claim rewards on Hedgey", "server": "GOAT", "description": "Allows claiming of rewards on the Hedgey platform.", "parameter": {}, "task": "Claim all available rewards on the Hedgey platform."}, {"name": "Borrow and lend on Ionic", "server": "GOAT", "description": "Enables borrowing and lending on the Ionic platform.", "parameter": {}, "task": "Borrow 1000 USDC on the Ionic platform with a 30-day repayment term."}, {"name": "Create positions on Ironclad", "server": "GOAT", "description": "Facilitates the creation of positions on Ironclad.", "parameter": {}, "task": "Create a new position entry in the Ironclad system for the upcoming project manager role."}, {"name": "Interact with Irys datachain", "server": "GOAT", "description": "Enables interaction with the Irys datachain.", "parameter": {}, "task": "Upload a document to the Irys datachain for decentralized storage."}, {"name": "Call any JSON RPC endpoint", "server": "GOAT", "description": "Allows calling of any JSON RPC endpoint.", "parameter": {}, "task": "Call the JSON RPC endpoint to retrieve the latest block information from a blockchain node."}, {"name": "Swap tokens on Jupiter", "server": "GOAT", "description": "Enables token swapping on the Jupiter platform.", "parameter": {}, "task": "Swap 100 USDC for SOL on the Jupiter platform."}, {"name": "Swap tokens on KIM", "server": "GOAT", "description": "Allows token swapping on the KIM platform.", "parameter": {}, "task": "Swap 100 KIM tokens for the equivalent amount of ETH on the KIM platform."}, {"name": "Deposit USDC on Lulo", "server": "GOAT", "description": "Enables depositing of USDC on the Lulo platform.", "parameter": {}, "task": "Deposit 100 USDC into the connected wallet on the Lulo platform."}, {"name": "Cross-chain token swap using Mayan SDK", "server": "GOAT", "description": "Facilitates cross-chain token swaps using the Mayan SDK.", "parameter": {}, "task": "Swap 100 USDC from Ethereum to Solana using the Mayan SDK."}, {"name": "Create liquidity pools on Meteora", "server": "GOAT", "description": "Enables the creation of liquidity pools on Meteora.", "parameter": {}, "task": "Create a new liquidity pool on the Meteora platform with default settings."}, {"name": "Create a governance proposal on Mode", "server": "GOAT", "description": "Facilitates the creation of governance proposals on Mode.", "parameter": {}, "task": "Create a governance proposal for the upcoming community vote on Mode."}, {"name": "Vote on a governance proposal on Mode", "server": "GOAT", "description": "Enables voting on governance proposals on Mode.", "parameter": {}, "task": "Cast a vote on the latest governance proposal submitted to the Mode platform."}, {"name": "Spray tokens on Mode", "server": "GOAT", "description": "Facilitates the spraying of tokens on Mode.", "parameter": {}, "task": "Spray 100 tokens on the specified Mode network."}, {"name": "Get Nansen information using Nansen API", "server": "GOAT", "description": "Retrieves information using the Nansen API.", "parameter": {}, "task": "Retrieve the latest market insights and analytics data using the Nansen API."}, {"name": "Get nft and sales information using OpenSea API", "server": "GOAT", "description": "Provides NFT and sales information using the OpenSea API.", "parameter": {}, "task": "Retrieve the latest 10 NFT sales data from the OpenSea marketplace."}, {"name": "Create positions on Orca", "server": "GOAT", "description": "Enables the creation of positions on Orca.", "parameter": {}, "task": "Create a new liquidity position on the Orca decentralized exchange platform."}, {"name": "Currency exchange on Zilliqa", "server": "GOAT", "description": "Facilitates currency exchange on the Zilliqa network.", "parameter": {}, "task": "Exchange 100 USDT to ZIL on the Zilliqa network."}, {"name": "Bet on Polymarket", "server": "GOAT", "description": "Enables betting on Polymarket.", "parameter": {}, "task": "Place a bet on the current market with the highest trading volume."}, {"name": "Launch a token on Pump.fun", "server": "GOAT", "description": "Facilitates the launch of tokens on Pump.fun.", "parameter": {}, "task": "Launch a new token on the Pump.fun platform with default parameters."}, {"name": "Create a position on Renzo", "server": "GOAT", "description": "Enables the creation of positions on Renzo.", "parameter": {}, "task": "Create a new position on Renzo with the specified parameters."}, {"name": "Check SPL token validity on Rugcheck", "server": "GOAT", "description": "Checks the validity of SPL tokens using Rugcheck.", "parameter": {}, "task": "Check the validity of an SPL token using Rugcheck's verification service."}, {"name": "Interact with SNS", "server": "GOAT", "description": "Enables interaction with SNS.", "parameter": {}, "task": "Post a message to the SNS topic with the content \"System maintenance scheduled for tomorrow at 2 AM.\""}, {"name": "Purchase NFTs on Magic Eden", "server": "GOAT", "description": "Facilitates the purchase of NFTs on Magic Eden.", "parameter": {}, "task": "Buy a digital artwork NFT from the Solana collection on Magic Eden."}, {"name": "Get NFT information using Solana NFTs API", "server": "GOAT", "description": "Provides NFT information using the Solana NFTs API.", "parameter": {}, "task": "Retrieve the metadata and ownership details of the top 10 most valuable NFTs on the Solana blockchain."}, {"name": "Interact with SPL tokens", "server": "GOAT", "description": "Enables interaction with SPL tokens.", "parameter": {}, "task": "Transfer 100 SPL tokens from one wallet address to another."}, {"name": "Interact with Starknet tokens", "server": "GOAT", "description": "Enables interaction with Starknet tokens.", "parameter": {}, "task": "Transfer 100 Starknet tokens from the sender's wallet to a specified recipient address."}, {"name": "Create streams with Superfluid", "server": "GOAT", "description": "Facilitates the creation of streams using Superfluid.", "parameter": {}, "task": "Create a continuous payment stream between two Ethereum wallet addresses using Superfluid."}, {"name": "Get synthetic price data using Synth Subnet API", "server": "GOAT", "description": "Provides synthetic price data using the Synth Subnet API.", "parameter": {}, "task": "Retrieve the latest synthetic price data for all available assets."}, {"name": "Purchase tokens on Tensor", "server": "GOAT", "description": "Enables the purchase of tokens on Tensor.", "parameter": {}, "task": "Purchase 100 tokens on the Tensor platform."}, {"name": "Swap tokens on Uniswap", "server": "GOAT", "description": "Facilitates token swapping on Uniswap.", "parameter": {}, "task": "Swap 1 ETH for USDC on the Uniswap decentralized exchange."}, {"name": "Create a position on Velodrome", "server": "GOAT", "description": "Enables the creation of positions on Velodrome.", "parameter": {}, "task": "Create a new liquidity position on Velodrome with the specified token pair and desired allocation."}, {"name": "Purchase physical assets on Worldstore", "server": "GOAT", "description": "Facilitates the purchase of physical assets on Worldstore.", "parameter": {}, "task": "Purchase a high-performance laptop with at least 16GB RAM and 512GB SSD storage on Worldstore."}, {"name": "Create a global address on ZeroDev", "server": "GOAT", "description": "Enables the creation of a global address on ZeroDev.", "parameter": {}, "task": "Create a new global address using ZeroDev's address generation service."}, {"name": "Interact with Zilliqa", "server": "GOAT", "description": "Enables interaction with the Zilliqa network.", "parameter": {}, "task": "Send a test transaction on the Zilliqa network to verify connectivity and functionality."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Godot", "description": "Godot游戏引擎操作,包括:项目编辑与执行、调试输出获取、版本查询、项目管理、场景创建与节点操作、资源加载与导出、UID管理", "tools": [{"name": "launch_editor", "server": "Godot", "description": "Open the Godot editor for a specific project", "parameter": {}, "task": "Open the Godot editor for the current project."}, {"name": "run_project", "server": "Godot", "description": "Execute Godot projects in debug mode", "parameter": {}, "task": "Run the current Godot project in debug mode to test gameplay mechanics."}, {"name": "get_debug_output", "server": "Godot", "description": "Retrieve console output and error messages", "parameter": {}, "task": "Retrieve the latest console output and error messages from the system logs."}, {"name": "stop_project", "server": "Godot", "description": "Stop the execution of a Godot project", "parameter": {}, "task": "Stop the currently running Godot project execution."}, {"name": "get_godot_version", "server": "Godot", "description": "Retrieve the installed Godot version", "parameter": {}, "task": "Check the installed version of the Godot engine currently available on the system."}, {"name": "list_projects", "server": "Godot", "description": "Find Godot projects in a specified directory", "parameter": {}, "task": "List all Godot project files located in the \"Documents/GameDev\" directory."}, {"name": "get_project_info", "server": "Godot", "description": "Get detailed information about project structure", "parameter": {}, "task": "Retrieve the detailed structure and components of the current project."}, {"name": "create_scene", "server": "Godot", "description": "Create new scenes with specified root node types", "parameter": {}, "task": "Create a new scene with a root node type of \"3D environment\" for a game development project."}, {"name": "add_node", "server": "Godot", "description": "Add nodes to existing scenes with customizable properties", "parameter": {}, "task": "Add a new node with customizable properties to the current scene. Ensure the node's position, size, and other relevant attributes are adjustable."}, {"name": "load_sprite", "server": "Godot", "description": "Load sprites and textures into Sprite2D nodes", "parameter": {}, "task": "Load a sprite texture into a Sprite2D node for a 2D game character."}, {"name": "export_mesh_library", "server": "Godot", "description": "Export 3D scenes as MeshLibrary resources for GridMap", "parameter": {}, "task": "Export a 3D scene as a MeshLibrary resource for use in GridMap."}, {"name": "save_scene", "server": "Godot", "description": "Save scenes with options for creating variants", "parameter": {}, "task": "Save the current scene with a variant named \"Sunset Lighting\" to preserve the specific lighting setup."}, {"name": "get_uid", "server": "Godot", "description": "Get UID for specific files (for Godot 4.4+)", "parameter": {}, "task": "Get the UID for all files in the current Godot 4.4+ project directory."}, {"name": "update_project_uids", "server": "Godot", "description": "Update UID references by resaving resources (for Godot 4.4+)", "parameter": {}, "task": "Resave all resources in the Godot 4.4+ project to update UID references."}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Golang Filesystem Server", "description": "File system operations including: reading single/multiple files, writing files, creating directories, listing directory contents, moving/renaming files, searching files/directories, retrieving file metadata, displaying directory structure, and listing accessible directories", "tools": [{"name": "read_file", "server": "Golang Filesystem Server", "description": "Read complete contents of a file", "parameter": {"path": "(string) File path"}, "task": "Read the contents of the file located at \"/var/log/applications/system.log\"."}, {"name": "read_multiple_files", "server": "Golang Filesystem Server", "description": "Read multiple files simultaneously", "parameter": {"paths": "(string[]) Array of file paths"}, "task": "Read the contents of the files located at `/var/log/app.log`, `/var/log/db.log`, and `/var/log/error.log` simultaneously."}, {"name": "write_file", "server": "Golang Filesystem Server", "description": "Create new file or overwrite existing", "parameter": {"path": "(string) File location", "content": "(string) File content"}, "task": "Create a new file at \"/documents/report.txt\" with the content \"Quarterly sales report for Q2 2024: $1.2M revenue.\""}, {"name": "create_directory", "server": "Golang Filesystem Server", "description": "Create new directory or ensure it exists", "parameter": {"path": "(string) Directory path"}, "task": "Create a new directory at the specified path \"/documents/projects/2024\" if it does not already exist."}, {"name": "list_directory", "server": "Golang Filesystem Server", "description": "List directory contents with [FILE] or [DIR] prefixes", "parameter": {"path": "(string) Directory path"}, "task": "List all contents of the directory \"/home/user/documents\" with prefixes indicating whether each item is a file or a directory."}, {"name": "move_file", "server": "Golang Filesystem Server", "description": "Move or rename files and directories", "parameter": {"source": "(string) Source path", "destination": "(string) Destination path"}, "task": "Move the file located at \"/documents/report.txt\" to the \"/archive/2024/reports/\" directory."}, {"name": "search_files", "server": "Golang Filesystem Server", "description": "Recursively search for files/directories", "parameter": {"path": "(string) Starting directory", "pattern": "(string) Search pattern"}, "task": "Search for all PDF files in the \"Documents\" directory and its subdirectories."}, {"name": "get_file_info", "server": "Golang Filesystem Server", "description": "Get detailed file/directory metadata", "parameter": {"path": "(string) File or directory path"}, "task": "Retrieve the metadata for the file located at \"/var/log/system.log\"."}, {"name": "tree", "server": "Golang Filesystem Server", "description": "Returns a hierarchical JSON representation of a directory structure", "parameter": {"path": "(string) Directory to traverse (required)", "depth": "(number) Maximum depth to traverse (default: 3)", "follow_symlinks": "(boolean) Whether to follow symbolic links (default: false)"}, "task": "Generate a hierarchical JSON representation of the directory \"/var/log\" with a maximum depth of 2, excluding symbolic links."}, {"name": "list_allowed_directories", "server": "Golang Filesystem Server", "description": "List all directories the server is allowed to access", "parameter": {}, "task": "List all directories that the server has permission to access."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Goodnews", "description": "Fetch and return a list of positive and uplifting news articles", "tools": [{"name": "fetch_list_of_goodnews", "server": "Goodnews", "description": "Fetches and returns a list of good, positive, and uplifting news articles.", "parameter": {}, "task": "Fetch a list of 10 uplifting and positive news articles from the past week."}], "domains": [{"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Google Calendar", "description": "Calendar event operations, including: listing events, creating events, updating events, deleting events, and finding free time slots", "tools": [{"name": "list_events", "server": "Google Calendar", "description": "List calendar events within a specified time range", "parameter": {}, "task": "List all calendar events scheduled between 2024-01-01 and 2024-12-31."}, {"name": "create_event", "server": "Google Calendar", "description": "Create a new calendar event", "parameter": {}, "task": "Create a new calendar event for a team meeting scheduled for next Monday at 10:00 AM."}, {"name": "update_event", "server": "Google Calendar", "description": "Update an existing calendar event", "parameter": {}, "task": "Update the title of the existing calendar event from \"Team Meeting\" to \"Project Review Meeting\" and change the time from 2:00 PM to 3:30 PM on 2024-07-15."}, {"name": "delete_event", "server": "Google Calendar", "description": "Delete a calendar event", "parameter": {}, "task": "Delete the upcoming meeting scheduled for tomorrow at 2 PM from the calendar."}, {"name": "find_free_time", "server": "Google Calendar", "description": "Find available time slots in the calendar", "parameter": {}, "task": "Find available time slots in the calendar for scheduling a meeting next week."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Google Custom Search", "description": "1.使用Google Custom Search API进行网页搜索 2.从任意网页提取内容", "tools": [{"name": "search", "server": "Google Custom Search", "description": "Perform web searches using Google Custom Search API.", "parameter": {"query": "(string) the search query", "num": "(Optional, integer) the number of results to return, default is 5, max is 10"}, "task": "Search for the top 7 results related to \"best practices for remote team collaboration\" using a web search."}, {"name": "read_webpage", "server": "Google Custom Search", "description": "Extract content from any webpage.", "parameter": {"url": "(string) the URL of the webpage to extract content from"}, "task": "Extract the main article content from the webpage at \"https://example.com/news/latest-updates\"."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Google Sheets", "description": "Google Sheets operations, including: listing spreadsheets, creating spreadsheets, reading/writing data, batch updates, adding rows, managing sheets, fetching multi-sheet data, sharing spreadsheets, and retrieving metadata", "tools": [{"name": "list_spreadsheets", "server": "Google Sheets", "description": "Lists spreadsheets in the configured Drive folder (Service Account) or accessible by the user (OAuth).", "parameter": {}, "task": "List all spreadsheets available in the configured Drive folder or accessible by the current user."}, {"name": "create_spreadsheet", "server": "Google Sheets", "description": "Creates a new spreadsheet.", "parameter": {"title": "(string) The desired title."}, "task": "Create a new spreadsheet with the title \"2024 Annual Budget Report\"."}, {"name": "get_sheet_data", "server": "Google Sheets", "description": "Reads data from a range in a sheet.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string) Name of the sheet.", "range": "(Optional, string) A1 notation (e.g., 'A1:C10', 'Sheet1!B2:D'). If omitted, reads the whole sheet."}, "task": "Read the entire contents of the \"Sales_Data\" sheet from the specified spreadsheet."}, {"name": "update_cells", "server": "Google Sheets", "description": "Writes data to a specific range. Overwrites existing data.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "range": "(string) A1 notation.", "data": "(2D array) Values to write."}, "task": "Update the values in the range B2:D5 of the \"Sales\" sheet in the specified spreadsheet with the provided 2D array of sales data."}, {"name": "batch_update_cells", "server": "Google Sheets", "description": "Updates multiple ranges in one API call.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "ranges": "(object) Dictionary mapping range strings (A1 notation) to 2D arrays of values { 'A1:B2': [[1, 2], [3, 4]], 'D5': [['Hello']] }."}, "task": "Update the values in ranges 'A1:B2' and 'D5' of the specified spreadsheet, setting 'A1:B2' to [[10, 20], [30, 40]] and 'D5' to [['Updated']]."}, {"name": "add_rows", "server": "Google Sheets", "description": "Appends rows to the end of a sheet (after the last row with data).", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "data": "(2D array) Rows to append."}, "task": "Append three new rows of sales data for Q2 2024 to the specified spreadsheet sheet."}, {"name": "list_sheets", "server": "Google Sheets", "description": "Lists all sheet names within a spreadsheet.", "parameter": {"spreadsheet_id": "(string)"}, "task": "List all sheet names in the spreadsheet with ID \"SP123456789\"."}, {"name": "create_sheet", "server": "Google Sheets", "description": "Adds a new sheet (tab) to a spreadsheet.", "parameter": {"spreadsheet_id": "(string)", "title": "(string) Name for the new sheet."}, "task": "Add a new sheet named \"Q2 Financials\" to the specified spreadsheet."}, {"name": "get_multiple_sheet_data", "server": "Google Sheets", "description": "Fetches data from multiple ranges across potentially different spreadsheets in one call.", "parameter": {"queries": "(array of objects) Each object needs `spreadsheet_id`, `sheet`, and `range`. [{spreadsheet_id: 'abc', sheet: 'Sheet1', range: 'A1:B2'}, ...]."}, "task": "Fetch data from the range 'C3:D5' in 'Sheet2' of spreadsheet 'XYZ123' and the range 'A1:B10' in 'Sheet1' of spreadsheet 'ABC456' in a single call."}, {"name": "get_multiple_spreadsheet_summary", "server": "Google Sheets", "description": "Gets titles, sheet names, headers, and first few rows for multiple spreadsheets.", "parameter": {"spreadsheet_ids": "(array of strings)", "rows_to_fetch": "(Optional, integer, default 5) How many rows (including header) to preview."}, "task": "Retrieve the titles, sheet names, headers, and first 5 rows of data for three specified spreadsheet files."}, {"name": "share_spreadsheet", "server": "Google Sheets", "description": "Shares a spreadsheet with specified users/emails and roles.", "parameter": {"spreadsheet_id": "(string)", "recipients": "(array of objects) [{email_address: 'user@example.com', role: 'writer'}, ...]. Roles: reader, commenter, writer.", "send_notification": "(Optional, boolean, default True) Send email notifications."}, "task": "Share the spreadsheet with ID 'SP12345' to the email addresses 'user1@example.com' and 'user2@example.com', granting 'writer' access to both, and send email notifications."}, {"name": "spreadsheet_info", "server": "Google Sheets", "description": "Get basic metadata about a Google Spreadsheet.", "parameter": {"spreadsheet_id": "(string)"}, "task": "Retrieve the title and last modified date of the Google Spreadsheet with ID \"ABC123\"."}], "domains": [{"name": "Office Productivity", "description": "办公生产力工具,涵盖文档编辑、邮件通信、日程管理及团队协作"}]}
{"name": "Google Tasks", "description": "Google Tasks operations, including: search, list, create, update, delete, and clear completed tasks", "tools": [{"name": "search", "server": "Google Tasks", "description": "Search for tasks in Google Tasks", "parameter": {"query": "(string): Search query"}, "task": "Search for tasks containing the keyword \"meeting\" in Google Tasks."}, {"name": "list", "server": "Google Tasks", "description": "List all tasks in Google Tasks", "parameter": {"cursor": "(Optional, string): Cursor for pagination"}, "task": "List all tasks in the connected Google Tasks account, starting from the specified cursor for pagination."}, {"name": "create", "server": "Google Tasks", "description": "Create a new task in Google Tasks", "parameter": {"taskListId": "(Optional, string): Task list ID", "title": "(string, required): Task title", "notes": "(Optional, string): Task notes", "due": "(Optional, string): Due date"}, "task": "Create a new task titled \"Complete project report\" with the note \"Include all references and citations\" and set the due date to \"2024-12-31\" in Google Tasks."}, {"name": "update", "server": "Google Tasks", "description": "Update an existing task in Google Tasks", "parameter": {"taskListId": "(Optional, string): Task list ID", "id": "(string, required): Task ID", "uri": "(string, required): Task URI", "title": "(Optional, string): New task title", "notes": "(Optional, string): New task notes", "status": "(Optional, string): New task status (\"needsAction\" or \"completed\")", "due": "(Optional, string): New due date"}, "task": "Update the task with ID \"TASK123\" in Google Tasks to have a new title \"Complete project report\", set the status to \"completed\", and update the due date to \"2024-07-15\"."}, {"name": "delete", "server": "Google Tasks", "description": "Delete a task in Google Tasks", "parameter": {"taskListId": "(string, required): Task list ID", "id": "(string, required): Task ID"}, "task": "Delete the task with ID \"TSK123\" from the task list identified by \"LIST456\" in Google Tasks."}, {"name": "clear", "server": "Google Tasks", "description": "Clear completed tasks from a Google Tasks task list", "parameter": {"taskListId": "(string, required): Task list ID"}, "task": "Clear all completed tasks from the specified Google Tasks list with ID \"TASK12345\"."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Google Vertex AI Search", "description": "Search documents using Vertex AI Search", "tools": [{"name": "search", "server": "Google Vertex AI Search", "description": "Searches documents using Vertex AI Search.", "parameter": {"--config": "(string) Path to the configuration file.", "--query": "(string) The query to search for."}, "task": "Search for documents related to \"machine learning model optimization\" using the specified configuration file."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "GraphQL Schema", "description": "GraphQL schema exploration and documentation, including: listing query/mutation/subscription fields, getting field definitions in SDL format, listing schema types, getting type definitions, and searching schema by name pattern", "tools": [{"name": "list-query-fields", "server": "GraphQL Schema", "description": "Lists all available root-level fields for GraphQL queries", "parameter": {}, "task": "List all available root-level fields that can be queried in the GraphQL schema."}, {"name": "get-query-field", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific query field in SDL format", "parameter": {}, "task": "Retrieve the detailed SDL definition for the specified query field."}, {"name": "list-mutation-fields", "server": "GraphQL Schema", "description": "Lists all available root-level fields for GraphQL mutations", "parameter": {}, "task": "List all available root-level fields that can be used for mutations in the GraphQL schema."}, {"name": "get-mutation-field", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific mutation field in SDL format", "parameter": {}, "task": "Retrieve the detailed schema definition for a mutation field in GraphQL SDL format."}, {"name": "list-subscription-fields", "server": "GraphQL Schema", "description": "Lists all available root-level fields for GraphQL subscriptions (if present in schema)", "parameter": {}, "task": "List all available root-level fields for GraphQL subscriptions in the current schema."}, {"name": "get-subscription-field", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific subscription field (if present in schema)", "parameter": {}, "task": "Retrieve the detailed definition for the 'billing_address' field in the subscription schema."}, {"name": "list-types", "server": "GraphQL Schema", "description": "Lists all types defined in the GraphQL schema (excluding internal types)", "parameter": {}, "task": "List all publicly available types defined in the GraphQL schema, excluding any internal system types."}, {"name": "get-type", "server": "GraphQL Schema", "description": "Gets detailed definition for a specific GraphQL type in SDL format", "parameter": {}, "task": "Retrieve the detailed schema definition in SDL format for the specified GraphQL type."}, {"name": "get-type-fields", "server": "GraphQL Schema", "description": "Gets a simplified list of fields with their types for a specific GraphQL object type", "parameter": {}, "task": "Retrieve the list of fields along with their data types for the 'User' object type in the GraphQL schema."}, {"name": "search-schema", "server": "GraphQL Schema", "description": "Searches for types or fields in the schema by name pattern (case-insensitive regex)", "parameter": {}, "task": "Search for all schema types or fields that match the pattern \"user.*\" (case-insensitive)."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "HDW LinkedIn", "description": "LinkedIn用户和公司信息检索与管理，包括：用户搜索、个人资料获取、电子邮件查找、帖子检索、反应获取、聊天消息管理、连接邀请发送、帖子评论、连接列表获取、公司搜索和员工检索", "tools": [{"name": "search_linkedin_users", "server": "HDW LinkedIn", "description": "Search for LinkedIn users with various filters.", "parameter": {"keywords": "(optional) Any keyword for search.", "first_name": "(optional) First name.", "last_name": "(optional) Last name.", "title": "(optional) Job title.", "company_keywords": "(optional) Company keywords.", "school_keywords": "(optional) School keywords.", "current_company": "(optional) Current company.", "past_company": "(optional) Past company.", "location": "(optional) Location.", "industry": "(optional) Industry.", "education": "(optional) Education.", "count": "(optional, default: 10) Maximum number of results (max 1000).", "timeout": "(optional, default: 300) Timeout in seconds (20–1500)."}, "task": "Search for 50 LinkedIn users who are currently working at Google as Software Engineers, located in California, and have a degree in Computer Science."}, {"name": "get_linkedin_profile", "server": "HDW LinkedIn", "description": "Retrieve detailed profile information about a LinkedIn user.", "parameter": {"user": "(required) User alias, URL, or URN.", "with_experience": "(optional, default: true)", "with_education": "(optional, default: true)", "with_skills": "(optional, default: true)"}, "task": "Retrieve the detailed profile information of the LinkedIn user with the alias \"john_doe\", including their work experience, education history, and skills."}, {"name": "get_linkedin_email_user", "server": "HDW LinkedIn", "description": "Look up LinkedIn user details by email.", "parameter": {"email": "(required) Email address.", "count": "(optional, default: 5)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the LinkedIn profile details for the user associated with the email \"example@domain.com,\" limiting the results to 3 profiles and setting a timeout of 200 seconds."}, {"name": "get_linkedin_user_posts", "server": "HDW LinkedIn", "description": "Retrieve posts for a LinkedIn user by URN.", "parameter": {"urn": "(required) User URN (must include prefix, e.g. fsd_profile:...).", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the latest 15 posts from the LinkedIn user with the URN \"fsd_profile:123456789\" within a 400-second timeout."}, {"name": "get_linkedin_user_reactions", "server": "HDW LinkedIn", "description": "Retrieve reactions for a LinkedIn user by URN.", "parameter": {"urn": "(required)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the latest 15 reactions for the LinkedIn user with the specified URN, using a timeout of 200 seconds."}, {"name": "get_linkedin_chat_messages", "server": "HDW LinkedIn", "description": "Retrieve top chat messages from the LinkedIn management API.", "parameter": {"user": "(required) User URN (with prefix).", "count": "(optional, default: 20)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the latest 15 chat messages for the LinkedIn user with URN \"urn:li:user:12345\"."}, {"name": "send_linkedin_chat_message", "server": "HDW LinkedIn", "description": "Send a chat message using the LinkedIn management API.", "parameter": {"user": "(required) Recipient user URN (with prefix).", "text": "(required) Message text.", "timeout": "(optional, default: 300)"}, "task": "Send a chat message to the LinkedIn user with URN \"urn:li:user:12345\" containing the text \"Hello, I would like to discuss potential collaboration opportunities.\" Set the timeout to 200 seconds."}, {"name": "send_linkedin_connection", "server": "HDW LinkedIn", "description": "Send a connection invitation to a LinkedIn user.", "parameter": {"user": "(required)", "timeout": "(optional, default: 300)"}, "task": "Send a connection invitation to the LinkedIn user with the username \"john_doe\" within a 300-second timeout period."}, {"name": "send_linkedin_post_comment", "server": "HDW LinkedIn", "description": "Create a comment on a LinkedIn post or reply.", "parameter": {"text": "(required) Comment text.", "urn": "(required) Activity or comment URN.", "timeout": "(optional, default: 300)"}, "task": "Reply to the LinkedIn post with URN \"12345\" using the comment \"Great insights! Looking forward to more updates on this topic.\" and set a timeout of 200 seconds."}, {"name": "get_linkedin_user_connections", "server": "HDW LinkedIn", "description": "Retrieve a list of LinkedIn user connections.", "parameter": {"connected_after": "(optional) Timestamp filter.", "count": "(optional, default: 20)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the latest 15 LinkedIn connections made after 2024-01-01."}, {"name": "get_linkedin_post_reposts", "server": "HDW LinkedIn", "description": "Retrieve reposts for a LinkedIn post.", "parameter": {"urn": "(required) Post URN (must start with activity:).", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the latest 15 reposts for the LinkedIn post with URN \"activity:123456789\"."}, {"name": "get_linkedin_post_comments", "server": "HDW LinkedIn", "description": "Retrieve comments for a LinkedIn post.", "parameter": {"urn": "(required)", "sort": "(optional, default: relevance; allowed values: relevance, recent)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": "Retrieve the 15 most recent comments for a specified LinkedIn post, sorted by relevance."}, {"name": "get_linkedin_google_company", "server": "HDW LinkedIn", "description": "Search for LinkedIn companies via Google – the first result is typically the best match.", "parameter": {"keywords": "(required) Array of company keywords.", "with_urn": "(optional, default: false)", "count_per_keyword": "(optional, default: 1; range 1–10)", "timeout": "(optional, default: 300)"}, "task": "Search for the top 3 LinkedIn company matches using the keywords \"tech startup\" and \"San Francisco,\" including their URN identifiers."}, {"name": "get_linkedin_company", "server": "HDW LinkedIn", "description": "Retrieve detailed information about a LinkedIn company.", "parameter": {"company": "(required) Company alias, URL, or URN.", "timeout": "(optional, default: 300)"}, "task": "Retrieve the latest details for the LinkedIn company with the alias \"TechCorp\" within a 300-second timeout."}, {"name": "get_linkedin_company_employees", "server": "HDW LinkedIn", "description": "Retrieve employees of a LinkedIn company.", "parameter": {"companies": "(required) Array of company URNs.", "keywords": "(optional)", "first_name": "(optional)", "last_name": "(optional)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}, "task": "Retrieve a list of 15 employees from the specified LinkedIn company URNs, filtering for those with the first name \"John\" and the last name \"Doe\"."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Heurist Mesh Agent", "description": "1. Search for token information and market data using CoinGecko ID 2. Get trading pair info and basic token info from DexScreener 3. Search and analyze Twitter accounts and mentions 4. Perform web search and answer operations using Exa's API 5. Fetch security details of blockchain token contracts", "tools": [{"name": "get_coingecko_id", "server": "Heurist Mesh Agent", "description": "Search for a token by name to get its CoinGecko ID", "parameter": {"token_name": "(string) The token name to search for"}, "task": "Find the CoinGecko ID for the token named \"Ethereum\"."}, {"name": "get_token_info", "server": "Heurist Mesh Agent", "description": "Get detailed token information and market data using CoinGecko ID (you can't use the token address or name or symbol)", "parameter": {"coingecko_id": "(string) The CoinGecko ID of the token"}, "task": "Retrieve the current market data and detailed information for the token with CoinGecko ID \"ethereum\"."}, {"name": "get_trending_coins", "server": "Heurist Mesh Agent", "description": "Get the current top trending cryptocurrencies on CoinGecko", "parameter": {}, "task": "Retrieve the top 5 trending cryptocurrencies by market interest from CoinGecko."}, {"name": "get_specific_pair_info", "server": "Heurist Mesh Agent", "description": "Get trading pair info by chain and pair address on DexScreener", "parameter": {"chain": "(string) Chain identifier (e.g., solana, bsc, ethereum, base)", "pair_address": "(string) The pair contract address to look up"}, "task": "Retrieve the trading pair details for the contract address '0x123abc' on the Ethereum blockchain."}, {"name": "get_token_pairs", "server": "Heurist Mesh Agent", "description": "Get the trading pairs by chain and token address on DexScreener", "parameter": {"chain": "(string) Chain identifier (e.g., solana, bsc, ethereum, base)", "token_address": "(string) The token contract address to look up all pairs for"}, "task": "Retrieve all trading pairs associated with the token address '0x123abc' on the Ethereum chain using DexScreener."}, {"name": "get_token_profiles", "server": "Heurist Mesh Agent", "description": "Get the basic info of the latest tokens from DexScreener", "parameter": {}, "task": "Retrieve the latest token profiles including their basic information from DexScreener."}, {"name": "search_pairs", "server": "Heurist Mesh Agent", "description": "Search for trading pairs on DexScreener by token name, symbol, or address", "parameter": {"search_term": "(string) Search term (token name, symbol, or address)"}, "task": "Search for trading pairs on DexScreener using the token symbol \"ETH\"."}, {"name": "get_trending_tokens", "server": "Heurist Mesh Agent", "description": "Get current trending tokens on Twitter", "parameter": {"time_window": "(string) Time window to analyze"}, "task": "Identify the trending tokens on Twitter within the last 24 hours."}, {"name": "search_account", "server": "Heurist Mesh Agent", "description": "Analyze a Twitter account with both mention search and account stats", "parameter": {"username": "(string) Twitter username to analyze (without @)", "days_ago": "(integer) Number of days to look back for mentions", "limit": "(integer) Maximum number of mention results"}, "task": "Analyze the Twitter account \"tech_news\" for mentions in the past 7 days, retrieving up to 50 results. Include account statistics in the analysis."}, {"name": "search_mentions", "server": "Heurist Mesh Agent", "description": "Search for mentions of specific tokens or topics on Twitter", "parameter": {"keywords": "(array) List of keywords to search for", "days_ago": "(integer) Number of days to look back", "limit": "(integer) Maximum number of results (minimum: 20)"}, "task": "Search for recent mentions of \"climate change\" and \"renewable energy\" on Twitter from the past 7 days, retrieving a maximum of 50 results."}, {"name": "answer", "server": "Heurist Mesh Agent", "description": "Get a direct answer to a question using Exa's answer API", "parameter": {"question": "(string) The question to answer"}, "task": "Answer the question \"What is the capital of France?\" using Exa's answer API."}, {"name": "search", "server": "Heurist Mesh Agent", "description": "Search for webpages related to a query", "parameter": {"search_term": "(string) The search term", "limit": "(integer) Maximum number of results to return (default: 10)"}, "task": "Search for the top 5 most relevant webpages related to \"best practices for sustainable agriculture\"."}, {"name": "search_and_answer", "server": "Heurist Mesh Agent", "description": "Perform both search and answer operations for a query", "parameter": {"topic": "(string) The topic to search for and answer"}, "task": "Search for and provide a detailed answer about the latest advancements in quantum computing."}, {"name": "execute_search", "server": "Heurist Mesh Agent", "description": "Execute a web search query by reading the web pages", "parameter": {"search_term": "(string) The search term to execute"}, "task": "Search for the latest advancements in quantum computing technology."}, {"name": "generate_queries", "server": "Heurist Mesh Agent", "description": "Generate related search queries for a topic that can expand the research", "parameter": {"topic": "(string) The main topic to research", "num_queries": "(integer) Number of queries to generate"}, "task": "Generate 5 related search queries to expand research on the topic of \"sustainable urban development.\""}, {"name": "fetch_security_details", "server": "Heurist Mesh Agent", "description": "Fetch security details of a blockchain token contract", "parameter": {"contract_address": "(string) The token contract address", "chain_id": "(['integer', 'string']) The blockchain chain ID or 'solana' for Solana tokens. Supported chains: Ethereum (1), Optimism (10), Cronos (25), BSC (56), Gnosis (100), HECO (128), Polygon (137), Fantom (250), KCC (321), zkSync Era (324), ETHW (10001), FON (201022), Arbitrum (42161), Avalanche (43114), Linea Mainnet (59144), Base (8453), Tron (tron), Scroll (534352), opBNB (204), Mantle (5000), ZKFair (42766), Blast (81457), Manta Pacific (169), Berachain Artio Testnet (80085), Merlin (4200), Bitlayer Mainnet (200901), zkLink Nova (810180), X Layer Mainnet (196), Solana (solana)"}, "task": "Fetch the security details of the token contract with address '0x123abc' on the Ethereum blockchain (chain ID 1)."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "Holaspirit", "description": "Holaspirit组织管理工具集，包括：任务列表、指标列表、圈子列表与详情、角色列表与详情、域列表、政策列表、会议列表与详情、成员动态获取、会议紧张关系获取、成员搜索", "tools": [{"name": "holaspirit_list_tasks", "server": "Holaspirit", "description": "List all tasks in the organization", "parameter": {}, "task": "List all tasks currently assigned within the organization."}, {"name": "holaspirit_list_metrics", "server": "Holaspirit", "description": "List all metrics in the organization", "parameter": {}, "task": "List all available metrics for the current organization in Holaspirit."}, {"name": "holaspirit_list_circles", "server": "Holaspirit", "description": "List all circles in the organization", "parameter": {}, "task": "List all circles within the organization's current structure."}, {"name": "holaspirit_get_circle", "server": "Holaspirit", "description": "Get details of a specific circle", "parameter": {}, "task": "Retrieve the details of a specific organizational circle in Holaspirit."}, {"name": "holaspirit_list_roles", "server": "Holaspirit", "description": "List all roles in the organization", "parameter": {}, "task": "List all roles currently defined in the organization's structure."}, {"name": "holaspirit_get_role", "server": "Holaspirit", "description": "Get details of a specific role", "parameter": {}, "task": "Retrieve the details of the specified role in the Holaspirit platform."}, {"name": "holaspirit_list_domains", "server": "Holaspirit", "description": "List all domains in the organization", "parameter": {}, "task": "List all organizational domains currently defined in the system."}, {"name": "holaspirit_list_policies", "server": "Holaspirit", "description": "List all policies in the organization", "parameter": {}, "task": "List all the policies currently defined in the organization's governance structure."}, {"name": "holaspirit_list_meetings", "server": "Holaspirit", "description": "List all meetings in the organization", "parameter": {}, "task": "List all scheduled meetings within the organization's Holaspirit platform."}, {"name": "holaspirit_get_meeting", "server": "Holaspirit", "description": "Get details of a specific meeting", "parameter": {}, "task": "Retrieve the details of the most recent meeting recorded in the system."}, {"name": "holaspirit_get_member_feed", "server": "Holaspirit", "description": "Get member feed", "parameter": {}, "task": "Retrieve the latest activity feed for all members in the Holaspirit workspace."}, {"name": "holaspirit_get_tensions", "server": "Holaspirit", "description": "Get tensions for a meeting or meetings", "parameter": {}, "task": "Retrieve all tensions discussed during the most recent team meeting."}, {"name": "holaspirit_search_member", "server": "Holaspirit", "description": "Search for a member by email", "parameter": {}, "task": "Search for a member in the organization using their email address."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Home Assistant", "description": "1.控制Home Assistant设备 2.管理Home Assistant插件 3.管理HACS包 4.管理Home Assistant自动化配置 5.执行指定动作 6.批量执行动作", "tools": [{"name": "control", "server": "Home Assistant", "description": "Controls Home Assistant devices with various commands.", "parameter": {"command": "(string) The command to execute (e.g., 'turn_on', 'turn_off', 'toggle')", "entity_id": "(string) The ID of the entity to control", "brightness": "(Optional, number) Brightness level for lights", "color_temp": "(Optional, number) Color temperature for lights", "rgb_color": "(Optional, array) RGB color for lights"}, "task": "Turn on the living room light and set its brightness to 75% using Home Assistant."}, {"name": "addon", "server": "Home Assistant", "description": "Manages Home Assistant add-ons.", "parameter": {"action": "(string) The action to perform (e.g., 'list', 'install', 'start', 'stop', 'restart')", "slug": "(Optional, string) The slug of the add-on", "version": "(Optional, string) The version of the add-on"}, "task": "Install the latest version of the \"Node-RED\" add-on in Home Assistant."}, {"name": "package", "server": "Home Assistant", "description": "Manages HACS packages.", "parameter": {"action": "(string) The action to perform (e.g., 'list', 'install')", "category": "(string) The category of the package (e.g., 'integration', 'plugin', 'theme', 'python_script', 'appdaemon', 'netdaemon')", "repository": "(Optional, string) The repository of the package", "version": "(Optional, string) The version of the package"}, "task": "List all installed packages in the 'integration' category from the HACS repository."}, {"name": "automation_config", "server": "Home Assistant", "description": "Manages Home Assistant automations.", "parameter": {"action": "(string) The action to perform (e.g., 'create', 'duplicate')", "config": "(Optional, object) Configuration for creating an automation", "automation_id": "(Optional, string) The ID of the automation to duplicate"}, "task": "Create a new automation in Home Assistant that turns on the living room lights at sunset every day."}, {"name": "execute_action", "server": "Home Assistant", "description": "Executes a specified action with given parameters.", "parameter": {"action": "(string) The action to execute", "parameters": "(object) Parameters for the action"}, "task": "Execute the action \"send_email\" with the parameters {\"recipient\": \"john.doe@example.com\", \"subject\": \"Project Update\", \"body\": \"Please find the latest project updates attached.\"}."}, {"name": "batch_actions", "server": "Home Assistant", "description": "Executes multiple actions in sequence.", "parameter": {"actions": "(array) An array of action objects, each containing an action and parameters"}, "task": "Execute a sequence of actions to first fetch the latest customer data, then update their subscription status, and finally send a confirmation email."}], "domains": [{"name": "Home Automation", "description": "智能家居自动化控制，包括设备控制、插件管理、自动化配置及批量操作执行"}]}
{"name": "HubSpot", "description": "HubSpot CRM operations, including: contact/company creation with duplicate prevention, retrieving company/contact activity, fetching recent conversations, and semantic search across HubSpot data", "tools": [{"name": "hubspot_create_contact", "server": "HubSpot", "description": "Create contacts with duplicate prevention", "parameter": {}, "task": "Create a new contact in the CRM system while ensuring no duplicates are added."}, {"name": "hubspot_create_company", "server": "HubSpot", "description": "Create companies with duplicate prevention", "parameter": {}, "task": "Create a new company record in HubSpot, ensuring no duplicates exist in the system."}, {"name": "hubspot_get_company_activity", "server": "HubSpot", "description": "Retrieve activity for specific companies", "parameter": {}, "task": "Retrieve the latest 10 activities for the company with ID 12345 from HubSpot."}, {"name": "hubspot_get_active_companies", "server": "HubSpot", "description": "Retrieve most recently active companies", "parameter": {}, "task": "Retrieve the 10 most recently active companies from the CRM system."}, {"name": "hubspot_get_active_contacts", "server": "HubSpot", "description": "Retrieve most recently active contacts", "parameter": {}, "task": "Retrieve the 50 most recently active contacts from the CRM system."}, {"name": "hubspot_get_recent_conversations", "server": "HubSpot", "description": "Retrieve recent conversation threads with messages", "parameter": {}, "task": "Retrieve the 10 most recent conversation threads along with their associated messages from HubSpot."}, {"name": "hubspot_search_data", "server": "HubSpot", "description": "Semantic search across previously retrieved HubSpot data", "parameter": {}, "task": "Search for customer interactions related to recent product inquiries in the HubSpot database."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "HuggingFace Spaces", "description": "1.使用merve/paligemma2-vqav2空间查询图像中的对象或人物 2.使用microsoft/OmniParser空间分析图像并生成带注释的图像 3.使用shuttleai/shuttle-jaguar空间生成图像 4.使用black-forest-labs/FLUX.1-schnell空间生成图像 5.使用hf-audio/whisper-large-v3-turbo空间转录音频 6.使用Qwen/Qwen2.5-72B-Instruct空间提供聊天功能 7.使用DawnC/PawMatchAI空间执行视觉任务", "tools": [{"name": "use paligemma", "server": "HuggingFace Spaces", "description": "Queries an image using the `merve/paligemma2-vqav2` space to identify objects or people in the image.", "parameter": {"filename": "(string) The filename of the image in the working directory.", "url": "(Optional, string) A URL to an image."}, "task": "Identify the objects or people present in the provided image file located in the working directory."}, {"name": "use omniparser", "server": "HuggingFace Spaces", "description": "Analyzes an image using the `microsoft/OmniParser` space and produces an annotated image along with descriptions and coordinates.", "parameter": {"filename": "(string) The filename of the image in the working directory."}, "task": "Analyze the provided image file to extract annotated descriptions and coordinates of identified elements."}, {"name": "use shuttle-jaguar", "server": "HuggingFace Spaces", "description": "Generates images using the `shuttleai/shuttle-jaguar` space.", "parameter": {}, "task": "Generate an image of a jaguar in a jungle setting using the specified AI model."}, {"name": "use FLUX.1-schnell", "server": "HuggingFace Spaces", "description": "Generates images using the `black-forest-labs/FLUX.1-schnell` space.", "parameter": {}, "task": "Generate a high-resolution fantasy landscape image with a dark forest theme using the specified image generation model."}, {"name": "use whisper-large-v3-turbo", "server": "HuggingFace Spaces", "description": "Transcribes audio using the `hf-audio/whisper-large-v3-turbo` space.", "parameter": {"filename": "(string) The filename of the audio file in the working directory."}, "task": "Transcribe the audio file named \"meeting_recording.mp3\" using the specified transcription model."}, {"name": "use Qwen2.5-72B-Instruct", "server": "HuggingFace Spaces", "description": "Provides chat capabilities using the `Qwen/Qwen2.5-72B-Instruct` space.", "parameter": {}, "task": "Generate a detailed summary of the key themes and insights from the provided research paper on renewable energy technologies."}, {"name": "use PawMatchAI", "server": "HuggingFace Spaces", "description": "Performs vision tasks using the `DawnC/PawMatchAI` space, such as finding matches in images.", "parameter": {"filename": "(string) The filename of the image in the working directory."}, "task": "Find matching objects in the provided image file using the vision task model."}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Hyperliquid", "description": "1. Retrieve mid prices for all coins on Hyperliquid 2. Get historical candlestick data for any token 3. Access the L2 order book for any token", "tools": [{"name": "get_all_mids", "server": "Hyperliquid", "description": "Retrieve mid prices for all coins on Hyperliquid", "parameter": {}, "task": "Retrieve the current mid prices for all available cryptocurrencies on the Hyperliquid exchange."}, {"name": "get_candle_snapshot", "server": "Hyperliquid", "description": "Get historical candlestick data for any token", "parameter": {"coin": "(string) Token symbol", "interval": "(string) Time interval (e.g., '15m', '1h')", "startTime": "(number) Start time in milliseconds since epoch", "endTime": "(Optional, number) End time in milliseconds since epoch"}, "task": "Retrieve the 1-hour candlestick data for Bitcoin (BTC) from January 1, 2024, to January 31, 2024."}, {"name": "get_l2_book", "server": "Hyperliquid", "description": "Access the L2 order book for any token", "parameter": {"symbol": "(string) Token symbol"}, "task": "Retrieve the Level 2 order book data for the token with symbol \"ETH\"."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Image Generation", "description": "Generate images using the Flux model based on text prompts", "tools": [{"name": "generate_image", "server": "Image Generation", "description": "Generates images using the Flux model based on text prompts.", "parameter": {"prompt": "(required) Text description of the image to generate", "seed": "(optional) Random seed for reproducible generation", "aspect_ratio": "(optional) Image aspect ratio (default: '1:1')", "output_format": "(optional) Output format - 'webp', 'jpg', or 'png' (default: 'webp')", "num_outputs": "(optional) Number of images to generate (1-4, default: 1)"}, "task": "Generate an image of a serene mountain lake at sunset with a 16:9 aspect ratio in PNG format."}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "InfluxDB", "description": "1. Write time-series data in line protocol format 2. Execute Flux queries 3. Create a new bucket 4. Create a new organization", "tools": [{"name": "write-data", "server": "InfluxDB", "description": "Write time-series data in line protocol format", "parameter": {"org": "(string) The organization name", "bucket": "(string) The bucket name", "data": "(string) The data in line protocol format", "precision": "(Optional, string) The precision of the timestamps"}, "task": "Write time-series data for CPU usage metrics to the \"server-metrics\" bucket under the \"IT-Operations\" organization, using nanosecond precision. The data should be formatted in line protocol."}, {"name": "query-data", "server": "InfluxDB", "description": "Execute Flux queries", "parameter": {"org": "(string) The organization name", "query": "(string) The Flux query to execute"}, "task": "Query the average CPU usage for the last 24 hours from the specified organization's time-series data using Flux."}, {"name": "create-bucket", "server": "InfluxDB", "description": "Create a new bucket", "parameter": {"name": "(string) The name of the new bucket", "orgID": "(string) The ID of the organization", "retentionPeriodSeconds": "(Optional, number) The retention period in seconds"}, "task": "Create a new storage bucket named \"project-backups\" for organization ID \"org-12345\" with a retention period of 30 days."}, {"name": "create-org", "server": "InfluxDB", "description": "Create a new organization", "parameter": {"name": "(string) The name of the new organization", "description": "(Optional, string) A description of the organization"}, "task": "Create a new organization named \"Tech Innovators\" with the description \"A hub for cutting-edge technology development and collaboration.\""}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Inoyu", "description": "1.获取个人资料 2.更新个人资料属性 3.通过ID获取特定资料 4.搜索资料 5.创建Unomi范围", "tools": [{"name": "get_my_profile", "server": "Inoyu", "description": "Get your profile using environment variables. Automatically generates a session ID based on the current date.", "parameter": {"requireSegments": "(Optional, boolean) Include segment information", "requireScores": "(Optional, boolean) Include scoring information"}, "task": "Retrieve your profile details including segment information but excluding scoring information."}, {"name": "update_my_profile", "server": "Inoyu", "description": "Update properties of your profile. Takes a properties object with key-value pairs to update.", "parameter": {"properties": "(object) Key-value pairs to update, supporting string, number, boolean, and null values"}, "task": "Update your profile by changing the \"location\" property to \"New York\" and the \"status\" property to \"Available\"."}, {"name": "get_profile", "server": "Inoyu", "description": "Retrieve a specific profile by ID. Returns full profile data from Unomi.", "parameter": {"profileId": "(string) Required parameter to specify the profile ID"}, "task": "Retrieve the full profile data for the user with ID \"usr_12345\" from Unomi."}, {"name": "search_profiles", "server": "Inoyu", "description": "Search for profiles using a query string and optional limit/offset parameters. Searches across firstName, lastName, and email fields.", "parameter": {"query": "(string) Query string to search for profiles", "limit": "(Optional, number) Limit the number of results", "offset": "(Optional, number) Offset for pagination"}, "task": "Search for profiles matching the query \"John Doe\" and return the first 10 results."}, {"name": "create_scope", "server": "Inoyu", "description": "Create a new Unomi scope. Required for event tracking and profile updates.", "parameter": {"scope": "(string) Identifier for the new scope", "name": "(Optional, string) Name of the new scope", "description": "(Optional, string) Description of the new scope"}, "task": "Create a new scope with the identifier \"customer_support\" for tracking user interactions in the support system, including an optional name and description."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Intercom", "description": "1. Retrieve conversations within a date range with content filtering 2. Find conversations for a specific customer 3. Retrieve tickets by status 4. Find tickets associated with a specific customer", "tools": [{"name": "list_conversations", "server": "Intercom", "description": "Retrieves all conversations within a date range with content filtering.", "parameter": {"startDate": "(DD/MM/YYYY) Start date (required)", "endDate": "(DD/MM/YYYY) End date (required)", "keyword": "(string) Filter to include conversations with this text", "exclude": "(string) Filter to exclude conversations with this text"}, "task": "Retrieve all conversations between 01/01/2024 and 31/01/2024 that include the keyword \"urgent\" but exclude any containing the word \"meeting\"."}, {"name": "search_conversations_by_customer", "server": "Intercom", "description": "Finds conversations for a specific customer.", "parameter": {"customerIdentifier": "(string) Customer email or Intercom ID (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date", "keywords": "(array) Optional keywords to filter by content"}, "task": "Find all conversations for the customer with email \"john.doe@example.com\" between 01/01/2024 and 31/12/2024 that contain the keywords \"refund\" or \"return\"."}, {"name": "search_tickets_by_status", "server": "Intercom", "description": "Retrieves tickets by their status.", "parameter": {"status": "(string) 'open', 'pending', or 'resolved' (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date"}, "task": "Retrieve all open tickets created between 01/01/2024 and 31/12/2024."}, {"name": "search_tickets_by_customer", "server": "Intercom", "description": "Finds tickets associated with a specific customer.", "parameter": {"customerIdentifier": "(string) Customer email or Intercom ID (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date"}, "task": "Find all tickets associated with the customer with email \"john.doe@example.com\" between 01/01/2024 and 31/12/2024."}], "domains": [{"name": "Customer Support Management", "description": "Customer support operations, including conversation retrieval, ticket management, and customer-specific queries"}]}
{"name": "iOS Simulator", "description": "Process natural language instructions and perform corresponding actions on the iOS simulator", "tools": [{"name": "processInstruction", "server": "iOS Simulator", "description": "Processes a natural language instruction and performs the corresponding action on the iOS simulator.", "parameter": {"instruction": "(string) The natural language command to execute."}, "task": "Simulate tapping the \"Settings\" app icon on the iOS home screen."}], "domains": [{"name": "Remote Desktop Control", "description": "远程桌面控制，包括屏幕捕获、输入模拟（键盘/鼠标）、应用程序控制及自动化操作"}]}
{"name": "iTerm MCP", "description": "1.在iTerm终端中写入命令并返回输出行数 2.从iTerm终端读取指定行数的输出 3.向iTerm终端发送控制字符", "tools": [{"name": "write_to_terminal", "server": "iTerm MCP", "description": "Writes to the active iTerm terminal, often used to run a command. Returns the number of lines of output produced by the command.", "parameter": {}, "task": "Write \"Hello, World!\" to the active terminal and count the number of lines in the output."}, {"name": "read_terminal_output", "server": "iTerm MCP", "description": "Reads the requested number of lines from the active iTerm terminal.", "parameter": {}, "task": "Read the last 15 lines of output from the active terminal session."}, {"name": "send_control_character", "server": "iTerm MCP", "description": "Sends a control character to the active iTerm terminal.", "parameter": {}, "task": "Send a control character to the currently active terminal session in iTerm."}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}]}
{"name": "JDBC", "description": "1.通过JDBC URL存储和检索数据库数据 2.检查运行中的JVM进程 3.从文件系统提供文件服务 4.使用JavaFX创建绘图画布 5.与Kubernetes集群交互 6.使用Docker/Podman/OCI兼容容器引擎 7.通过Wolfram Alpha LLM API进行优化的网络搜索", "tools": [{"name": "jdbc", "server": "JDBC", "description": "A server for storing and retrieving data from a database via a JDBC URL.", "parameter": {}, "task": "Retrieve all customer records from the connected database using JDBC."}, {"name": "jvminsight", "server": "JDBC", "description": "A server for inspecting a running JVM process.", "parameter": {}, "task": "Inspect the running JVM process to gather performance metrics and thread details."}, {"name": "filesystem", "server": "JDBC", "description": "A server for serving files from a file system.", "parameter": {"path1": "(string) Path to the first directory to serve", "path2": "(Optional, string) Path to an additional directory to serve"}, "task": "Serve files from the directory \"/var/www/html\" and optionally from \"/home/user/downloads\" on the local file system."}, {"name": "jfx", "server": "JDBC", "description": "A server that exposes a canvas for making drawings using JavaFX.", "parameter": {}, "task": "Draw a simple rectangle on the JavaFX canvas."}, {"name": "kubernetes", "server": "JDBC", "description": "A server for interacting with a Kubernetes cluster.", "parameter": {}, "task": "Deploy a new application with 3 replicas to the Kubernetes cluster."}, {"name": "containers", "server": "JDBC", "description": "A server for working with Docker/Podman/OCI compatible container engines.", "parameter": {}, "task": "Run a containerized application using a compatible container engine."}, {"name": "wolfram", "server": "JDBC", "description": "A server for performing web searches optimized for use by a large language model through the Wolfram Alpha LLM API.", "parameter": {}, "task": "Search for the latest advancements in quantum computing using the Wolfram Alpha API."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "JSON", "description": "1. Query JSON data using JSONPath syntax with extended operations 2. Filter JSON data using conditions", "tools": [{"name": "query", "server": "JSON", "description": "Query JSON data using JSONPath syntax with extended operations", "parameter": {"url": "(string) URL of the JSON data source", "jsonPath": "(string) JSONPath expression with optional operations"}, "task": "Extract the names of all employees with a salary greater than 50000 from the JSON data located at \"https://example.com/employees.json\" using JSONPath."}, {"name": "filter", "server": "JSON", "description": "Filter JSON data using conditions", "parameter": {"url": "(string) URL of the JSON data source", "jsonPath": "(string) Base JSONPath expression", "condition": "(string) Filter condition"}, "task": "Filter the JSON data from the specified URL to retrieve all entries where the \"status\" field equals \"active\" using the provided JSONPath expression."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "KiCad MCP", "description": "1. Launch KiCad with a specific project 2. Run design rule checks on a specified PCB project", "tools": [{"name": "open_project", "server": "KiCad MCP", "description": "Launches KiCad with a specific project.", "parameter": {"project_path": "(string) Path to the KiCad project file (.kicad_pro)"}, "task": "Open the KiCad project located at \"/home/user/projects/led_controller/led_controller.kicad_pro\"."}, {"name": "run_drc", "server": "KiCad MCP", "description": "Runs design rule checks on a specified PCB project and compares results.", "parameter": {"project_path": "(string) Path to the KiCad project file (.kicad_pro)", "compare_to": "(Optional, string) Path to the previous DRC report for comparison"}, "task": "Run design rule checks on the PCB project located at \"/projects/controller_board.kicad_pro\" and compare the results with the previous DRC report at \"/reports/controller_board_drc_previous.json\"."}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Keycloak MCP", "description": "1.在指定领域创建新用户 2.从指定领域删除用户 3.列出所有可用领域 4.列出指定领域的所有用户", "tools": [{"name": "create-user", "server": "Keycloak MCP", "description": "Creates a new user in a specified realm.", "parameter": {"realm": "(string) The realm name", "username": "(string) Username for the new user", "email": "(string) Email address for the user", "firstName": "(string) User's first name", "lastName": "(string) User's last name"}, "task": "Create a new user in the \"CustomerSupport\" realm with the username \"jane_doe\", email \"jane.doe@example.com\", first name \"Jane\", and last name \"Doe\"."}, {"name": "delete-user", "server": "Keycloak MCP", "description": "Deletes a user from a specified realm.", "parameter": {"realm": "(string) The realm name", "userId": "(string) The ID of the user to delete"}, "task": "Delete the user with ID 'abc123' from the 'customer_support' realm."}, {"name": "list-realms", "server": "Keycloak MCP", "description": "Lists all available realms.", "parameter": {}, "task": "List all available realms in the current system."}, {"name": "list-users", "server": "Keycloak MCP", "description": "Lists all users in a specified realm.", "parameter": {"realm": "(string) The realm name"}, "task": "List all users in the 'customer_support' realm."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "Kong Konnect", "description": "Kong API Gateway operations, including: querying API requests, analyzing consumer requests, listing services/routes/consumers/plugins/control planes, and checking control plane group memberships", "tools": [{"name": "Query API Requests", "server": "Kong Konnect", "description": "Query and analyze Kong API Gateway requests with customizable filters.", "parameter": {"timeRange": "(string) Time range for data retrieval (15M, 1H, 6H, 12H, 24H, 7D)", "statusCodes": "(array) Filter by specific HTTP status codes", "excludeStatusCodes": "(array) Exclude specific HTTP status codes", "httpMethods": "(array) Filter by HTTP methods", "consumerIds": "(array) Filter by consumer IDs", "serviceIds": "(array) Filter by service IDs", "routeIds": "(array) Filter by route IDs", "maxResults": "(number) Maximum number of results to return"}, "task": "Retrieve the last 100 API requests made in the past 6 hours, filtering for successful responses (HTTP status codes 200-299) and excluding any DELETE or PUT methods."}, {"name": "Get Consumer Requests", "server": "Kong Konnect", "description": "Analyze API requests made by a specific consumer.", "parameter": {"consumerId": "(string) ID of the consumer to analyze", "timeRange": "(string) Time range for data retrieval", "successOnly": "(boolean) Show only successful (2xx) requests", "failureOnly": "(boolean) Show only failed (non-2xx) requests", "maxResults": "(number) Maximum number of results to return"}, "task": "Analyze the API requests made by consumer ID \"CON12345\" within the last 24 hours, showing only failed requests and limiting the results to 50."}, {"name": "List Services", "server": "Kong Konnect", "description": "List all services associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of services to return", "offset": "(string) Pagination offset token"}, "task": "List the first 10 services associated with control plane ID \"CP-12345\"."}, {"name": "List Routes", "server": "Kong Konnect", "description": "List all routes associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of routes to return", "offset": "(string) Pagination offset token"}, "task": "List the first 20 routes associated with the control plane with ID \"CP-12345\"."}, {"name": "List Consumers", "server": "Kong Konnect", "description": "List all consumers associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of consumers to return", "offset": "(string) Pagination offset token"}, "task": "List the first 50 consumers associated with the control plane with ID \"CP-12345\"."}, {"name": "List Plugins", "server": "Kong Konnect", "description": "List all plugins associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of plugins to return", "offset": "(string) Pagination offset token"}, "task": "List all plugins associated with control plane ID \"CP-12345\", returning the first 10 results without pagination offset."}, {"name": "List Control Planes", "server": "Kong Konnect", "description": "List all control planes in your organization.", "parameter": {"pageSize": "(number) Number of control planes per page", "pageNumber": "(number) Page number to retrieve", "filterName": "(string) Filter control planes by name", "filterClusterType": "(string) Filter by cluster type", "filterCloudGateway": "(boolean) Filter by cloud gateway capability", "labels": "(array) Filter by labels", "sort": "(string) Sort field and direction"}, "task": "List the first 10 control planes in your organization, filtering by those with the label \"production\" and sorted by name in ascending order."}, {"name": "Get Control Plane", "server": "Kong Konnect", "description": "Get detailed information about a specific control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane to retrieve"}, "task": "Retrieve detailed information for the control plane with ID \"CP-2024-001\"."}, {"name": "List Control Plane Group Memberships", "server": "Kong Konnect", "description": "List all control planes that are members of a specific group.", "parameter": {"groupId": "(string) Control plane group ID", "pageSize": "(number) Number of members to return per page", "pageAfter": "(string) Cursor for pagination"}, "task": "List all control planes that are members of group ID \"G12345\", returning 20 members per page starting from the specified cursor."}, {"name": "Check Control Plane Group Membership", "server": "Kong Konnect", "description": "Check if a control plane is a member of any group.", "parameter": {"controlPlaneId": "(string) Control plane ID to check"}, "task": "Check if the control plane with ID 'CP-12345' is a member of any group."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Kubernetes and OpenShift", "description": "Kubernetes集群管理，包括：配置查看、事件列表、命名空间管理、Pod操作（创建/删除/执行命令/获取日志）、资源管理（创建/更新/删除/获取/列表）", "tools": [{"name": "configuration_view", "server": "Kubernetes and OpenShift", "description": "Get the current Kubernetes configuration content as a kubeconfig YAML", "parameter": {"minified": "(Optional, boolean) Return a minified version of the configuration. Default is true."}, "task": "Retrieve the current Kubernetes configuration in YAML format, ensuring the output is minified."}, {"name": "events_list", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes events in the current cluster from all namespaces", "parameter": {"namespace": "(Optional, string) Namespace to retrieve the events from. If not provided, will list events from all namespaces."}, "task": "List all Kubernetes events in the current cluster, including those from all namespaces."}, {"name": "namespaces_list", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes namespaces in the current cluster", "parameter": {}, "task": "List all the namespaces available in the current Kubernetes cluster."}, {"name": "pods_delete", "server": "Kubernetes and OpenShift", "description": "Delete a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod to delete", "namespace": "(Required, string) Namespace to delete the Pod from"}, "task": "Delete the Kubernetes Pod named \"frontend-service\" from the \"production\" namespace."}, {"name": "pods_exec", "server": "Kubernetes and OpenShift", "description": "Execute a command in a Kubernetes Pod in the current or provided namespace with the provided name and command", "parameter": {"command": "(Required, string[]) Command to execute in the Pod container. First item is the command, rest are arguments.", "name": "(Required, string) Name of the Pod", "namespace": "(Required, string) Namespace of the Pod", "container": "(Optional, string) Name of the Pod container to get logs from"}, "task": "Execute the command `[\"ls\", \"-l\", \"/var/log\"]` in the Pod named `nginx-pod` within the `default` namespace, targeting the `nginx` container."}, {"name": "pods_get", "server": "Kubernetes and OpenShift", "description": "Get a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod", "namespace": "(Required, string) Namespace to get the Pod from"}, "task": "Retrieve the details of the Pod named \"web-app\" from the \"production\" namespace in the Kubernetes cluster."}, {"name": "pods_list", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes pods in the current cluster from all namespaces", "parameter": {}, "task": "List all Kubernetes pods across all namespaces in the current cluster."}, {"name": "pods_list_in_namespace", "server": "Kubernetes and OpenShift", "description": "List all the Kubernetes pods in the specified namespace in the current cluster", "parameter": {"namespace": "(Required, string) Namespace to list pods from"}, "task": "List all the Kubernetes pods in the \"production\" namespace of the current cluster."}, {"name": "pods_log", "server": "Kubernetes and OpenShift", "description": "Get the logs of a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod to get logs from", "namespace": "(Required, string) Namespace to get the Pod logs from", "container": "(Optional, string) Name of the Pod container to get logs from"}, "task": "Retrieve the logs from the container named \"app-server\" in the Pod \"web-service\" within the \"production\" namespace."}, {"name": "pods_run", "server": "Kubernetes and OpenShift", "description": "Run a Kubernetes Pod in the current or provided namespace with the provided container image and optional name", "parameter": {"image": "(Required, string) Container Image to run in the Pod", "namespace": "(Required, string) Namespace to run the Pod in", "name": "(Optional, string) Name of the Pod (random name if not provided)", "port": "(Optional, number) TCP/IP port to expose from the Pod container. No port exposed if not provided."}, "task": "Run a Kubernetes Pod in the \"production\" namespace using the \"nginx:latest\" container image, exposing port 80."}, {"name": "projects_list", "server": "Kubernetes and OpenShift", "description": "List all the OpenShift projects in the current cluster", "parameter": {}, "task": "List all the projects available in the current OpenShift cluster."}, {"name": "resources_create_or_update", "server": "Kubernetes and OpenShift", "description": "Create or update a Kubernetes resource in the current cluster by providing a YAML or JSON representation of the resource", "parameter": {"resource": "(Required, string) A JSON or YAML containing a representation of the Kubernetes resource. Should include top-level fields such as apiVersion, kind, metadata, and spec."}, "task": "Create or update a Kubernetes deployment in the current cluster using the provided YAML configuration, ensuring it includes the required fields like `apiVersion`, `kind`, `metadata`, and `spec`."}, {"name": "resources_delete", "server": "Kubernetes and OpenShift", "description": "Delete a Kubernetes resource in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resource (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resource (e.g., Pod, Service, Deployment, Ingress)", "name": "(Required, string) Name of the resource", "namespace": "(Optional, string) Namespace to delete the namespaced resource from. Ignored for cluster-scoped resources. Uses configured namespace if not provided."}, "task": "Delete the Deployment named \"frontend-app\" with apiVersion \"apps/v1\" from the \"production\" namespace in the current Kubernetes cluster."}, {"name": "resources_get", "server": "Kubernetes and OpenShift", "description": "Get a Kubernetes resource in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resource (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resource (e.g., Pod, Service, Deployment, Ingress)", "name": "(Required, string) Name of the resource", "namespace": "(Optional, string) Namespace to retrieve the namespaced resource from. Ignored for cluster-scoped resources. Uses configured namespace if not provided."}, "task": "Retrieve the Deployment named \"frontend\" with apiVersion \"apps/v1\" from the \"production\" namespace in the current Kubernetes cluster."}, {"name": "resources_list", "server": "Kubernetes and OpenShift", "description": "List Kubernetes resources and objects in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resources (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resources (e.g., Pod, Service, Deployment, Ingress)", "namespace": "(Optional, string) Namespace to retrieve the namespaced resources from. Ignored for cluster-scoped resources. Lists resources from all namespaces if not provided."}, "task": "List all Deployment resources with apiVersion 'apps/v1' across all namespaces in the current Kubernetes cluster."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}, {"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "Langflow-DOC-QA-SERVER", "description": "Query the document Q&A system", "tools": [{"name": "query_docs", "server": "Langflow-DOC-QA-SERVER", "description": "Query the document Q&A system", "parameter": {"query": "(string) The query string to be sent to the document Q&A system"}, "task": "Search for information about the company's remote work policy in the document Q&A system."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Lightdash", "description": "Lightdash organization operations, including: listing projects, getting project details, listing spaces, listing charts, listing dashboards, getting custom metrics, getting catalog, getting metrics catalog, getting charts as code, and getting dashboards as code", "tools": [{"name": "list_projects", "server": "Lightdash", "description": "List all projects in the Lightdash organization", "parameter": {}, "task": "List all available projects within the Lightdash organization."}, {"name": "get_project", "server": "Lightdash", "description": "Get details of a specific project", "parameter": {}, "task": "Retrieve the details of the currently active project."}, {"name": "list_spaces", "server": "Lightdash", "description": "List all spaces in a project", "parameter": {}, "task": "List all available spaces within the current project."}, {"name": "list_charts", "server": "Lightdash", "description": "List all charts in a project", "parameter": {}, "task": "List all available charts in the current project."}, {"name": "list_dashboards", "server": "Lightdash", "description": "List all dashboards in a project", "parameter": {}, "task": "List all dashboards available in the current project."}, {"name": "get_custom_metrics", "server": "Lightdash", "description": "Get custom metrics for a project", "parameter": {}, "task": "Retrieve the latest custom metrics data for the specified project."}, {"name": "get_catalog", "server": "Lightdash", "description": "Get catalog for a project", "parameter": {}, "task": "Retrieve the catalog for the current project."}, {"name": "get_metrics_catalog", "server": "Lightdash", "description": "Get metrics catalog for a project", "parameter": {}, "task": "Retrieve the metrics catalog for the current project."}, {"name": "get_charts_as_code", "server": "Lightdash", "description": "Get charts as code for a project", "parameter": {}, "task": "Generate the chart configurations as code for the current project."}, {"name": "get_dashboards_as_code", "server": "Lightdash", "description": "Get dashboards as code for a project", "parameter": {}, "task": "Retrieve the dashboard configurations in code format for the specified project."}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}]}
{"name": "lsp-mcp", "description": "Language Server Protocol (LSP) operations, including: hover information retrieval, code completion suggestions, code actions, document opening/closing, diagnostics retrieval, LSP server start/restart, and log level configuration", "tools": [{"name": "get_info_on_location", "server": "lsp-mcp", "description": "Gets hover information at a specific location in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "line": "(number) Line number", "column": "(number) Column position"}, "task": "Retrieve the hover information at line 15, column 8 in the Haskell source file located at \"/src/Main.hs\"."}, {"name": "get_completions", "server": "lsp-mcp", "description": "Gets completion suggestions at a specific location in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "line": "(number) Line number", "column": "(number) Column position"}, "task": "Get completion suggestions for the Python file located at \"/src/main.py\" at line 15, column 8."}, {"name": "get_code_actions", "server": "lsp-mcp", "description": "Gets code actions for a specific range in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "start_line": "(number) Start line number", "start_column": "(number) Start column position", "end_line": "(number) End line number", "end_column": "(number) End column position"}, "task": "Retrieve code actions for lines 10 to 15 (columns 5 to 20) in the Haskell file located at `/src/Main.hs`."}, {"name": "open_document", "server": "lsp-mcp", "description": "Opens a file in the LSP server for analysis.", "parameter": {"file_path": "(string) Path to the file to open", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')"}, "task": "Open the Haskell source code file located at \"/src/Main.hs\" for analysis in the LSP server."}, {"name": "close_document", "server": "lsp-mcp", "description": "Closes a file in the LSP server when you're done working with it.", "parameter": {"file_path": "(string) Path to the file to close"}, "task": "Close the file located at \"/home/user/project/src/main.py\" in the LSP server."}, {"name": "get_diagnostics", "server": "lsp-mcp", "description": "Gets diagnostic messages (errors, warnings) for one or all open files.", "parameter": {"file_path": "(Optional, string) Path to the file to get diagnostics for. If not provided, returns diagnostics for all open files."}, "task": "Retrieve diagnostic messages for all currently open files, including errors and warnings."}, {"name": "start_lsp", "server": "lsp-mcp", "description": "Starts the LSP server with a specified root directory. This must be called before using any other LSP-related tools.", "parameter": {"root_dir": "(string) The root directory for the LSP server (absolute path recommended)"}, "task": "Start the LSP server with the root directory set to \"/home/user/projects/my_project\"."}, {"name": "restart_lsp_server", "server": "lsp-mcp", "description": "Restarts the LSP server process without restarting the MCP server. This is useful for recovering from LSP server issues or for applying changes to the LSP server configuration.", "parameter": {"root_dir": "(Optional, string) The root directory for the LSP server. If provided, the server will be initialized with this directory after restart."}, "task": "Restart the LSP server process for the project located in the `/home/user/projects/example` directory without affecting the MCP server."}, {"name": "set_log_level", "server": "lsp-mcp", "description": "Sets the server's logging level to control verbosity of log messages.", "parameter": {"level": "(string) The logging level to set. One of: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency'."}, "task": "Set the server's logging level to 'warning' to reduce verbosity of log messages."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Linear", "description": "Linear issue management, including: creating, updating, searching, retrieving user-assigned issues, and adding comments", "tools": [{"name": "linear_create_issue", "server": "Linear", "description": "Create a new Linear issue.", "parameter": {"title": "(string) Issue title", "teamId": "(string) Team ID to create issue in", "description": "(Optional, string) Issue description (markdown supported)", "priority": "(Optional, number, 0-4) Priority level (1=urgent, 4=low)", "status": "(Optional, string) Initial status name"}, "task": "Create a new issue titled \"Implement user authentication\" in the development team with a priority level of 2 (high) and an initial status of \"In Progress\". Include a description outlining the required authentication flow and security measures."}, {"name": "linear_update_issue", "server": "Linear", "description": "Update an existing Linear issue.", "parameter": {"id": "(string) Issue ID to update", "title": "(Optional, string) New title", "description": "(Optional, string) New description", "priority": "(Optional, number, 0-4) New priority", "status": "(Optional, string) New status name"}, "task": "Update the Linear issue with ID \"ISSUE-123\" by changing its status to \"In Progress\" and setting the priority to 2."}, {"name": "linear_search_issues", "server": "Linear", "description": "Search Linear issues with flexible filtering.", "parameter": {"query": "(Optional, string) Text to search in title/description", "teamId": "(Optional, string) Filter by team", "status": "(Optional, string) Filter by status", "assigneeId": "(Optional, string) Filter by assignee", "labels": "(Optional, string[]) Filter by labels", "priority": "(Optional, number) Filter by priority", "limit": "(Optional, number, default: 10) Max results"}, "task": "Search for high-priority issues assigned to a specific team member in the 'Development' team, filtering by the 'Bug' label and limiting results to 5."}, {"name": "linear_get_user_issues", "server": "Linear", "description": "Get issues assigned to a user.", "parameter": {"userId": "(Optional, string) User ID (omit for authenticated user)", "includeArchived": "(Optional, boolean) Include archived issues", "limit": "(Optional, number, default: 50) Max results"}, "task": "Retrieve up to 30 active issues assigned to the authenticated user, excluding archived ones."}, {"name": "linear_add_comment", "server": "Linear", "description": "Add a comment to a Linear issue.", "parameter": {"issueId": "(string) Issue ID to comment on", "body": "(string) Comment text (markdown supported)", "createAsUser": "(Optional, string) Custom username", "displayIconUrl": "(Optional, string) Custom avatar URL"}, "task": "Add a comment with the text \"Please review the latest updates and provide feedback by EOD\" to Linear issue ID \"ISS-123\". Use the username \"ReviewBot\" and an avatar from \"https://example.com/avatar.png\"."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Linear (Go)", "description": "Linear issue management, including: issue creation, update, search, retrieval by user/ID, comment addition, and team retrieval", "tools": [{"name": "linear_create_issue", "server": "Linear (Go)", "description": "Creates a new Linear issue with specified details. Supports creating sub-issues and assigning labels.", "parameter": {"title": "(required) Issue title", "team": "(required) Team identifier (key, UUID or name)", "description": "Issue description", "priority": "Priority (0-4)", "status": "Issue status", "parentIssue": "(Optional) Optional parent issue ID to create a sub-issue", "labels": "(Optional) Optional comma-separated list of label IDs to assign"}, "task": "Create a new issue titled \"Implement user authentication\" for the \"Backend\" team with a priority level of 2, a status of \"In Progress\", and assign the \"Security\" and \"API\" labels. Include a description outlining the required OAuth2 integration steps."}, {"name": "linear_update_issue", "server": "Linear (Go)", "description": "Updates an existing Linear issue's properties.", "parameter": {"id": "(required) Issue ID", "title": "New title", "description": "New description", "priority": "New priority (0-4)", "status": "New status"}, "task": "Update the Linear issue with ID \"ISSUE-123\" by changing its title to \"Refactor authentication module\", setting the priority to 2, and updating the status to \"In Progress\"."}, {"name": "linear_search_issues", "server": "Linear (Go)", "description": "Searches Linear issues using flexible criteria.", "parameter": {"query": "(Optional) Optional text to search in title and description", "teamId": "Filter by team ID", "status": "Filter by status name (e.g., 'In Progress', 'Done')", "assigneeId": "Filter by assignee's user ID", "labels": "Filter by label names (comma-separated)", "priority": "Filter by priority (1=urgent, 2=high, 3=normal, 4=low)", "estimate": "Filter by estimate points", "includeArchived": "Include archived issues in results (default: false)", "limit": "Max results to return (default: 10)"}, "task": "Search for all high-priority (priority 2) issues assigned to user ID 'U123' in team 'T456' with the status 'In Progress', limited to 20 results. Exclude archived issues."}, {"name": "linear_get_user_issues", "server": "Linear (Go)", "description": "Retrieves issues assigned to a specific user or the authenticated user.", "parameter": {"userId": "(Optional) Optional user ID. If not provided, returns authenticated user's issues", "includeArchived": "Include archived issues in results", "limit": "Maximum number of issues to return (default: 50)"}, "task": "Retrieve up to 30 active issues assigned to the authenticated user, excluding archived ones."}, {"name": "linear_get_issue", "server": "Linear (Go)", "description": "Retrieves a single Linear issue by its ID.", "parameter": {"issueId": "(required) ID of the issue to retrieve"}, "task": "Retrieve the details of a Linear issue with the ID \"ISSUE-12345\"."}, {"name": "linear_add_comment", "server": "Linear (Go)", "description": "Adds a comment to an existing Linear issue.", "parameter": {"issueId": "(required) ID of the issue to comment on", "body": "(required) Comment text in markdown format", "createAsUser": "(Optional) Optional custom username to show for the comment", "displayIconUrl": "(Optional) Optional avatar URL for the comment"}, "task": "Add a comment with the text \"Please review the latest updates and provide feedback by EOD\" to the specified Linear issue, using the username \"ReviewBot\" and an avatar from \"https://example.com/avatar.png\"."}, {"name": "linear_get_teams", "server": "Linear (Go)", "description": "Retrieves Linear teams with an optional name filter.", "parameter": {"name": "(Optional) Optional team name filter. Returns teams whose names contain this string."}, "task": "Retrieve all Linear teams whose names include the string \"engineering\"."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "llm-context", "description": "1. Initialize project configuration 2. Switch rules 3. Select files for inclusion and outline generation 4. Generate and copy context 5. Generate project instructions for LLMs 6. Process LLM file requests 7. List modified files 8. Generate outlines for code files 9. Extract code implementations requested by LLMs", "tools": [{"name": "lc-init", "server": "llm-context", "description": "Initialize project configuration", "parameter": {}, "task": "Initialize the project configuration for a new development environment."}, {"name": "lc-set-rule", "server": "llm-context", "description": "Switch rules", "parameter": {"n": "(integer) The rule number to switch to"}, "task": "Switch to rule number 5 for the current configuration."}, {"name": "lc-sel-files", "server": "llm-context", "description": "Select files for inclusion", "parameter": {}, "task": "Select 10 files from the current directory for inclusion in the project."}, {"name": "lc-sel-outlines", "server": "llm-context", "description": "Select files for outline generation", "parameter": {}, "task": "Generate outlines for the selected files in the current directory."}, {"name": "lc-context", "server": "llm-context", "description": "Generate and copy context", "parameter": {"-p": "(Optional, flag) Include prompt instructions", "-u": "(Optional, flag) Include user notes", "-f FILE": "(Optional, string) Write to output file"}, "task": "Generate a context summary including both prompt instructions and user notes, then save it to an output file named \"context_summary.txt\"."}, {"name": "lc-prompt", "server": "llm-context", "description": "Generate project instructions for LLMs", "parameter": {}, "task": "Generate detailed project instructions for an LLM to create a customer support chatbot."}, {"name": "lc-clip-files", "server": "llm-context", "description": "Process LLM file requests", "parameter": {}, "task": "Process a batch of files requested by a large language model for further analysis."}, {"name": "lc-changed", "server": "llm-context", "description": "List files modified since last context generation", "parameter": {}, "task": "List all files that have been modified since the last time the context was generated."}, {"name": "lc-outlines", "server": "llm-context", "description": "Generate outlines for code files", "parameter": {}, "task": "Generate an outline for the provided Python script file."}, {"name": "lc-clip-implementations", "server": "llm-context", "description": "Extract code implementations requested by LLMs (doesn't support C/C++)", "parameter": {}, "task": "Extract the Python implementation of a binary search algorithm from the provided code snippets."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "lucene-mcp-server", "description": "1.查询服务器状态 2.在Lucene索引中插入或更新文档 3.查询Lucene索引 4.从Lucene索引中删除文档 5.列出Lucene索引中的文档", "tools": [{"name": "GET /mcp/v1/status", "server": "lucene-mcp-server", "description": "Returns the status of the server.", "parameter": {}, "task": "Check the current status of the server using the MCP API."}, {"name": "POST /mcp/v1/upsert", "server": "lucene-mcp-server", "description": "Upserts (inserts or updates) one or more documents in the Lucene index.", "parameter": {"documents": "(array) An array of documents to upsert. Each document has an 'id', 'text', and optional 'metadata'."}, "task": "Upsert three documents into the Lucene index, each containing an 'id', 'text', and optional 'metadata' field. Ensure one document has metadata with a 'category' key."}, {"name": "POST /mcp/v1/query", "server": "lucene-mcp-server", "description": "Queries the Lucene index.", "parameter": {"queries": "(array) An array of query objects. Each query object contains a 'query' string, an optional 'top_k' integer, and an optional 'filter' map."}, "task": "Query the Lucene index for documents matching the search term \"machine learning\" and return the top 5 results. Apply a filter to include only documents published after January 1, 2023."}, {"name": "POST /mcp/v1/delete", "server": "lucene-mcp-server", "description": "Deletes documents from the Lucene index.", "parameter": {"ids": "(array) An array of document IDs to delete."}, "task": "Delete the documents with IDs [\"doc123\", \"doc456\", \"doc789\"] from the Lucene index."}, {"name": "GET /mcp/v1/list", "server": "lucene-mcp-server", "description": "Lists documents from the Lucene index.", "parameter": {"ids": "(array) An array of document IDs to list."}, "task": "Retrieve the details of documents with IDs [\"doc123\", \"doc456\", \"doc789\"] from the Lucene index."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "mac-messages-mcp", "description": "1. Retrieve recent messages from macOS Messages app 2. Send new messages through iMessage", "tools": [{"name": "get_recent_messages", "server": "mac-messages-mcp", "description": "Retrieves recent messages from the macOS Messages app.", "parameter": {"hours": "(int) Number of hours to look back for recent messages"}, "task": "Retrieve all messages from the macOS Messages app sent or received in the last 24 hours."}, {"name": "send_message", "server": "mac-messages-mcp", "description": "Sends a new message through iMessage.", "parameter": {"recipient": "(str) Phone number or email of the recipient", "message": "(str) Content of the message to be sent"}, "task": "Send a message with the content \"Meeting at 3 PM tomorrow\" to the recipient with the phone number +1234567890."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "MariaDB", "description": "Execute read-only operations against MariaDB", "tools": [{"name": "query_database", "server": "MariaDB", "description": "Execute read-only operations against MariaDB", "parameter": {}, "task": "Query the MariaDB database for all customer records created in the last 30 days."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "MCP Create", "description": "1.从模板创建MCP服务器 2.在服务器上执行工具 3.获取服务器工具列表 4.删除服务器 5.获取运行中的服务器列表", "tools": [{"name": "create-server-from-template", "server": "MCP Create", "description": "Create MCP server from template", "parameter": {"language": "(string) The programming language for the server template"}, "task": "Create a server instance using a template designed for Python applications."}, {"name": "execute-tool", "server": "MCP Create", "description": "Execute tool on server", "parameter": {"serverId": "(string) The ID of the server", "toolName": "(string) The name of the tool to execute", "args": "(object) Arguments for the tool"}, "task": "Execute the backup tool on server SRV-001 with the arguments {\"destination\": \"/backups\", \"retentionDays\": 7}."}, {"name": "get-server-tools", "server": "MCP Create", "description": "Get list of server tools", "parameter": {"serverId": "(string) The ID of the server"}, "task": "Retrieve the list of tools installed on the server with ID \"SRV-12345\"."}, {"name": "delete-server", "server": "MCP Create", "description": "Delete server", "parameter": {"serverId": "(string) The ID of the server to delete"}, "task": "Delete the server with ID 'srv-1234567890'."}, {"name": "list-servers", "server": "MCP Create", "description": "Get list of running servers", "parameter": {}, "task": "List all currently active servers in the infrastructure."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "mcp-k8s-go", "description": "Kubernetes资源管理，包括：上下文列表、命名空间列表、资源检索（如pods/services/deployments）、节点列表、事件获取、pod日志检索及pod内命令执行", "tools": [{"name": "List Kubernetes contexts", "server": "mcp-k8s-go", "description": "Lists available Kubernetes contexts.", "parameter": {}, "task": "List all available Kubernetes contexts currently configured on the system."}, {"name": "List Kubernetes namespaces", "server": "mcp-k8s-go", "description": "Lists available Kubernetes namespaces.", "parameter": {}, "task": "List all available namespaces in the current Kubernetes cluster."}, {"name": "List and get any Kubernetes resources", "server": "mcp-k8s-go", "description": "Lists and retrieves any Kubernetes resources, including custom mappings for pods, services, and deployments.", "parameter": {}, "task": "List all running pods in the default namespace of the Kubernetes cluster."}, {"name": "List Kubernetes nodes", "server": "mcp-k8s-go", "description": "Lists available Kubernetes nodes.", "parameter": {}, "task": "List all available nodes in the Kubernetes cluster."}, {"name": "List Kubernetes pods", "server": "mcp-k8s-go", "description": "Lists available Kubernetes pods.", "parameter": {}, "task": "List all available pods in the current Kubernetes cluster."}, {"name": "Get Kubernetes events", "server": "mcp-k8s-go", "description": "Retrieves Kubernetes events.", "parameter": {}, "task": "Retrieve the latest 50 events from the Kubernetes cluster."}, {"name": "Get Kubernetes pod logs", "server": "mcp-k8s-go", "description": "Retrieves logs from a specified Kubernetes pod.", "parameter": {}, "task": "Retrieve the logs from the Kubernetes pod named \"web-app\" running in the \"production\" namespace."}, {"name": "Run command in Kubernetes pod", "server": "mcp-k8s-go", "description": "Executes a command within a specified Kubernetes pod.", "parameter": {}, "task": "Execute the command `ls -l /var/log` in the Kubernetes pod named `nginx-pod`."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "mcp-local-rag", "description": "Perform web search to fetch latest information for enhancing model responses", "tools": [{"name": "rag_search", "server": "mcp-local-rag", "description": "Performs a web search to fetch the latest information and provides it to the model to enhance its responses.", "parameter": {}, "task": "Search for the most recent updates on advancements in quantum computing and summarize the key findings."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "mcp-proxy", "description": "1.运行代理服务器从stdio连接到远程SSE服务器 2.运行代理服务器暴露SSE服务器连接到本地stdio服务器", "tools": [{"name": "stdio to SSE", "server": "mcp-proxy", "description": "Runs a proxy server from stdio that connects to a remote SSE server, allowing clients to communicate with the remote server over SSE.", "parameter": {"command_or_url": "(string) The MCP server SSE endpoint to connect to", "--headers": "(Optional, string) Headers to use for the MCP server SSE connection"}, "task": "Run a proxy server to connect to the remote MCP server SSE endpoint at \"https://example.com/sse\" with custom headers for authentication."}, {"name": "SSE to stdio", "server": "mcp-proxy", "description": "Runs a proxy server exposing a SSE server that connects to a local stdio server, allowing remote connections to the local stdio server.", "parameter": {"command_or_url": "(string) The command to spawn the MCP stdio server", "--sse-port": "(Optional, int) The SSE server port to listen on", "--sse-host": "(Optional, string) The host IP address that the SSE server will listen on", "--env": "(Optional, string) Additional environment variables to pass to the MCP stdio server", "--pass-environment": "(Optional, flag) Pass through all environment variables when spawning the server", "--allow-origin": "(Optional, string) Allowed origins for the SSE server"}, "task": "Run a proxy server to expose a local stdio server via SSE, listening on port 8080 and allowing connections from any origin."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "mem0-mcp", "description": "1.存储代码片段、实现细节和编码模式 2.检索所有存储的编码偏好 3.语义搜索存储的编码偏好", "tools": [{"name": "add_coding_preference", "server": "mem0-mcp", "description": "Store code snippets, implementation details, and coding patterns with comprehensive context.", "parameter": {"code_snippet": "(string) The complete code snippet with dependencies.", "language_version": "(string) The language or framework version used.", "setup_instructions": "(string) Instructions for setting up the environment.", "documentation": "(string) Additional documentation and comments.", "example_usage": "(string) Example usage of the code snippet.", "best_practices": "(string) Best practices associated with the code."}, "task": "Store a Python 3.11 code snippet for handling JSON data, including setup instructions for virtual environment creation, detailed documentation on function usage, an example demonstrating data parsing, and best practices for error handling."}, {"name": "get_all_coding_preferences", "server": "mem0-mcp", "description": "Retrieve all stored coding preferences for analysis and review.", "parameter": {}, "task": "Retrieve and analyze all stored coding preferences for the current project."}, {"name": "search_coding_preferences", "server": "mem0-mcp", "description": "Semantically search through stored coding preferences to find relevant information.", "parameter": {"query": "(string) The search query to find relevant coding preferences."}, "task": "Search for coding preferences related to optimizing Python functions for performance."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Membase", "description": "1.获取当前会话ID 2.切换到不同会话 3.保存消息到当前会话 4.获取当前会话的最后n条消息", "tools": [{"name": "get_conversation_id", "server": "Membase", "description": "Get the current conversation id.", "parameter": {}, "task": "Retrieve the unique identifier for the ongoing conversation."}, {"name": "switch_conversation", "server": "Membase", "description": "Switch to a different conversation.", "parameter": {}, "task": "Switch to the most recent conversation in the chat history."}, {"name": "save_message", "server": "Membase", "description": "Save a message/memory into the current conversation.", "parameter": {}, "task": "Save the current conversation as a memory for future reference."}, {"name": "get_messages", "server": "Membase", "description": "Get the last n messages from the current conversation.", "parameter": {}, "task": "Retrieve the last 5 messages from the ongoing conversation."}], "domains": [{"name": "Customer Support Management", "description": "Customer support operations, including conversation retrieval, ticket management, and customer-specific queries"}]}
{"name": "Markdownify", "description": "Convert various file types (YouTube videos, PDF, Bing search results, web pages, images, audio, DOCX, XLSX, PPTX) to Markdown format and retrieve existing Markdown files", "tools": [{"name": "youtube-to-markdown", "server": "Markdownify", "description": "Convert YouTube videos to Markdown", "parameter": {}, "task": "Convert the latest YouTube video from the channel \"TechExplained\" into a Markdown document."}, {"name": "pdf-to-markdown", "server": "Markdownify", "description": "Convert PDF files to Markdown", "parameter": {}, "task": "Convert the provided PDF document into a Markdown formatted file."}, {"name": "bing-search-to-markdown", "server": "Markdownify", "description": "Convert Bing search results to Markdown", "parameter": {}, "task": "Convert the latest Bing search results for \"AI advancements in 2024\" into a well-formatted Markdown document."}, {"name": "webpage-to-markdown", "server": "Markdownify", "description": "Convert web pages to Markdown", "parameter": {}, "task": "Convert the content of the homepage of a specified website into Markdown format."}, {"name": "image-to-markdown", "server": "Markdownify", "description": "Convert images to Markdown with metadata", "parameter": {}, "task": "Convert the provided image file into a Markdown format with embedded metadata."}, {"name": "audio-to-markdown", "server": "Markdownify", "description": "Convert audio files to Markdown with transcription", "parameter": {}, "task": "Transcribe the provided audio recording into a formatted Markdown document."}, {"name": "docx-to-markdown", "server": "Markdownify", "description": "Convert DOCX files to Markdown", "parameter": {}, "task": "Convert the provided DOCX document into a Markdown formatted file."}, {"name": "xlsx-to-markdown", "server": "Markdownify", "description": "Convert XLSX files to Markdown", "parameter": {}, "task": "Convert the provided XLSX file containing product inventory data into a Markdown-formatted table."}, {"name": "pptx-to-markdown", "server": "Markdownify", "description": "Convert PPTX files to Markdown", "parameter": {}, "task": "Convert the provided PowerPoint presentation file into a Markdown formatted document."}, {"name": "get-markdown-file", "server": "Markdownify", "description": "Retrieve an existing Markdown file. File extension must end with: *.md, *.markdown.", "parameter": {"MD_SHARE_DIR": "(Optional, string) Restrict the directory from which files can be retrieved."}, "task": "Retrieve a Markdown file from the \"docs\" directory with the extension *.md."}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "MongoDB Lens", "description": "MongoDB数据库操作,包括:连接管理、数据聚合、查询优化、模式分析、批量操作、缓存清理、文档计数、集合/数据库/索引/用户创建与删除、查询执行计划分析、数据导出、地理空间查询、统计获取、GridFS文件管理、文档插入/更新/删除、实时变更监控等", "tools": [{"name": "add-connection-alias", "server": "MongoDB Lens", "description": "Add a new MongoDB connection alias", "parameter": {}, "task": "Create a new alias for connecting to a MongoDB database."}, {"name": "aggregate-data", "server": "MongoDB Lens", "description": "Execute aggregation pipelines", "parameter": {}, "task": "Aggregate the sales data for the last quarter to calculate total revenue and average order value."}, {"name": "analyze-query-patterns", "server": "MongoDB Lens", "description": "Analyze live queries and suggest optimizations", "parameter": {}, "task": "Analyze the current live database queries and provide optimization recommendations."}, {"name": "analyze-schema", "server": "MongoDB Lens", "description": "Automatically infer collection schemas", "parameter": {}, "task": "Analyze the structure and data types of all collections in the connected database."}, {"name": "bulk-operations", "server": "MongoDB Lens", "description": "Perform multiple operations efficiently (requires confirmation for destructive operations)", "parameter": {}, "task": "Perform a batch update of user permissions across all active accounts in the system, ensuring confirmation is requested before applying any changes."}, {"name": "clear-cache", "server": "MongoDB Lens", "description": "Clear memory caches to ensure fresh data", "parameter": {}, "task": "Clear all memory caches to ensure the system retrieves fresh data."}, {"name": "collation-query", "server": "MongoDB Lens", "description": "Find documents with language-specific collation rules", "parameter": {}, "task": "Find documents that follow French language collation rules."}, {"name": "compare-schemas", "server": "MongoDB Lens", "description": "Compare schemas between two collections", "parameter": {}, "task": "Compare the schemas of two specified collections to identify any differences in their structure."}, {"name": "connect-mongodb", "server": "MongoDB Lens", "description": "Connect to a different MongoDB URI", "parameter": {}, "task": "Connect to a MongoDB database using a new URI provided by the user."}, {"name": "connect-original", "server": "MongoDB Lens", "description": "Connect back to the original MongoDB URI used at startup", "parameter": {}, "task": "Reconnect to the initial MongoDB database instance that was accessed during system startup."}, {"name": "count-documents", "server": "MongoDB Lens", "description": "Count documents matching specified criteria", "parameter": {}, "task": "Count the number of documents in the collection that meet the specified filter criteria."}, {"name": "create-collection", "server": "MongoDB Lens", "description": "Create new collections with custom options", "parameter": {}, "task": "Create a new collection with custom settings for organizing digital assets."}, {"name": "create-database", "server": "MongoDB Lens", "description": "Create a new database with option to switch to it", "parameter": {}, "task": "Create a new database and set it as the active database for subsequent operations."}, {"name": "create-index", "server": "MongoDB Lens", "description": "Create new indexes for performance optimization", "parameter": {}, "task": "Create a new index to optimize query performance for the most frequently accessed database table."}, {"name": "create-timeseries", "server": "MongoDB Lens", "description": "Create time series collections for temporal data", "parameter": {}, "task": "Create a new time series collection to store hourly temperature readings for the next 30 days."}, {"name": "create-user", "server": "MongoDB Lens", "description": "Create new database users with specific roles", "parameter": {}, "task": "Create a new database user with read-only access permissions."}, {"name": "current-database", "server": "MongoDB Lens", "description": "Show the current database context", "parameter": {}, "task": "Show the name of the currently active database context."}, {"name": "delete-document", "server": "MongoDB Lens", "description": "Delete documents matching specified criteria (requires confirmation)", "parameter": {}, "task": "Delete all documents in the database that were created before January 1, 2023, after confirming the action."}, {"name": "distinct-values", "server": "MongoDB Lens", "description": "Extract unique values for any field", "parameter": {}, "task": "Extract all unique customer email addresses from the provided dataset."}, {"name": "drop-collection", "server": "MongoDB Lens", "description": "Remove collections from the database (requires confirmation)", "parameter": {}, "task": "Remove all documents from the specified collection after user confirmation."}, {"name": "drop-database", "server": "MongoDB Lens", "description": "Drop a database (requires confirmation)", "parameter": {}, "task": "Drop the currently connected database after confirming the action."}, {"name": "drop-index", "server": "MongoDB Lens", "description": "Remove indexes from collections (requires confirmation)", "parameter": {}, "task": "Remove all indexes from the specified collection after confirmation."}, {"name": "drop-user", "server": "MongoDB Lens", "description": "Remove database users (requires confirmation)", "parameter": {}, "task": "Remove the specified database user after confirming the action."}, {"name": "explain-query", "server": "MongoDB Lens", "description": "Analyze query execution plans", "parameter": {}, "task": "Analyze the execution plan of the most recent SQL query executed on the database."}, {"name": "export-data", "server": "MongoDB Lens", "description": "Export query results in JSON or CSV format", "parameter": {}, "task": "Export the results of the latest customer survey in JSON format."}, {"name": "find-documents", "server": "MongoDB Lens", "description": "Run queries with filters, projections, and sorting", "parameter": {}, "task": "Search for all documents in the database that match the criteria: status is \"active\" and created date is after \"2024-01-01\", sorted by creation date in descending order."}, {"name": "generate-schema-validator", "server": "MongoDB Lens", "description": "Generate JSON Schema validators", "parameter": {}, "task": "Generate a JSON Schema validator for a sample API response containing user details (name, email, age)."}, {"name": "geo-query", "server": "MongoDB Lens", "description": "Perform geospatial queries with various operators", "parameter": {}, "task": "Find all locations within a 5-kilometer radius of the specified coordinates (latitude: 40.7128, longitude: -74.0060)."}, {"name": "get-stats", "server": "MongoDB Lens", "description": "Retrieve database or collection statistics", "parameter": {}, "task": "Retrieve the statistics for the current MongoDB database."}, {"name": "gridfs-operation", "server": "MongoDB Lens", "description": "Manage large files with GridFS buckets", "parameter": {}, "task": "Store a large video file (over 16MB) in the GridFS bucket for efficient management."}, {"name": "insert-document", "server": "MongoDB Lens", "description": "Insert one or more documents into collections", "parameter": {}, "task": "Insert a new document into the specified collection with the following details: name \"John Doe\", age 30, and occupation \"Software Engineer\"."}, {"name": "list-collections", "server": "MongoDB Lens", "description": "Explore collections in the current database", "parameter": {}, "task": "List all available collections in the current database."}, {"name": "list-connections", "server": "MongoDB Lens", "description": "View all available MongoDB connection aliases", "parameter": {}, "task": "List all the available connection aliases for the MongoDB database."}, {"name": "list-databases", "server": "MongoDB Lens", "description": "View all accessible databases", "parameter": {}, "task": "List all accessible databases in the current MySQL server instance."}, {"name": "rename-collection", "server": "MongoDB Lens", "description": "Rename existing collections (requires confirmation when dropping targets)", "parameter": {}, "task": "Rename an existing collection in the database, ensuring to confirm before dropping any targets."}, {"name": "shard-status", "server": "MongoDB Lens", "description": "View sharding configuration for databases and collections", "parameter": {}, "task": "Check the sharding configuration status for all databases and collections in the current MongoDB deployment."}, {"name": "text-search", "server": "MongoDB Lens", "description": "Perform full-text search across text-indexed fields", "parameter": {}, "task": "Search for documents containing the phrase \"machine learning applications\" in the indexed text fields."}, {"name": "transaction", "server": "MongoDB Lens", "description": "Execute multiple operations in a single ACID transaction", "parameter": {}, "task": "Execute a series of database operations within a single ACID transaction to ensure data consistency."}, {"name": "update-document", "server": "MongoDB Lens", "description": "Update documents matching specified criteria", "parameter": {}, "task": "Update all documents in the collection where the \"status\" field is set to \"pending\" and change it to \"completed\"."}, {"name": "use-database", "server": "MongoDB Lens", "description": "Switch to a specific database context", "parameter": {}, "task": "Switch the current database context to the one named 'customer_records'."}, {"name": "validate-collection", "server": "MongoDB Lens", "description": "Check for data inconsistencies", "parameter": {}, "task": "Check for data inconsistencies in the specified collection."}, {"name": "watch-changes", "server": "MongoDB Lens", "description": "Monitor real-time changes to collections", "parameter": {}, "task": "Monitor real-time changes to the specified collection for any updates or modifications."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Monday.com", "description": "Monday.com平台操作，包括：创建/删除/归档项目、创建/移动项目到组、获取板组/项目/子项目列表、创建/获取文档内容、添加文档块、创建/获取更新评论", "tools": [{"name": "monday-create-item", "server": "Monday.com", "description": "Creates a new item or sub-item in a Monday.com board", "parameter": {}, "task": "Create a new task in the designated Monday.com board for the upcoming marketing campaign."}, {"name": "monday-get-board-groups", "server": "Monday.com", "description": "Retrieves all groups from a specified Monday.com board", "parameter": {}, "task": "Retrieve all groups from the specified Monday.com board."}, {"name": "monday-create-update", "server": "Monday.com", "description": "Creates a comment/update on a Monday.com item", "parameter": {}, "task": "Add a comment to the specified item on the Monday.com board."}, {"name": "monday-list-boards", "server": "Monday.com", "description": "Lists all available Monday.com boards", "parameter": {}, "task": "List all available boards in the Monday.com workspace."}, {"name": "monday-list-items-in-groups", "server": "Monday.com", "description": "Lists all items in specified groups of a Monday.com board", "parameter": {}, "task": "List all items in the 'In Progress' and 'Completed' groups of the specified Monday.com board."}, {"name": "monday-list-subitems-in-items", "server": "Monday.com", "description": "Lists all sub-items for given Monday.com items", "parameter": {}, "task": "List all sub-items associated with the specified items in Monday.com."}, {"name": "monday-create-board", "server": "Monday.com", "description": "Creates a new Monday.com board", "parameter": {}, "task": "Create a new project management board for tracking quarterly goals."}, {"name": "monday-create-board-group", "server": "Monday.com", "description": "Creates a new group in a Monday.com board", "parameter": {}, "task": "Create a new group in the specified Monday.com board for organizing project tasks."}, {"name": "monday-move-item-to-group", "server": "Monday.com", "description": "Moves a Monday.com item to a different group", "parameter": {}, "task": "Move the specified item in Monday.com to the 'Completed Tasks' group."}, {"name": "monday-delete-item", "server": "Monday.com", "description": "Deletes a Monday.com item", "parameter": {}, "task": "Delete a specific item from the Monday.com board."}, {"name": "monday-archive-item", "server": "Monday.com", "description": "Archives a Monday.com item", "parameter": {}, "task": "Archive a specific item in Monday.com that is no longer actively needed."}, {"name": "monday-get-item-updates", "server": "Monday.com", "description": "Retrieves updates/comments for a specific item", "parameter": {}, "task": "Retrieve all updates and comments for the specified item in the project management system."}, {"name": "monday-get-docs", "server": "Monday.com", "description": "Lists documents in Monday.com, optionally filtered by folder", "parameter": {}, "task": "List all documents in the root folder of the connected Monday.com workspace."}, {"name": "monday-get-doc-content", "server": "Monday.com", "description": "Retrieves the content of a specific document", "parameter": {}, "task": "Retrieve the content of the latest document uploaded to the workspace."}, {"name": "monday-create-doc", "server": "Monday.com", "description": "Creates a new document in Monday.com", "parameter": {}, "task": "Create a new project documentation file in Monday.com for the upcoming product launch."}, {"name": "monday-add-doc-block", "server": "Monday.com", "description": "Adds a block to an existing document", "parameter": {}, "task": "Add a new block to the specified document in Monday.com."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Multicluster-MCP-Sever", "description": "1.从中心集群检索资源 2.从托管集群检索资源 3.使用指定ClusterRole连接到托管集群 4.通过Open Cluster Management跨多个Kubernetes集群访问资源", "tools": [{"name": "Retrieve resources from the hub cluster", "server": "Multicluster-MCP-Sever", "description": "Retrieves resources from the current context (hub cluster).", "parameter": {}, "task": "Retrieve all available resources from the currently connected hub cluster."}, {"name": "Retrieve resources from the managed clusters", "server": "Multicluster-MCP-Sever", "description": "Retrieves resources from managed clusters.", "parameter": {}, "task": "Retrieve all available resources from the managed clusters."}, {"name": "Connect to a managed cluster", "server": "Multicluster-MCP-Sever", "description": "Connects to a managed cluster using a specified ClusterRole.", "parameter": {"ClusterRole": "(string) The name of the ClusterRole to use for connecting to the managed cluster."}, "task": "Connect to the managed cluster using the \"admin\" ClusterRole."}, {"name": "Access resources across multiple Kubernetes clusters", "server": "Multicluster-MCP-Sever", "description": "Accesses resources across multiple Kubernetes clusters via Open Cluster Management.", "parameter": {}, "task": "Access and manage resources across all connected Kubernetes clusters using Open Cluster Management."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "n8n", "description": "1.通过webhook触发工作流 2.工作流管理（创建、更新、删除、激活/停用） 3.工作流执行管理（执行、获取详情、列表查询、停止）", "tools": [{"name": "run_webhook", "server": "n8n", "description": "Triggers a workflow via a webhook, passing the workflow name and optional data.", "parameter": {"workflowName": "(string) The name of the workflow to trigger", "data": "(Optional, object) Additional data to pass to the webhook"}, "task": "Trigger the \"order_processing\" workflow via webhook, including the order details as additional data."}, {"name": "workflow_list", "server": "n8n", "description": "Lists all workflows.", "parameter": {}, "task": "List all available workflows in the system."}, {"name": "workflow_get", "server": "n8n", "description": "Gets details of a specific workflow.", "parameter": {"id": "(string) The ID of the workflow"}, "task": "Retrieve the details of the workflow with ID \"WF-2024-001\"."}, {"name": "workflow_create", "server": "n8n", "description": "Creates a new workflow.", "parameter": {"name": "(string) The name of the new workflow", "data": "(object) The workflow data"}, "task": "Create a new workflow named \"Monthly Report Automation\" with the specified data structure for generating and distributing monthly performance reports."}, {"name": "workflow_update", "server": "n8n", "description": "Updates an existing workflow.", "parameter": {"id": "(string) The ID of the workflow to update", "data": "(object) The updated workflow data"}, "task": "Update the workflow with ID \"WF12345\" to include a new approval step for budget reviews."}, {"name": "workflow_delete", "server": "n8n", "description": "Deletes a workflow.", "parameter": {"id": "(string) The ID of the workflow to delete"}, "task": "Delete the workflow with the ID \"WF12345\"."}, {"name": "workflow_activate", "server": "n8n", "description": "Activates a workflow.", "parameter": {"id": "(string) The ID of the workflow to activate"}, "task": "Activate the workflow with ID \"WF-2024-001\" to start its execution."}, {"name": "workflow_deactivate", "server": "n8n", "description": "Deactivates a workflow.", "parameter": {"id": "(string) The ID of the workflow to deactivate"}, "task": "Deactivate the workflow with the ID \"WF12345\"."}, {"name": "execution_run", "server": "n8n", "description": "Executes a workflow via the API.", "parameter": {"id": "(string) The ID of the workflow to execute"}, "task": "Execute the workflow with ID \"WF-2024-001\" using the API."}, {"name": "execution_get", "server": "n8n", "description": "Gets details of a specific execution.", "parameter": {"id": "(string) The ID of the execution"}, "task": "Retrieve the details of the execution with the ID \"EX123456789\"."}, {"name": "execution_list", "server": "n8n", "description": "Lists executions for a workflow.", "parameter": {"workflowId": "(string) The ID of the workflow"}, "task": "List all executions for the workflow with ID \"WF12345\"."}, {"name": "execution_stop", "server": "n8n", "description": "Stops a running execution.", "parameter": {"id": "(string) The ID of the execution to stop"}, "task": "Stop the execution with ID \"EX123456\" immediately."}], "domains": [{"name": "DevOps Pipeline Management", "description": "DevOps流水线管理，包括持续集成(CI)构建(如Jenkins/GitLab CI)、工作流定义及持续部署(CD)自动化，支持跨平台应用交付(如Kubernetes集群部署、云平台发布)等"}]}
{"name": "National Parks", "description": "1. Search for national parks based on various criteria 2. Get comprehensive information about a specific national park 3. Get current alerts for national parks including closures, hazards, and important information 4. Get information about visitor centers and their operating hours 5. Get information about available campgrounds and their amenities 6. Find upcoming events at parks", "tools": [{"name": "findParks", "server": "National Parks", "description": "Search for national parks based on various criteria", "parameter": {"stateCode": "(optional string) Filter parks by state code (e.g., 'CA' for California). Multiple states can be comma-separated (e.g., 'CA,OR,WA')", "q": "(optional string) Search term to filter parks by name or description", "limit": "(optional number) Maximum number of parks to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "activities": "(optional string) Filter by available activities (e.g., 'hiking,camping')"}, "task": "Find 20 national parks in California and Oregon that offer hiking and camping activities."}, {"name": "getParkDetails", "server": "National Parks", "description": "Get comprehensive information about a specific national park", "parameter": {"parkCode": "(string) The park code of the national park (e.g., 'yose' for Yosemite, 'grca' for Grand Canyon)"}, "task": "Retrieve detailed information about the national park with the park code 'yose'."}, {"name": "getAlerts", "server": "National Parks", "description": "Get current alerts for national parks including closures, hazards, and important information", "parameter": {"parkCode": "(optional string) Filter alerts by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of alerts to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter alerts by title or description"}, "task": "Retrieve the latest 15 alerts for Yosemite National Park, including closures and hazards, starting from the first result."}, {"name": "getVisitorCenters", "server": "National Parks", "description": "Get information about visitor centers and their operating hours", "parameter": {"parkCode": "(optional string) Filter visitor centers by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of visitor centers to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter visitor centers by name or description"}, "task": "Retrieve the operating hours and details for up to 15 visitor centers in Yosemite National Park, starting from the 5th result. Include centers that mention \"wildlife\" in their description."}, {"name": "getCampgrounds", "server": "National Parks", "description": "Get information about available campgrounds and their amenities", "parameter": {"parkCode": "(optional string) Filter campgrounds by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of campgrounds to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter campgrounds by name or description"}, "task": "Retrieve a list of 15 campgrounds in Yosemite National Park that include the term \"RV-friendly\" in their description."}, {"name": "getEvents", "server": "National Parks", "description": "Find upcoming events at parks", "parameter": {"parkCode": "(optional string) Filter events by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of events to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "dateStart": "(optional string) Start date for filtering events (format: YYYY-MM-DD)", "dateEnd": "(optional string) End date for filtering events (format: YYYY-MM-DD)", "q": "(optional string) Search term to filter events by title or description"}, "task": "Find the next 20 upcoming events at Yosemite and Grand Canyon parks starting from June 1, 2024, to August 31, 2024, that include the term \"guided tour\" in their title or description."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "NS Travel Information", "description": "1.提供实时列车信息，包括出发和到达时间、站台号、延误和旅行笔记 2.规划最优旅行路线，包括换乘和实时更新 3.检查服务中断、维护工作和工程活动 4.获取单程和往返旅程的准确票价，包括旅行等级和团体票价 5.访问全面的车站信息，如设施、无障碍功能、站台布局、OV-fiets可用性和位置详情", "tools": [{"name": "Real-time Train Information", "server": "NS Travel Information", "description": "Provides real-time information about train departures and arrivals, including platform numbers, delays, and travel notes.", "parameter": {}, "task": "Check the real-time departure platform and any delays for the next train heading to New York City."}, {"name": "Journey Planning", "server": "NS Travel Information", "description": "Finds optimal travel routes with transfers and real-time updates.", "parameter": {}, "task": "Plan the fastest travel route from New York to Los Angeles with real-time updates on transfers and delays."}, {"name": "Service Updates", "server": "NS Travel Information", "description": "Checks for disruptions, maintenance work, and engineering activities.", "parameter": {}, "task": "Check for any ongoing service disruptions or scheduled maintenance activities affecting the platform."}, {"name": "Ticket Prices", "server": "NS Travel Information", "description": "Gets accurate pricing for single and return journeys, including travel classes and group pricing.", "parameter": {}, "task": "Get the pricing details for a return journey from London to Paris, including available travel classes and group discounts."}, {"name": "Station Details", "server": "NS Travel Information", "description": "Accesses comprehensive station information such as facilities, accessibility features, platform layouts, OV-fiets availability, and location details.", "parameter": {}, "task": "Retrieve the comprehensive details for the central train station, including facilities, accessibility features, and platform layouts."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Neovim", "description": "VIM编辑器操作，包括：缓冲区内容获取、命令发送、状态查询、行编辑、窗口操作、标记设置、寄存器设置和视觉选择", "tools": [{"name": "vim_buffer", "server": "Neovim", "description": "Returns the current active buffer content with line numbers shown. The filename parameter is ignored.", "parameter": {"filename": "(string) Ignored, returns a string of numbered lines with the current active buffer content"}, "task": "Display the content of the currently active buffer with line numbers included."}, {"name": "vim_command", "server": "Neovim", "description": "Sends a command to VIM for navigation, spot editing, and line deletion. Multiple commands can be separated by newlines.", "parameter": {"command": "(string) Vim command to execute"}, "task": "Navigate to line 50, delete the current line, and then move to the beginning of the next line in the open file using Vim commands."}, {"name": "vim_status", "server": "Neovim", "description": "Gets the status of the VIM editor, including cursor position, mode, filename, visual selection, window layout, current tab, marks, registers, and working directory.", "parameter": {}, "task": "Get the current status of the VIM editor, including cursor position, active mode, filename, and working directory."}, {"name": "vim_edit", "server": "Neovim", "description": "Edits lines in the VIM editor using insert, replace, or replaceAll modes.", "parameter": {"startLine": "(number) Line number where the edit starts", "mode": "(\"insert\" | \"replace\" | \"replaceAll\") Mode of editing", "lines": "(string) Lines to insert or replace"}, "task": "Insert the text \"Hello, world!\" at line 5 in the VIM editor using insert mode."}, {"name": "vim_window", "server": "Neovim", "description": "Manipulates Neovim windows, such as splitting, vertical splitting, closing, navigating, and making the current window the only one.", "parameter": {"command": "(string: \"split\", \"vsplit\", \"only\", \"close\", \"wincmd h/j/k/l\") Window management operation"}, "task": "Split the current Neovim window vertically to edit two files side by side."}, {"name": "vim_mark", "server": "Neovim", "description": "Sets a mark at a specific position in the VIM editor.", "parameter": {"mark": "(string: a-z) Mark name", "line": "(number) Line number", "column": "(number) Column number"}, "task": "Set a mark named 'x' at line 15, column 8 in the currently open VIM editor file."}, {"name": "vim_register", "server": "Neovim", "description": "Sets the content of a register in the VIM editor.", "parameter": {"register": "(string: a-z or \") Register name", "content": "(string) Content to set in the register"}, "task": "Set the content \"Hello, World!\" into register \"a\" in the VIM editor."}, {"name": "vim_visual", "server": "Neovim", "description": "Creates a visual selection in the VIM editor.", "parameter": {"startLine": "(number) Start line of the selection", "startColumn": "(number) Start column of the selection", "endLine": "(number) End line of the selection", "endColumn": "(number) End column of the selection"}, "task": "Select the text from line 5, column 3 to line 10, column 8 in the VIM editor."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "nomad-mcp", "description": "1. List variables with filtering and pagination 2. Get details of a specific variable 3. Create a new variable with namespace support 4. Delete a variable with CAS support", "tools": [{"name": "list_variables", "server": "nomad-mcp", "description": "Lists variables with optional filtering and pagination.", "parameter": {"namespace": "(string) The namespace to filter variables by.", "prefix": "(string) The prefix to filter variables by.", "per_page": "(int) The number of results per page."}, "task": "List all variables in the \"production\" namespace that start with the prefix \"config_\" and display 20 results per page."}, {"name": "get_variable", "server": "nomad-mcp", "description": "Gets details of a specific variable.", "parameter": {"path": "(string) The path of the variable.", "namespace": "(string) The namespace of the variable."}, "task": "Retrieve the details of the variable located at \"/config/settings\" within the \"production\" namespace."}, {"name": "create_variable", "server": "nomad-mcp", "description": "Creates a new variable with namespace support.", "parameter": {"path": "(string) The path of the variable.", "key": "(string) The key of the variable.", "value": "(string) The value of the variable.", "namespace": "(string) The namespace of the variable."}, "task": "Create a new variable with the key \"api_key\" and value \"12345-abcde\" under the \"production\" namespace at the path \"/config/\"."}, {"name": "delete_variable", "server": "nomad-mcp", "description": "Deletes a variable with CAS support.", "parameter": {"path": "(string) The path of the variable.", "namespace": "(string) The namespace of the variable."}, "task": "Delete the variable located at \"/config/settings\" within the \"production\" namespace."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "oatpp-mcp", "description": "A tool for logging purposes", "tools": [{"name": "Logger", "server": "oatpp-mcp", "description": "A tool for logging purposes.", "parameter": {}, "task": "Log the current system status for debugging purposes."}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "obsidian-mcp", "description": "1.笔记内容管理，包括读取、创建、编辑、删除和移动笔记 2.目录创建 3.笔记搜索 4.标签管理，包括添加、删除、重命名和组织标签 5.多库管理，列出所有可用库", "tools": [{"name": "read-note", "server": "obsidian-mcp", "description": "Read the contents of a note", "parameter": {}, "task": "Read the contents of the most recently created note."}, {"name": "create-note", "server": "obsidian-mcp", "description": "Create a new note", "parameter": {}, "task": "Create a new note with the title \"Meeting Agenda\" and the content \"Discuss project timeline and assign tasks.\""}, {"name": "edit-note", "server": "obsidian-mcp", "description": "Edit an existing note", "parameter": {}, "task": "Edit the content of the most recently created note to include updated project deadlines."}, {"name": "delete-note", "server": "obsidian-mcp", "description": "Delete a note", "parameter": {}, "task": "Delete the most recently created note from the system."}, {"name": "move-note", "server": "obsidian-mcp", "description": "Move a note to a different location", "parameter": {}, "task": "Move the selected note to the \"Archived Projects\" folder."}, {"name": "create-directory", "server": "obsidian-mcp", "description": "Create a new directory", "parameter": {}, "task": "Create a new directory named \"Project_2024\" in the current working directory."}, {"name": "search-vault", "server": "obsidian-mcp", "description": "Search notes in the vault", "parameter": {}, "task": "Search for all notes containing the keyword \"project planning\" within the vault."}, {"name": "add-tags", "server": "obsidian-mcp", "description": "Add tags to a note", "parameter": {}, "task": "Add the tags \"important\" and \"urgent\" to the specified note."}, {"name": "remove-tags", "server": "obsidian-mcp", "description": "Remove tags from a note", "parameter": {}, "task": "Remove all tags from the specified note."}, {"name": "rename-tag", "server": "obsidian-mcp", "description": "Rename a tag across all notes", "parameter": {}, "task": "Rename the tag \"work\" to \"professional\" in all notes."}, {"name": "manage-tags", "server": "obsidian-mcp", "description": "List and organize tags", "parameter": {}, "task": "List all available tags and organize them alphabetically in ascending order."}, {"name": "list-available-vaults", "server": "obsidian-mcp", "description": "List all available vaults (helps with multi-vault setups)", "parameter": {}, "task": "List all accessible vaults in the current multi-vault setup."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Okta", "description": "Okta用户与组管理,包括:用户信息检索、激活/停用/删除用户、用户组管理、批量用户导入、应用访问配置及入职工作流执行", "tools": [{"name": "get_user", "server": "Okta", "description": "Retrieves detailed user information from Okta, including user details, account dates, personal information, employment details, contact information, address, and preferences.", "parameter": {}, "task": "Retrieve the detailed user profile including account dates, personal information, employment details, and contact information from Okta."}, {"name": "list_users", "server": "Okta", "description": "Lists users from Okta with optional filtering and pagination, supporting SCIM filter expressions, free-form text search, sorting options, and pagination.", "parameter": {}, "task": "List all active users from the Okta directory with pagination set to display 50 users per page."}, {"name": "activate_user", "server": "Okta", "description": "Activates a user in Okta, with an option to send an activation email and update the user's status to active.", "parameter": {}, "task": "Activate a user account in Okta and send an activation email to the user."}, {"name": "suspend_user", "server": "Okta", "description": "Suspends a user in Okta.", "parameter": {}, "task": "Suspend the user account with the specified ID in the Okta system."}, {"name": "unsuspend_user", "server": "Okta", "description": "Unsuspends a previously suspended user in Okta.", "parameter": {}, "task": "Reactivate a user account that was previously suspended in the Okta system."}, {"name": "delete_user", "server": "Okta", "description": "Deletes a user from Okta, noting that the user must be deactivated first.", "parameter": {}, "task": "Deactivate and remove a user from the Okta directory system."}, {"name": "get_user_last_location", "server": "Okta", "description": "Retrieves the last known location and login information for a user from Okta system logs.", "parameter": {}, "task": "Retrieve the last known location and login timestamp for the user with ID 'user123' from the Okta system logs."}, {"name": "list_groups", "server": "Okta", "description": "Lists user groups from Okta with optional filtering and pagination, supporting filter expressions, free-form text search, sorting options, and pagination.", "parameter": {}, "task": "List all user groups from Okta, including their names and descriptions, sorted alphabetically by name."}, {"name": "create_group", "server": "Okta", "description": "Creates a new group in Okta with a name and optional description.", "parameter": {}, "task": "Create a new group in Okta with the name \"Marketing Team\" and a description of \"Group for all marketing department employees.\""}, {"name": "get_group", "server": "Okta", "description": "Retrieves detailed information about a specific group.", "parameter": {}, "task": "Retrieve detailed information about the group with ID 'GRP12345'."}, {"name": "delete_group", "server": "Okta", "description": "Deletes a group from Okta.", "parameter": {}, "task": "Delete the specified group from the Okta directory."}, {"name": "assign_user_to_group", "server": "Okta", "description": "Assigns a user to a group in Okta.", "parameter": {}, "task": "Assign a user with the email 'user@example.com' to the 'Marketing' group in Okta."}, {"name": "remove_user_from_group", "server": "Okta", "description": "Removes a user from a group in Okta.", "parameter": {}, "task": "Remove the specified user from the designated group in the Okta directory."}, {"name": "list_group_users", "server": "Okta", "description": "Lists all users in a specific group with pagination support.", "parameter": {}, "task": "List all users in the marketing group with pagination support, displaying 20 users per page."}, {"name": "bulk_user_import", "server": "Okta", "description": "Imports multiple users from a CSV string, creating user accounts based on CSV data, with optional activation of users, email notifications, and assignment to default groups.", "parameter": {}, "task": "Import 50 new users from the provided CSV data, activate their accounts, send email notifications, and assign them to the default groups."}, {"name": "assign_users_to_groups", "server": "Okta", "description": "Assigns multiple users to groups based on attribute mappings, mapping user attributes (department, title, etc.) to specific groups and performing bulk assignment of users based on attributes.", "parameter": {}, "task": "Assign 50 users from the 'Engineering' department to the 'Developers' group based on their department attribute."}, {"name": "provision_applications", "server": "Okta", "description": "Provisions application access for multiple users, assigning users to applications and supporting bulk provisioning.", "parameter": {}, "task": "Provision access to the HR and Finance applications for 50 new employees in bulk."}, {"name": "run_onboarding_workflow", "server": "Okta", "description": "Runs a complete onboarding workflow for multiple users from CSV data, including user import from CSV, automatic activation, group assignment based on attributes, application provisioning, and welcome email configuration.", "parameter": {}, "task": "Run a complete onboarding workflow for 50 new users imported from the provided CSV file, including automatic activation, group assignment based on department attributes, application provisioning, and welcome email setup."}], "domains": [{"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "OpenAI WebSearch MCP", "description": "Call OpenAI websearch as a tool", "tools": [{"name": "web_search", "server": "OpenAI WebSearch MCP", "description": "Call OpenAI websearch as a tool.", "parameter": {"type": "(string) web_search_preview", "search_context_size": "(string) High level guidance for the amount of context window space to use for the search. One of low, medium, or high. medium is the default.", "user_location": "(object or null) User location details, including type, city, country, region, and timezone."}, "task": "Search for the latest advancements in renewable energy technologies using a medium context window size."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "OpenAPI AnyApi", "description": "1.获取API端点模式 2.向指定URL发送HTTP请求", "tools": [{"name": "{prefix}_api_request_schema", "server": "OpenAPI AnyApi", "description": "Get API endpoint schemas that match your intent. Returns endpoint details including path, method, parameters, and response formats.", "parameter": {"query": "(string) Describe what you want to do with the API (e.g., 'Get user profile information', 'Create a new job posting')"}, "task": "Retrieve the API endpoint schema for fetching product details including name, price, and availability."}, {"name": "{prefix}_make_request", "server": "OpenAPI AnyApi", "description": "Essential for reliable execution with complex APIs where simplified implementations fail. Provides the ability to make HTTP requests to specified URLs with detailed options.", "parameter": {"method": "(string) HTTP method (GET, POST, PUT, DELETE, PATCH) (Enum: GET, POST, PUT, DELETE, PATCH)", "url": "(string) Fully qualified API URL (e.g., https://api.example.com/users/123)", "headers": "(Optional, object) Request headers", "query_params": "(Optional, object) Query parameters", "body": "(Optional, object) Request body for POST, PUT, PATCH"}, "task": "Send a POST request to `https://api.example.com/users` with a JSON body containing the user's name, email, and age, and include an `Authorization` header with a bearer token."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "OpenAPI Schema", "description": "API开发与测试工具集，包括API路径列表、端点详情、请求/响应模式、参数获取、组件列表与详情、安全方案列表及模式搜索", "tools": [{"name": "list-endpoints", "server": "OpenAPI Schema", "description": "Lists all API paths and their HTTP methods with summaries in a nested object structure", "parameter": {}, "task": "List all available API paths along with their supported HTTP methods and summaries in a structured format."}, {"name": "get-endpoint", "server": "OpenAPI Schema", "description": "Gets detailed information about a specific endpoint including parameters and responses", "parameter": {}, "task": "Retrieve detailed information about the specified API endpoint, including its parameters and response structure."}, {"name": "get-request-body", "server": "OpenAPI Schema", "description": "Gets the request body schema for a specific endpoint and method", "parameter": {}, "task": "Retrieve the request body schema for the `/users` endpoint using the POST method."}, {"name": "get-response-schema", "server": "OpenAPI Schema", "description": "Gets the response schema for a specific endpoint, method, and status code", "parameter": {}, "task": "Retrieve the response schema for the GET method of the `/users` endpoint with a 200 status code."}, {"name": "get-path-parameters", "server": "OpenAPI Schema", "description": "Gets the parameters for a specific path", "parameter": {}, "task": "Retrieve the parameters associated with the specified path.  \n\n(Note: Since the tool does not require any input parameters, the task is kept general to reflect the tool's purpose of fetching path parameters.)"}, {"name": "list-components", "server": "OpenAPI Schema", "description": "Lists all schema components (schemas, responses, parameters, etc.)", "parameter": {}, "task": "List all schema components including schemas, responses, and parameters from the connected API documentation."}, {"name": "get-component", "server": "OpenAPI Schema", "description": "Gets detailed definition for a specific component", "parameter": {}, "task": "Retrieve the detailed definition of the specified component from the system."}, {"name": "list-security-schemes", "server": "OpenAPI Schema", "description": "Lists all available security schemes", "parameter": {}, "task": "List all available security schemes currently configured in the system."}, {"name": "get-examples", "server": "OpenAPI Schema", "description": "Gets examples for a specific component or endpoint", "parameter": {}, "task": "Get examples for the user authentication endpoint."}, {"name": "search-schema", "server": "OpenAPI Schema", "description": "Searches across paths, operations, and schemas", "parameter": {}, "task": "Search for all available paths and operations in the API documentation."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "OpenCTI", "description": "1.威胁情报报告检索 2.恶意软件、威胁指标、威胁行为者信息搜索 3.用户、群组、攻击模式、活动、连接器、状态模板、文件、标记定义和标签列表检索", "tools": [{"name": "get_latest_reports", "server": "OpenCTI", "description": "Retrieves the most recent threat intelligence reports.", "parameter": {"first": "(Optional, number) Number of reports to retrieve, defaults to 10"}, "task": "Retrieve the 5 most recent threat intelligence reports."}, {"name": "get_report_by_id", "server": "OpenCTI", "description": "Retrieves a specific report by its ID.", "parameter": {"id": "(string) Report ID"}, "task": "Retrieve the report with ID \"RPT-2024-001\" from the database."}, {"name": "search_malware", "server": "OpenCTI", "description": "Searches for malware information in the OpenCTI database.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}, "task": "Search for information on the latest 15 malware samples related to ransomware attacks in the OpenCTI database."}, {"name": "search_indicators", "server": "OpenCTI", "description": "Searches for indicators of compromise.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}, "task": "Search for the latest 15 indicators of compromise related to \"ransomware attacks\" in the threat intelligence database."}, {"name": "search_threat_actors", "server": "OpenCTI", "description": "Searches for threat actor information.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}, "task": "Search for the latest 15 threat actors related to ransomware attacks."}, {"name": "get_user_by_id", "server": "OpenCTI", "description": "Retrieves user information by ID.", "parameter": {"id": "(string) User ID"}, "task": "Retrieve the details of the user with ID \"U12345\"."}, {"name": "list_users", "server": "OpenCTI", "description": "Lists all users in the system.", "parameter": {}, "task": "List all users currently registered in the system."}, {"name": "list_groups", "server": "OpenCTI", "description": "Lists all groups with their members.", "parameter": {"first": "(Optional, number) Number of groups to retrieve, defaults to 10"}, "task": "Retrieve the first 15 groups along with their member details."}, {"name": "list_attack_patterns", "server": "OpenCTI", "description": "Lists all attack patterns in the system.", "parameter": {"first": "(Optional, number) Number of attack patterns to retrieve, defaults to 10"}, "task": "Retrieve the first 15 attack patterns from the system's database."}, {"name": "get_campaign_by_name", "server": "OpenCTI", "description": "Retrieves campaign information by name.", "parameter": {"name": "(string) Campaign name"}, "task": "Retrieve the details of the marketing campaign named \"Summer Sale 2024\"."}, {"name": "list_connectors", "server": "OpenCTI", "description": "Lists all system connectors.", "parameter": {}, "task": "List all available system connectors currently configured in the environment."}, {"name": "list_status_templates", "server": "OpenCTI", "description": "Lists all status templates.", "parameter": {}, "task": "List all available status templates in the system."}, {"name": "get_file_by_id", "server": "OpenCTI", "description": "Retrieves file information by ID.", "parameter": {"id": "(string) File ID"}, "task": "Retrieve the details of the file with ID \"DOC-12345\"."}, {"name": "list_files", "server": "OpenCTI", "description": "Lists all files in the system.", "parameter": {}, "task": "List all files in the root directory of the system."}, {"name": "list_marking_definitions", "server": "OpenCTI", "description": "Lists all marking definitions.", "parameter": {}, "task": "List all available marking definitions in the system."}, {"name": "list_labels", "server": "OpenCTI", "description": "Lists all available labels.", "parameter": {}, "task": "List all available labels in the system."}], "domains": [{"name": "Threat Intelligence", "description": "威胁情报管理，包括威胁报告检索、恶意软件分析、威胁指标搜索、威胁行为者识别及系统安全信息管理"}, {"name": "User & Access Management", "description": "用户与访问管理，包括用户信息检索、群组成员列表及权限定义管理"}, {"name": "Security Information Management", "description": "安全信息管理，包括攻击模式、活动、连接器、状态模板、文件、标记定义和标签的检索与列表管理"}]}
{"name": "OpenDota", "description": "Dota 2 player and match data retrieval, including player information, recent matches, win/loss statistics, hero stats, professional players/matches, team information, and public matches", "tools": [{"name": "get_player_by_id", "server": "OpenDota", "description": "Retrieve player information by account ID", "parameter": {}, "task": "Retrieve the player information for the account with ID 12345."}, {"name": "get_player_recent_matches", "server": "OpenDota", "description": "Get recent matches for a player", "parameter": {}, "task": "Retrieve the last 10 matches played by the specified player."}, {"name": "get_match_data", "server": "OpenDota", "description": "Get detailed data for a specific match", "parameter": {}, "task": "Retrieve the detailed statistics and performance metrics for the latest completed match."}, {"name": "get_player_win_loss", "server": "OpenDota", "description": "Get win/loss statistics for a player", "parameter": {}, "task": "Get the win/loss statistics for the specified player."}, {"name": "get_player_heroes", "server": "OpenDota", "description": "Get a player's most played heroes", "parameter": {}, "task": "Retrieve the top 5 most played heroes for the specified player."}, {"name": "get_hero_stats", "server": "OpenDota", "description": "Get statistics for heroes", "parameter": {}, "task": "Retrieve the win rate, pick rate, and average KDA for the top 5 most played heroes in the current meta."}, {"name": "search_player", "server": "OpenDota", "description": "Search for players by name", "parameter": {}, "task": "Search for a player named \"Lionel Messi\" in the database."}, {"name": "get_pro_players", "server": "OpenDota", "description": "Get list of professional players", "parameter": {}, "task": "Retrieve the current list of all active professional players in the esports scene."}, {"name": "get_pro_matches", "server": "OpenDota", "description": "Get recent professional matches", "parameter": {}, "task": "Retrieve the latest 10 professional matches played in the last week."}, {"name": "get_player_peers", "server": "OpenDota", "description": "Get players who have played with a specified player", "parameter": {}, "task": "Find the list of players who have played alongside the specified player in previous matches."}, {"name": "get_heroes", "server": "OpenDota", "description": "Get list of all Dota 2 heroes", "parameter": {}, "task": "Retrieve the complete list of all available heroes in Dota 2."}, {"name": "get_player_totals", "server": "OpenDota", "description": "Get player's overall stats totals", "parameter": {}, "task": "Retrieve the overall statistics totals for the specified player."}, {"name": "get_player_rankings", "server": "OpenDota", "description": "Get player hero rankings", "parameter": {}, "task": "Retrieve the current rankings of players based on their hero performance."}, {"name": "get_player_wordcloud", "server": "OpenDota", "description": "Get most common words used by player in chat", "parameter": {}, "task": "Generate a word cloud showing the most frequently used words by a specific player in their chat messages."}, {"name": "get_team_info", "server": "OpenDota", "description": "Get information about a team", "parameter": {}, "task": "Retrieve the details of the current team, including member names and roles."}, {"name": "get_public_matches", "server": "OpenDota", "description": "Get recent public matches", "parameter": {}, "task": "Retrieve the last 20 public matches played within the past 24 hours."}, {"name": "get_match_heroes", "server": "OpenDota", "description": "Get heroes played in a specific match", "parameter": {}, "task": "Retrieve the list of heroes played in the latest recorded match."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "OpenRPC", "description": "1.调用任意JSON-RPC方法 2.发现可用的JSON-RPC方法", "tools": [{"name": "rpc_call", "server": "OpenRPC", "description": "Call arbitrary JSON-RPC methods", "parameter": {"server_url": "(string) URL of the JSON-RPC server", "method_name": "(string) Name of the method to call", "parameters": "(object) Parameters to pass to the method"}, "task": "Invoke the `getBalance` method on the JSON-RPC server at `https://api.example.com/rpc` with the parameters `{\"address\": \"0x123...\", \"block\": \"latest\"}`."}, {"name": "rpc_discover", "server": "OpenRPC", "description": "Discover available JSON-RPC methods", "parameter": {"server_url": "(string) URL of the JSON-RPC server"}, "task": "Discover all available JSON-RPC methods supported by the server at `https://api.example.com/jsonrpc`."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Open Strategy Partners Marketing Tools", "description": "1. Generate OSP product value maps 2. Create optimized metadata for web content 3. Apply OSP semantic editing codes for content review 4. Provide systematic approach to technical content creation", "tools": [{"name": "OSP Product Value Map Generator", "server": "Open Strategy Partners Marketing Tools", "description": "Generates structured OSP product value maps that effectively communicate a product's worth and positioning.", "parameter": {"Product Name": "(string) The name of the product", "Target Audience": "(string) The target audience for the product", "Key Features": "(list of strings) Key features of the product"}, "task": "Create a structured product value map for a smart home security system targeting urban homeowners, highlighting key features such as remote monitoring, AI-based threat detection, and seamless integration with existing smart devices."}, {"name": "OSP Meta Information Generator", "server": "Open Strategy Partners Marketing Tools", "description": "Creates optimized metadata for web content including article titles, meta titles, meta descriptions, SEO-friendly URL slugs, and more.", "parameter": {"Topic": "(string) The topic of the article", "Primary Keyword": "(string) The primary keyword for SEO", "Audience": "(string) The target audience", "Content Type": "(string) The type of content (e.g., technical guide, tutorial)"}, "task": "Generate optimized metadata for a technical guide on \"Python Data Analysis\" targeting data scientists, using \"Pandas DataFrame\" as the primary keyword."}, {"name": "OSP Content Editing Codes", "server": "Open Strategy Partners Marketing Tools", "description": "Applies OSP's semantic editing codes for comprehensive content review, including scope, flow, style, and technical accuracy.", "parameter": {"Content": "(string) The content to be reviewed"}, "task": "Review the provided technical documentation for scope, flow, style, and technical accuracy using semantic editing codes."}, {"name": "OSP Technical Writing Guide", "server": "Open Strategy Partners Marketing Tools", "description": "Provides a systematic approach to creating high-quality technical content, including narrative structure, flow, style, and technical accuracy.", "parameter": {"Document Type": "(string) The type of document (e.g., tutorial, reference doc)", "Topic": "(string) The topic of the document", "Audience": "(string) The target audience"}, "task": "Create a tutorial document on \"Getting Started with Python\" aimed at beginner programmers, ensuring the content follows a clear narrative structure and maintains technical accuracy."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Outline", "description": "1. Search for documents by keywords 2. List all available collections 3. Get document content by ID 4. Create new document in specified collection 5. Add comment to document 6. Move document to different collection", "tools": [{"name": "Search for Documents", "server": "Outline", "description": "Search for documents by keywords.", "parameter": {}, "task": "Search for documents containing the keywords \"project timeline\" and \"budget allocation\" from the past year."}, {"name": "List Collections", "server": "Outline", "description": "List all available collections.", "parameter": {}, "task": "List all available collections in the current database."}, {"name": "Read a Document", "server": "Outline", "description": "Get the content of a document by its ID.", "parameter": {"docId": "(string) The ID of the document to read."}, "task": "Retrieve the content of the document with ID \"DOC-2024-001\"."}, {"name": "Create a New Document", "server": "Outline", "description": "Create a new document in a specified collection with given content.", "parameter": {"title": "(string) The title of the new document.", "collectionId": "(string) The ID of the collection where the document will be created.", "content": "(string) The content of the new document."}, "task": "Create a new document titled \"Project Proposal\" in the collection with ID \"PRJ-2024\" containing the content \"This document outlines the scope and objectives of the upcoming project.\""}, {"name": "Add a Comment", "server": "Outline", "description": "Add a comment to a document.", "parameter": {"docId": "(string) The ID of the document to comment on.", "comment": "(string) The text of the comment."}, "task": "Add a comment with the text \"Please review this section for accuracy\" to the document with ID DOC-12345."}, {"name": "Move a Document", "server": "Outline", "description": "Move a document to a different collection.", "parameter": {"docId": "(string) The ID of the document to move.", "newCollectionId": "(string) The ID of the target collection."}, "task": "Move the document with ID \"doc123\" to the collection with ID \"coll456\"."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Pandoc", "description": "Transform content between supported formats", "tools": [{"name": "convert-contents", "server": "Pandoc", "description": "Transforms content between supported formats", "parameter": {"contents": "(string) Source content to convert (required if input_file not provided)", "input_file": "(string) Complete path to input file (required if contents not provided)", "input_format": "(string) Source format of the content (defaults to markdown)", "output_format": "(string) Target format (defaults to markdown)", "output_file": "(string) Complete path for output file (required for pdf, docx, rst, latex, epub formats)"}, "task": "Convert the provided text document from Markdown format to LaTeX format and save the output to a specified file path."}], "domains": [{"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Phone MCP", "description": "1.执行屏幕交互操作（点击、滑动、按键、输入文本、查找元素等） 2.分析屏幕UI元素 3.通过UI自动化创建联系人 4.通过包名和活动名启动应用 5.通过Android intent系统启动活动", "tools": [{"name": "interact_with_screen", "server": "Phone MCP", "description": "Executes various screen interaction actions such as tapping, swiping, pressing keys, inputting text, finding elements, waiting for elements, and scrolling.", "parameter": {"action": "(str) Type of action ('tap', 'swipe', 'key', 'text', 'find', 'wait', 'scroll')", "params": "(Optional, Dict[str, Any]) Dictionary with parameters specific to each action type"}, "task": "Tap on the element located at coordinates (500, 800) on the screen."}, {"name": "analyze_screen", "server": "Phone MCP", "description": "Analyzes the current screen and provides structured information about UI elements.", "parameter": {"include_screenshot": "(Optional, bool) Whether to include base64-encoded screenshot in result", "max_elements": "(Optional, int) Maximum number of UI elements to process"}, "task": "Analyze the current screen's UI elements, including a screenshot, and process up to 20 elements."}, {"name": "create_contact", "server": "Phone MCP", "description": "Creates a new contact with the given name and phone number using UI automation.", "parameter": {"name": "(str) The contact's full name", "phone": "(str) The phone number for the contact"}, "task": "Add a new contact with the name \"John Doe\" and phone number \"+1 (555) 123-4567\" to the address book."}, {"name": "launch_app_activity", "server": "Phone MCP", "description": "Launches an app using the package name and optionally an activity name.", "parameter": {"package_name": "(str) The package name of the app to launch", "activity_name": "(Optional, str) The specific activity to launch"}, "task": "Launch the main activity of the app with the package name \"com.example.myapp\"."}, {"name": "launch_intent", "server": "Phone MCP", "description": "Launches an activity using the Android intent system.", "parameter": {"intent_action": "(str) The action to perform", "intent_type": "(Optional, str) The MIME type for the intent", "extras": "(Optional, Dict[str, str]) Extra data to pass with the intent"}, "task": "Open the camera app on an Android device to take a photo."}], "domains": [{"name": "Remote Desktop Control", "description": "远程桌面控制，包括屏幕捕获、输入模拟（键盘/鼠标）、应用程序控制及自动化操作"}]}
{"name": "PIF", "description": "1.工作区上下文导航与管理 2.开发连接见解 3.创建临时思考空间 4.记录发展并探索日志条目模式", "tools": [{"name": "pwd", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Display the current working directory path in the workspace."}, {"name": "cd", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Navigate to the root directory of the current workspace."}, {"name": "read", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Navigate through the current workspace to review and organize the available files and folders."}, {"name": "write", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Navigate through the workspace and organize the current context for better management."}, {"name": "mkdir", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Create a new directory named \"project_assets\" within the current workspace."}, {"name": "delete", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Delete the current workspace context."}, {"name": "move", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Navigate to the next workspace in the current session."}, {"name": "rename", "server": "PIF", "description": "Navigate and manage workspace context", "parameter": {}, "task": "Rename the current workspace to \"Project_Alpha\"."}, {"name": "reason", "server": "PIF", "description": "Develop connected insights", "parameter": {"thoughts": "(array) An array of thought objects with content and optional relations"}, "task": "Develop connected insights by analyzing an array of thought objects, including their content and any optional relations."}, {"name": "think", "server": "PIF", "description": "Create temporal spaces for contemplation", "parameter": {}, "task": "Reflect on the past week's achievements and challenges in a quiet, distraction-free environment."}, {"name": "journal_create", "server": "PIF", "description": "Document developments", "parameter": {"title": "(string) Title of the journal entry", "content": "(string) Content of the journal entry", "tags": "(array) Array of tags for the journal entry"}, "task": "Create a journal entry titled \"Project Alpha Progress\" with the content \"Completed the initial prototype testing phase\" and tag it with \"development\" and \"testing\"."}, {"name": "journal_read", "server": "PIF", "description": "Explore patterns in journal entries", "parameter": {}, "task": "Analyze the patterns in journal entries from the past month to identify recurring themes or emotions."}], "domains": [{"name": "Workspace Management", "description": "Workspace operations and management, including workspace creation, SQL execution, and job scheduling"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}, {"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Placid.app", "description": "1.列出可用的Placid模板 2.使用Placid模板生成视频 3.使用Placid模板生成静态图像", "tools": [{"name": "placid_list_templates", "server": "Placid.app", "description": "Lists available Placid templates with filtering options. Each template includes its title, ID, preview image URL, available layers, and tags.", "parameter": {"collection_id": "(Optional, string) Filter templates by collection ID", "custom_data": "(Optional, string) Filter by custom reference data", "tags": "(Optional, array) Array of tags to filter templates by"}, "task": "List all available templates in the Placid collection with the ID \"marketing-2024\" that include the tags \"social-media\" and \"promotional\"."}, {"name": "placid_generate_video", "server": "Placid.app", "description": "Generate videos by combining Placid templates with dynamic content like videos, images, and text. For longer videos, a job ID is provided to check status.", "parameter": {"template_id": "(string) UUID of the template to use", "layers": "(object) Object containing dynamic content for template layers", "audio": "(Optional, string) URL to an mp3 audio file", "audio_duration": "(Optional, string) Set to 'auto' to trim audio to video length", "audio_trim_start": "(Optional, string) Timestamp of trim start point", "audio_trim_end": "(Optional, string) Timestamp of trim end point"}, "task": "Generate a 30-second promotional video using the Placid template with ID 'abc123-xyz456', incorporating dynamic images and text layers, and overlay it with the provided mp3 audio file trimmed to match the video length."}, {"name": "placid_generate_image", "server": "Placid.app", "description": "Generate static images by combining Placid templates with dynamic content like text and images.", "parameter": {"template_id": "(string) UUID of the template to use", "layers": "(object) Object containing dynamic content for template layers"}, "task": "Generate a static image using the template with ID \"abc123-xyz456\" and populate the dynamic layers with the provided text \"Welcome to 2024\" and a company logo image."}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Postman", "description": "Run a Postman collection and return test results", "tools": [{"name": "run-collection", "server": "Postman", "description": "Runs a Postman collection and returns the test results.", "parameter": {"collection": "(required) Path or URL to the Postman collection", "environment": "(optional) Path or URL to environment file", "globals": "(optional) Path or URL to globals file", "iterationCount": "(optional) Number of iterations to run"}, "task": "Run the Postman collection located at \"https://example.com/test-collection.json\" with 5 iterations and include the environment file from \"https://example.com/test-env.json\". Return the test results."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}]}
{"name": "Productboard", "description": "Productboard数据检索,包括:公司列表与详情、组件列表与详情、功能列表与详情及状态、笔记、产品列表与详情", "tools": [{"name": "get_companies", "server": "Productboard", "description": "Retrieves a list of companies from Productboard.", "parameter": {}, "task": "Retrieve the latest list of companies from the Productboard database."}, {"name": "get_company_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific company.", "parameter": {}, "task": "Retrieve detailed information about the company with the name \"TechSolutions Inc.\" including its founding date, industry, and current CEO."}, {"name": "get_components", "server": "Productboard", "description": "Retrieves a list of components from Productboard.", "parameter": {}, "task": "Retrieve a list of all available components from the product management system."}, {"name": "get_component_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific component.", "parameter": {}, "task": "Retrieve detailed information about the specified component, including its specifications, dependencies, and usage guidelines."}, {"name": "get_features", "server": "Productboard", "description": "Retrieves a list of features from Productboard.", "parameter": {}, "task": "Retrieve the latest 10 features from the Productboard platform."}, {"name": "get_feature_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific feature.", "parameter": {}, "task": "Retrieve detailed information about the latest product feature update."}, {"name": "get_feature_statuses", "server": "Productboard", "description": "Retrieves the statuses of features from Productboard.", "parameter": {}, "task": "Retrieve the current statuses of all features tracked in Productboard."}, {"name": "get_notes", "server": "Productboard", "description": "Retrieves notes from Productboard.", "parameter": {}, "task": "Retrieve the latest 10 notes from the Productboard workspace."}, {"name": "get_products", "server": "Productboard", "description": "Retrieves a list of products from Productboard.", "parameter": {}, "task": "Retrieve a list of all available products from the Productboard platform."}, {"name": "get_product_detail", "server": "Productboard", "description": "Retrieves detailed information about a specific product.", "parameter": {}, "task": "Retrieve detailed information about the latest smartphone model available in the inventory."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Prometheus", "description": "1. Execute PromQL instant and range queries against Prometheus 2. List all available metrics in Prometheus 3. Get metadata for a specific metric 4. Get information about all scrape targets", "tools": [{"name": "execute_query", "server": "Prometheus", "description": "Execute a PromQL instant query against Prometheus", "parameter": {"query": "(string) The PromQL query to execute"}, "task": "Execute a PromQL query to retrieve the current CPU usage percentage of all nodes in the Kubernetes cluster."}, {"name": "execute_range_query", "server": "Prometheus", "description": "Execute a PromQL range query with start time, end time, and step interval", "parameter": {"query": "(string) The PromQL query to execute", "start_time": "(string) The start time of the range query", "end_time": "(string) The end time of the range query", "step_interval": "(string) The step interval for the range query"}, "task": "Retrieve the CPU usage metrics for the last 24 hours with a 5-minute step interval using a PromQL range query."}, {"name": "list_metrics", "server": "Prometheus", "description": "List all available metrics in Prometheus", "parameter": {}, "task": "List all available metrics currently stored in the Prometheus monitoring system."}, {"name": "get_metric_metadata", "server": "Prometheus", "description": "Get metadata for a specific metric", "parameter": {"metric_name": "(string) The name of the metric to get metadata for"}, "task": "Retrieve the metadata for the \"user_login_count\" metric."}, {"name": "get_targets", "server": "Prometheus", "description": "Get information about all scrape targets", "parameter": {}, "task": "Retrieve the current status and details of all active scrape targets being monitored."}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Pushover", "description": "Send notifications via Pushover", "tools": [{"name": "send", "server": "Pushover", "description": "Sends a notification via Pushover.", "parameter": {"message": "(string) The message to send", "title": "(Optional, string) Message title", "priority": "(Optional, number) -2 to 2 (-2: lowest, 2: emergency)", "sound": "(Optional, string) Notification sound", "url": "(Optional, string) URL to include", "url_title": "(Optional, string) Title for the URL", "device": "(Optional, string) Target specific device"}, "task": "Send a high-priority emergency notification with the message \"Server Down\" and the title \"Critical Alert\" to all devices, including a link to the server status page with the URL title \"Check Status\". Use the \"siren\" sound for the notification."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Quarkus", "description": "1.通过JDBC URL存储和检索数据库数据 2.检查运行中的JVM进程 3.从文件系统提供文件服务 4.使用JavaFX创建绘图画布 5.与Kubernetes集群交互 6.使用Docker/Podman/OCI兼容容器引擎 7.通过Wolfram Alpha LLM API进行优化的网络搜索", "tools": [{"name": "jdbc", "server": "Quarkus", "description": "A server for storing and retrieving data from a database via a JDBC URL.", "parameter": {}, "task": "Retrieve all customer records from the database connected via the JDBC server."}, {"name": "jvminsight", "server": "Quarkus", "description": "A server for inspecting a running JVM process.", "parameter": {}, "task": "Inspect the running JVM process to analyze its current state and performance metrics."}, {"name": "filesystem", "server": "Quarkus", "description": "A server for serving files from a file system.", "parameter": {"path1": "(Optional, string) Path to serve files from", "path2": "(Optional, string) Additional path to serve files from"}, "task": "Serve files from the directory `/var/www/html` and additionally from `/home/user/downloads` on the server."}, {"name": "jfx", "server": "Quarkus", "description": "A server that exposes a canvas for making drawings using JavaFX.", "parameter": {}, "task": "Draw a simple house with a roof, door, and two windows on the JavaFX canvas."}, {"name": "kubernetes", "server": "Quarkus", "description": "A server for interacting with a Kubernetes cluster.", "parameter": {}, "task": "Deploy a new application to the Kubernetes cluster and monitor its status."}, {"name": "containers", "server": "Quarkus", "description": "A server for working with Docker/Podman/OCI compatible container engines.", "parameter": {}, "task": "List all running containers managed by the Docker/Podman/OCI compatible container engine."}, {"name": "wolfram", "server": "Quarkus", "description": "A server for performing web searches optimized for use by a large language model through the Wolfram Alpha LLM API.", "parameter": {}, "task": "Search for the latest advancements in quantum computing using the Wolfram Alpha API."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}, {"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}, {"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}, {"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}, {"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "QGIS", "description": "1.执行简单的ping命令检查服务器连接性 2.QGIS项目操作,包括:项目创建/加载/保存、图层管理(矢量/栅格)、地图渲染、处理算法执行及PyQGIS代码执行", "tools": [{"name": "ping", "server": "QGIS", "description": "Simple ping command to check server connectivity", "parameter": {}, "task": "Check the connectivity of the server at IP address 192.168.1.1 using a ping command."}, {"name": "get_qgis_info", "server": "QGIS", "description": "Get QGIS information about the current installation", "parameter": {}, "task": "Retrieve the version and installed plugins details for the current QGIS installation."}, {"name": "load_project", "server": "QGIS", "description": "Load a QGIS project from the specified path", "parameter": {"path": "(string) Path to the QGIS project file"}, "task": "Load the QGIS project file located at \"/home/user/projects/urban_planning.qgs\"."}, {"name": "create_new_project", "server": "QGIS", "description": "Create a new project and save it", "parameter": {"path": "(string) Path to save the new project file"}, "task": "Create a new project file and save it to the specified directory path \"/projects/new_project_2024\"."}, {"name": "get_project_info", "server": "QGIS", "description": "Get current project information", "parameter": {}, "task": "Retrieve the details of the currently active project."}, {"name": "add_vector_layer", "server": "QGIS", "description": "Add a vector layer to the project", "parameter": {"path": "(string) Path to the vector layer file", "name": "(string) Name to assign to the layer"}, "task": "Add a vector layer from the file located at \"/data/shapefiles/cities.shp\" and name it \"Major Cities Layer\"."}, {"name": "add_raster_layer", "server": "QGIS", "description": "Add a raster layer to the project", "parameter": {"path": "(string) Path to the raster layer file", "name": "(string) Name to assign to the layer"}, "task": "Add a raster layer from the file located at \"/data/elevation.tif\" to the project and name it \"Elevation Data\"."}, {"name": "get_layers", "server": "QGIS", "description": "Retrieve all layers in the current project", "parameter": {}, "task": "Retrieve all layers from the currently open project file."}, {"name": "remove_layer", "server": "QGIS", "description": "Remove a layer from the project by its ID", "parameter": {"layer_id": "(string) ID of the layer to remove"}, "task": "Remove the layer with ID 'L12345' from the current project."}, {"name": "zoom_to_layer", "server": "QGIS", "description": "Zoom to the extent of a specified layer", "parameter": {"layer_id": "(string) ID of the layer to zoom to"}, "task": "Zoom to the extent of the layer with ID \"land_parcels_2023\" in the current map view."}, {"name": "get_layer_features", "server": "QGIS", "description": "Retrieve features from a vector layer with an optional limit", "parameter": {"layer_id": "(string) ID of the vector layer", "limit": "(Optional, integer) Maximum number of features to retrieve"}, "task": "Retrieve up to 50 features from the vector layer identified by the ID \"land_parcels_2023\"."}, {"name": "execute_processing", "server": "QGIS", "description": "Execute a processing algorithm with the given parameters", "parameter": {"algorithm": "(string) Name of the processing algorithm", "parameters": "(dictionary) Parameters for the algorithm"}, "task": "Execute the \"watershed delineation\" algorithm with parameters set to a flow accumulation threshold of 1000 cells and a minimum basin size of 50 hectares."}, {"name": "save_project", "server": "QGIS", "description": "Save the current project to the given path", "parameter": {"path": "(string) Path to save the project file"}, "task": "Save the current project file to the specified directory path \"/projects/2024/June\"."}, {"name": "render_map", "server": "QGIS", "description": "Render the current map view to an image file", "parameter": {"output_path": "(string) Path to save the rendered image"}, "task": "Render the current map view to an image file and save it to the specified output path."}, {"name": "execute_code", "server": "QGIS", "description": "Execute arbitrary PyQGIS code provided as a string", "parameter": {"code": "(string) PyQGIS code to execute"}, "task": "Run the provided PyQGIS code to calculate the area of all polygons in the active layer."}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}, {"name": "Geographic Information System", "description": "地理信息系统操作,包括项目创建/加载/保存、图层管理(矢量/栅格)、地图渲染、处理算法执行及代码执行"}]}
{"name": "QuickChart", "description": "1. Generate chart URLs using QuickChart.io 2. Download chart images to local files", "tools": [{"name": "generate_chart", "server": "QuickChart", "description": "Generate a chart URL using QuickChart.io", "parameter": {"type": "(string) The type of chart to generate (e.g., 'bar', 'line', 'pie')", "data": "(object) The data configuration for the chart", "options": "(object, optional) Additional options for the chart"}, "task": "Create a pie chart displaying the monthly sales distribution for Q1 2024 using the provided sales data."}, {"name": "download_chart", "server": "QuickChart", "description": "Download a chart image to a local file", "parameter": {"config": "(object) The chart configuration", "outputPath": "(string) The path where the chart image will be saved"}, "task": "Save a bar chart showing monthly sales data for Q1 2024 to the specified local directory."}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "Qwen_Max", "description": "Generate text using the Qwen Max language model", "tools": [{"name": "qwen_max", "server": "Qwen_Max", "description": "Generates text using the Qwen Max language model.", "parameter": {"prompt": "(string) The input prompt for the model.", "max_tokens": "(number) The maximum number of tokens to generate in the output.", "temperature": "(number) Controls the randomness of the model's output."}, "task": "Generate a creative story about a futuristic city using 500 tokens, with a temperature setting of 0.7 to balance creativity and coherence."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Raindrop.io", "description": "1.创建书签 2.搜索书签", "tools": [{"name": "create-bookmark", "server": "Raindrop.io", "description": "Creates a new bookmark.", "parameter": {"url": "(string) URL to bookmark (required)", "title": "(Optional, string) Title for the bookmark", "tags": "(Optional, array) Array of tags", "collection": "(Optional, string) Collection ID"}, "task": "Create a new bookmark for the URL \"https://example.com\" with the title \"Example Website\" and tag it as \"reference\" in the \"Web Resources\" collection."}, {"name": "search-bookmarks", "server": "Raindrop.io", "description": "Searches through bookmarks.", "parameter": {"query": "(string) Search query (required)", "tags": "(Optional, array) Array of tags to filter by"}, "task": "Search for bookmarks containing the keyword \"JavaScript tutorials\" and filter by the tags \"programming\" and \"web development\"."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Reaper", "description": "1.查找Reaper项目 2.解析Reaper项目并返回JSON对象", "tools": [{"name": "find_reaper_projects", "server": "Reaper", "description": "Finds all Reaper projects in the directory specified in the config.", "parameter": {}, "task": "List all Reaper project files located in the configured directory."}, {"name": "parse_reaper_project", "server": "Reaper", "description": "Parses a Reaper project and returns a JSON object.", "parameter": {}, "task": "Parse the current Reaper project and return its structure in JSON format."}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Rememberizer AI", "description": "1.从Rememberizer个人/团队内部知识库中检索语义相似的匹配项 2.使用简单查询搜索Rememberizer内部知识库中的文档 3.列出个人/团队内部知识库的来源 4.获取Rememberizer.ai知识库账户信息 5.检索个人/团队知识系统中所有文档的分页列表 6.在Rememberizer.ai知识系统中保存文本信息以便未来召回", "tools": [{"name": "retrieve_semantically_similar_internal_knowledge", "server": "Rememberizer AI", "description": "Retrieves semantically similar matches from the connected Rememberizer personal/team internal knowledge and memory repository.", "parameter": {"match_this": "(string) Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge", "n_results": "(Optional, integer) Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information", "from_datetime_ISO8601": "(Optional, string) Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date", "to_datetime_ISO8601": "(Optional, string) End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date"}, "task": "Find up to 5 semantically similar knowledge chunks related to \"best practices for remote team collaboration\" from the internal repository, filtering results between January 1, 2023, and December 31, 2023."}, {"name": "smart_search_internal_knowledge", "server": "Rememberizer AI", "description": "Searches for documents in Rememberizer's personal/team internal knowledge and memory repository using a simple query. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {"query": "(string) Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge", "user_context": "(Optional, string) Additional context for the query. Summarize the conversation up to this point for better context-aware results", "n_results": "(Optional, integer) Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information", "from_datetime_ISO8601": "(Optional, string) Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date", "to_datetime_ISO8601": "(Optional, string) End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date"}, "task": "Search for up to 5 semantically relevant documents related to \"Q2 2024 marketing strategy\" within the team's knowledge repository, including sources like Slack discussions, emails, and cloud storage files, filtered between March 1, 2024, and June 30, 2024."}, {"name": "list_internal_knowledge_systems", "server": "Rememberizer AI", "description": "Lists the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {}, "task": "List all available sources of internal knowledge, including team discussions, emails, and document storage platforms."}, {"name": "rememberizer_account_information", "server": "Rememberizer AI", "description": "Gets information about the Rememberizer.ai personal/team knowledge repository account, including account holder name and email address.", "parameter": {}, "task": "Retrieve the account holder's name and email address associated with the Rememberizer.ai knowledge repository."}, {"name": "list_personal_team_knowledge_documents", "server": "Rememberizer AI", "description": "Retrieves a paginated list of all documents in the personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {"page": "(Optional, integer) Page number for pagination, starts at 1 (default: 1)", "page_size": "(Optional, integer) Number of documents per page, range 1-1000 (default: 100)"}, "task": "Retrieve the first 50 documents from the personal/team knowledge system, including sources like Slack, Gmail, Dropbox, and Google Drive."}, {"name": "remember_this", "server": "Rememberizer AI", "description": "Saves a piece of text information in the Rememberizer.ai knowledge system so that it may be recalled in the future through other tools.", "parameter": {"name": "(string) Name of the information. Used to identify the information in the future", "content": "(string) The information you wish to memorize"}, "task": "Save the text \"The capital of France is Paris\" in the knowledge system with the identifier \"FranceCapital\"."}], "domains": [{"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Replicate", "description": "1.模型搜索与浏览 2.模型集合管理 3.预测任务执行与状态监控 4.图像缓存管理", "tools": [{"name": "search_models", "server": "Replicate", "description": "Find models using semantic search", "parameter": {}, "task": "Find relevant models by performing a semantic search based on the given query."}, {"name": "list_models", "server": "Replicate", "description": "Browse available models", "parameter": {}, "task": "Browse the list of available models for selection."}, {"name": "get_model", "server": "Replicate", "description": "Get details about a specific model", "parameter": {}, "task": "Retrieve the specifications and details of the current model in use."}, {"name": "list_collections", "server": "Replicate", "description": "Browse model collections", "parameter": {}, "task": "Browse all available model collections to review their details."}, {"name": "get_collection", "server": "Replicate", "description": "Get details about a specific collection", "parameter": {}, "task": "Retrieve the details of the current collection."}, {"name": "create_prediction", "server": "Replicate", "description": "Run a model with your inputs", "parameter": {}, "task": "Run the model to generate predictions based on the provided input data."}, {"name": "get_prediction", "server": "Replicate", "description": "Check a prediction's status", "parameter": {}, "task": "Check the status of the latest prediction made by the system."}, {"name": "cancel_prediction", "server": "Replicate", "description": "Stop a running prediction", "parameter": {}, "task": "Stop the currently running prediction process."}, {"name": "list_predictions", "server": "Replicate", "description": "See your recent predictions", "parameter": {}, "task": "List the most recent predictions made in the system."}, {"name": "view_image", "server": "Replicate", "description": "Open an image in your browser", "parameter": {}, "task": "Display the selected image in a web browser."}, {"name": "clear_image_cache", "server": "Replicate", "description": "Clean up cached images", "parameter": {}, "task": "Clear all cached images stored in the system."}, {"name": "get_image_cache_stats", "server": "Replicate", "description": "Check cache usage", "parameter": {}, "task": "Check the current cache usage statistics for stored images."}], "domains": [{"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "Rquest", "description": "HTTP请求操作,包括:GET/POST/PUT/DELETE/PATCH/HEAD/OPTIONS/TRACE请求,存储响应检索,HTML/PDF转Markdown,PDF模型状态获取与重启加载", "tools": [{"name": "http_get", "server": "Rquest", "description": "Perform GET requests with optional parameters", "parameter": {"url": "(string) The URL to send the GET request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "params": "(Optional, dict) Query parameters to include in the request"}, "task": "Retrieve the latest product listings from the specified e-commerce API endpoint, including query parameters for category \"electronics\" and a limit of 20 items per page."}, {"name": "http_post", "server": "Rquest", "description": "Submit data via POST requests", "parameter": {"url": "(string) The URL to send the POST request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}, "task": "Send a POST request to `https://api.example.com/submit` with JSON data containing a user's name (\"John Doe\") and email (\"john.doe@example.com\"), and include a custom header `Authorization: Bearer xyz123`."}, {"name": "http_put", "server": "Rquest", "description": "Update resources with PUT requests", "parameter": {"url": "(string) The URL to send the PUT request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}, "task": "Update the user profile with the new email address \"user@example.com\" by sending a PUT request to the API endpoint \"/api/users/123\". Include the necessary authentication headers and ensure the request body is formatted as JSON."}, {"name": "http_delete", "server": "Rquest", "description": "Remove resources with DELETE requests", "parameter": {"url": "(string) The URL to send the DELETE request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": "Delete the resource located at `https://api.example.com/users/123` with the header `Authorization: Bearer token123`."}, {"name": "http_patch", "server": "Rquest", "description": "Partially update resources", "parameter": {"url": "(string) The URL to send the PATCH request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}, "task": "Update the user profile with the new email address \"user@example.com\" by sending a PATCH request to the API endpoint \"/users/123\". Include the necessary authentication headers and send the data in JSON format."}, {"name": "http_head", "server": "Rquest", "description": "Retrieve only headers from a resource", "parameter": {"url": "(string) The URL to send the HEAD request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": "Retrieve the headers from the resource located at \"https://example.com/api\" without including any additional headers or cookies."}, {"name": "http_options", "server": "Rquest", "description": "Retrieve options for a resource", "parameter": {"url": "(string) The URL to send the OPTIONS request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": "Retrieve the available HTTP methods for the resource located at \"https://api.example.com/v1/users\" including custom headers for authentication."}, {"name": "http_trace", "server": "Rquest", "description": "Diagnostic request tracing", "parameter": {"url": "(string) The URL to send the TRACE request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}, "task": "Trace the HTTP request to \"https://api.example.com/v1/data\" including the custom header \"X-Request-ID: 12345\" and the cookie \"session_id=abc123\"."}, {"name": "get_stored_response", "server": "Rquest", "description": "Retrieve stored large responses, optionally by line range", "parameter": {"response_id": "(string) The ID of the stored response", "start_line": "(Optional, int) The starting line number to retrieve", "end_line": "(Optional, int) The ending line number to retrieve"}, "task": "Retrieve lines 50 to 100 from the stored response with ID \"RESP12345\"."}, {"name": "get_stored_response_with_markdown", "server": "Rquest", "description": "Convert HTML or PDF responses to Markdown format for better LLM processing", "parameter": {"response_id": "(string) The ID of the stored response", "start_line": "(Optional, int) The starting line number to retrieve", "end_line": "(Optional, int) The ending line number to retrieve"}, "task": "Convert the stored response with ID \"RES12345\" to Markdown format, retrieving only lines 10 to 30 for processing."}, {"name": "get_model_state", "server": "Rquest", "description": "Get the current state of the PDF models loading process", "parameter": {}, "task": "Check the current loading status of all PDF models in the system."}, {"name": "restart_model_loading", "server": "Rquest", "description": "Restart the PDF models loading process if it failed or got stuck", "parameter": {}, "task": "Restart the PDF model loading process if it is currently stuck or failed."}], "domains": [{"name": "API Development & Testing", "description": "API开发与测试，包括API规范验证、接口测试、文档生成及SDK生成"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "Rijksmuseum", "description": "1.使用多种条件搜索和筛选艺术品 2.检索艺术品的详细信息 3.访问高分辨率图像数据 4.浏览用户创建的收藏集 5.访问特定用户收藏集的详细信息 6.在浏览器中直接查看艺术品图像 7.生成艺术家作品的时间线", "tools": [{"name": "search_artwork", "server": "Rijksmuseum", "description": "Search and filter artworks using various criteria including text-based search, artist name, artwork type, materials and techniques, time periods, colors, and more.", "parameter": {}, "task": "Search for abstract paintings created between 1950 and 1970 that predominantly use blue and red colors."}, {"name": "get_artwork_details", "server": "Rijksmuseum", "description": "Retrieve comprehensive information about specific artworks, including basic details, physical properties, historical context, visual information, curatorial information, and exhibition history.", "parameter": {}, "task": "Retrieve the historical context, physical properties, and exhibition history of the artwork \"Starry Night\" by Vincent van Gogh."}, {"name": "get_artwork_image", "server": "Rijksmuseum", "description": "Access high-resolution image data with deep zoom capabilities, including multiple zoom levels, tile-based image loading, full resolution support, and position information.", "parameter": {}, "task": "Retrieve a high-resolution image with deep zoom capabilities, including multiple zoom levels and full resolution support, for detailed analysis."}, {"name": "get_user_sets", "server": "Rijksmuseum", "description": "Explore user-created collections, allowing users to browse curated sets, view thematic groupings, and analyze collection patterns.", "parameter": {}, "task": "Browse and analyze thematic groupings of user-created collections to identify common patterns."}, {"name": "get_user_set_details", "server": "Rijksmuseum", "description": "Access detailed information about specific user-created collections.", "parameter": {}, "task": "Retrieve the details of the most recently created user collection."}, {"name": "open_image_in_browser", "server": "Rijksmuseum", "description": "Open artwork images directly in the browser for detailed viewing.", "parameter": {}, "task": "Display the selected artwork image in the browser for close inspection."}, {"name": "get_artist_timeline", "server": "Rijksmuseum", "description": "Generate chronological timelines of artists' works, tracking artistic development, analyzing periods and styles, and studying career progression.", "parameter": {}, "task": "Generate a chronological timeline of Vincent van Gogh's artistic works, analyzing his different periods and styles to study his career progression."}], "domains": [{"name": "Art Collection Management", "description": "艺术品收藏管理，包括艺术品搜索、详细信息检索、高分辨率图像访问、用户收藏集浏览及艺术家作品时间线生成"}]}
{"name": "Riot Games", "description": "1. Summarize player level, rank, top champions, and recent matches 2. Return top champions by mastery points 3. Return mastery details for a specific champion 4. Return recent matches for a summoner 5. Return match performance stats for a given match ID and puuid", "tools": [{"name": "get_player_summary", "server": "Riot Games", "description": "Summarizes level, rank, top champions, and recent matches.", "parameter": {}, "task": "Summarize the level, rank, top champions, and recent matches of the current player."}, {"name": "get_top_champions_tool", "server": "Riot Games", "description": "Returns top champions by mastery points.", "parameter": {}, "task": "Retrieve the top 10 champions with the highest mastery points."}, {"name": "get_champion_mastery_tool", "server": "Riot Games", "description": "Returns mastery details for a specific champion.", "parameter": {}, "task": "Retrieve the mastery details for the champion \"Ahri\" in the game."}, {"name": "get_recent_matches_tool", "server": "Riot Games", "description": "Returns recent matches for the given summoner.", "parameter": {}, "task": "Retrieve the last 5 matches played by the summoner \"ShadowBlade\"."}, {"name": "get_match_summary", "server": "Riot Games", "description": "Returns match performance stats for a given match ID and puuid.", "parameter": {}, "task": "Retrieve the performance statistics for a match with ID '12345' and player identifier 'abcde'."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Scholarly", "description": "Search arXiv for articles related to the given keyword", "tools": [{"name": "search-arxiv", "server": "Scholarly", "description": "Search arXiv for articles related to the given keyword.", "parameter": {"keyword": "(string) The keyword to search for."}, "task": "Search for the latest research articles on quantum computing published on arXiv."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}]}
{"name": "scrapling-fetch", "description": "1. Retrieve complete web pages with pagination support 2. Extract content matching regex patterns with surrounding context", "tools": [{"name": "s-fetch-page", "server": "scrapling-fetch", "description": "Retrieves complete web pages with pagination support.", "parameter": {"url": "(string) The URL of the web page to fetch.", "mode": "(string) The protection level to use ('basic', 'stealth', 'max-stealth').", "start_index": "(Optional, integer) The starting index for pagination.", "max_length": "(Optional, integer) The maximum length of content to retrieve."}, "task": "Retrieve the first 100 items of content from the specified web page using stealth mode protection."}, {"name": "s-fetch-pattern", "server": "scrapling-fetch", "description": "Extracts content matching regex patterns with surrounding context.", "parameter": {"url": "(string) The URL of the web page to fetch.", "mode": "(string) The protection level to use ('basic', 'stealth', 'max-stealth').", "search_pattern": "(string) The regex pattern to search for.", "context_chars": "(integer) The number of characters of context to include around matches."}, "task": "Extract all email addresses with 50 characters of surrounding context from the specified webpage using stealth mode."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "SearXNG", "description": "1. Execute web searches with pagination using SearxNG 2. Read and convert URL content to markdown", "tools": [{"name": "searxng_web_search", "server": "SearXNG", "description": "Execute web searches with pagination", "parameter": {"query": "(string) The search query. This string is passed to external search services.", "pageno": "(Optional, number) Search page number, starts at 1 (default 1)", "time_range": "(Optional, string) Filter results by time range - one of: 'day', 'month', 'year' (default: none)", "language": "(Optional, string) Language code for results (e.g., 'en', 'fr', 'de') or 'all' (default: 'all')", "safesearch": "(Optional, number) Safe search filter level (0: None, 1: Moderate, 2: Strict) (default: instance setting)"}, "task": "Search for the latest research papers on quantum computing published in the last month, displaying results in English with moderate safe search filtering."}, {"name": "web_url_read", "server": "SearXNG", "description": "Read and convert the content from a URL to markdown", "parameter": {"url": "(string) The URL to fetch and process"}, "task": "Convert the content from the website \"https://example.com/blog/latest-updates\" into markdown format."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Document Format Conversion", "description": "文档格式转换,实现不同文档类型（如 PDF/Word/Markdown）的兼容性转换"}]}
{"name": "SEC EDGAR", "description": "1. Fetch a company's submissions (filings history) by CIK 2. Get a specific reported concept for a company by CIK, taxonomy, and tag 3. Retrieve all facts for a company (full XBRL fact set) by CIK 4. Query XBRL frames (data across entities or time) by taxonomy, tag, unit, year, and quarter", "tools": [{"name": "get_submissions", "server": "SEC EDGAR", "description": "Fetch a company's submissions (filings history) by CIK.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company."}, "task": "Retrieve all historical filings for the company with Central Index Key (CIK) 0000320193."}, {"name": "get_company_concepts", "server": "SEC EDGAR", "description": "Get a specific reported concept for a company by CIK, taxonomy, and tag.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company.", "taxonomy": "(string) The accounting taxonomy (e.g., us-gaap).", "tag": "(string) The specific financial concept tag (e.g., AccountsPayableCurrent)."}, "task": "Retrieve the 'AccountsPayableCurrent' financial concept for the company with CIK 1234567890 using the 'us-gaap' taxonomy."}, {"name": "get_company_facts", "server": "SEC EDGAR", "description": "Retrieve all facts for a company (full XBRL fact set) by CIK.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company."}, "task": "Retrieve all XBRL financial facts for the company with CIK number 0000320193."}, {"name": "get_xbrl_frames", "server": "SEC EDGAR", "description": "Query XBRL frames (data across entities or time) by taxonomy, tag, unit, year, and quarter.", "parameter": {"taxonomy": "(string) The accounting taxonomy (e.g., us-gaap).", "tag": "(string) The specific financial concept tag (e.g., AccountsPayableCurrent).", "unit": "(string) The unit of measurement (e.g., USD).", "year": "(integer) The year of the data.", "quarter": "(integer) The quarter of the data (1-4)."}, "task": "Retrieve the XBRL financial data for the 'AccountsPayableCurrent' tag under the 'us-gaap' taxonomy, measured in USD, for the third quarter of 2023."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "ServiceNow", "description": "ServiceNow平台操作，包括：事件管理、服务目录管理、变更请求管理、工作流管理、脚本管理、变更集管理、知识库管理、用户与群组管理、UI策略管理及工具包管理", "tools": [{"name": "create_incident", "server": "ServiceNow", "description": "Create a new incident in ServiceNow", "parameter": {}, "task": "Create a new incident report in the IT service management system for a critical server outage."}, {"name": "update_incident", "server": "ServiceNow", "description": "Update an existing incident in ServiceNow", "parameter": {}, "task": "Update the status of an existing incident in ServiceNow to \"Resolved\" and add a resolution note."}, {"name": "add_comment", "server": "ServiceNow", "description": "Add a comment to an incident in ServiceNow", "parameter": {}, "task": "Add a comment to the incident ticket regarding the recent server outage, providing details about the root cause and resolution steps."}, {"name": "resolve_incident", "server": "ServiceNow", "description": "Resolve an incident in ServiceNow", "parameter": {}, "task": "Resolve the latest incident reported in the ServiceNow system."}, {"name": "list_incidents", "server": "ServiceNow", "description": "List incidents from ServiceNow", "parameter": {}, "task": "List all active incidents from the ServiceNow platform."}, {"name": "list_catalog_items", "server": "ServiceNow", "description": "List service catalog items from ServiceNow", "parameter": {}, "task": "List all available service catalog items from the ServiceNow platform."}, {"name": "get_catalog_item", "server": "ServiceNow", "description": "Get a specific service catalog item from ServiceNow", "parameter": {}, "task": "Retrieve the details of a specific service catalog item from the ServiceNow platform."}, {"name": "list_catalog_categories", "server": "ServiceNow", "description": "List service catalog categories from ServiceNow", "parameter": {}, "task": "List all available service catalog categories from the ServiceNow platform."}, {"name": "create_catalog_category", "server": "ServiceNow", "description": "Create a new service catalog category in ServiceNow", "parameter": {}, "task": "Create a new service catalog category in ServiceNow for IT support services."}, {"name": "update_catalog_category", "server": "ServiceNow", "description": "Update an existing service catalog category in ServiceNow", "parameter": {}, "task": "Update the existing service catalog category named \"IT Support\" in ServiceNow to reflect the latest service offerings and descriptions."}, {"name": "move_catalog_items", "server": "ServiceNow", "description": "Move catalog items between categories in ServiceNow", "parameter": {}, "task": "Move the catalog items from the 'Hardware' category to the 'IT Equipment' category in ServiceNow."}, {"name": "create_catalog_item_variable", "server": "ServiceNow", "description": "Create a new variable (form field) for a catalog item", "parameter": {}, "task": "Create a new form field for a catalog item to capture customer preferences."}, {"name": "list_catalog_item_variables", "server": "ServiceNow", "description": "List all variables for a catalog item", "parameter": {}, "task": "List all variables associated with the specified catalog item."}, {"name": "update_catalog_item_variable", "server": "ServiceNow", "description": "Update an existing variable for a catalog item", "parameter": {}, "task": "Update the variable details for an existing item in the catalog."}, {"name": "list_catalogs", "server": "ServiceNow", "description": "List service catalogs from ServiceNow", "parameter": {}, "task": "List all available service catalogs from the ServiceNow platform."}, {"name": "get_optimization_recommendations", "server": "ServiceNow", "description": "Get recommendations for optimizing the service catalog", "parameter": {}, "task": "Generate a list of optimization recommendations for improving the service catalog's performance and efficiency."}, {"name": "update_catalog_item", "server": "ServiceNow", "description": "Update a service catalog item", "parameter": {}, "task": "Update the details of a service catalog item with the latest specifications and pricing information. Ensure all relevant fields such as description, availability, and service level agreements are accurately reflected."}, {"name": "create_change_request", "server": "ServiceNow", "description": "Create a new change request in ServiceNow", "parameter": {}, "task": "Create a new change request in the IT service management system for updating the firewall rules."}, {"name": "update_change_request", "server": "ServiceNow", "description": "Update an existing change request", "parameter": {}, "task": "Update the status of an existing change request to \"Approved\" and add a comment noting the approval date."}, {"name": "list_change_requests", "server": "ServiceNow", "description": "List change requests with filtering options", "parameter": {}, "task": "List all pending change requests in the system."}, {"name": "get_change_request_details", "server": "ServiceNow", "description": "Get detailed information about a specific change request", "parameter": {}, "task": "Retrieve the complete details of the latest change request submitted in the system."}, {"name": "add_change_task", "server": "ServiceNow", "description": "Add a task to a change request", "parameter": {}, "task": "Add a new task to the ongoing change request for updating the server configuration."}, {"name": "submit_change_for_approval", "server": "ServiceNow", "description": "Submit a change request for approval", "parameter": {}, "task": "Submit a change request for approval with all required details filled out. Ensure the request includes a clear description of the change, its impact, and the proposed implementation timeline."}, {"name": "approve_change", "server": "ServiceNow", "description": "Approve a change request", "parameter": {}, "task": "Approve the pending change request in the system."}, {"name": "reject_change", "server": "ServiceNow", "description": "Reject a change request", "parameter": {}, "task": "Reject the pending change request with the provided justification."}, {"name": "list_workflows", "server": "ServiceNow", "description": "List workflows from ServiceNow", "parameter": {}, "task": "List all active workflows from the ServiceNow platform."}, {"name": "get_workflow", "server": "ServiceNow", "description": "Get a specific workflow from ServiceNow", "parameter": {}, "task": "Retrieve the latest workflow details from the ServiceNow platform."}, {"name": "create_workflow", "server": "ServiceNow", "description": "Create a new workflow in ServiceNow", "parameter": {}, "task": "Create a new workflow in ServiceNow to automate the approval process for purchase requests."}, {"name": "update_workflow", "server": "ServiceNow", "description": "Update an existing workflow in ServiceNow", "parameter": {}, "task": "Update the approval workflow for IT service requests in ServiceNow to include a new approval step for budget review."}, {"name": "delete_workflow", "server": "ServiceNow", "description": "Delete a workflow from ServiceNow", "parameter": {}, "task": "Delete the specified workflow from the ServiceNow platform."}, {"name": "list_script_includes", "server": "ServiceNow", "description": "List script includes from ServiceNow", "parameter": {}, "task": "List all script includes available in the ServiceNow instance."}, {"name": "get_script_include", "server": "ServiceNow", "description": "Get a specific script include from ServiceNow", "parameter": {}, "task": "Retrieve the script include named 'GlobalUtils' from the ServiceNow instance."}, {"name": "create_script_include", "server": "ServiceNow", "description": "Create a new script include in ServiceNow", "parameter": {}, "task": "Create a new script include in ServiceNow to handle custom business logic for the HR department."}, {"name": "update_script_include", "server": "ServiceNow", "description": "Update an existing script include in ServiceNow", "parameter": {}, "task": "Update the existing script include named \"UserUtils\" in ServiceNow to include a new function for validating email addresses."}, {"name": "delete_script_include", "server": "ServiceNow", "description": "Delete a script include from ServiceNow", "parameter": {}, "task": "Delete the script include named 'UserUtils' from the ServiceNow instance."}, {"name": "list_changesets", "server": "ServiceNow", "description": "List changesets from ServiceNow with filtering options", "parameter": {}, "task": "List all changesets from ServiceNow created in the last 30 days."}, {"name": "get_changeset_details", "server": "ServiceNow", "description": "Get detailed information about a specific changeset", "parameter": {}, "task": "Retrieve the detailed information for the most recent changeset in the system."}, {"name": "create_changeset", "server": "ServiceNow", "description": "Create a new changeset in ServiceNow", "parameter": {}, "task": "Create a new changeset in ServiceNow for tracking upcoming system modifications."}, {"name": "update_changeset", "server": "ServiceNow", "description": "Update an existing changeset", "parameter": {}, "task": "Update the details of an existing changeset with the latest modifications."}, {"name": "commit_changeset", "server": "ServiceNow", "description": "Commit a changeset", "parameter": {}, "task": "Commit the current changeset with a descriptive message summarizing the modifications made."}, {"name": "publish_changeset", "server": "ServiceNow", "description": "Publish a changeset", "parameter": {}, "task": "Publish the latest changeset to the designated repository."}, {"name": "add_file_to_changeset", "server": "ServiceNow", "description": "Add a file to a changeset", "parameter": {}, "task": "Add the latest modified configuration file to the current changeset for version control."}, {"name": "create_knowledge_base", "server": "ServiceNow", "description": "Create a new knowledge base in ServiceNow", "parameter": {}, "task": "Create a new knowledge base in ServiceNow to store and organize technical documentation."}, {"name": "list_knowledge_bases", "server": "ServiceNow", "description": "List knowledge bases with filtering options", "parameter": {}, "task": "List all available knowledge bases with their respective details."}, {"name": "create_category", "server": "ServiceNow", "description": "Create a new category in a knowledge base", "parameter": {}, "task": "Create a new category named \"Advanced Machine Learning\" in the knowledge base."}, {"name": "create_article", "server": "ServiceNow", "description": "Create a new knowledge article in ServiceNow", "parameter": {}, "task": "Create a new knowledge article in the ServiceNow platform with the title \"How to Reset Your Password\" and include step-by-step instructions for users."}, {"name": "update_article", "server": "ServiceNow", "description": "Update an existing knowledge article in ServiceNow", "parameter": {}, "task": "Update the knowledge article with ID KB00123456 in ServiceNow to reflect the latest troubleshooting steps for network connectivity issues."}, {"name": "publish_article", "server": "ServiceNow", "description": "Publish a knowledge article in ServiceNow", "parameter": {}, "task": "Publish a new knowledge article in the ServiceNow knowledge base with the title \"How to Reset Your Password\" and the content \"Follow these steps to reset your password: 1. Click on 'Forgot Password' 2. Enter your email address 3. Check your email for the reset link 4. Click the link and set a new password.\""}, {"name": "list_articles", "server": "ServiceNow", "description": "List knowledge articles with filtering options", "parameter": {}, "task": "List all available knowledge articles sorted by their creation date in descending order."}, {"name": "get_article", "server": "ServiceNow", "description": "Get a specific knowledge article by ID", "parameter": {}, "task": "Retrieve the knowledge article with the ID \"KB12345\" for review."}, {"name": "create_user", "server": "ServiceNow", "description": "Create a new user in ServiceNow", "parameter": {}, "task": "Create a new user account in the ServiceNow platform with the required details."}, {"name": "update_user", "server": "ServiceNow", "description": "Update an existing user in ServiceNow", "parameter": {}, "task": "Update the details of an existing user in the ServiceNow system with the latest information."}, {"name": "get_user", "server": "ServiceNow", "description": "Get a specific user by ID, username, or email", "parameter": {}, "task": "Retrieve the user details associated with the email address \"user@example.com\"."}, {"name": "list_users", "server": "ServiceNow", "description": "List users with filtering options", "parameter": {}, "task": "List all users in the system with their basic details."}, {"name": "create_group", "server": "ServiceNow", "description": "Create a new group in ServiceNow", "parameter": {}, "task": "Create a new group in the ServiceNow platform with appropriate permissions and members."}, {"name": "update_group", "server": "ServiceNow", "description": "Update an existing group in ServiceNow", "parameter": {}, "task": "Update the details of an existing group in the ServiceNow system."}, {"name": "add_group_members", "server": "ServiceNow", "description": "Add members to a group in ServiceNow", "parameter": {}, "task": "Add 5 new members to the specified group in ServiceNow."}, {"name": "remove_group_members", "server": "ServiceNow", "description": "Remove members from a group in ServiceNow", "parameter": {}, "task": "Remove all members from the specified group in ServiceNow."}, {"name": "list_groups", "server": "ServiceNow", "description": "List groups with filtering options", "parameter": {}, "task": "List all available groups with their details."}, {"name": "create_ui_policy", "server": "ServiceNow", "description": "Creates a ServiceNow UI Policy, typically for a Catalog Item", "parameter": {}, "task": "Create a UI policy for a ServiceNow Catalog Item to enforce specific form behaviors based on user interactions."}, {"name": "create_ui_policy_action", "server": "ServiceNow", "description": "Creates an action associated with a UI Policy to control variable states (visibility, mandatory, etc.)", "parameter": {}, "task": "Create an action to control the visibility of a form field based on user input conditions."}, {"name": "list_tool_packages", "server": "ServiceNow", "description": "Lists all available tool package names defined in the configuration and shows the currently loaded package", "parameter": {}, "task": "List all available tool package names and display the currently loaded package from the configuration."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}, {"name": "User & Access Management", "description": "用户与访问管理，包括用户信息检索、群组成员列表及权限定义管理"}, {"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Shopify", "description": "1.获取所有产品或按标题搜索 2.通过ID获取特定产品 3.获取客户或按名称/电子邮件搜索 4.更新客户信息 5.获取特定客户的订单 6.获取订单并可选过滤 7.通过ID获取特定订单 8.更新现有订单信息", "tools": [{"name": "get-products", "server": "Shopify", "description": "Get all products or search by title", "parameter": {"searchTitle": "(optional string) Filter products by title", "limit": "(number) Maximum number of products to return"}, "task": "Retrieve the top 5 products matching the search term \"wireless headphones\" from the product catalog."}, {"name": "get-product-by-id", "server": "Shopify", "description": "Get a specific product by ID", "parameter": {"productId": "(string) ID of the product to retrieve"}, "task": "Retrieve the product details for the item with ID \"PRD-2024-0456\"."}, {"name": "get-customers", "server": "Shopify", "description": "Get customers or search by name/email", "parameter": {"searchQuery": "(optional string) Filter customers by name or email", "limit": "(optional number, default: 10) Maximum number of customers to return"}, "task": "Retrieve the first 15 customers whose names or emails contain the keyword \"tech\"."}, {"name": "update-customer", "server": "Shopify", "description": "Update a customer's information", "parameter": {"id": "(string, required) Shopify customer ID (numeric ID only, like \"6276879810626\")", "firstName": "(string, optional) Customer's first name", "lastName": "(string, optional) Customer's last name", "email": "(string, optional) Customer's email address", "phone": "(string, optional) Customer's phone number", "tags": "(array of strings, optional) Tags to apply to the customer", "note": "(string, optional) Note about the customer", "taxExempt": "(boolean, optional) Whether the customer is exempt from taxes", "metafields": "(array of objects, optional) Customer metafields for storing additional data"}, "task": "Update the customer with ID \"6276879810626\" by changing their email to \"new.email@example.com\" and adding the tags \"VIP\" and \"loyalty_member\"."}, {"name": "get-customer-orders", "server": "Shopify", "description": "Get orders for a specific customer", "parameter": {"customerId": "(string, required) Shopify customer ID (numeric ID only, like \"6276879810626\")", "limit": "(optional number, default: 10) Maximum number of orders to return"}, "task": "Retrieve the latest 5 orders for the Shopify customer with ID \"6276879810626\"."}, {"name": "get-orders", "server": "Shopify", "description": "Get orders with optional filtering", "parameter": {"status": "(optional string) Filter by order status", "limit": "(optional number, default: 10) Maximum number of orders to return"}, "task": "Retrieve the latest 5 orders with a status of \"shipped\" from the order database."}, {"name": "get-order-by-id", "server": "Shopify", "description": "Get a specific order by ID", "parameter": {"orderId": "(string, required) Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")"}, "task": "Retrieve the order details for the Shopify order with ID \"gid://shopify/Order/6090960994370\"."}, {"name": "update-order", "server": "Shopify", "description": "Update an existing order with new information", "parameter": {"id": "(string, required) Shopify order ID", "tags": "(array of strings, optional) New tags for the order", "email": "(string, optional) Update customer email", "note": "(string, optional) Order notes", "customAttributes": "(array of objects, optional) Custom attributes for the order", "metafields": "(array of objects, optional) Order metafields", "shippingAddress": "(object, optional) Shipping address information"}, "task": "Update the order with ID #12345 by adding the tags \"urgent\" and \"gift\", changing the customer email to \"newemail@example.com\", and adding a note stating \"Handle with care\"."}], "domains": [{"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Siri Shortcuts", "description": "1.列出系统上所有可用的Siri快捷方式 2.在快捷方式应用中打开快捷方式 3.运行带有可选输入的快捷方式", "tools": [{"name": "list_shortcuts", "server": "Siri Shortcuts", "description": "Lists all available Siri shortcuts on the system", "parameter": {}, "task": "List all available Siri shortcuts currently installed on the device."}, {"name": "open_shortcut", "server": "Siri Shortcuts", "description": "Opens a shortcut in the Shortcuts app", "parameter": {"name": "(string) Name of the shortcut to open"}, "task": "Open the shortcut named \"Morning Routine\" in the Shortcuts app."}, {"name": "run_shortcut", "server": "Siri Shortcuts", "description": "Runs a shortcut with optional input", "parameter": {"name": "(string) Name of the shortcut to run", "input": "(Optional, string) Text input or filepath to pass to the shortcut"}, "task": "Run a shortcut named \"Backup Photos\" with the input filepath \"/Users/me/Pictures/Vacation\" to initiate the backup process."}], "domains": [{"name": "Home Automation", "description": "智能家居自动化控制，包括设备控制、插件管理、自动化配置及批量操作执行"}]}
{"name": "Slack", "description": "1.通过channelID获取频道消息 2.获取频道列表", "tools": [{"name": "conversations_history", "server": "Slack", "description": "Get messages from the channel by channelID", "parameter": {"channel_id": "(string) ID of the channel in format Cxxxxxxxxxx.", "cursor": "(string) Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.", "limit": "(number, default: 28) Limit of messages to fetch."}, "task": "Retrieve the last 50 messages from the channel with ID C1234567890, starting from the most recent message."}, {"name": "channels_list", "server": "Slack", "description": "Get list of channels", "parameter": {"channel_types": "(array) Possible channel types. Allowed values: 'mpim', 'im', 'public_channel', 'private_channel'.", "sort": "(string) Type of sorting. Allowed values: 'popularity' - sort by number of members/participants in each channel."}, "task": "Retrieve a sorted list of public channels based on their member count."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Snowflake", "description": "Snowflake数据库操作,包括:数据查询(SELECT)、数据写入(INSERT/UPDATE/DELETE)、表创建、数据库/模式/表列表查询、表结构描述、数据洞察添加", "tools": [{"name": "read_query", "server": "Snowflake", "description": "Execute SELECT queries to read data from the database.", "parameter": {"query": "(string) The SELECT SQL query to execute"}, "task": "Retrieve the names and email addresses of all customers who made a purchase in the last 30 days using a SELECT query."}, {"name": "write_query", "server": "Snowflake", "description": "Execute INSERT, UPDATE, or DELETE queries.", "parameter": {"query": "(string) The SQL modification query"}, "task": "Insert a new customer record into the database with the following details: name 'Alice', email 'alice@example.com', and registration date '2024-01-15'."}, {"name": "create_table", "server": "Snowflake", "description": "Create new tables in the database.", "parameter": {"query": "(string) CREATE TABLE SQL statement"}, "task": "Create a new table named 'employees' with columns for 'id' (integer, primary key), 'name' (varchar 50), 'position' (varchar 50), and 'hire_date' (date) in the database."}, {"name": "list_databases", "server": "Snowflake", "description": "List all databases in the Snowflake instance.", "parameter": {}, "task": "List all available databases in the connected Snowflake instance."}, {"name": "list_schemas", "server": "Snowflake", "description": "List all schemas within a specific database.", "parameter": {"database": "(string) Name of the database"}, "task": "List all schemas present in the \"customer_orders\" database."}, {"name": "list_tables", "server": "Snowflake", "description": "List all tables within a specific database and schema.", "parameter": {"database": "(string) Name of the database", "schema": "(string) Name of the schema"}, "task": "List all tables within the \"sales\" database under the \"public\" schema."}, {"name": "describe_table", "server": "Snowflake", "description": "View column information for a specific table.", "parameter": {"table_name": "(string) Fully qualified table name (database.schema.table)"}, "task": "View the column information for the table named \"sales_data\" in the \"retail\" schema of the \"production\" database."}, {"name": "append_insight", "server": "Snowflake", "description": "Add new data insights to the memo resource.", "parameter": {"insight": "(string) Data insight discovered from analysis"}, "task": "Add a new data insight about the recent sales trend analysis to the memo resource."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Solver", "description": "1. Remove all items from the model 2. Add new item at a specific index 3. Delete item at index 4. Replace item at index 5. Get current model content with numbered items 6. Solve the model with timeout parameter", "tools": [{"name": "clear_model", "server": "Solver", "description": "Remove all items from the model", "parameter": {}, "task": "Clear all items from the current model."}, {"name": "add_item", "server": "Solver", "description": "Add new item at a specific index", "parameter": {}, "task": "Insert a new item at index 3 in the target list."}, {"name": "delete_item", "server": "Solver", "description": "Delete item at index", "parameter": {}, "task": "Delete the item located at index 5 in the specified list."}, {"name": "replace_item", "server": "Solver", "description": "Replace item at index", "parameter": {}, "task": "Replace the item at index 3 in the given list with the value \"new_value\"."}, {"name": "get_model", "server": "Solver", "description": "Get current model content with numbered items", "parameter": {}, "task": "Retrieve the current model content and list all items with numbered identifiers."}, {"name": "solve_model", "server": "Solver", "description": "Solve the model (with timeout parameter)", "parameter": {"timeout": "(Optional, int) Maximum time allowed for solving the model in seconds"}, "task": "Solve the model within a maximum time limit of 60 seconds."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "SoccerDataAPI", "description": "获取全球实时足球比赛信息", "tools": [{"name": "get_livescores", "server": "SoccerDataAPI", "description": "Returns real-time information about ongoing football matches around the world.", "parameter": {}, "task": "Check the live scores of all ongoing football matches worldwide."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Solana Agent Kit", "description": "1.部署和管理SPL代币 2.使用Wormhole进行跨链代币转移和包装 3.创建和管理NFT集合 4.使用DEX进行代币交换 5.资产借贷和质押 6.使用ZK压缩发送空投 7.获取Pyth价格数据 8.进行永续合约交易 9.管理Drift账户和保险库 10.Voltr策略存款和提款 11.获取Solana资产信息和价格推断 12.使用deBridge进行跨链订单创建和执行 13.获取代币价格数据和趋势信息 14.在OKX DEX上执行代币交换", "tools": [{"name": "deployToken", "server": "Solana Agent Kit", "description": "Deploys a new SPL token.", "parameter": {"name": "(string) Name of the token", "uri": "(string) URI for the token metadata", "symbol": "(string) Symbol of the token", "decimals": "(number) Number of decimal places", "mintAuthority": "(Optional, PublicKey) Mint authority (defaults to deployer account)", "freezeAuthority": "(Optional, PublicKey) Freeze authority (defaults to deployer account)", "updateAuthority": "(Optional, PublicKey) Update authority (defaults to deployer account)", "isMutable": "(Optional, boolean) Whether the metadata is mutable (defaults to true)", "initialSupply": "(number) Initial supply of the token"}, "task": "Create a new SPL token with the name \"SolanaRewards\", symbol \"SRW\", and 6 decimal places. Set the initial supply to 1,000,000 tokens, use the URI \"https://example.com/token-metadata.json\" for metadata, and ensure the metadata remains mutable. Assign the deployer account as the mint, freeze, and update authorities."}, {"name": "getWormholeSupportedChains", "server": "Solana Agent Kit", "description": "Gets the list of supported chains using Wormhole.", "parameter": {}, "task": "List all the blockchain networks currently supported by the cross-chain interoperability protocol."}, {"name": "createWrappedToken", "server": "Solana Agent Kit", "description": "Creates a wrapped token on a target chain using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "tokenAddress": "(string) Original token address", "network": "(string) Network type (Testnet or Mainnet)"}, "task": "Create a wrapped token on the Ethereum Mainnet for the original token at address 0x123... using Wormhole."}, {"name": "cctpTransfer", "server": "Solana Agent Kit", "description": "Performs a CCTP transfer using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "transferAmount": "(string) Amount to transfer", "network": "(string) Network type (Testnet or Mainnet)"}, "task": "Transfer 100 USDC to the Ethereum Mainnet using the CCTP protocol."}, {"name": "tokenTransfer", "server": "Solana Agent Kit", "description": "Transfers an SPL token using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "tokenAddress": "(string) Original token address or leave it empty to transfer Native SOL", "network": "(string) Network type (Testnet or Mainnet)"}, "task": "Transfer 1000 units of the specified SPL token from the Solana Mainnet to the Ethereum Mainnet using Wormhole."}, {"name": "create3LandCollection", "server": "Solana Agent Kit", "description": "Creates a new NFT collection on 3Land.", "parameter": {"collectionOpts": "(CreateCollectionOptions) Options for the collection", "isDevnet": "(Optional, boolean) Whether to use devnet (defaults to false)", "priorityFeeParam": "(Optional, number) Priority fee (defaults to 50000)"}, "task": "Create a new NFT collection with custom options on the mainnet, setting a priority fee of 60000."}, {"name": "create3LandNft", "server": "Solana Agent Kit", "description": "Creates a new NFT on 3Land.", "parameter": {"collectionAccount": "(string) Hash for the collection", "createItemOptions": "(CreateSingleOptions) Options for the NFT", "isDevnet": "(Optional, boolean) Whether to use devnet (defaults to false)", "withPool": "(Optional, boolean) Whether to create with a liquidity pool", "priorityFeeParam": "(Optional, number) Priority fee (defaults to 50000)"}, "task": "Create a new NFT on 3Land with the collection hash \"abc123\", set the priority fee to 75000, and enable liquidity pool creation. Use the mainnet for deployment."}, {"name": "deployCollection", "server": "Solana Agent Kit", "description": "Deploys a new NFT collection.", "parameter": {"name": "(string) Name of the collection", "uri": "(string) URI for the collection metadata", "royaltyBasisPoints": "(number) Royalty basis points", "creators": "(Creator[]) Array of creator objects"}, "task": "Deploy a new NFT collection named \"Digital Dreams\" with the metadata URI \"ipfs://QmXyZ123\", set the royalty to 500 basis points, and assign two creators with their respective shares."}, {"name": "trade", "server": "Solana Agent Kit", "description": "Swaps tokens using a DEX.", "parameter": {"targetTokenMint": "(PublicKey) Target token mint", "amount": "(number) Amount to trade", "sourceTokenMint": "(PublicKey) Source token mint", "slippage": "(number) Slippage tolerance"}, "task": "Swap 100 units of the source token for the target token with a slippage tolerance of 1%."}, {"name": "lendAssets", "server": "Solana Agent Kit", "description": "Lends assets to a lending protocol.", "parameter": {"amount": "(number) Amount of USDC to lend"}, "task": "Lend 500 USDC to the lending protocol."}, {"name": "stake", "server": "Solana Agent Kit", "description": "Stakes SOL.", "parameter": {"amount": "(number) Amount in SOL to stake"}, "task": "Stake 5 SOL tokens into the designated validator."}, {"name": "restake", "server": "Solana Agent Kit", "description": "Restakes SOL on Solayer.", "parameter": {"amount": "(number) Amount in SOL to stake"}, "task": "Restake 15 SOL on Solayer to maximize staking rewards."}, {"name": "sendCompressedAirdrop", "server": "Solana Agent Kit", "description": "Sends a compressed airdrop using ZK compression.", "parameter": {"mint": "(PublicKey) Token mint", "amountPerRecipient": "(number) Amount per recipient", "recipients": "(PublicKey[]) Array of recipient public keys", "priorityFee": "(number) Priority fee in lamports"}, "task": "Send a compressed airdrop of 100 tokens per recipient to 50 specified wallet addresses with a priority fee of 500 lamports."}, {"name": "getPythPriceFeedID", "server": "Solana Agent Kit", "description": "Gets the Pyth price feed ID for a given asset.", "parameter": {"asset": "(string) Asset symbol"}, "task": "Retrieve the Pyth price feed ID for the asset 'BTC/USD'."}, {"name": "getPythPrice", "server": "Solana Agent Kit", "description": "Fetches the price from a Pyth price feed.", "parameter": {"priceFeedID": "(string) Pyth price feed ID"}, "task": "Fetch the current price from the Pyth price feed with the ID \"0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6\"."}, {"name": "openPerpTradeLong", "server": "Solana Agent Kit", "description": "Opens a long perpetual trade.", "parameter": {"price": "(number) Maximum price", "collateralAmount": "(number) Collateral amount", "collateralMint": "(PublicKey) Collateral mint", "leverage": "(number) Leverage", "tradeMint": "(PublicKey) Trade mint", "slippage": "(number) Slippage tolerance"}, "task": "Open a long perpetual trade with a maximum price of $50,000, using $10,000 as collateral, 5x leverage, and a 1% slippage tolerance. The trade should be executed for the specified trade mint."}, {"name": "closePerpTradeLong", "server": "Solana Agent Kit", "description": "Closes a long perpetual trade.", "parameter": {"price": "(number) Price", "tradeMint": "(PublicKey) Trade mint"}, "task": "Close a long perpetual trade at the specified price using the given trade mint."}, {"name": "closeEmptyTokenAccounts", "server": "Solana Agent Kit", "description": "Closes empty token accounts.", "parameter": {}, "task": "Close all empty token accounts in the system."}, {"name": "createDriftUserAccount", "server": "Solana Agent Kit", "description": "Creates a new Drift user account.", "parameter": {}, "task": "Create a new user account in the Drift platform."}, {"name": "createDriftVault", "server": "Solana Agent Kit", "description": "Creates a new Drift vault.", "parameter": {"name": "(string) Name of the vault", "marketName": "(string) Market name", "redeemPeriod": "(number) Redemption period in days", "maxTokens": "(number) Maximum tokens", "minDepositAmount": "(number) Minimum deposit amount", "managementFee": "(number) Management fee in percentage", "profitShare": "(number) Profit share in percentage", "hurdleRate": "(number) Hurdle rate in percentage", "permissioned": "(boolean) Whether the vault is permissioned"}, "task": "Create a new vault with the following specifications:  \n- Name: \"AlphaFund\"  \n- Market: \"ETH/USD\"  \n- Redemption period: 30 days  \n- Maximum tokens: 10,000  \n- Minimum deposit amount: 0.1 ETH  \n- Management fee: 2%  \n- Profit share: 20%  \n- Hurdle rate: 10%  \n- Permissioned: true"}, {"name": "depositIntoDriftVault", "server": "Solana Agent Kit", "description": "Deposits tokens into a Drift vault.", "parameter": {"amount": "(number) Amount to deposit", "vaultAddress": "(string) Vault address"}, "task": "Deposit 500 tokens into the specified vault at address '0x123abc'."}, {"name": "depositToDriftUserAccount", "server": "Solana Agent Kit", "description": "Deposits tokens into a Drift user account.", "parameter": {"amount": "(number) Amount to deposit", "token": "(string) Token symbol", "isLoan": "(Optional, boolean) Whether the deposit is a loan (defaults to false)"}, "task": "Deposit 500 USDC tokens into the specified user account without marking it as a loan."}, {"name": "deriveDriftVaultAddress", "server": "Solana Agent Kit", "description": "Derives the address of a Drift vault.", "parameter": {"name": "(string) Name of the vault"}, "task": "Derive the address for the Drift vault named \"TradingFund\"."}, {"name": "doesUserHaveDriftAccount", "server": "Solana Agent Kit", "description": "Checks if the user has a Drift account.", "parameter": {}, "task": "Check if the current user has an active account on the Drift platform."}, {"name": "driftUserAccountInfo", "server": "Solana Agent Kit", "description": "Gets information about the Drift user account.", "parameter": {}, "task": "Retrieve the current details of the active Drift user account."}, {"name": "requestWithdrawalFromDriftVault", "server": "Solana Agent Kit", "description": "Requests a withdrawal from a Drift vault.", "parameter": {"amount": "(number) Amount to withdraw", "vaultAddress": "(string) Vault address"}, "task": "Withdraw 500 USDC from the specified Drift vault at the given address."}, {"name": "tradeUsingDelegatedDriftVault", "server": "Solana Agent Kit", "description": "Executes a trade using a delegated Drift vault.", "parameter": {"vault": "(string) Vault address", "amount": "(number) Trade amount", "symbol": "(string) Trade symbol", "action": "(string) Action (long or short)", "type": "(string) Order type (limit or market)", "price": "(number) Price"}, "task": "Execute a market order trade for 100 units of BTC with a long position using the delegated vault at address 0x1234."}, {"name": "tradeUsingDriftPerpAccount", "server": "Solana Agent Kit", "description": "Executes a trade using the user's Drift perpetual account.", "parameter": {"amount": "(number) Trade amount", "symbol": "(string) Trade symbol", "action": "(string) Action (long or short)", "type": "(string) Order type (limit or market)", "price": "(number) Price"}, "task": "Execute a market order trade for 100 units of BTC with a long position using the perpetual account."}, {"name": "updateDriftVault", "server": "Solana Agent Kit", "description": "Updates the parameters of a Drift vault.", "parameter": {"name": "(string) Name of the vault", "marketName": "(string) Market name", "redeemPeriod": "(number) Redemption period in days", "maxTokens": "(number) Maximum tokens", "minDepositAmount": "(number) Minimum deposit amount", "managementFee": "(number) Management fee in percentage", "profitShare": "(number) Profit share in percentage", "hurdleRate": "(number) Hurdle rate in percentage", "permissioned": "(boolean) Whether the vault is permissioned"}, "task": "Update the parameters of a Drift vault named \"AlphaFund\" to set a 30-day redemption period, a maximum of 10,000 tokens, a minimum deposit amount of 100 tokens, a 2% management fee, a 20% profit share, a 5% hurdle rate, and make it permissioned."}, {"name": "withdrawFromDriftAccount", "server": "Solana Agent Kit", "description": "Withdraws tokens from the Drift user account.", "parameter": {"amount": "(number) Amount to withdraw", "token": "(string) Token symbol"}, "task": "Withdraw 100 USDC tokens from the connected Drift account."}, {"name": "withdrawFromDriftAccount", "server": "Solana Agent Kit", "description": "Withdraws tokens from the Drift user account.", "parameter": {"amount": "(number) Amount to withdraw", "token": "(string) Token symbol", "isLoan": "(Optional, boolean) Whether the withdrawal is a loan repayment (defaults to false)"}, "task": "Withdraw 500 USDC tokens from the connected Drift account without repaying a loan."}, {"name": "withdrawFromDriftVault", "server": "Solana Agent Kit", "description": "Withdraws tokens from a Drift vault.", "parameter": {"vaultAddress": "(string) Vault address"}, "task": "Withdraw all tokens from the specified Drift vault at address 0x123abc."}, {"name": "updateDriftVaultDelegate", "server": "Solana Agent Kit", "description": "Updates the delegate address for a Drift vault.", "parameter": {"vaultAddress": "(string) Vault address", "newDelegate": "(string) New delegate address"}, "task": "Update the delegate address for the Drift vault at '0x123abc' to the new delegate address '0x456def'."}, {"name": "voltrGetPositionValues", "server": "Solana Agent Kit", "description": "Gets the current position values and total value of assets in a Voltr vault.", "parameter": {"vaultAddress": "(string) Vault address"}, "task": "Retrieve the current position values and total asset value for the Voltr vault at address 0x1234abcd5678ef90."}, {"name": "voltrDepositStrategy", "server": "Solana Agent Kit", "description": "Deposits assets into a specific strategy within a Voltr vault.", "parameter": {"amount": "(BN) Amount in base units", "vault": "(string) Vault address", "strategy": "(string) Strategy address"}, "task": "Deposit 500 base units of assets into the strategy located at address \"0x123abc\" within the vault at address \"0x456def\"."}, {"name": "voltrWithdrawStrategy", "server": "Solana Agent Kit", "description": "Withdraws assets from a specific strategy within a Voltr vault.", "parameter": {"amount": "(BN) Amount in base units", "vault": "(string) Vault address", "strategy": "(string) Strategy address"}, "task": "Withdraw 500 base units of assets from the specified strategy in the Voltr vault at address \"0x123...abc\"."}, {"name": "getAsset", "server": "Solana Agent Kit", "description": "Gets a Solana asset by its ID.", "parameter": {"assetId": "(string) Asset ID"}, "task": "Retrieve the details of the Solana asset with the ID \"ABC123XYZ456\"."}, {"name": "getPriceInference", "server": "Solana Agent Kit", "description": "Gets the price inference for a given token and timeframe from Allora.", "parameter": {"token": "(string) Token symbol", "timeframe": "(string) Timeframe (e.g., 5m, 1h)"}, "task": "Get the price inference for Ethereum (ETH) over a 1-hour timeframe from Allora."}, {"name": "getAllTopics", "server": "Solana Agent Kit", "description": "Lists all topics from Allora.", "parameter": {}, "task": "List all available topics from the Allora platform."}, {"name": "getInferenceByTopicId", "server": "Solana Agent Kit", "description": "Gets an inference for a specific topic from Allora.", "parameter": {"topicId": "(number) Topic ID"}, "task": "Retrieve the inference results for topic ID 12345 from Allora."}, {"name": "simulateSwitchboardFeed", "server": "Solana Agent Kit", "description": "Simulates a given Switchboard feed.", "parameter": {"feed": "(string) Feed ID", "oracleUrl": "(string) Oracle URL"}, "task": "Simulate the Switchboard feed with ID 'ETH-USD' using the oracle URL 'https://oracle.switchboard.xyz'."}, {"name": "swap", "server": "Solana Agent Kit", "description": "Executes a cross-chain token swap.", "parameter": {"amount": "(string) Amount to swap", "fromChain": "(string) Source chain", "fromToken": "(string) Source token address", "toChain": "(string) Destination chain", "toToken": "(string) Destination token address", "dstAddr": "(string) Destination address"}, "task": "Swap 100 USDC from Ethereum to Polygon, converting to USDT and sending to the destination address 0x123...abc."}, {"name": "getDebridgeSupportedChains", "server": "Solana Agent Kit", "description": "Gets the list of supported chains using deBridge.", "parameter": {}, "task": "Retrieve the list of blockchain networks currently supported by the deBridge protocol."}, {"name": "getDebridgeTokensInfo", "server": "Solana Agent Kit", "description": "Gets information about tokens on a specific chain using deBridge.", "parameter": {"chainId": "(string) Chain ID", "token": "(string) Token symbol"}, "task": "Retrieve the details of the USDC token on the Ethereum chain using deBridge."}, {"name": "createDebridgeOrder", "server": "Solana Agent Kit", "description": "Creates a deBridge order.", "parameter": {"srcChainId": "(string) Source chain ID", "srcChainTokenIn": "(string) Source token mint", "srcChainTokenInAmount": "(string) Amount of source token", "dstChainId": "(string) Destination chain ID", "dstChainTokenOut": "(string) Destination token mint", "dstChainTokenOutRecipient": "(string) Recipient address on destination chain"}, "task": "Create a cross-chain order to transfer 1000 USDC from Ethereum (chain ID: 1) to Polygon (chain ID: 137), converting it to MATIC and sending it to recipient address 0x123...abc."}, {"name": "executeDebridgeOrder", "server": "Solana Agent Kit", "description": "Executes a deBridge order.", "parameter": {"txData": "(string) Transaction data"}, "task": "Execute a deBridge order using the provided transaction data."}, {"name": "checkDebridgeTransactionStatus", "server": "Solana Agent Kit", "description": "Checks the status of a deBridge transaction.", "parameter": {"signature": "(string) Transaction signature"}, "task": "Check the status of the deBridge transaction with the signature '0x123abc456def789ghi'."}, {"name": "getTokenPriceData", "server": "Solana Agent Kit", "description": "Gets the price data for a list of tokens from CoinGecko.", "parameter": {"tokens": "(string[]) Array of token addresses"}, "task": "Retrieve the latest price data for the tokens with addresses ['0x1f9840a85d5af5bf1d1762f925bdaddc4201f984', '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9'] from CoinGecko."}, {"name": "getTrendingTokens", "server": "Solana Agent Kit", "description": "Gets the list of trending tokens.", "parameter": {}, "task": "List the top 10 trending tokens in the market."}, {"name": "getLatestPools", "server": "Solana Agent Kit", "description": "Gets the list of latest pools.", "parameter": {}, "task": "Retrieve the most recently created pools from the available list."}, {"name": "getTokenInfo", "server": "Solana Agent Kit", "description": "Gets information about a specific token.", "parameter": {"tokenAddress": "(string) Token address"}, "task": "Retrieve the details of the token with the address '0x1234567890abcdef1234567890abcdef12345678'."}, {"name": "getTopGainers", "server": "Solana Agent Kit", "description": "Gets the list of top gainers for a given timeframe.", "parameter": {"timeframe": "(string) Timeframe (e.g., 24h, 7d)", "category": "(string) Category (e.g., all, stablecoins)"}, "task": "Retrieve the top 5 performing stablecoins over the past 7 days."}, {"name": "getTrendingPools", "server": "Solana Agent Kit", "description": "Gets the list of trending pools for a given timeframe.", "parameter": {"timeframe": "(string) Timeframe (e.g., 24h, 7d)"}, "task": "Retrieve the list of trending pools for the last 7 days."}, {"name": "getTokens", "server": "Solana Agent Kit", "description": "Gets the list of supported tokens on OKX DEX.", "parameter": {}, "task": "Retrieve the complete list of supported tokens available for trading on the OKX decentralized exchange."}, {"name": "getQuote", "server": "Solana Agent Kit", "description": "Gets a quote for a token swap on OKX DEX.", "parameter": {"fromTokenAddress": "(string) Source token address", "toTokenAddress": "(string) Destination token address", "amount": "(string) Amount to swap", "slippage": "(Optional, string) Slippage tolerance (defaults to 0.5%)"}, "task": "Get a quote for swapping 1.5 ETH (from token address 0x123...) to USDC (to token address 0x456...) with a slippage tolerance of 1% on OKX DEX."}, {"name": "executeSwap", "server": "Solana Agent Kit", "description": "Executes a token swap on OKX DEX.", "parameter": {"fromTokenAddress": "(string) Source token address", "toTokenAddress": "(string) Destination token address", "amount": "(string) Amount to swap", "autoSlippage": "(Optional, boolean) Use auto slippage (defaults to false)", "slippage": "(Optional, string) Custom slippage (defaults to 0.1%)", "maxAutoSlippageBps": "(Optional, string) Maximum auto slippage in basis points (defaults to 100)", "userAddress": "(Optional, string) User wallet address"}, "task": "Swap 1.5 ETH (from token address 0x123...) to USDC (to token address 0x456...) on OKX DEX with a custom slippage of 0.5%."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}, {"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "Starwind UI", "description": "1.初始化Starwind UI项目 2.生成Starwind UI组件安装命令 3.生成Starwind UI组件更新命令 4.获取Starwind UI组件文档链接 5.从starwind.dev获取LLM数据 6.检测并返回当前包管理器信息", "tools": [{"name": "init_project", "server": "Starwind UI", "description": "Initializes a new Starwind UI project", "parameter": {}, "task": "Initialize a new Starwind UI project with default settings."}, {"name": "install_component", "server": "Starwind UI", "description": "Generates installation commands for Starwind UI components", "parameter": {}, "task": "Generate installation commands for the Starwind UI button component."}, {"name": "update_component", "server": "Starwind UI", "description": "Generates update commands for Starwind UI components", "parameter": {}, "task": "Generate update commands for the latest version of Starwind UI components."}, {"name": "get_documentation", "server": "Starwind UI", "description": "Returns documentation links for Starwind UI components and guides", "parameter": {}, "task": "Retrieve the latest documentation links for Starwind UI components and guides."}, {"name": "fetch_llm_data", "server": "Starwind UI", "description": "Fetches LLM data from starwind.dev (rate limited, with caching)", "parameter": {}, "task": "Fetch the latest LLM data available from the specified API endpoint."}, {"name": "get_package_manager", "server": "Starwind UI", "description": "Detects and returns the current package manager information", "parameter": {}, "task": "Detect and return the current package manager being used in the system."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Strava", "description": "Strava API operations, including: fetching athlete profiles and activities, retrieving segment details, managing starred segments, exporting routes in GPX/TCX formats, and accessing activity streams and zones", "tools": [{"name": "get-recent-activities", "server": "Strava", "description": "Fetches the authenticated user's recent activities.", "parameter": {"perPage": "(Optional, number) Number of activities to retrieve. Default: 30"}, "task": "Retrieve the last 15 recent activities of the authenticated user."}, {"name": "get-athlete-profile", "server": "Strava", "description": "Fetches the profile information for the authenticated athlete.", "parameter": {}, "task": "Retrieve the profile details of the currently authenticated athlete."}, {"name": "get-athlete-stats", "server": "Strava", "description": "Fetches activity statistics (recent, YTD, all-time) for the authenticated athlete.", "parameter": {}, "task": "Fetch the authenticated athlete's year-to-date activity statistics."}, {"name": "get-activity-details", "server": "Strava", "description": "Fetches detailed information about a specific activity using its ID.", "parameter": {"activityId": "(Required, number) The unique identifier of the activity."}, "task": "Retrieve the details of the activity with ID 12345."}, {"name": "list-athlete-clubs", "server": "Strava", "description": "Lists the clubs the authenticated athlete is a member of.", "parameter": {}, "task": "List all the clubs that the currently authenticated athlete is a member of."}, {"name": "list-starred-segments", "server": "Strava", "description": "Lists the segments starred by the authenticated athlete.", "parameter": {}, "task": "List all the segments that have been starred by the currently authenticated athlete."}, {"name": "get-segment", "server": "Strava", "description": "Fetches detailed information about a specific segment using its ID.", "parameter": {"segmentId": "(Required, number) The unique identifier of the segment."}, "task": "Retrieve the details of the segment with ID 12345."}, {"name": "explore-segments", "server": "Strava", "description": "Searches for popular segments within a given geographical area (bounding box).", "parameter": {"bounds": "(Required, string) Comma-separated: south_west_lat,south_west_lng,north_east_lat,north_east_lng.", "activityType": "(Optional, string) Filter by activity type ('running' or 'riding').", "minCat": "(Optional, number) Minimum climb category. Requires activityType: 'riding'.", "maxCat": "(Optional, number) Maximum climb category. Requires activityType: 'riding'."}, "task": "Find popular running segments within the geographical bounds defined by 37.7,-122.5,37.8,-122.4."}, {"name": "star-segment", "server": "Strava", "description": "Stars or unstars a specific segment for the authenticated athlete.", "parameter": {"segmentId": "(Required, number) The unique identifier of the segment.", "starred": "(Required, boolean) true to star, false to unstar."}, "task": "Star the segment with ID 12345 for the authenticated athlete."}, {"name": "get-segment-effort", "server": "Strava", "description": "Fetches detailed information about a specific segment effort using its ID.", "parameter": {"effortId": "(Required, number) The unique identifier of the segment effort."}, "task": "Retrieve the detailed information for the segment effort with ID 12345."}, {"name": "list-segment-efforts", "server": "Strava", "description": "Lists the authenticated athlete's efforts on a given segment, optionally filtered by date.", "parameter": {"segmentId": "(Required, number) The ID of the segment.", "startDateLocal": "(Optional, string) Filter efforts starting after this date-time (ISO 8601 format).", "endDateLocal": "(Optional, string) Filter efforts ending before this date-time (ISO 8601 format).", "perPage": "(Optional, number) Number of results per page. Default: 30"}, "task": "Retrieve the authenticated athlete's efforts on segment ID 12345 between June 1, 2024, and June 30, 2024, limited to 20 results per page."}, {"name": "list-athlete-routes", "server": "Strava", "description": "Lists the routes created by the authenticated athlete.", "parameter": {"page": "(Optional, number) Page number for pagination.", "perPage": "(Optional, number) Number of routes per page. Default: 30"}, "task": "Retrieve the first 20 routes created by the authenticated athlete on the initial page."}, {"name": "get-route", "server": "Strava", "description": "Fetches detailed information for a specific route using its ID.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}, "task": "Retrieve the detailed information for the route with ID 12345."}, {"name": "export-route-gpx", "server": "Strava", "description": "Exports a specific route in GPX format and saves it locally.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}, "task": "Export the route with ID 12345 in GPX format and save it to the local storage."}, {"name": "export-route-tcx", "server": "Strava", "description": "Exports a specific route in TCX format and saves it locally.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}, "task": "Export the route with ID 12345 in TCX format and save it to the local storage."}, {"name": "get-activity-streams", "server": "Strava", "description": "Retrieves detailed time-series data streams from a Strava activity.", "parameter": {"id": "(Required, number | string) The Strava activity identifier to fetch streams for.", "types": "(Optional, array) Types of streams to fetch. Default: ['time', 'distance', 'heartrate', 'cadence', 'watts'].", "resolution": "(Optional, string) Data resolution/density. Values: 'low', 'medium', 'high'.", "series_type": "(Optional, string) Base series type for data point indexing. Default: 'distance'.", "page": "(Optional, number) Page number for paginated results. Default: 1.", "points_per_page": "(Optional, number) Number of data points per page. Default: 100. Special value: -1 returns ALL data points split into multiple messages."}, "task": "Retrieve high-resolution time-series data streams including heart rate and cadence for Strava activity ID 12345, with data points indexed by distance."}, {"name": "get-activity-laps", "server": "Strava", "description": "Retrieves the laps recorded for a specific Strava activity.", "parameter": {"id": "(Required, number | string) The unique identifier of the Strava activity."}, "task": "Retrieve the recorded laps for the Strava activity with the unique identifier 123456789."}, {"name": "get-athlete-zones", "server": "Strava", "description": "Retrieves the authenticated athlete's configured heart rate and power zones.", "parameter": {}, "task": "Retrieve the authenticated athlete's current heart rate and power zone configurations."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "ShaderToy", "description": "1. Retrieve shader information from ShaderToy 2. Search for shaders on ShaderToy", "tools": [{"name": "get_shader_info", "server": "ShaderToy", "description": "Retrieves information on any shader on ShaderToy.", "parameter": {}, "task": "Retrieve the details of the latest shader uploaded to ShaderToy."}, {"name": "search_shader", "server": "ShaderToy", "description": "Searches for shaders available on ShaderToy through a search prompt.", "parameter": {}, "task": "Search for shaders related to water effects on ShaderToy."}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Talk To Figma", "description": "Figma文档操作，包括：获取文档信息、节点操作（创建/修改/删除）、文本处理、布局设置、颜色与样式管理、组件实例操作、图像导出及通信通道管理", "tools": [{"name": "get_document_info", "server": "Talk To Figma", "description": "Get information about the current Figma document", "parameter": {}, "task": "Retrieve the current document details from the active Figma project."}, {"name": "get_selection", "server": "Talk To Figma", "description": "Get information about the current selection", "parameter": {}, "task": "Retrieve details about the currently highlighted or selected item."}, {"name": "read_my_design", "server": "Talk To Figma", "description": "Get detailed node information about the current selection without parameters", "parameter": {}, "task": "Get detailed information about the currently selected node in the design."}, {"name": "get_node_info", "server": "Talk To Figma", "description": "Get detailed information about a specific node", "parameter": {}, "task": "Retrieve the detailed configuration and status information for the specified node in the system."}, {"name": "get_nodes_info", "server": "Talk To Figma", "description": "Get detailed information about multiple nodes by providing an array of node IDs", "parameter": {}, "task": "Retrieve detailed information for the nodes with IDs [101, 102, 103, 104]."}, {"name": "get_annotations", "server": "Talk To Figma", "description": "Get all annotations in the current document or specific node", "parameter": {}, "task": "Retrieve all annotations present in the active document."}, {"name": "set_annotation", "server": "Talk To Figma", "description": "Create or update an annotation with markdown support", "parameter": {}, "task": "Create or update a markdown annotation with the following content: \"Review the latest project updates and add action items for the team meeting on 2024-07-15.\""}, {"name": "set_multiple_annotations", "server": "Talk To Figma", "description": "Batch create/update multiple annotations efficiently", "parameter": {}, "task": "Batch create or update 10 annotations for a dataset with unique identifiers and labels."}, {"name": "scan_nodes_by_types", "server": "Talk To Figma", "description": "Scan for nodes with specific types (useful for finding annotation targets)", "parameter": {}, "task": "Scan for nodes with the type \"annotation\" in the current document."}, {"name": "get_reactions", "server": "Talk To Figma", "description": "Get all prototype reactions from nodes with visual highlight animation", "parameter": {}, "task": "Retrieve all prototype reactions with visual highlight animations from the connected nodes."}, {"name": "set_default_connector", "server": "Talk To Figma", "description": "Set a copied FigJam connector as the default connector style for creating connections (must be set before creating connections)", "parameter": {}, "task": "Set the copied FigJam connector as the default style for creating new connections in the current session."}, {"name": "create_connections", "server": "Talk To Figma", "description": "Create FigJam connector lines between nodes, based on prototype flows or custom mapping", "parameter": {}, "task": "Create connector lines between nodes in a FigJam diagram to represent a custom workflow."}, {"name": "create_rectangle", "server": "Talk To Figma", "description": "Create a new rectangle with position, size, and optional name", "parameter": {}, "task": "Create a new rectangle positioned at coordinates (100, 200) with a width of 300 pixels and a height of 150 pixels, and label it \"Container\"."}, {"name": "create_frame", "server": "Talk To Figma", "description": "Create a new frame with position, size, and optional name", "parameter": {}, "task": "Create a new frame positioned at coordinates (100, 200) with a width of 300 pixels and a height of 400 pixels, and label it \"Main Display\"."}, {"name": "create_text", "server": "Talk To Figma", "description": "Create a new text node with customizable font properties", "parameter": {}, "task": "Create a new text node with a bold, 14-point Arial font."}, {"name": "scan_text_nodes", "server": "Talk To Figma", "description": "Scan text nodes with intelligent chunking for large designs", "parameter": {}, "task": "Scan and intelligently chunk text nodes from a large design file for efficient processing."}, {"name": "set_text_content", "server": "Talk To Figma", "description": "Set the text content of a single text node", "parameter": {}, "task": "Set the text content of the specified text node to \"Hello, World!\"."}, {"name": "set_multiple_text_contents", "server": "Talk To Figma", "description": "Batch update multiple text nodes efficiently", "parameter": {}, "task": "Update the content of three text nodes in a document with the following new values: \"Introduction\", \"Main Content\", and \"Conclusion\"."}, {"name": "set_layout_mode", "server": "Talk To Figma", "description": "Set the layout mode and wrap behavior of a frame (NONE, HORIZONTAL, VERTICAL)", "parameter": {}, "task": "Set the layout mode of the current frame to vertical with wrapping enabled."}, {"name": "set_padding", "server": "Talk To Figma", "description": "Set padding values for an auto-layout frame (top, right, bottom, left)", "parameter": {}, "task": "Set padding values of 20 pixels on all sides for the selected auto-layout frame."}, {"name": "set_axis_align", "server": "Talk To Figma", "description": "Set primary and counter axis alignment for auto-layout frames", "parameter": {}, "task": "Adjust the alignment of elements within an auto-layout frame to center them both horizontally and vertically."}, {"name": "set_layout_sizing", "server": "Talk To Figma", "description": "Set horizontal and vertical sizing modes for auto-layout frames (FIXED, HUG, FILL)", "parameter": {}, "task": "Adjust the horizontal and vertical sizing modes of the selected auto-layout frame to HUG for both dimensions."}, {"name": "set_item_spacing", "server": "Talk To Figma", "description": "Set distance between children in an auto-layout frame", "parameter": {}, "task": "Adjust the spacing between elements in an auto-layout frame to 20 pixels."}, {"name": "set_fill_color", "server": "Talk To Figma", "description": "Set the fill color of a node (RGBA)", "parameter": {}, "task": "Set the fill color of the selected node to a semi-transparent red (RGBA: 255, 0, 0, 128)."}, {"name": "set_stroke_color", "server": "Talk To Figma", "description": "Set the stroke color and weight of a node", "parameter": {}, "task": "Set the stroke color to red and the stroke weight to 3 pixels for the selected node."}, {"name": "set_corner_radius", "server": "Talk To Figma", "description": "Set the corner radius of a node with optional per-corner control", "parameter": {}, "task": "Set the corner radius of the selected node to 8 pixels, ensuring all four corners are uniformly rounded."}, {"name": "move_node", "server": "Talk To Figma", "description": "Move a node to a new position", "parameter": {}, "task": "Move the selected node to a new position within the current workspace."}, {"name": "resize_node", "server": "Talk To Figma", "description": "Resize a node with new dimensions", "parameter": {}, "task": "Resize the specified node to a width of 800 pixels and a height of 600 pixels."}, {"name": "delete_node", "server": "Talk To Figma", "description": "Delete a node", "parameter": {}, "task": "Remove a specific node from the current system configuration."}, {"name": "delete_multiple_nodes", "server": "Talk To Figma", "description": "Delete multiple nodes at once efficiently", "parameter": {}, "task": "Delete 50 inactive user nodes from the database in a single operation."}, {"name": "clone_node", "server": "Talk To Figma", "description": "Create a copy of an existing node with optional position offset", "parameter": {}, "task": "Create a duplicate of the selected node with a 20-pixel horizontal offset to the right."}, {"name": "get_styles", "server": "Talk To Figma", "description": "Get information about local styles", "parameter": {}, "task": "Retrieve the details of all available local styles."}, {"name": "get_local_components", "server": "Talk To Figma", "description": "Get information about local components", "parameter": {}, "task": "Retrieve details about all locally installed components."}, {"name": "create_component_instance", "server": "Talk To Figma", "description": "Create an instance of a component", "parameter": {}, "task": "Create an instance of a component with default settings."}, {"name": "get_instance_overrides", "server": "Talk To Figma", "description": "Extract override properties from a selected component instance", "parameter": {}, "task": "Extract the override properties from the currently selected component instance."}, {"name": "set_instance_overrides", "server": "Talk To Figma", "description": "Apply extracted overrides to target instances", "parameter": {}, "task": "Apply the extracted configuration overrides to the specified target instances."}, {"name": "export_node_as_image", "server": "Talk To Figma", "description": "Export a node as an image (PNG, JPG, SVG, or PDF) - limited support on image currently returning base64 as text", "parameter": {}, "task": "Export the selected node as a high-resolution PNG image."}, {"name": "join_channel", "server": "Talk To Figma", "description": "Join a specific channel to communicate with Figma", "parameter": {}, "task": "Join the designated communication channel to collaborate with the Figma team."}], "domains": [{"name": "Design Tool Integration", "description": "设计工具集成，包括文档信息获取、节点操作、文本处理、布局设置、颜色与样式管理、组件实例操作及图像导出"}]}
{"name": "TMDB", "description": "1.按标题或关键词搜索电影 2.根据电影ID获取推荐 3.获取指定时间窗口的热门电影", "tools": [{"name": "search_movies", "server": "TMDB", "description": "Search for movies by title or keywords", "parameter": {"query": "(string) Search query"}, "task": "Search for movies containing the keyword \"adventure\" in their titles."}, {"name": "get_recommendations", "server": "TMDB", "description": "Get movie recommendations based on a movie ID", "parameter": {"movieId": "(string) TMDB movie ID"}, "task": "Get movie recommendations based on the movie with TMDB ID '12345'."}, {"name": "get_trending", "server": "TMDB", "description": "Get trending movies for a specified time window", "parameter": {"timeWindow": "(string) Either 'day' or 'week'"}, "task": "Retrieve the list of trending movies for the current week."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "Tavily search", "description": "1.使用AI进行全面的网页搜索和内容提取 2.生成带有证据的直接答案 3.搜索最近的新闻文章", "tools": [{"name": "tavily_web_search", "server": "Tavily search", "description": "Performs comprehensive web searches with AI-powered content extraction.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "search_depth": "(string, optional) Either 'basic' or 'advanced' search depth (default: 'basic')", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}, "task": "Search for the latest advancements in quantum computing from reputable science domains, returning up to 10 results with an advanced search depth. Exclude any results from commercial or news websites."}, {"name": "tavily_answer_search", "server": "Tavily search", "description": "Performs web searches and generates direct answers with supporting evidence.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "search_depth": "(string, optional) Either 'basic' or 'advanced' search depth (default: 'advanced')", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}, "task": "Find the top 10 most recent advancements in quantum computing with supporting evidence, focusing on research papers from universities and excluding commercial websites."}, {"name": "tavily_news_search", "server": "Tavily search", "description": "Searches recent news articles with publication dates.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "days": "(integer, optional) Number of days back to search (default: 3)", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}, "task": "Search for the latest 10 news articles published in the last 5 days about renewable energy, excluding articles from social media platforms."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "News & Content Services", "description": "新闻与内容服务,提供资讯聚合、热点推送、主题订阅及媒体品牌内容"}]}
{"name": "Telegram", "description": "Telegram chat and user management, including chat operations (create/edit/delete), message handling (send/edit/delete), contact management (add/block/import), profile updates, and privacy settings", "tools": [{"name": "get_chats", "server": "Telegram", "description": "Get a paginated list of chats.", "parameter": {"page": "(int) Page number (1-indexed)", "page_size": "(int) Number of chats per page"}, "task": "Retrieve the first 20 chats from the paginated list, starting from page 1."}, {"name": "list_chats", "server": "Telegram", "description": "List chats with metadata and filtering.", "parameter": {"chat_type": "(str) Type of chat (e.g., 'private', 'group', 'channel')", "limit": "(int) Maximum number of chats to return"}, "task": "List the 20 most recent private chats along with their metadata."}, {"name": "get_chat", "server": "Telegram", "description": "Get detailed info about a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Retrieve the detailed information for the chat with ID 12345."}, {"name": "create_group", "server": "Telegram", "description": "Create a new group.", "parameter": {"title": "(str) Title of the group", "user_ids": "(list of int) List of user IDs to add to the group"}, "task": "Create a new group titled \"Project Alpha\" and add users with IDs 101, 102, and 103 to it."}, {"name": "create_channel", "server": "Telegram", "description": "Create a channel or supergroup.", "parameter": {"title": "(str) Title of the channel/supergroup", "about": "(str) Description of the channel/supergroup", "megagroup": "(bool) Whether to create a supergroup"}, "task": "Create a public supergroup titled \"Tech Enthusiasts\" with the description \"A community for discussing the latest in technology and innovation.\""}, {"name": "edit_chat_title", "server": "Telegram", "description": "Change chat/group/channel title.", "parameter": {"chat_id": "(int) ID of the chat", "title": "(str) New title"}, "task": "Change the title of the chat with ID 12345 to \"Project Planning Meeting\"."}, {"name": "delete_chat_photo", "server": "Telegram", "description": "Remove chat/group/channel photo.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Remove the profile photo from the chat with ID 123456789."}, {"name": "leave_chat", "server": "Telegram", "description": "Leave a group or channel.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Leave the group or channel with the ID 12345."}, {"name": "get_participants", "server": "Telegram", "description": "List all participants in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "List all participants in the chat with ID 12345."}, {"name": "get_admins", "server": "Telegram", "description": "List all admins in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "List all administrators in the chat with ID 12345."}, {"name": "get_banned_users", "server": "Telegram", "description": "List all banned users in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "List all banned users in the chat with ID 12345."}, {"name": "promote_admin", "server": "Telegram", "description": "Promote user to admin.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to promote"}, "task": "Promote the user with ID 12345 to admin in the chat with ID 67890."}, {"name": "demote_admin", "server": "Telegram", "description": "Demote admin to user.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to demote"}, "task": "Demote the user with ID 12345 to a regular member in the chat group with ID 67890."}, {"name": "ban_user", "server": "Telegram", "description": "Ban user from a chat.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to ban"}, "task": "Ban the user with ID 12345 from the chat with ID 67890."}, {"name": "unban_user", "server": "Telegram", "description": "Unban user from a chat.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to unban"}, "task": "Remove the ban for user with ID 12345 in the chat with ID 67890."}, {"name": "get_invite_link", "server": "Telegram", "description": "Get invite link for a group or channel.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Generate an invite link for the chat with ID 123456789."}, {"name": "export_chat_invite", "server": "Telegram", "description": "Export invite link for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Generate an invite link for the chat with ID 12345."}, {"name": "import_chat_invite", "server": "Telegram", "description": "Join chat by invite hash.", "parameter": {"hash": "(str) Invite hash"}, "task": "Join a chat group using the provided invite hash \"abc123xyz\"."}, {"name": "join_chat_by_link", "server": "Telegram", "description": "Join chat by invite link.", "parameter": {"link": "(str) Invite link"}, "task": "Join the chat group using the provided invite link."}, {"name": "get_messages", "server": "Telegram", "description": "Get paginated messages.", "parameter": {"chat_id": "(int) ID of the chat", "page": "(int) Page number (1-indexed)", "page_size": "(int) Number of messages per page"}, "task": "Retrieve the second page of messages from chat ID 12345, displaying 20 messages per page."}, {"name": "list_messages", "server": "Telegram", "description": "List filtered messages.", "parameter": {"chat_id": "(int) ID of the chat", "limit": "(int) Maximum number of messages to return", "search_query": "(Optional, str) Search query", "from_date": "(Optional, datetime) Start date", "to_date": "(Optional, datetime) End date"}, "task": "Retrieve the last 50 messages from chat ID 12345 that contain the keyword \"meeting\" between January 1, 2024, and March 31, 2024."}, {"name": "send_message", "server": "Telegram", "description": "Send a message to a specific chat.", "parameter": {"chat_id": "(int) ID of the chat", "message": "(str) Message content to send"}, "task": "Send a message with the content \"Meeting at 3 PM tomorrow\" to the chat with ID 12345."}, {"name": "reply_to_message", "server": "Telegram", "description": "Reply to a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to reply to", "text": "(str) Reply text"}, "task": "Reply to message ID 12345 in chat ID 67890 with the text \"I have received your message and will respond shortly.\""}, {"name": "edit_message", "server": "Telegram", "description": "Edit a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to edit", "new_text": "(str) New message text"}, "task": "Edit the message with ID 12345 in chat 67890 to say \"Please disregard the previous message and refer to the updated instructions.\""}, {"name": "delete_message", "server": "Telegram", "description": "Delete a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to delete"}, "task": "Delete the message with ID 12345 from the chat with ID 67890."}, {"name": "forward_message", "server": "Telegram", "description": "Forward a message.", "parameter": {"from_chat_id": "(int) ID of the chat to forward from", "message_id": "(int) ID of the message to forward", "to_chat_id": "(int) ID of the chat to forward to"}, "task": "Forward the message with ID 12345 from chat ID 67890 to chat ID 54321."}, {"name": "pin_message", "server": "Telegram", "description": "Pin a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to pin"}, "task": "Pin the message with ID 12345 in the chat with ID 67890."}, {"name": "unpin_message", "server": "Telegram", "description": "Unpin a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to unpin"}, "task": "Unpin the message with ID 12345 from the chat with ID 67890."}, {"name": "mark_as_read", "server": "Telegram", "description": "Mark all messages as read in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Mark all messages as read in the chat with ID 12345."}, {"name": "get_message_context", "server": "Telegram", "description": "Get context around a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message", "context_size": "(int) Number of messages before and after the message"}, "task": "Retrieve 5 messages before and after the message with ID 123 in chat ID 456 to understand the conversation context."}, {"name": "get_history", "server": "Telegram", "description": "Get full chat history.", "parameter": {"chat_id": "(int) ID of the chat", "limit": "(int) Maximum number of messages to return"}, "task": "Retrieve the last 50 messages from chat ID 12345."}, {"name": "get_pinned_messages", "server": "Telegram", "description": "List pinned messages in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Retrieve all pinned messages from the chat with ID 12345."}, {"name": "get_last_interaction", "server": "Telegram", "description": "Get the most recent message with a contact.", "parameter": {"contact_id": "(int) ID of the contact"}, "task": "Retrieve the latest message exchanged with contact ID 12345."}, {"name": "list_contacts", "server": "Telegram", "description": "List all contacts.", "parameter": {}, "task": "List all available contacts in the address book."}, {"name": "search_contacts", "server": "Telegram", "description": "Search contacts.", "parameter": {"query": "(str) Search query"}, "task": "Search for contacts with the name \"John Smith\" in the address book."}, {"name": "add_contact", "server": "Telegram", "description": "Add a contact.", "parameter": {"phone": "(str) Phone number of the contact", "first_name": "(str) First name of the contact", "last_name": "(Optional, str) Last name of the contact"}, "task": "Add a new contact with the phone number \"555-123-4567\" and the first name \"Alice\". Include the last name \"Smith\" if possible."}, {"name": "delete_contact", "server": "Telegram", "description": "Delete a contact.", "parameter": {"user_id": "(int) ID of the contact"}, "task": "Delete the contact with user ID 12345 from the system."}, {"name": "block_user", "server": "Telegram", "description": "Block a user.", "parameter": {"user_id": "(int) ID of the user to block"}, "task": "Block the user with ID 12345."}, {"name": "unblock_user", "server": "Telegram", "description": "Unblock a user.", "parameter": {"user_id": "(int) ID of the user to unblock"}, "task": "Unblock the user with ID 12345."}, {"name": "import_contacts", "server": "Telegram", "description": "Bulk import contacts.", "parameter": {"contacts": "(list of dict) List of contact dictionaries"}, "task": "Import a list of 50 contacts with their names, email addresses, and phone numbers into the system."}, {"name": "export_contacts", "server": "Telegram", "description": "Export all contacts as JSON.", "parameter": {}, "task": "Export all contacts in JSON format."}, {"name": "get_blocked_users", "server": "Telegram", "description": "List blocked users.", "parameter": {}, "task": "List all users who are currently blocked from accessing the system."}, {"name": "get_contact_ids", "server": "Telegram", "description": "List all contact IDs.", "parameter": {}, "task": "List all available contact IDs from the database."}, {"name": "get_direct_chat_by_contact", "server": "Telegram", "description": "Find direct chat with a contact.", "parameter": {"contact_query": "(str) Name, username, or phone number to search for"}, "task": "Find the direct chat conversation with the contact whose username is \"john_doe123\"."}, {"name": "get_contact_chats", "server": "Telegram", "description": "List all chats with a contact.", "parameter": {"contact_id": "(int) ID of the contact"}, "task": "List all chat conversations associated with contact ID 12345."}, {"name": "get_me", "server": "Telegram", "description": "Get your user info.", "parameter": {}, "task": "Retrieve your personal user information from the system."}, {"name": "update_profile", "server": "Telegram", "description": "Update your profile.", "parameter": {"first_name": "(str) New first name", "last_name": "(Optional, str) New last name", "about": "(Optional, str) New about text"}, "task": "Update your profile with the first name \"Alex\", last name \"Smith\", and a brief description stating \"Software Engineer specializing in backend development.\""}, {"name": "delete_profile_photo", "server": "Telegram", "description": "Remove your profile photo.", "parameter": {}, "task": "Remove the current profile photo from your account."}, {"name": "get_user_photos", "server": "Telegram", "description": "Get a user's profile photos.", "parameter": {"user_id": "(int) ID of the user", "limit": "(int) Maximum number of photos to return"}, "task": "Retrieve the latest 5 profile photos for the user with ID 12345."}, {"name": "get_user_status", "server": "Telegram", "description": "Get a user's online status.", "parameter": {"user_id": "(int) ID of the user"}, "task": "Check the online status of the user with ID 12345."}, {"name": "get_media_info", "server": "Telegram", "description": "Get info about media in a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message"}, "task": "Retrieve the details of the media file from the message with ID 12345 in chat ID 67890."}, {"name": "search_public_chats", "server": "Telegram", "description": "Search public chats, channels, or bots by username or title.", "parameter": {"query": "(str) Search query"}, "task": "Search for public chats or channels related to \"Python programming\" using the provided search functionality."}, {"name": "search_messages", "server": "Telegram", "description": "Search messages in a chat.", "parameter": {"chat_id": "(int) ID of the chat", "query": "(str) Search query", "limit": "(int) Maximum number of messages to return"}, "task": "Search for the latest 5 messages containing the keyword \"meeting\" in chat ID 12345."}, {"name": "resolve_username", "server": "Telegram", "description": "Resolve a username to ID.", "parameter": {"username": "(str) Username to resolve"}, "task": "Resolve the user ID associated with the username 'john_doe'."}, {"name": "get_sticker_sets", "server": "Telegram", "description": "List sticker sets.", "parameter": {}, "task": "List all available sticker sets in the collection."}, {"name": "get_bot_info", "server": "Telegram", "description": "Get info about a bot.", "parameter": {"bot_username": "(str) Username of the bot"}, "task": "Retrieve the details of the bot with the username \"helper_bot\"."}, {"name": "set_bot_commands", "server": "Telegram", "description": "Set bot commands (bot accounts only).", "parameter": {"bot_username": "(str) Username of the bot", "commands": "(list of dict) List of command dictionaries"}, "task": "Set up a list of commands for the specified bot account, including command names and descriptions. Ensure the commands are properly formatted and functional."}, {"name": "get_privacy_settings", "server": "Telegram", "description": "Get privacy settings.", "parameter": {}, "task": "Retrieve the current privacy settings for the user account."}, {"name": "set_privacy_settings", "server": "Telegram", "description": "Set privacy settings.", "parameter": {"key": "(str) Setting key", "allow_users": "(list of int) List of user IDs to allow", "disallow_users": "(list of int) List of user IDs to disallow"}, "task": "Configure privacy settings to allow user IDs [101, 102, 103] and disallow user IDs [201, 202] for the specified setting key."}, {"name": "mute_chat", "server": "Telegram", "description": "Mute notifications for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Mute notifications for the chat with ID 12345."}, {"name": "unmute_chat", "server": "Telegram", "description": "Unmute notifications for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Enable notifications for the chat with ID 12345."}, {"name": "archive_chat", "server": "Telegram", "description": "Archive a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Archive the chat with ID 12345."}, {"name": "unarchive_chat", "server": "Telegram", "description": "Unarchive a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Unarchive the chat with ID 12345."}, {"name": "get_recent_actions", "server": "Telegram", "description": "Get recent admin actions in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}, "task": "Retrieve the last 10 admin actions performed in chat with ID 12345."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "User & Access Management", "description": "用户与访问管理，包括用户信息检索、群组成员列表及权限定义管理"}]}
{"name": "Telegram-Client", "description": "Telegram account operations, including: account information retrieval, dialog listing and filtering, message marking as read, dialog message retrieval, and message sending", "tools": [{"name": "tg_me", "server": "Telegram-Client", "description": "Get current account information.", "parameter": {}, "task": "Retrieve the details of the currently logged-in account."}, {"name": "tg_dialogs", "server": "Telegram-Client", "description": "List dialogs with optional unread filter.", "parameter": {}, "task": "List all unread dialogs in the Telegram messaging platform."}, {"name": "tg_read", "server": "Telegram-Client", "description": "Mark dialog as read.", "parameter": {}, "task": "Mark all unread messages in the current Telegram conversation as read."}, {"name": "tg_dialog", "server": "Telegram-Client", "description": "Retrieve messages from specific dialog.", "parameter": {}, "task": "Retrieve the last 10 messages from the selected conversation in Telegram."}, {"name": "tg_send", "server": "Telegram-Client", "description": "Send draft messages to any dialog.", "parameter": {}, "task": "Send a draft message to a selected conversation in Telegram."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "Terminal-Control", "description": "1.执行终端命令并返回结果 2.获取命令执行历史 3.获取和更改当前工作目录 4.列出目录内容 5.文件内容操作（写入、读取、插入、删除、更新）", "tools": [{"name": "execute_command", "server": "Terminal-Control", "description": "Execute a terminal command and return its results.", "parameter": {"command": "(string) The command line command to execute", "timeout": "(Optional, int) Command timeout in seconds (default: 30)"}, "task": "Run the terminal command `ls -la` to list all files and directories in the current folder with detailed information, using a timeout of 20 seconds."}, {"name": "get_command_history", "server": "Terminal-Control", "description": "Get recent command execution history.", "parameter": {"count": "(Optional, int) Number of recent commands to return (default: 10)"}, "task": "Retrieve the last 15 commands executed in the system's history."}, {"name": "get_current_directory", "server": "Terminal-Control", "description": "Get the current working directory.", "parameter": {}, "task": "Retrieve the path of the current working directory."}, {"name": "change_directory", "server": "Terminal-Control", "description": "Change the current working directory.", "parameter": {"path": "(string) Directory path to switch to"}, "task": "Change the current working directory to \"/home/user/documents\"."}, {"name": "list_directory", "server": "Terminal-Control", "description": "List files and subdirectories in the specified directory.", "parameter": {"path": "(Optional, string) Directory path to list contents (default: current directory)"}, "task": "List all files and subdirectories in the \"/documents/projects\" directory."}, {"name": "write_file", "server": "Terminal-Control", "description": "Write content to a file with overwrite or append options.", "parameter": {"path": "(string) Path to the file", "content": "(string) Content to write", "mode": "(Optional, string) Write mode ('overwrite' or 'append', default: 'overwrite')"}, "task": "Save the text \"Hello, World!\" to a file located at \"/documents/greeting.txt\" using the overwrite mode."}, {"name": "read_file", "server": "Terminal-Control", "description": "Read content from a file with optional row selection.", "parameter": {"path": "(string) Path to the file", "start_row": "(Optional, int) Starting row to read from (0-based)", "end_row": "(Optional, int) Ending row to read to (0-based, inclusive)"}, "task": "Read the contents of the file located at \"/data/reports/2024_sales.csv\" starting from row 5 up to and including row 15."}, {"name": "insert_file_content", "server": "Terminal-Control", "description": "Insert content at specific row(s) in a file.", "parameter": {"path": "(string) Path to the file", "content": "(string) Content to insert", "row": "(Optional, int) Row number to insert at (0-based)", "rows": "(Optional, list) List of row numbers to insert at (0-based)"}, "task": "Insert the text \"Additional configuration settings\" at row 5 in the configuration file located at \"/etc/app/config.txt\"."}, {"name": "delete_file_content", "server": "Terminal-Control", "description": "Delete content at specific row(s) from a file.", "parameter": {"path": "(string) Path to the file", "row": "(Optional, int) Row number to delete (0-based)", "rows": "(Optional, list) List of row numbers to delete (0-based)"}, "task": "Delete the content at row 5 from the file located at \"/var/log/app.log\"."}, {"name": "update_file_content", "server": "Terminal-Control", "description": "Update content at specific row(s) in a file.", "parameter": {"path": "(string) Path to the file", "content": "(string) New content to place at the specified row(s)", "row": "(Optional, int) Row number to update (0-based)", "rows": "(Optional, list) List of row numbers to update (0-based)"}, "task": "Update the content at row 5 in the file located at \"/var/log/app.log\" with the new text \"Error: Connection timeout\"."}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "TFT-Match-Analyzer", "description": "1. Get TFT match history for the current player 2. Get detailed information about a specific TFT match", "tools": [{"name": "tft_match_history", "server": "TFT-Match-Analyzer", "description": "Get TFT match history for the current player.", "parameter": {"count": "(Optional, number) Number of matches to retrieve. Defaults to 20", "start": "(Optional, number) Start index for pagination. Defaults to 0"}, "task": "Retrieve the last 15 matches from the current player's TFT match history, starting from the 5th most recent match."}, {"name": "tft_match_details", "server": "TFT-Match-Analyzer", "description": "Get detailed information about a specific TFT match.", "parameter": {"matchId": "(required, string) The match ID to get details for"}, "task": "Retrieve the detailed statistics and player performance data for the TFT match with ID \"1234567890\"."}], "domains": [{"name": "Sports Data Analysis", "description": "Sports data retrieval and analysis, including game statistics, team records, play-by-play data, and advanced analytics"}]}
{"name": "Ticketmaster", "description": "Search for events, venues, or attractions on Ticketmaster using various filters", "tools": [{"name": "search_ticketmaster", "server": "Ticketmaster", "description": "Searches for events, venues, or attractions using various filters.", "parameter": {"type": "(string) Type of search ('event', 'venue', or 'attraction')", "keyword": "(Optional, string) Search term", "startDate": "(Optional, string) Start date in YYYY-MM-DD format (for events)", "endDate": "(Optional, string) End date in YYYY-MM-DD format (for events)", "city": "(Optional, string) City name", "stateCode": "(Optional, string) State code (e.g., 'NY')", "countryCode": "(Optional, string) Country code (e.g., 'US')", "venueId": "(Optional, string) Specific venue ID", "attractionId": "(Optional, string) Specific attraction ID", "classificationName": "(Optional, string) Event category (e.g., 'Sports', 'Music')", "format": "(Optional, string) Output format ('json' or 'text', defaults to 'json')"}, "task": "Search for music events in New York City (NY, US) between 2024-07-01 and 2024-07-31."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "TickTick", "description": "1.任务管理,包括:创建、更新、完成和删除任务 2.项目管理,包括:创建、更新、删除项目及获取项目详情", "tools": [{"name": "get_task_by_ids", "server": "TickTick", "description": "Get a specific task by project ID and task ID", "parameter": {"projectId": "(string) Project identifier", "taskId": "(string) Task identifier"}, "task": "Retrieve the task with ID \"TASK123\" from the project identified as \"PROJ456\"."}, {"name": "create_task", "server": "TickTick", "description": "Create a new task in a project", "parameter": {"title": "(string) Task title", "projectId": "(string) Project id", "content": "(optional string) Task content", "desc": "(optional string) Task description", "isAllDay": "(optional boolean) Is all day task", "startDate": "(optional string) Task start date in 'yyyy-MM-dd'T'HH:mm:ssZ' format", "dueDate": "(optional string) Task due date in 'yyyy-MM-dd'T'HH:mm:ssZ' format", "timeZone": "(optional string) Task time zone (e.g., 'America/Los_Angeles')", "reminders": "(optional string[]) List of reminder triggers in iCalendar format", "repeatFlag": "(optional string) Task repeat flag in iCalendar format", "priority": "(optional number) Task priority (None: 0, Low: 1, Medium: 3, High: 5)", "sortOrder": "(optional string) Task sort order", "items": "(optional array) List of subtasks with:"}, "task": "Create a new task titled \"Complete Project Report\" in project PRJ-123 with a description of \"Finalize and submit the quarterly report\", set to start on 2024-03-15T09:00:00Z and due on 2024-03-20T17:00:00Z in the \"America/New_York\" time zone. Assign a medium priority level (3) and include a reminder 30 minutes before the due date."}, {"name": "update_task", "server": "TickTick", "description": "Update an existing task", "parameter": {"taskId": "(string) Task identifier - Path", "id": "(string) Task identifier - Body", "projectId": "(string) Project id"}, "task": "Update the task with ID \"TASK123\" in project \"PROJ456\" to reflect the latest changes."}, {"name": "complete_task", "server": "TickTick", "description": "Mark a task as completed", "parameter": {"taskId": "(string) Task identifier", "projectId": "(string) Project identifier"}, "task": "Mark the task with ID \"TASK123\" as completed within the project identified by \"PROJ456\"."}, {"name": "delete_task", "server": "TickTick", "description": "Delete a task from a project", "parameter": {"taskId": "(string) Task identifier", "projectId": "(string) Project identifier"}, "task": "Remove the task with ID 'TASK123' from the project identified as 'PROJ456'."}, {"name": "get_user_projects", "server": "TickTick", "description": "Get all projects for the authenticated user", "parameter": {}, "task": "List all projects associated with the currently authenticated user account."}, {"name": "get_project_by_id", "server": "TickTick", "description": "Get a specific project by ID", "parameter": {"projectId": "(string) Project identifier"}, "task": "Retrieve the details of the project with the identifier \"PRJ-2024-001\"."}, {"name": "get_project_with_data", "server": "TickTick", "description": "Get project details along with tasks and columns", "parameter": {"projectId": "(string) Project identifier"}, "task": "Retrieve all tasks and columns associated with the project identified by \"PRJ-2024-001\"."}, {"name": "create_project", "server": "TickTick", "description": "Create a new project", "parameter": {"name": "(string) Project name", "color": "(optional string) Project color (default: '#4772FA')", "viewMode": "(optional string) View mode ('list', 'kanban', 'timeline') (default: 'list')", "kind": "(optional string) Project kind ('TASK', 'NOTE') (default: 'TASK')"}, "task": "Create a new project named \"Marketing Campaign Q3\" with a kanban view mode and set the color to \"#FF5733\". The project should be of kind \"TASK\"."}, {"name": "update_project", "server": "TickTick", "description": "Update an existing project", "parameter": {"projectId": "(string) Project identifier", "name": "(optional string) Project name", "color": "(optional string) Project color", "sortOrder": "(optional number) Project sort order", "viewMode": "(optional string) View mode ('list', 'kanban', 'timeline')", "kind": "(optional string) Project kind ('TASK', 'NOTE')"}, "task": "Update the project with ID \"PRJ-12345\" to use the kanban view mode and set the color to \"blue\"."}, {"name": "delete_project", "server": "TickTick", "description": "Delete a project", "parameter": {"projectId": "(string) Project identifier"}, "task": "Delete the project with the identifier \"PRJ-2024-001\"."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Todoist", "description": "Todoist任务管理,包括:任务创建、检索、更新、完成和删除", "tools": [{"name": "todoist_create_task", "server": "Todoist", "description": "Create new tasks with various attributes.", "parameter": {"content": "(string) task title", "description": "(Optional, string) task description", "due date": "(Optional, string) due date", "priority level": "(Optional, number) priority level (1-4)"}, "task": "Create a new task titled \"Complete project report\" with a due date of 2024-12-15, a priority level of 2, and a description of \"Include all sections and submit to manager.\""}, {"name": "todoist_get_tasks", "server": "Todoist", "description": "Retrieve and filter tasks.", "parameter": {"due date": "(Optional, string) filter by due date", "priority": "(Optional, number) filter by priority", "project": "(Optional, string) filter by project", "result limit": "(Optional, number) limit the number of results"}, "task": "Retrieve up to 5 high-priority tasks (priority 1) due by the end of this week from the \"Work\" project."}, {"name": "todoist_update_task", "server": "Todoist", "description": "Update existing tasks using natural language search.", "parameter": {"task name": "(string) partial name match to find the task", "content": "(Optional, string) new task title", "description": "(Optional, string) new task description", "due date": "(Optional, string) new due date", "priority": "(Optional, number) new priority level (1-4)"}, "task": "Update the task with a partial name match of \"weekly report\" to have a new due date of \"2024-07-15\" and a priority level of 2."}, {"name": "todoist_complete_task", "server": "Todoist", "description": "Mark tasks as complete using natural language search.", "parameter": {"task name": "(string) partial name match to find the task"}, "task": "Mark the task containing \"weekly report\" as complete in the task management system."}, {"name": "todoist_delete_task", "server": "Todoist", "description": "Remove tasks using natural language search.", "parameter": {"task name": "(string) partial name match to find the task"}, "task": "Delete all tasks containing the phrase \"weekly review\" in their names."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "Typesense", "description": "1.在Typesense集合中搜索文档 2.通过ID从集合中检索特定文档 3.获取Typesense集合的统计信息 4.分析集合结构和内容 5.获取集合的有效搜索查询建议", "tools": [{"name": "typesense_query", "server": "Typesense", "description": "Search for documents in Typesense collections with powerful filtering", "parameter": {"query_text": "(string) The query text to search for", "collection_name": "(string) The name of the collection to search", "search_fields": "(array) Fields to search within", "filters": "(object, optional) Filters to apply to the search", "sort_options": "(object, optional) Options for sorting results", "limit": "(number, optional) Maximum number of results to return"}, "task": "Search for documents containing the keyword \"machine learning\" in the \"research_papers\" collection, focusing on the \"title\" and \"abstract\" fields, and return a maximum of 20 results sorted by publication date in descending order."}, {"name": "typesense_get_document", "server": "Typesense", "description": "Retrieve specific documents by ID from collections", "parameter": {"collection_name": "(string) The name of the collection", "document_id": "(string) The ID of the document to retrieve"}, "task": "Retrieve the document with ID \"user123\" from the \"customers\" collection."}, {"name": "typesense_collection_stats", "server": "Typesense", "description": "Get statistics about a Typesense collection", "parameter": {"collection_name": "(string) The name of the collection"}, "task": "Retrieve the total number of documents and average document size for the \"products\" collection in Typesense."}, {"name": "analyze_collection", "server": "Typesense", "description": "Analyze collection structure and contents", "parameter": {"collection_name": "(string) The name of the collection"}, "task": "Analyze the structure and contents of the \"customer_data\" collection."}, {"name": "search_suggestions", "server": "Typesense", "description": "Get suggestions for effective search queries for a collection", "parameter": {"collection_name": "(string) The name of the collection"}, "task": "Generate effective search query suggestions for the \"customer_feedback\" collection."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Travel Planner", "description": "1.使用Google Places API搜索地点 2.获取特定地点的详细信息 3.计算两个位置之间的路线 4.获取位置时区信息", "tools": [{"name": "searchPlaces", "server": "Travel Planner", "description": "Search for places using Google Places API", "parameter": {"query": "(string) Search query for places", "location": "(optional) Latitude and longitude to bias results", "radius": "(optional) Search radius in meters"}, "task": "Find nearby Italian restaurants within a 500-meter radius of the provided latitude and longitude coordinates."}, {"name": "getPlaceDetails", "server": "Travel Planner", "description": "Get detailed information about a specific place", "parameter": {"placeId": "(string) Google Place ID to retrieve details for"}, "task": "Retrieve the detailed information for the place associated with the provided Google Place ID."}, {"name": "calculateRoute", "server": "Travel Planner", "description": "Calculate route between two locations", "parameter": {"origin": "(string) Starting location", "destination": "(string) Ending location", "mode": "(optional) Travel mode (driving, walking, bicycling, transit)"}, "task": "Calculate the fastest driving route from New York City to Boston."}, {"name": "getTimeZone", "server": "Travel Planner", "description": "Get timezone information for a location", "parameter": {"location": "(string) Latitude and longitude coordinates", "timestamp": "(optional) Timestamp for time zone calculation"}, "task": "Get the timezone information for the coordinates \"40.7128, -74.0060\" at the current timestamp."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Unity Catalog", "description": "1.列出指定目录和模式中的函数 2.获取指定目录和模式中的函数 3.在指定目录和模式中创建函数 4.删除指定目录和模式中的函数", "tools": [{"name": "uc_list_functions", "server": "Unity Catalog", "description": "Lists functions within the specified parent catalog and schema.", "parameter": {}, "task": "List all functions available within the default catalog and schema."}, {"name": "uc_get_function", "server": "Unity Catalog", "description": "Gets a function within a parent catalog and schema.", "parameter": {"name": "(string) The name of the function (not fully-qualified)."}, "task": "Retrieve the function named 'calculate_discount' from its parent catalog and schema."}, {"name": "uc_create_function", "server": "Unity Catalog", "description": "Creates a function within a parent catalog and schema. WARNING: This API is experimental and will change in future versions.", "parameter": {"name": "(string) The name of the function (not fully-qualified).", "script": "(string) The Python script including the function to be registered."}, "task": "Create a Python function named 'calculate_discount' that computes a 10% discount on a given price, and register it within the specified catalog and schema."}, {"name": "uc_delete_function", "server": "Unity Catalog", "description": "Deletes a function within a parent catalog and schema.", "parameter": {"name": "(string) The name of the function (not fully-qualified)."}, "task": "Delete the function named 'calculate_discount' from its parent catalog and schema."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Unity3d Game Engine", "description": "Unity游戏开发工具集，包括：执行菜单项、选择游戏对象、更新组件、安装包、运行测试、发送控制台日志、添加资源到场景", "tools": [{"name": "execute_menu_item", "server": "Unity3d Game Engine", "description": "Executes Unity menu items (functions tagged with the MenuItem attribute)", "parameter": {"menuItemName": "(string) The name of the menu item to execute"}, "task": "Execute the \"Save Scene As\" function from the Unity editor's menu."}, {"name": "select_gameobject", "server": "Unity3d Game Engine", "description": "Selects game objects in the Unity hierarchy by path or instance ID", "parameter": {"pathOrId": "(string) The path or instance ID of the game object to select"}, "task": "Select the game object with the path \"Player/Weapons/Sword\" in the Unity hierarchy."}, {"name": "update_component", "server": "Unity3d Game Engine", "description": "Updates component fields on a GameObject or adds it to the GameObject if it does not contain the component", "parameter": {"gameObjectPath": "(string) The path of the GameObject", "componentType": "(string) The type of the component to update or add", "fields": "(object) A dictionary of field names and values to update"}, "task": "Update the 'Rigidbody' component on the GameObject located at 'Assets/Characters/Player.prefab' by setting the 'mass' field to 5 and the 'drag' field to 2. If the component does not exist, add it with these values."}, {"name": "add_package", "server": "Unity3d Game Engine", "description": "Installs new packages in the Unity Package Manager", "parameter": {"packageName": "(string) The name of the package to install"}, "task": "Install the \"Unity UI\" package in the Unity Package Manager."}, {"name": "run_tests", "server": "Unity3d Game Engine", "description": "Runs tests using the Unity Test Runner", "parameter": {"testMode": "(string) The test mode to run (e.g., 'EditMode', 'PlayMode')"}, "task": "Run all PlayMode tests in the Unity Test Runner to verify gameplay functionality."}, {"name": "send_console_log", "server": "Unity3d Game Engine", "description": "Sends a console log to Unity", "parameter": {"message": "(string) The message to send to the Unity console"}, "task": "Send a debug message \"Player health updated to 100\" to the Unity console."}, {"name": "add_asset_to_scene", "server": "Unity3d Game Engine", "description": "Adds an asset from the AssetDatabase to the Unity scene", "parameter": {"assetPath": "(string) The path of the asset to add"}, "task": "Add a 3D model asset located at 'Assets/Models/Character.fbx' to the current Unity scene."}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}]}
{"name": "Unity Integration (Advanced)", "description": "Unity Editor operations, including: project and editor state information retrieval, scene and GameObject information retrieval, C# code execution, log retrieval and filtering, file operations (read/write/edit), directory listing and searching, asset type filtering", "tools": [{"name": "get_editor_state", "server": "Unity Integration (Advanced)", "description": "Get comprehensive information about the Unity project and editor state", "parameter": {}, "task": "Retrieve the current state and configuration details of the active Unity project in the editor."}, {"name": "get_current_scene_info", "server": "Unity Integration (Advanced)", "description": "Get detailed information about the current scene", "parameter": {}, "task": "Retrieve the detailed information about the currently active scene."}, {"name": "get_game_objects_info", "server": "Unity Integration (Advanced)", "description": "Get information about specific GameObjects in the scene", "parameter": {}, "task": "Retrieve the details of all active GameObjects in the current scene."}, {"name": "execute_editor_command", "server": "Unity Integration (Advanced)", "description": "Execute C# code directly in the Unity Editor", "parameter": {}, "task": "Execute a C# script in the Unity Editor to instantiate 10 game objects at random positions within a 3D space."}, {"name": "get_logs", "server": "Unity Integration (Advanced)", "description": "Retrieve and filter Unity console logs", "parameter": {}, "task": "Retrieve the latest 50 Unity console logs and filter them for any error messages."}, {"name": "verify_connection", "server": "Unity Integration (Advanced)", "description": "Check if there's an active connection to Unity Editor", "parameter": {}, "task": "Check if there is currently an active connection to the Unity Editor."}, {"name": "read_file", "server": "Unity Integration (Advanced)", "description": "Read contents of a file in your Unity project", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder"}, "task": "Read the contents of the file located at \"Assets/Scripts/PlayerController.cs\" in the Unity project."}, {"name": "read_multiple_files", "server": "Unity Integration (Advanced)", "description": "Read multiple files at once", "parameter": {}, "task": "Read the contents of all text files in the \"documents\" folder."}, {"name": "write_file", "server": "Unity Integration (Advanced)", "description": "Create or overwrite a file with new content", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder", "content": "(string) Content to write to the file"}, "task": "Create a new file named \"PlayerSettings.json\" in the Unity project's Assets folder with the content `{\"playerName\": \"Hero\", \"health\": 100, \"level\": 1}`."}, {"name": "edit_file", "server": "Unity Integration (Advanced)", "description": "Make targeted edits to existing files with diff preview", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder", "edits": "(array) Array of edit objects, each containing oldText and newText", "dryRun": "(Optional, boolean) Whether to perform a dry run without applying changes"}, "task": "Edit the file located at \"Assets/Scripts/PlayerController.cs\" by replacing all instances of \"speed = 10\" with \"speed = 15\" and preview the changes before applying them."}, {"name": "list_directory", "server": "Unity Integration (Advanced)", "description": "Get a listing of files and folders in a directory", "parameter": {"path": "(string) Path to the directory, can be absolute or relative to the Unity project's Assets folder"}, "task": "List all files and folders in the directory \"/Assets/Textures\" relative to the Unity project."}, {"name": "directory_tree", "server": "Unity Integration (Advanced)", "description": "Get a hierarchical view of directories and files", "parameter": {}, "task": "Generate a hierarchical view of all directories and files within the current working directory."}, {"name": "search_files", "server": "Unity Integration (Advanced)", "description": "Find files matching a search pattern", "parameter": {"pattern": "(string) Search pattern to match file names"}, "task": "Find all files with names containing \"report\" and ending with \".pdf\" extension."}, {"name": "get_file_info", "server": "Unity Integration (Advanced)", "description": "Get metadata about a specific file or directory", "parameter": {"path": "(string) Path to the file or directory, can be absolute or relative to the Unity project's Assets folder"}, "task": "Retrieve the metadata for the file located at \"Assets/Textures/Background.png\" within the Unity project."}, {"name": "find_assets_by_type", "server": "Unity Integration (Advanced)", "description": "Find all assets of a specific type (e.g., Material, Prefab)", "parameter": {"assetType": "(string) Type of asset to find"}, "task": "Find all assets of type \"Prefab\" in the project."}, {"name": "list_scripts", "server": "Unity Integration (Advanced)", "description": "Get a listing of all C# scripts in the project", "parameter": {}, "task": "List all C# script files in the current project directory."}], "domains": [{"name": "Game Development", "description": "游戏开发工具集，包括游戏引擎操作、场景管理、资源加载与调试功能"}, {"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Vega-Lite", "description": "1. Save data aggregations for visualization 2. Visualize data using Vega-Lite syntax", "tools": [{"name": "save_data", "server": "Vega-Lite", "description": "Save a table of data aggregations to the server for later visualization.", "parameter": {"name": "(string) Name of the data table to be saved", "data": "(array) Array of objects representing the data table"}, "task": "Save a table named \"2024_Sales_Summary\" containing aggregated monthly sales data for later visualization. The data should include columns for month, total sales, and average order value."}, {"name": "visualize_data", "server": "Vega-Lite", "description": "Visualize a table of data using Vega-Lite syntax.", "parameter": {"data_name": "(string) Name of the data table to be visualized", "vegalite_specification": "(string) JSON string representing the Vega-Lite specification"}, "task": "Create a Vega-Lite visualization for the \"2024_sales_data\" table, showing a bar chart of monthly sales figures with appropriate axis labels and a title."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "Video Editor", "description": "1.从URL添加视频到用户库并分析 2.使用嵌入和关键词搜索视频 3.根据指定条件从一组视频文件生成渲染视频编辑 4.根据指定条件从单个输入视频文件生成编辑", "tools": [{"name": "add-video", "server": "Video Editor", "description": "Adds a video from a URL to the user's library and analyzes it for retrieval.", "parameter": {"url": "(string) The URL of the video to add", "name": "(Optional, string) The name to assign to the video"}, "task": "Add a video from the provided URL to the user's library and analyze it for future retrieval, optionally assigning it a custom name."}, {"name": "search-videos", "server": "Video Editor", "description": "Searches videos using embeddings and keywords to find relevant matches.", "parameter": {"query": "(string) The search query to use"}, "task": "Search for videos related to \"machine learning tutorials\" using embeddings and keywords."}, {"name": "generate-edit-from-videos", "server": "Video Editor", "description": "Generates a rendered video edit from a set of video files based on specified criteria.", "parameter": {}, "task": "Generate a rendered video edit from the provided set of video files, ensuring smooth transitions and a cohesive final output."}, {"name": "generate-edit-from-single-video", "server": "Video Editor", "description": "Generates an edit from a single input video file based on specified criteria.", "parameter": {}, "task": "Generate a 30-second highlight reel from the uploaded video file, focusing on the most dynamic and engaging moments."}], "domains": [{"name": "Audio-Video Creation", "description": "音视频创作,包括录制、剪辑、特效添加、配音及格式转换"}]}
{"name": "Virtual location (Google Street View,etc.)", "description": "1.获取和设置旅行虚拟角色的位置、目的地和属性 2.控制旅行虚拟角色的旅程 3.在Bluesky SNS上发布、回复和点赞文章 4.获取和设置环境及图像设置", "tools": [{"name": "get_traveler_view_info", "server": "Virtual location (Google Street View,etc.)", "description": "Gets information about the current travel avatar's location, optionally including nearby Google Street View photos and information about nearby facilities.", "parameter": {"includePhoto": "(boolean) Gets nearby Google Street View photos. If you have set up an image generation AI, it will synthesize the avatar.", "includeNearbyFacilities": "(boolean) Gets information about nearby facilities."}, "task": "Retrieve the current location of the travel avatar along with nearby Google Street View photos and details about surrounding facilities."}, {"name": "get_traveler_location", "server": "Virtual location (Google Street View,etc.)", "description": "Gets information about the current travel avatar's address and nearby facilities.", "parameter": {}, "task": "Retrieve the current location details and nearby facilities of the active travel avatar."}, {"name": "reach_a_percentage_of_destination", "server": "Virtual location (Google Street View,etc.)", "description": "Reaches a specified percentage of the destination (moveMode=skip only).", "parameter": {"timeElapsedPercentage": "(number) Percent progress towards destination (0~100)."}, "task": "Move to 75% of the destination path using the skip movement mode."}, {"name": "set_traveler_location", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the current travel avatar's location.", "parameter": {"address": "(string) Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)."}, "task": "Set the travel avatar's current location to the Eiffel Tower in Paris."}, {"name": "get_traveler_destination_address", "server": "Virtual location (Google Street View,etc.)", "description": "Gets the destination of the travel avatar you set.", "parameter": {}, "task": "Retrieve the destination address of the currently set travel avatar."}, {"name": "set_traveler_destination_address", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the destination of the travel avatar.", "parameter": {"address": "(string) Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)."}, "task": "Set the travel avatar's destination to \"123 Main Street, New York, NY 10001\"."}, {"name": "start_traveler_journey", "server": "Virtual location (Google Street View,etc.)", "description": "Starts the journey at the destination (moveMode=realtime only).", "parameter": {}, "task": "Begin the traveler's journey in real-time mode at the specified destination."}, {"name": "stop_traveler_journey", "server": "Virtual location (Google Street View,etc.)", "description": "Stops the journey (moveMode=realtime only).", "parameter": {}, "task": "Stop the currently active real-time journey."}, {"name": "set_traveler_info", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the traveler's attributes, such as name and personality.", "parameter": {"settings": "(string) Setting information such as name and personality."}, "task": "Set the traveler's name to \"Alex\" and personality to \"adventurous and curious\" in the travel profile."}, {"name": "get_traveler_info", "server": "Virtual location (Google Street View,etc.)", "description": "Gets the traveler's attributes, such as name and personality.", "parameter": {}, "task": "Retrieve the traveler's name and personality traits from the system."}, {"name": "set_avatar_prompt", "server": "Virtual location (Google Street View,etc.)", "description": "Sets the prompt when generating the travel avatar image. The default is an anime-style woman.", "parameter": {"prompt": "(string) Prompt for avatar generation."}, "task": "Generate a travel avatar image with the prompt \"a cartoon-style man wearing a backpack and holding a camera in front of the Eiffel Tower.\""}, {"name": "reset_avatar_prompt", "server": "Virtual location (Google Street View,etc.)", "description": "Resets avatar generation prompts to default.", "parameter": {}, "task": "Reset the avatar generation prompts to their default settings."}, {"name": "get_sns_feeds", "server": "Virtual location (Google Street View,etc.)", "description": "Gets Bluesky SNS articles for the specified custom feed (feeds containing a specific tag).", "parameter": {}, "task": "Retrieve the latest 10 articles from a Bluesky custom feed tagged with \"technology\"."}, {"name": "get_sns_mentions", "server": "Virtual location (Google Street View,etc.)", "description": "Gets recent mentions (likes, replies) to Bluesky SNS posts that you made yourself.", "parameter": {}, "task": "Retrieve the latest 10 interactions (likes and replies) on your Bluesky posts from the past week."}, {"name": "post_sns_writer", "server": "Virtual location (Google Street View,etc.)", "description": "Posts an article to Bluesky SNS with the specified custom feed. Sets a specific tag so that it can be determined that the post was generated by the travel bot.", "parameter": {"message": "(string) Article to post."}, "task": "Post an article about the top 5 must-visit destinations in Japan during spring, ensuring it includes a tag indicating it was generated by a travel bot."}, {"name": "reply_sns_writer", "server": "Virtual location (Google Street View,etc.)", "description": "Replies to the article with the specified id. Sets a specific tag so that it can be determined that the post was generated by the travel bot.", "parameter": {"message": "(string) Reply to post.", "id": "(string) The ID of the post to reply to."}, "task": "Reply to the post with ID \"12345\" using a message that includes a travel-related recommendation and marks it as generated by a bot."}, {"name": "add_like", "server": "Virtual location (Google Street View,etc.)", "description": "Adds a like to the specified post.", "parameter": {"id": "(string) The ID of the post to like."}, "task": "Add a like to the post with the ID \"post123\"."}, {"name": "tips", "server": "Virtual location (Google Street View,etc.)", "description": "Guides you on how to set up features that have not yet been set.", "parameter": {}, "task": "Guide me on setting up the recommended features that are currently not configured."}, {"name": "get_setting", "server": "Virtual location (Google Street View,etc.)", "description": "Gets environment and image settings.", "parameter": {}, "task": "Retrieve the current environment and image configuration settings."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}, {"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}, {"name": "Virtual Environment & Container Manager", "description": "虚拟与容器环境管理，支持开发环境如（如Python虚拟环境、Node.js运行时）、容器化环境构建（Docker）"}]}
{"name": "VolcEngine TOS", "description": "Volcengine TOS operations, including: listing buckets, listing objects in a bucket, and retrieving objects from TOS", "tools": [{"name": "list_buckets", "server": "VolcEngine TOS", "description": "Returns a list of all buckets owned by the authenticated sender of the request", "parameter": {}, "task": "List all available storage buckets owned by the authenticated user."}, {"name": "list_objects", "server": "VolcEngine TOS", "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request", "parameter": {}, "task": "List all objects in the specified bucket, retrieving up to the maximum limit of 1,000 items per request."}, {"name": "get_object", "server": "VolcEngine TOS", "description": "Retrieves an object from volcengine TOS. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported", "parameter": {}, "task": "Retrieve the object with the key name \"documents/report_2024.pdf\" from the specified bucket using the virtual-hosted-style request."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Webflow", "description": "1. Retrieve list of Webflow sites with details 2. Retrieve detailed information of a specific Webflow site by ID", "tools": [{"name": "get_sites", "server": "Webflow", "description": "Retrieves a list of all Webflow sites accessible to the authenticated user, returning detailed information such as display name, site ID, creation date, and more.", "parameter": {}, "task": "Retrieve the display names and creation dates of all Webflow sites accessible to the authenticated user."}, {"name": "get_site", "server": "Webflow", "description": "Retrieves detailed information about a specific Webflow site by ID, returning the same detailed information as get_sites for a single site.", "parameter": {"siteId": "(string) The ID of the Webflow site to retrieve."}, "task": "Retrieve the detailed information for the Webflow site with the ID \"abc123xyz\"."}], "domains": [{"name": "Content Management", "description": "内容管理，包括博客文章的创建、更新、检索及媒体上传"}]}
{"name": "whale-tracker-mcp", "description": "1. Fetch recent whale transactions with filters 2. Retrieve detailed transaction information by ID", "tools": [{"name": "get_recent_transactions", "server": "whale-tracker-mcp", "description": "Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.", "parameter": {"blockchain": "(string) The blockchain to filter transactions by.", "min_value": "(Optional, float) The minimum value of the transactions to fetch.", "limit": "(Optional, int) The maximum number of transactions to return."}, "task": "Fetch the 10 most recent whale transactions on the Ethereum blockchain with a minimum value of 1000 ETH."}, {"name": "get_transaction_details", "server": "whale-tracker-mcp", "description": "Retrieve detailed information about a specific transaction by its ID.", "parameter": {"transaction_id": "(string) The ID of the transaction to retrieve details for."}, "task": "Retrieve the details of the transaction with ID 'TX123456789' from the database."}], "domains": [{"name": "Blockchain Service", "description": "区块链服务，包括智能合约状态读取、代理合约地址检索、事件日志获取及事件主题签名生成"}]}
{"name": "Whois MCP", "description": "WHOIS信息查询，包括域名、顶级域名(TLD)、IP地址和自治系统号(ASN)的WHOIS信息检索", "tools": [{"name": "whois_domain", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified domain.", "parameter": {}, "task": "Retrieve the WHOIS registration details for the domain \"example.com\"."}, {"name": "whois_tld", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified Top Level Domain (TLD).", "parameter": {}, "task": "Retrieve the WHOIS information for the '.com' Top Level Domain."}, {"name": "whois_ip", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified IP address.", "parameter": {}, "task": "Retrieve the registration and ownership details for the IP address 192.168.1.1."}, {"name": "whois_as", "server": "Whois MCP", "description": "Looks up WHOIS information about the specified Autonomous System Number (ASN).", "parameter": {}, "task": "Retrieve the WHOIS details for Autonomous System Number 12345."}], "domains": [{"name": "Web Data Acquisition", "description": "网络数据采集,包含网页爬虫、内容提取、反爬处理及代码仓库索引分析"}]}
{"name": "Wikidata MCP", "description": "1. Search for Wikidata entity and property IDs 2. Retrieve properties associated with a Wikidata entity ID 3. Execute SPARQL queries on Wikidata 4. Retrieve labels and descriptions for Wikidata entity IDs", "tools": [{"name": "search_entity", "server": "Wikidata MCP", "description": "Search for a Wikidata entity ID by its query.", "parameter": {"query": "(str) The query to search for the entity."}, "task": "Search for the Wikidata entity ID corresponding to the query \"Eiffel Tower.\""}, {"name": "search_property", "server": "Wikidata MCP", "description": "Search for a Wikidata property ID by its query.", "parameter": {"query": "(str) The query to search for the property."}, "task": "Search for the Wikidata property ID related to \"population density\" using the provided query."}, {"name": "get_properties", "server": "Wikidata MCP", "description": "Get the properties associated with a given Wikidata entity ID.", "parameter": {"entity_id": "(str) The ID of the entity to get properties for."}, "task": "Retrieve all properties associated with the Wikidata entity with ID \"Q42\"."}, {"name": "execute_sparql", "server": "Wikidata MCP", "description": "Execute a SPARQL query on Wikidata.", "parameter": {"sparql_query": "(str) The SPARQL query to execute."}, "task": "Retrieve the birth dates of all Nobel Prize laureates in Physics from Wikidata using a SPARQL query."}, {"name": "get_metadata", "server": "Wikidata MCP", "description": "Retrieve the label and description for a given Wikidata entity ID in a specified language.", "parameter": {"entity_id": "(str) The ID of the entity to retrieve metadata for.", "language": "(Optional, str) The language for the metadata, default is 'en'."}, "task": "Retrieve the label and description for the Wikidata entity \"Q42\" in French."}], "domains": [{"name": "Data Management", "description": "数据管理，包括数据查询、提取、传输和配置管理"}]}
{"name": "Windows CLI", "description": "1.在指定shell中执行命令 2.获取执行命令的历史记录 3.通过SSH在远程系统上执行命令 4.SSH连接管理（创建/读取/更新/删除） 5.获取服务器当前工作目录", "tools": [{"name": "execute_command", "server": "Windows CLI", "description": "Execute a command in the specified shell", "parameter": {"shell": "(string) Shell to use ('powershell', 'cmd', or 'gitbash')", "command": "(string) Command to execute", "workingDir": "(Optional, string) Working directory"}, "task": "Execute the command \"git status\" in the Git Bash shell within the working directory \"/projects/my-app\"."}, {"name": "get_command_history", "server": "Windows CLI", "description": "Get the history of executed commands", "parameter": {"limit": "(Optional, number)"}, "task": "Retrieve the last 15 executed commands from the command history."}, {"name": "ssh_execute", "server": "Windows CLI", "description": "Execute a command on a remote system via SSH", "parameter": {"connectionId": "(string) ID of the SSH connection to use", "command": "(string) Command to execute"}, "task": "Execute the command \"df -h\" on the remote system using the SSH connection ID \"conn123\"."}, {"name": "ssh_disconnect", "server": "Windows CLI", "description": "Disconnect from an SSH server", "parameter": {"connectionId": "(string) ID of the SSH connection to disconnect"}, "task": "Disconnect from the SSH server with the connection ID 'SSH-12345'."}, {"name": "create_ssh_connection", "server": "Windows CLI", "description": "Create a new SSH connection", "parameter": {"connectionId": "(string) ID for the new SSH connection", "connectionConfig": "(object) Connection configuration details including host, port, username, and either password or privateKeyPath"}, "task": "Establish a new SSH connection to the server at `example.com` on port `22` using the username `admin` and the private key located at `/home/user/.ssh/id_rsa`."}, {"name": "read_ssh_connections", "server": "Windows CLI", "description": "Read all configured SSH connections", "parameter": {}, "task": "List all configured SSH connections currently available on the system."}, {"name": "update_ssh_connection", "server": "Windows CLI", "description": "Update an existing SSH connection", "parameter": {"connectionId": "(string) ID of the SSH connection to update", "connectionConfig": "(object) New connection configuration details"}, "task": "Update the SSH connection with ID \"conn12345\" to use the new configuration settings provided in the configuration file."}, {"name": "delete_ssh_connection", "server": "Windows CLI", "description": "Delete an SSH connection", "parameter": {"connectionId": "(string) ID of the SSH connection to delete"}, "task": "Delete the SSH connection with the ID \"conn-12345\"."}, {"name": "get_current_directory", "server": "Windows CLI", "description": "Get the current working directory of the server", "parameter": {}, "task": "Retrieve the current working directory path from the server."}], "domains": [{"name": "Terminal Execution", "description": "终端命令行执行,用于系统命令操作、脚本运行及服务器资源管理"}, {"name": "Server Management", "description": "Server operations and user management, including server lifecycle control and user administration"}]}
{"name": "World Bank data API", "description": "1.列出世界银行开放数据API中的可用国家 2.列出世界银行开放数据API中的可用指标 3.分析国家指标，如人口分段、贫困数字等", "tools": [{"name": "list_countries", "server": "World Bank data API", "description": "Lists available countries in the World Bank open data API", "parameter": {}, "task": "List all available countries in the World Bank open data API."}, {"name": "list_indicators", "server": "World Bank data API", "description": "Lists available indicators in the World Bank open data API", "parameter": {}, "task": "List all available economic indicators from the World Bank open data API."}, {"name": "analyse_indicators", "server": "World Bank data API", "description": "Analyses indicators, such as population segments, poverty numbers, etc., for countries", "parameter": {}, "task": "Analyze the population segments and poverty numbers for all countries in the dataset."}], "domains": [{"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}]}
{"name": "xcodebuild", "description": "1. Build iOS Xcode workspace/project 2. Run test for iOS Xcode workspace/project", "tools": [{"name": "build", "server": "xcodebuild", "description": "Build iOS Xcode workspace/project", "parameter": {"folder": "(string, required) The full path of the current folder that the iOS Xcode workspace/project sits"}, "task": "Build the iOS Xcode project located in the folder \"/Users/developer/projects/MobileApp\"."}, {"name": "test", "server": "xcodebuild", "description": "Run test for iOS Xcode workspace/project", "parameter": {"folder": "(string, required) The full path of the current folder that the iOS Xcode workspace/project sits"}, "task": "Run tests for the iOS Xcode project located in the \"/Users/developer/projects/MyApp\" directory."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Xero-mcp-server", "description": "Xero accounting operations, including: OAuth2 authentication, bank transactions creation, contacts management, balance sheet retrieval, accounts listing, invoices management, journals listing, organizations details retrieval, payments management, and quotes listing", "tools": [{"name": "authenticate", "server": "Xero-mcp-server", "description": "Authenticate with Xero using OAuth2", "parameter": {}, "task": "Authenticate with the accounting software using OAuth2 to establish a secure connection."}, {"name": "create_bank_transactions", "server": "Xero-mcp-server", "description": "Creates one or more spent or received money transactions", "parameter": {}, "task": "Create a record of five received money transactions for the current month."}, {"name": "create_contacts", "server": "Xero-mcp-server", "description": "Creates one or multiple contacts in a Xero organisation", "parameter": {}, "task": "Add three new contacts to the Xero organization with the following details: name, email, and phone number. Ensure all fields are populated correctly."}, {"name": "get_balance_sheet", "server": "Xero-mcp-server", "description": "Retrieves report for balance sheet", "parameter": {}, "task": "Retrieve the balance sheet report for the current fiscal year."}, {"name": "list_accounts", "server": "Xero-mcp-server", "description": "Retrieves the full chart of accounts", "parameter": {}, "task": "Retrieve the complete chart of accounts for the current financial records."}, {"name": "list_bank_transactions", "server": "Xero-mcp-server", "description": "Retrieves any spent or received money transactions", "parameter": {}, "task": "Retrieve all spent and received money transactions from the connected bank account for the current month."}, {"name": "list_contacts", "server": "Xero-mcp-server", "description": "Retrieves all contacts in a Xero organisation", "parameter": {}, "task": "Retrieve all contacts from the connected Xero organization."}, {"name": "list_invoices", "server": "Xero-mcp-server", "description": "Retrieves sales invoices or purchase bills", "parameter": {}, "task": "Retrieve the last 50 sales invoices from the accounting system."}, {"name": "list_journals", "server": "Xero-mcp-server", "description": "Retrieves journals", "parameter": {}, "task": "Retrieve the list of all available journals."}, {"name": "list_organisations", "server": "Xero-mcp-server", "description": "Retrieves Xero organisation details", "parameter": {}, "task": "Retrieve the details of all organizations associated with the connected Xero account."}, {"name": "list_payments", "server": "Xero-mcp-server", "description": "Retrieves payments for invoices and credit notes", "parameter": {}, "task": "Retrieve all payments associated with invoices and credit notes from the last 30 days."}, {"name": "list_quotes", "server": "Xero-mcp-server", "description": "Retrieves sales quotes", "parameter": {}, "task": "Retrieve the latest 50 sales quotes from the system."}], "domains": [{"name": "Financial Service", "description": "金融服务,包括支付处理、理财管理、云成本分析及财务报表生成"}]}
{"name": "XiYan", "description": "Provide a natural language interface for retrieving data from a database by converting natural language to SQL and executing queries", "tools": [{"name": "get_data", "server": "XiYan", "description": "Provides a natural language interface for retrieving data from a database. Converts the input natural language into SQL using a built-in model and calls the database to return the query results.", "parameter": {}, "task": "Retrieve the total number of active users from the database for the month of May 2024."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "XMind", "description": "XMind文件处理工具集,包括:解析分析思维导图结构、提取TODO任务、递归扫描XMind文件、多文件对比分析、文件名模式搜索、智能模糊路径匹配、节点ID精确检索、多条件内容搜索", "tools": [{"name": "read_xmind", "server": "XMind", "description": "Parse and analyze XMind files, extracting the complete mind map structure.", "parameter": {}, "task": "Extract the complete mind map structure from the provided XMind file."}, {"name": "get_todo_tasks", "server": "XMind", "description": "Extract and analyze TODO tasks, including task context and hierarchy.", "parameter": {}, "task": "Extract and analyze all TODO tasks from the current project, including their context and hierarchical relationships."}, {"name": "list_xmind_directory", "server": "XMind", "description": "Recursively scan for XMind files, filtering and organizing results.", "parameter": {}, "task": "Scan the current directory and all subdirectories for XMind files, then organize the results by file path."}, {"name": "read_multiple_xmind_files", "server": "XMind", "description": "Process multiple files simultaneously, comparing and analyzing across files.", "parameter": {}, "task": "Compare and analyze the content of three XMind files to identify common themes and differences."}, {"name": "search_xmind_files", "server": "XMind", "description": "Search files by name patterns, with recursive directory scanning.", "parameter": {}, "task": "Search for all XMind files in the current directory and its subdirectories."}, {"name": "extract_node", "server": "XMind", "description": "Perform smart fuzzy path matching, returning ranked search results and complete subtree extraction.", "parameter": {"path": "(string) Path to the XMind file.", "searchQuery": "(string) Fuzzy path query to match nodes."}, "task": "Search for nodes related to \"project milestones\" in the specified XMind file and extract the complete subtree of matching results."}, {"name": "extract_node_by_id", "server": "XMind", "description": "Directly access a node by its ID for fast and precise retrieval.", "parameter": {"path": "(string) Path to the XMind file.", "nodeId": "(string) ID of the node to extract."}, "task": "Extract the node with ID \"N12345\" from the XMind file located at \"/projects/brainstorming/ideas.xmind\"."}, {"name": "search_nodes", "server": "XMind", "description": "Perform multi-criteria content search with configurable search fields.", "parameter": {"path": "(string) Path to the XMind file.", "query": "(string) Search query.", "searchIn": "(array) Fields to search in (e.g., ['title', 'notes']).", "caseSensitive": "(boolean, optional) Whether the search should be case-sensitive."}, "task": "Search for the term \"Project Deadline\" in the titles and notes of the specified XMind file, ensuring the search is case-sensitive."}], "domains": [{"name": "Design Tool Integration", "description": "设计工具集成，包括文档信息获取、节点操作、文本处理、布局设置、颜色与样式管理、组件实例操作及图像导出"}]}
{"name": "YouTube", "description": "YouTube视频与频道管理,包括:视频详情获取、多语言字幕检索、视频搜索、频道详情获取、频道视频列表获取、播放列表详情获取、播放列表内容获取", "tools": [{"name": "videos.getVideo", "server": "YouTube", "description": "Get video details such as title, description, and duration.", "parameter": {"videoId": "(string) The ID of the video."}, "task": "Retrieve the title, description, and duration of the video with ID \"XyZ123AbC\"."}, {"name": "transcripts.getTranscript", "server": "YouTube", "description": "Retrieve the transcript of a video, supporting multiple languages.", "parameter": {"videoId": "(string) The ID of the video.", "language": "(string) The language of the transcript (default is 'en')."}, "task": "Retrieve the English transcript for the video with ID \"XyZ123AbC\"."}, {"name": "videos.searchVideos", "server": "YouTube", "description": "Search for videos across YouTube.", "parameter": {"query": "(string) The search term.", "maxResults": "(number) The maximum number of results to return."}, "task": "Search for the top 5 most recent tutorial videos on Python programming."}, {"name": "channels.getChannel", "server": "YouTube", "description": "Get details of a YouTube channel.", "parameter": {"channelId": "(string) The ID of the channel."}, "task": "Retrieve the details of the YouTube channel with the ID \"UC_x5XG1OV2P6uZZ5FSM9Ttw\"."}, {"name": "channels.listVideos", "server": "YouTube", "description": "List videos from a specific channel.", "parameter": {"channelId": "(string) The ID of the channel.", "maxResults": "(number) The maximum number of results to return."}, "task": "Retrieve the latest 15 videos from the specified YouTube channel using its unique channel ID."}, {"name": "playlists.getPlaylistItems", "server": "YouTube", "description": "Get items from a playlist.", "parameter": {"playlistId": "(string) The ID of the playlist.", "maxResults": "(number) The maximum number of results to return."}, "task": "Retrieve the first 50 items from the playlist with ID \"PL123456789\"."}, {"name": "playlists.getPlaylist", "server": "YouTube", "description": "Get details of a playlist.", "parameter": {"playlistId": "(string) The ID of the playlist."}, "task": "Retrieve the details of the playlist with the ID \"PL123456789\"."}], "domains": [{"name": "Social Media Management", "description": "社交媒体账号运营,涵盖内容发布、粉丝互动、多平台批量管理与舆情分析"}]}
{"name": "mcp_weather", "description": "1.获取指定城市的当前天气信息 2.获取指定城市在特定日期范围内的天气信息 3.获取指定时区的当前时间", "tools": [{"name": "get_weather", "server": "mcp_weather", "description": "Retrieves the current weather information for a given city.", "parameter": {"city": "(string, required) The name of the city."}, "task": "Check the current weather conditions in New York City."}, {"name": "get_weather_by_datetime_range", "server": "mcp_weather", "description": "Retrieves weather information for a specified city between start and end dates.", "parameter": {"city": "(string, required) The name of the city.", "start_date": "(string, required) Start date in format YYYY-MM-DD (ISO 8601).", "end_date": "(string, required) End date in format YYYY-MM-DD (ISO 8601)."}, "task": "Retrieve the weather information for New York City between 2024-07-01 and 2024-07-07."}, {"name": "get_current_datetime", "server": "mcp_weather", "description": "Retrieves the current time in a specified timezone.", "parameter": {"timezone_name": "(string, required) IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user."}, "task": "Retrieve the current time in the 'Asia/Tokyo' timezone. If no timezone is specified, use UTC."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}, {"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
{"name": "AWS KB Retrieval", "description": "Perform retrieval operations using the AWS Knowledge Base", "tools": [{"name": "retrieve_from_aws_kb", "server": "AWS KB Retrieval", "description": "Perform retrieval operations using the AWS Knowledge Base.", "parameter": {"query": "(string) The search query for retrieval.", "knowledgeBaseId": "(string) The ID of the AWS Knowledge Base.", "n": "(number, optional) Number of results to retrieve (default: 3)."}, "task": "Retrieve the top 5 most relevant results for \"AWS Lambda best practices\" from the AWS Knowledge Base with ID \"KB-12345\"."}], "domains": [{"name": "Cloud Service Integration", "description": "云服务集成，调用与管理云平台 API(如 AWS/Azure)，支持云资源对接与 AI 服务整合"}]}
{"name": "Brave Search", "description": "1. Execute web searches with pagination and filtering 2. Search for local businesses and services", "tools": [{"name": "brave_web_search", "server": "Brave Search", "description": "Execute web searches with pagination and filtering", "parameter": {"query": "(string) Search terms", "count": "(Optional, number) Results per page (max 20)", "offset": "(Optional, number) Pagination offset (max 9)"}, "task": "Search for the top 10 most recent articles on quantum computing advancements, displaying 5 results per page starting from the second page."}, {"name": "brave_local_search", "server": "Brave Search", "description": "Search for local businesses and services", "parameter": {"query": "(string) Local search terms", "count": "(Optional, number) Number of results (max 20)"}, "task": "Find the top 5 Italian restaurants within a 10-mile radius using local search."}], "domains": [{"name": "Web Search", "description": "网页信息检索,通过关键词查询公开网页内容,支持多类型信息主动获取"}, {"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "EverArt", "description": "Generate images with multiple model options and return URL", "tools": [{"name": "generate_image", "server": "EverArt", "description": "Generates images with multiple model options. Opens result in browser and returns URL.", "parameter": {"prompt": "(string) Image description", "model": "(Optional, string) Model ID (default: \"207910310772879360\")", "image_count": "(Optional, number) Number of images (default: 1)"}, "task": "Generate an image of a futuristic cityscape at sunset with flying cars, using the default model and produce 3 variations."}], "domains": [{"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}]}
{"name": "Everything", "description": "1.回显输入消息 2.数字相加 3.长时间操作进度通知 4.使用MCP采样功能演示LLM采样能力 5.返回小型测试图像 6.打印所有环境变量 7.演示如何使用注释提供内容元数据 8.返回MCP客户端可使用的资源引用", "tools": [{"name": "echo", "server": "Everything", "description": "Simple tool to echo back input messages", "parameter": {"message": "(string) Message to echo back"}, "task": "Echo back the message \"Hello, how are you today?\" exactly as provided."}, {"name": "add", "server": "Everything", "description": "Adds two numbers together", "parameter": {"a": "(number) First number", "b": "(number) Second number"}, "task": "Add the numbers 15 and 27 together."}, {"name": "longRunningOperation", "server": "Everything", "description": "Demonstrates progress notifications for long operations", "parameter": {"duration": "(number, default: 10) Duration in seconds", "steps": "(number, default: 5) Number of progress steps"}, "task": "Simulate a long-running operation with a duration of 15 seconds and 8 progress steps."}, {"name": "sampleLLM", "server": "Everything", "description": "Demonstrates LLM sampling capability using MCP sampling feature", "parameter": {"prompt": "(string) The prompt to send to the LLM", "maxTokens": "(number, default: 100) Maximum tokens to generate"}, "task": "Generate a creative story continuation based on the prompt \"In a distant galaxy, a lone explorer discovers an ancient artifact\" with a maximum of 150 tokens."}, {"name": "getTinyImage", "server": "Everything", "description": "Returns a small test image", "parameter": {}, "task": "Generate a small test image for demonstration purposes."}, {"name": "printEnv", "server": "Everything", "description": "Prints all environment variables", "parameter": {}, "task": "Display all environment variables currently set in the system."}, {"name": "annotatedMessage", "server": "Everything", "description": "Demonstrates how annotations can be used to provide metadata about content", "parameter": {"messageType": "(enum: 'error' | 'success' | 'debug') Type of message to demonstrate different annotation patterns", "includeImage": "(boolean, default: false) Whether to include an example image"}, "task": "Create an annotated message demonstrating a 'success' scenario, including an example image to illustrate the metadata pattern."}, {"name": "getResourceReference", "server": "Everything", "description": "Returns a resource reference that can be used by MCP clients", "parameter": {"resourceId": "(number, 1-100) ID of the resource to reference"}, "task": "Generate a reference for the resource with ID 45 to be used by MCP clients."}], "domains": [{"name": "Tool Management", "description": "工具管理，包括工具信息的检索、搜索、添加和移除"}, {"name": "Data Analysis", "description": "数据分析，包括数据收集、查询、追踪和分析"}, {"name": "Image Processing", "description": "图像处理与生成,包括传统图片编辑、AI 图像生成、图表绘制与可视化"}, {"name": "AI Model Lifecycle Management", "description": "人工智能模型训练与推理，涵盖深度学习与传统机器学习框架建模、模型优化与部署、实验跟踪、数据预处理及全流程生命周期管理"}]}
{"name": "Filesystem", "description": "File system operations including: reading single/multiple files, writing/editing files, creating directories, listing directory contents, moving/renaming files, searching files/directories, retrieving file metadata, and listing accessible directories", "tools": [{"name": "read_file", "server": "Filesystem", "description": "Read complete contents of a file", "parameter": {"path": "(string) File path"}, "task": "Read the contents of the file located at \"/var/log/applications/system.log\"."}, {"name": "read_multiple_files", "server": "Filesystem", "description": "Read multiple files simultaneously", "parameter": {"paths": "(string[]) Array of file paths"}, "task": "Read the contents of the files located at \"/documents/report.txt\", \"/data/analysis.csv\", and \"/logs/system.log\" simultaneously."}, {"name": "write_file", "server": "Filesystem", "description": "Create new file or overwrite existing", "parameter": {"path": "(string) File location", "content": "(string) File content"}, "task": "Create a new file at `/home/user/documents/notes.txt` with the content \"Meeting minutes: Project kickoff scheduled for 2024-02-15.\""}, {"name": "edit_file", "server": "Filesystem", "description": "Make selective edits using advanced pattern matching and formatting", "parameter": {"path": "(string) File to edit", "edits": "(array) List of edit operations", "dryRun": "(boolean) Preview changes without applying (default: false)"}, "task": "Edit the configuration file located at `/etc/app/config.json` to update all instances of \"timeout: 30\" to \"timeout: 60\" and preview the changes before applying them."}, {"name": "create_directory", "server": "Filesystem", "description": "Create new directory or ensure it exists", "parameter": {"path": "(string) Directory path"}, "task": "Create a new directory named \"Project_2024\" in the specified path. Ensure the directory exists after creation."}, {"name": "list_directory", "server": "Filesystem", "description": "List directory contents with [FILE] or [DIR] prefixes", "parameter": {"path": "(string) Directory path"}, "task": "List all contents of the directory \"/var/log\" with file and directory prefixes."}, {"name": "move_file", "server": "Filesystem", "description": "Move or rename files and directories", "parameter": {"source": "(string) Source path", "destination": "(string) Destination path"}, "task": "Move the file located at `/home/user/documents/report.txt` to `/home/user/archive/report_2024.txt`."}, {"name": "search_files", "server": "Filesystem", "description": "Recursively search for files/directories", "parameter": {"path": "(string) Starting directory", "pattern": "(string) Search pattern", "excludePatterns": "(string[]) Array of exclude patterns"}, "task": "Search for all PDF files in the \"Documents\" directory, excluding any files in the \"Archive\" subfolder."}, {"name": "get_file_info", "server": "Filesystem", "description": "Get detailed file/directory metadata", "parameter": {"path": "(string) File or directory path"}, "task": "Retrieve the metadata for the file located at \"/var/log/system.log\"."}, {"name": "list_allowed_directories", "server": "Filesystem", "description": "List all directories the server is allowed to access", "parameter": {}, "task": "List all directories that the server has permission to access."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "GitHub", "description": "GitHub仓库管理,包括:文件操作、仓库搜索与创建、问题管理、拉取请求管理、分支管理、代码搜索、用户搜索、提交管理", "tools": [{"name": "create_or_update_file", "server": "GitHub", "description": "Create or update a single file in a repository", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "path": "(string) Path where to create/update the file", "content": "(string) Content of the file", "message": "(string) Commit message", "branch": "(string) Branch to create/update the file in", "sha": "(optional string) SHA of file being replaced (for updates)"}, "task": "Update the README.md file in the \"docs\" directory of the \"example-repo\" repository under the \"main\" branch with new installation instructions and a commit message explaining the changes."}, {"name": "push_files", "server": "GitHub", "description": "Push multiple files in a single commit", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "branch": "(string) Branch to push to", "files": "(array) Files to push, each with `path` and `content`", "message": "(string) Commit message"}, "task": "Push three configuration files (config.json, settings.yaml, and env.properties) to the \"main\" branch of the \"project-x\" repository under the owner \"dev-team\" with the commit message \"Update configuration files\"."}, {"name": "search_repositories", "server": "GitHub", "description": "Search for GitHub repositories", "parameter": {"query": "(string) Search query", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}, "task": "Search for open-source projects related to machine learning on GitHub, displaying 20 results per page."}, {"name": "create_repository", "server": "GitHub", "description": "Create a new GitHub repository", "parameter": {"name": "(string) Repository name", "description": "(optional string) Repository description", "private": "(optional boolean) Whether repo should be private", "autoInit": "(optional boolean) Initialize with README"}, "task": "Create a new private GitHub repository named \"project-alpha\" with a description \"Backend services for the alpha project\" and initialize it with a README file."}, {"name": "get_file_contents", "server": "GitHub", "description": "Get contents of a file or directory", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "path": "(string) Path to file/directory", "branch": "(optional string) Branch to get contents from"}, "task": "Retrieve the contents of the \"src/utils\" directory from the \"main\" branch of the \"example-repo\" repository owned by \"github-user\"."}, {"name": "create_issue", "server": "GitHub", "description": "Create a new issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "title": "(string) Issue title", "body": "(optional string) Issue description", "assignees": "(optional string[]) Usernames to assign", "labels": "(optional string[]) Labels to add", "milestone": "(optional number) Milestone number"}, "task": "Create a new issue titled \"Implement user authentication\" in the repository owned by \"example-org\" with the description \"Add OAuth2 login functionality\" and assign it to the users \"dev1\" and \"dev2\". Add the labels \"feature\" and \"authentication\" and associate it with milestone number 3."}, {"name": "create_pull_request", "server": "GitHub", "description": "Create a new pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "title": "(string) PR title", "body": "(optional string) PR description", "head": "(string) Branch containing changes", "base": "(string) Branch to merge into", "draft": "(optional boolean) Create as draft PR", "maintainer_can_modify": "(optional boolean) Allow maintainer edits"}, "task": "Create a new pull request for the repository owned by \"example-org\" with the title \"Update README.md\". The changes are in the branch \"feature/readme-update\" and should be merged into the \"main\" branch. Include a description explaining the updates and allow maintainers to modify the PR."}, {"name": "fork_repository", "server": "GitHub", "description": "Fork a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "organization": "(optional string) Organization to fork to"}, "task": "Fork the repository named \"example-repo\" owned by \"example-owner\" into the organization \"example-org\"."}, {"name": "create_branch", "server": "GitHub", "description": "Create a new branch", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "branch": "(string) Name for new branch", "from_branch": "(optional string) Source branch (defaults to repo default)"}, "task": "Create a new branch named \"feature-login\" in the repository \"web-app\" owned by \"company-dev\", using the \"main\" branch as the source."}, {"name": "list_issues", "server": "GitHub", "description": "List and filter repository issues", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "state": "(optional string) Filter by state ('open', 'closed', 'all')", "labels": "(optional string[]) Filter by labels", "sort": "(optional string) Sort by ('created', 'updated', 'comments')", "direction": "(optional string) Sort direction ('asc', 'desc')", "since": "(optional string) Filter by date (ISO 8601 timestamp)", "page": "(optional number) Page number", "per_page": "(optional number) Results per page"}, "task": "List all open issues in the repository \"example-repo\" owned by \"user123\" that were created after 2024-01-01, sorted by the most recently updated in descending order, and display 20 issues per page."}, {"name": "update_issue", "server": "GitHub", "description": "Update an existing issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to update", "title": "(optional string) New title", "body": "(optional string) New description", "state": "(optional string) New state ('open' or 'closed')", "labels": "(optional string[]) New labels", "assignees": "(optional string[]) New assignees", "milestone": "(optional number) New milestone number"}, "task": "Update the issue with number 42 in the repository \"project-x\" owned by \"dev-team\" by changing its title to \"Fix critical security vulnerability\", setting the state to \"open\", adding the labels [\"bug\", \"security\"], and assigning it to [\"alice\", \"bob\"]."}, {"name": "add_issue_comment", "server": "GitHub", "description": "Add a comment to an issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to comment on", "body": "(string) Comment text"}, "task": "Add a comment with the text \"This issue has been resolved in the latest update\" to issue number 45 in the repository owned by \"example-org\"."}, {"name": "search_code", "server": "GitHub", "description": "Search for code across GitHub repositories", "parameter": {"q": "(string) Search query using GitHub code search syntax", "sort": "(optional string) Sort field ('indexed' only)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": "Search for Python functions that handle JSON parsing in public GitHub repositories, sorted by the most recently indexed and limited to 50 results per page."}, {"name": "search_issues", "server": "GitHub", "description": "Search for issues and pull requests", "parameter": {"q": "(string) Search query using GitHub issues search syntax", "sort": "(optional string) Sort field (comments, reactions, created, etc.)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": "Search for open issues with more than 10 comments, sorted by creation date in descending order, and display 50 results per page."}, {"name": "search_users", "server": "GitHub", "description": "Search for GitHub users", "parameter": {"q": "(string) Search query using GitHub users search syntax", "sort": "(optional string) Sort field (followers, repositories, joined)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": "Search for GitHub users with more than 1000 followers, sorted by the number of repositories in descending order, and return 50 results per page."}, {"name": "list_commits", "server": "GitHub", "description": "Gets commits of a branch in a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "page": "(optional string) page number", "per_page": "(optional string) number of record per page", "sha": "(optional string) branch name"}, "task": "Retrieve the latest 20 commits from the \"main\" branch of the repository owned by \"github-org\" with the name \"sample-repo\"."}, {"name": "get_issue", "server": "GitHub", "description": "Gets the contents of an issue within a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to retrieve"}, "task": "Retrieve the details of issue number 42 from the repository named \"project-alpha\" owned by \"dev-team\"."}, {"name": "get_pull_request", "server": "GitHub", "description": "Get details of a specific pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": "Retrieve the details of pull request #42 from the repository named \"sample-project\" owned by \"example-org\"."}, {"name": "list_pull_requests", "server": "GitHub", "description": "List and filter repository pull requests", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "state": "(optional string) Filter by state ('open', 'closed', 'all')", "head": "(optional string) Filter by head user/org and branch", "base": "(optional string) Filter by base branch", "sort": "(optional string) Sort by ('created', 'updated', 'popularity', 'long-running')", "direction": "(optional string) Sort direction ('asc', 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}, "task": "List all open pull requests for the repository \"example-repo\" owned by \"example-org\", sorted by creation date in descending order, with 50 results per page."}, {"name": "create_pull_request_review", "server": "GitHub", "description": "Create a review on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "body": "(string) Review comment text", "event": "(string) Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')", "commit_id": "(optional string) SHA of commit to review", "comments": "(optional array) Line-specific comments, each with:"}, "task": "Review the pull request #42 in the repository \"example-repo\" owned by \"example-owner\" with a comment suggesting changes and line-specific feedback on the latest commit."}, {"name": "merge_pull_request", "server": "GitHub", "description": "Merge a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "commit_title": "(optional string) Title for merge commit", "commit_message": "(optional string) Extra detail for merge commit", "merge_method": "(optional string) Merge method ('merge', 'squash', 'rebase')"}, "task": "Merge pull request #42 in the repository 'project-x' owned by 'dev-team' using the 'squash' method, with the commit title 'Feature: Add user authentication'."}, {"name": "get_pull_request_files", "server": "GitHub", "description": "Get the list of files changed in a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": "Retrieve the list of modified files for pull request #42 in the repository owned by \"example-org\" with the name \"sample-repo\"."}, {"name": "get_pull_request_status", "server": "GitHub", "description": "Get the combined status of all status checks for a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": "Check the combined status of all status checks for pull request #42 in the repository owned by 'example-org'."}, {"name": "update_pull_request_branch", "server": "GitHub", "description": "Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's 'Update branch' button)", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "expected_head_sha": "(optional string) The expected SHA of the pull request's HEAD ref"}, "task": "Update the branch for pull request #42 in the repository \"example-repo\" owned by \"example-owner\" with the latest changes from the base branch."}, {"name": "get_pull_request_comments", "server": "GitHub", "description": "Get the review comments on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": "Retrieve all review comments for pull request #42 in the repository owned by 'example-org'."}, {"name": "get_pull_request_reviews", "server": "GitHub", "description": "Get the reviews on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}, "task": "Retrieve all reviews for pull request #42 in the repository named \"api-service\" owned by \"tech-team\"."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "GitLab", "description": "GitLab operations including: file management, repository search/creation, issue/merge request creation, branching and forking", "tools": [{"name": "create_or_update_file", "server": "GitLab", "description": "Create or update a single file in a project", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "file_path": "(string) Path where to create/update the file", "content": "(string) Content of the file", "commit_message": "(string) Commit message", "branch": "(string) Branch to create/update the file in", "previous_path": "(Optional, string) Path of the file to move/rename"}, "task": "Update the file \"src/utils/helpers.js\" in the project with ID \"project-123\" by adding a new utility function for formatting dates. The commit message should be \"Add date formatting utility\" and the changes should be pushed to the \"feature/date-utils\" branch."}, {"name": "push_files", "server": "GitLab", "description": "Push multiple files in a single commit", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "branch": "(string) Branch to push to", "files": "(array) Files to push, each with `file_path` and `content`", "commit_message": "(string) Commit message"}, "task": "Push three configuration files (config.json, settings.yaml, and environment.env) to the \"development\" branch of the specified project with the commit message \"Updated project configurations\"."}, {"name": "search_repositories", "server": "GitLab", "description": "Search for GitLab projects", "parameter": {"search": "(string) Search query", "page": "(Optional, number) Page number for pagination", "per_page": "(Optional, number) Results per page (default 20)"}, "task": "Search for GitLab projects containing the keyword \"machine-learning\" and display 15 results per page."}, {"name": "create_repository", "server": "GitLab", "description": "Create a new GitLab project", "parameter": {"name": "(string) Project name", "description": "(Optional, string) Project description", "visibility": "(Optional, string) 'private', 'internal', or 'public'", "initialize_with_readme": "(Optional, boolean) Initialize with README"}, "task": "Create a new private GitLab project named \"DataPipeline\" with a description \"Project for managing data processing workflows\" and initialize it with a README file."}, {"name": "get_file_contents", "server": "GitLab", "description": "Get contents of a file or directory", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "file_path": "(string) Path to file/directory", "ref": "(Optional, string) Branch/tag/commit to get contents from"}, "task": "Retrieve the contents of the file located at `/src/main.py` from the branch `development` in the project with ID `PRJ-12345`."}, {"name": "create_issue", "server": "GitLab", "description": "Create a new issue", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "title": "(string) Issue title", "description": "(Optional, string) Issue description", "assignee_ids": "(Optional, number[]) User IDs to assign", "labels": "(Optional, string[]) Labels to add", "milestone_id": "(Optional, number) Milestone ID"}, "task": "Create a new issue in project \"API-Integration\" with the title \"Implement OAuth2 Authentication\" and assign it to user IDs [45, 78]. Add the labels \"security\" and \"backend\" and set the milestone to ID 12. Include a description outlining the OAuth2 flow requirements."}, {"name": "create_merge_request", "server": "GitLab", "description": "Create a new merge request", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "title": "(string) MR title", "description": "(Optional, string) MR description", "source_branch": "(string) Branch containing changes", "target_branch": "(string) Branch to merge into", "draft": "(Optional, boolean) Create as draft MR", "allow_collaboration": "(Optional, boolean) Allow commits from upstream members"}, "task": "Create a merge request for project ID 12345 with the title \"Update authentication module\" from the branch \"feature/auth-update\" into the branch \"main\". Include a description detailing the changes and mark it as a draft. Allow collaboration from upstream members."}, {"name": "fork_repository", "server": "GitLab", "description": "Fork a project", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "namespace": "(Optional, string) Namespace to fork to"}, "task": "Fork the project with ID \"example-project-123\" into the \"development-team\" namespace."}, {"name": "create_branch", "server": "GitLab", "description": "Create a new branch", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "branch": "(string) Name for new branch", "ref": "(Optional, string) Source branch/commit for new branch"}, "task": "Create a new branch named \"feature-login\" in the project with ID \"12345\" using the \"main\" branch as the source."}], "domains": [{"name": "Code Toolkit", "description": "代码工具集,版本控制(如git命令执行)、代码生成、代码执行、测试等"}]}
{"name": "Google Drive", "description": "Search for files in Google Drive", "tools": [{"name": "search", "server": "Google Drive", "description": "Search for files in Google Drive", "parameter": {"query": "(string) Search query"}, "task": "Search for all PDF files uploaded in the last 30 days in Google Drive."}], "domains": [{"name": "File System", "description": "文件系统管理,包括本地 / 云端文件的存储、读取、修改、权限控制及分类检索"}]}
{"name": "Google Maps", "description": "1.Convert address to coordinates 2.Convert coordinates to address 3.Search for places using text query 4.Get detailed information about a place 5.Calculate distances and times between points 6.Get elevation data for locations 7.Get directions between points", "tools": [{"name": "maps_geocode", "server": "Google Maps", "description": "Convert address to coordinates", "parameter": {"address": "(string) Address to be converted"}, "task": "Find the geographic coordinates for the address \"1600 Amphitheatre Parkway, Mountain View, CA\"."}, {"name": "maps_reverse_geocode", "server": "Google Maps", "description": "Convert coordinates to address", "parameter": {"latitude": "(number) Latitude coordinate", "longitude": "(number) Longitude coordinate"}, "task": "Find the address corresponding to the coordinates 40.7128° N latitude and 74.0060° W longitude."}, {"name": "maps_search_places", "server": "Google Maps", "description": "Search for places using text query", "parameter": {"query": "(string) Text query for place search", "location": "(Optional, object) { latitude: number, longitude: number }", "radius": "(Optional, number) Radius in meters (max 50000)"}, "task": "Find nearby Italian restaurants within a 2-kilometer radius of the current location."}, {"name": "maps_place_details", "server": "Google Maps", "description": "Get detailed information about a place", "parameter": {"place_id": "(string) Place ID to get details for"}, "task": "Retrieve the detailed information for the place with ID 'ChIJN1t_tDeuEmsRUsoyG83frY4'."}, {"name": "maps_distance_matrix", "server": "Google Maps", "description": "Calculate distances and times between points", "parameter": {"origins": "(string[]) List of origin addresses", "destinations": "(string[]) List of destination addresses", "mode": "(Optional, string) Travel mode: 'driving', 'walking', 'bicycling', 'transit'"}, "task": "Calculate the driving distance and time between the origin address \"123 Main St, New York, NY\" and the destination address \"456 Oak Ave, Boston, MA\"."}, {"name": "maps_elevation", "server": "Google Maps", "description": "Get elevation data for locations", "parameter": {"locations": "(array of objects) [{latitude, longitude}]"}, "task": "Retrieve the elevation data for the coordinates [40.7128, -74.0060] and [34.0522, -118.2437]."}, {"name": "maps_directions", "server": "Google Maps", "description": "Get directions between points", "parameter": {"origin": "(string) Origin address", "destination": "(string) Destination address", "mode": "(Optional, string) Travel mode: 'driving', 'walking', 'bicycling', 'transit'"}, "task": "Get driving directions from the Empire State Building to Central Park in New York City."}], "domains": [{"name": "Location & Environmental Service", "description": "位置与环境服务，包括地理信息查询、导航、路线规划、酒店、机票、天气数据获取等"}]}
{"name": "Memory", "description": "1.在知识图谱中创建多个新实体 2.创建实体间的新关系 3.向现有实体添加新观察 4.删除实体及其关系 5.从实体中删除特定观察 6.从图谱中删除特定关系 7.读取整个知识图谱 8.基于查询搜索节点 9.按名称检索特定节点", "tools": [{"name": "create_entities", "server": "Memory", "description": "Create multiple new entities in the knowledge graph.", "parameter": {"entities": "(array of objects) Each object contains: `name` (string): Entity identifier, `entityType` (string): Type classification, `observations` (string[]): Associated observations"}, "task": "Add three new entities to the knowledge graph with the following details:  \n1. Entity identifier \"Customer_A\", type classification \"Person\", and observations [\"High purchase frequency\", \"Prefers premium products\"].  \n2. Entity identifier \"Product_X\", type classification \"Item\", and observations [\"High demand\", \"Low stock\"].  \n3. Entity identifier \"Store_123\", type classification \"Location\", and observations [\"Urban area\", \"High foot traffic\"]."}, {"name": "create_relations", "server": "Memory", "description": "Create multiple new relations between entities.", "parameter": {"relations": "(array of objects) Each object contains: `from` (string): Source entity name, `to` (string): Target entity name, `relationType` (string): Relationship type in active voice"}, "task": "Create a new relationship where the source entity is \"Customer\" and the target entity is \"Order\" with the relationship type \"places\". Additionally, establish another relationship where \"Employee\" is the source entity and \"Order\" is the target entity with the relationship type \"processes\"."}, {"name": "add_observations", "server": "Memory", "description": "Add new observations to existing entities.", "parameter": {"observations": "(array of objects) Each object contains: `entityName` (string): Target entity, `contents` (string[]): New observations to add"}, "task": "Add new observations to the entity \"CustomerFeedback\" with the following contents: [\"Positive response to new feature\", \"Request for additional customization options\"]."}, {"name": "delete_entities", "server": "Memory", "description": "Remove entities and their relations.", "parameter": {"entityNames": "(string[]) List of entity names to delete"}, "task": "Delete all records and their associated relationships for the entities \"Customer\" and \"Order\"."}, {"name": "delete_observations", "server": "Memory", "description": "Remove specific observations from entities.", "parameter": {"deletions": "(array of objects) Each object contains: `entityName` (string): Target entity, `observations` (string[]): Observations to remove"}, "task": "Remove the observations \"temperature\" and \"humidity\" from the entity named \"sensor_001\"."}, {"name": "delete_relations", "server": "Memory", "description": "Remove specific relations from the graph.", "parameter": {"relations": "(array of objects) Each object contains: `from` (string): Source entity name, `to` (string): Target entity name, `relationType` (string): Relationship type"}, "task": "Remove the relations where the source entity is \"Customer\" and the target entity is \"Order\" with the relationship type \"has_purchased\" from the graph."}, {"name": "read_graph", "server": "Memory", "description": "Read the entire knowledge graph.", "parameter": {}, "task": "Read the complete knowledge graph to retrieve all nodes and relationships."}, {"name": "search_nodes", "server": "Memory", "description": "Search for nodes based on a query.", "parameter": {"query": "(string) Search term to match against entity names, types, and observation content"}, "task": "Search for nodes matching the term \"database server\" in their names, types, or observation content."}, {"name": "open_nodes", "server": "Memory", "description": "Retrieve specific nodes by name.", "parameter": {"names": "(string[]) List of node names to retrieve"}, "task": "Retrieve the nodes named \"NodeA\", \"NodeB\", and \"NodeC\" from the system."}], "domains": [{"name": "Knowledge Visualization", "description": "知识可视化，包括知识图谱导航、知识可视化生成及知识库搜索"}]}
{"name": "PostgreSQL", "description": "Execute read-only SQL queries against the connected database", "tools": [{"name": "query", "server": "PostgreSQL", "description": "Execute read-only SQL queries against the connected database", "parameter": {"sql": "(string): The SQL query to execute"}, "task": "Retrieve the names and email addresses of all customers who made a purchase in the last 30 days from the connected database."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}]}
{"name": "Puppeteer", "description": "Browser automation using Puppeteer, including: navigation, screenshot capture, element interaction (click/hover/fill/select), and JavaScript execution", "tools": [{"name": "puppeteer_navigate", "server": "Puppeteer", "description": "Navigate to any URL in the browser", "parameter": {"url": "(string, required): URL to navigate to", "launchOptions": "(object, optional): PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts. Example: { headless: true, args: ['--user-data-dir=\"C:/Data\"'] }", "allowDangerous": "(boolean, optional): Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox, --disable-web-security will throw errors. Default false."}, "task": "Navigate to the website \"https://example.com\" using a headless browser with default security settings."}, {"name": "puppeteer_screenshot", "server": "Puppeteer", "description": "Capture screenshots of the entire page or specific elements", "parameter": {"name": "(string, required): Name for the screenshot", "selector": "(string, optional): CSS selector for element to screenshot", "width": "(number, optional, default: 800): Screenshot width", "height": "(number, optional, default: 600): Screenshot height", "encoded": "(boolean, optional): If true, capture the screenshot as a base64-encoded data URI (as text) instead of binary image content. Default false."}, "task": "Capture a screenshot of the header section (using its CSS selector) with a width of 1200 pixels and a height of 300 pixels, saving it as \"header_screenshot.png\"."}, {"name": "puppeteer_click", "server": "Puppeteer", "description": "Click elements on the page", "parameter": {"selector": "(string): CSS selector for element to click"}, "task": "Click the button with the CSS selector \"#submit-button\" on the current webpage."}, {"name": "puppeteer_hover", "server": "Puppeteer", "description": "Hover elements on the page", "parameter": {"selector": "(string): CSS selector for element to hover"}, "task": "Hover over the navigation menu item with the CSS selector \".main-nav > li.dropdown\" to reveal its submenu."}, {"name": "puppeteer_fill", "server": "Puppeteer", "description": "Fill out input fields", "parameter": {"selector": "(string): CSS selector for input field", "value": "(string): Value to fill"}, "task": "Fill the input field identified by the CSS selector '#username' with the value 'testuser123'."}, {"name": "puppeteer_select", "server": "Puppeteer", "description": "Select an element with SELECT tag", "parameter": {"selector": "(string): CSS selector for element to select", "value": "(string): Value to select"}, "task": "Select the option with the value \"blue\" from the dropdown menu identified by the CSS selector \"#color-picker\"."}, {"name": "puppeteer_evaluate", "server": "Puppeteer", "description": "Execute JavaScript in the browser console", "parameter": {"script": "(string): JavaScript code to execute"}, "task": "Evaluate the current page title by executing JavaScript in the browser console."}], "domains": [{"name": "Browser Operation", "description": "浏览器操作与自动化控制,如网页元素操控、Cookie 管理、页面截图等"}]}
{"name": "Sentry", "description": "Retrieve and analyze Sentry issues by ID or URL", "tools": [{"name": "get_sentry_issue", "server": "Sentry", "description": "Retrieve and analyze a Sentry issue by ID or URL", "parameter": {"issue_id_or_url": "(string) Sentry issue ID or URL to analyze"}, "task": "Retrieve and analyze the Sentry issue with ID '1234567890' or URL 'https://sentry.io/issues/1234567890'."}, {"name": "sentry-issue", "server": "Sentry", "description": "Retrieve issue details from Sentry", "parameter": {"issue_id_or_url": "(string) Sentry issue ID or URL"}, "task": "Retrieve the details of the Sentry issue with ID 'ABC123' or URL 'https://sentry.io/issues/ABC123'."}], "domains": [{"name": "Application Monitoring & Management", "description": "Application performance monitoring and management, including error tracking, deployment management, performance metrics analysis, and team collaboration"}]}
{"name": "Sequential Thinking", "description": "Facilitates a detailed, step-by-step thinking process for problem-solving and analysis", "tools": [{"name": "sequential_thinking", "server": "Sequential Thinking", "description": "Facilitates a detailed, step-by-step thinking process for problem-solving and analysis.", "parameter": {"thought": "(string) The current thinking step", "nextThoughtNeeded": "(boolean) Whether another thought step is needed", "thoughtNumber": "(integer) Current thought number", "totalThoughts": "(integer) Estimated total thoughts needed", "isRevision": "(boolean, optional) Whether this revises previous thinking", "revisesThought": "(integer, optional) Which thought is being reconsidered", "branchFromThought": "(integer, optional) Branching point thought number", "branchId": "(string, optional) Branch identifier", "needsMoreThoughts": "(boolean, optional) If more thoughts are needed"}, "task": "Break down the process of designing a new mobile app feature into 5 sequential steps, ensuring each step builds logically on the previous one. Start by identifying the user needs, then proceed to outline the feature's core functionality, followed by UI/UX considerations, technical feasibility, and finally, testing requirements. After completing the initial 5 steps, determine if any revisions or additional steps are necessary."}], "domains": [{"name": "Problem Solving & Analysis", "description": "Problem-solving and analysis tools that facilitate detailed, step-by-step thinking processes"}]}
{"name": "Sqlite", "description": "1. Execute SELECT queries to read data from the database 2. Execute INSERT, UPDATE, or DELETE queries 3. Create new tables in the database 4. Get a list of all tables in the database 5. View schema information for a specific table 6. Add new business insights to the memo resource", "tools": [{"name": "read_query", "server": "Sqlite", "description": "Execute SELECT queries to read data from the database", "parameter": {"query": "(string) The SELECT SQL query to execute"}, "task": "Retrieve the names and email addresses of all customers who made a purchase in the last 30 days using a SELECT query."}, {"name": "write_query", "server": "Sqlite", "description": "Execute INSERT, UPDATE, or DELETE queries", "parameter": {"query": "(string) The SQL modification query"}, "task": "Insert a new customer record into the database with the following details: name 'Alice', email 'alice@example.com', and registration date '2024-05-15'."}, {"name": "create_table", "server": "Sqlite", "description": "Create new tables in the database", "parameter": {"query": "(string) CREATE TABLE SQL statement"}, "task": "Create a new table named 'employees' with columns for employee_id (integer, primary key), name (varchar), department (varchar), and hire_date (date) in the database."}, {"name": "list_tables", "server": "Sqlite", "description": "Get a list of all tables in the database", "parameter": {}, "task": "Retrieve a comprehensive list of all tables available in the connected database."}, {"name": "describe-table", "server": "Sqlite", "description": "View schema information for a specific table", "parameter": {"table_name": "(string) Name of table to describe"}, "task": "Retrieve the schema details for the 'customer_orders' table in the connected database."}, {"name": "append_insight", "server": "Sqlite", "description": "Add new business insights to the memo resource", "parameter": {"insight": "(string) Business insight discovered from data analysis"}, "task": "Add a new business insight about the recent increase in customer retention rates to the memo resource."}], "domains": [{"name": "DataBase Management", "description": "数据库管理，涵盖数据库创建、查询、优化、备份及数据结构设计"}, {"name": "Business Management", "description": "业务管理，包括业务信息获取、位置管理、营业时间更新及媒体内容管理"}]}
{"name": "Time", "description": "1.获取特定时区或系统时区的当前时间 2.在不同时区之间转换时间", "tools": [{"name": "get_current_time", "server": "Time", "description": "Get current time in a specific timezone or system timezone.", "parameter": {"timezone": "(string) IANA timezone name (e.g., 'America/New_York', 'Europe/London')"}, "task": "Get the current time in the 'Asia/Tokyo' timezone."}, {"name": "convert_time", "server": "Time", "description": "Convert time between timezones.", "parameter": {"source_timezone": "(string) Source IANA timezone name", "time": "(string) Time in 24-hour format (HH:MM)", "target_timezone": "(string) Target IANA timezone name"}, "task": "Convert the time 14:30 from the timezone \"America/New_York\" to \"Asia/Tokyo\"."}], "domains": [{"name": "Time & Task Management", "description": "时间与任务管理,涵盖日历日程、待办事项、项目进度跟踪及会议调度"}]}
