{"name": "AgentQL", "description": "Enable AI agents to get structured data from unstructured web with AgentQL.", "url": "https://github.com/tinyfish-io/agentql-mcp", "readme_file": "official/AgentQL.md", "summary": "A Model Context Protocol (MCP) server that integrates AgentQL's data extraction capabilities, allowing users to extract structured data from web pages.", "tools": [{"name": "extract-web-data", "description": "Extracts structured data from a given URL using a prompt to describe the data and fields to extract.", "parameter": {"url": "(string) The URL of the web page to extract data from.", "prompt": "(string) A description of the actual data and its fields to extract."}}]}
{"name": "Aiven", "description": "Navigate your Aiven projects and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services", "url": "https://github.com/Aiven-Open/mcp-aiven", "readme_file": "official/Aiven.md", "summary": "A Model Context Protocol (MCP) server for Aiven, providing access to various Aiven services such as PostgreSQL, Kafka, ClickHouse, Valkey, and OpenSearch, enabling LLMs to build full stack solutions.", "tools": [{"name": "list_projects", "description": "List all projects on your Aiven account.", "parameter": {}}, {"name": "list_services", "description": "List all services in a specific Aiven project.", "parameter": {}}, {"name": "get_service_details", "description": "Get the detail of your service in a specific Aiven project.", "parameter": {}}]}
{"name": "Alibaba Cloud AnalyticDB for MySQL", "description": "Connect to a AnalyticDB for MySQL cluster for getting database or table metadata, querying and analyzing data.It will be supported to add the openapi for cluster operation in the future.", "url": "https://github.com/aliyun/alibabacloud-adb-mysql-mcp-server", "readme_file": "official/Alibaba_Cloud_AnalyticDB_for_MySQL.md", "summary": "A universal interface between AI Agents and AnalyticDB for MySQL databases, enabling seamless communication for retrieving database metadata and executing SQL operations.", "tools": [{"name": "execute_sql", "description": "Execute a SQL query in the AnalyticDB for MySQL Cluster", "parameter": {}}, {"name": "get_query_plan", "description": "Get the query plan for a SQL query", "parameter": {}}, {"name": "get_execution_plan", "description": "Get the actual execution plan with runtime statistics for a SQL query", "parameter": {}}]}
{"name": "Apache IoTDB", "description": "MCP Server for Apache IoTDB database and its tools", "url": "https://github.com/apache/iotdb-mcp-server", "readme_file": "official/Apache_IoTDB.md", "summary": "A Model Context Protocol (MCP) server implementation that provides database interaction and business intelligence capabilities through IoTDB. It enables running SQL queries.", "tools": [{"name": "metadata_query", "description": "Execute SHOW/COUNT queries to read metadata from the database", "parameter": {"query_sql": "(string) The SHOW/COUNT SQL query to execute"}}, {"name": "select_query", "description": "Execute SELECT queries to read data from the database", "parameter": {"query_sql": "(string) The SELECT SQL query to execute"}}, {"name": "read_query", "description": "Execute SELECT queries to read data from the database", "parameter": {"query": "(string) The SELECT SQL query to execute"}}, {"name": "list_tables", "description": "Get a list of all tables in the database", "parameter": {}}, {"name": "describe-table", "description": "View schema information for a specific table", "parameter": {"table_name": "(string) Name of table to describe"}}]}
{"name": "Apify", "description": "Actors MCP Server: Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more", "url": "https://github.com/apify/actors-mcp-server", "readme_file": "official/Apify.md", "summary": "The Apify MCP Server enables interaction with Apify Actors as tools for performing various tasks, such as data extraction, web searching, and more. It supports both HTTP server (SSE) and local server (stdio) modes, and can be integrated with various MCP clients.", "tools": [{"name": "get-actor-details", "description": "Retrieves documentation, input schema, and details about a specific Actor.", "parameter": {}}, {"name": "discover-actors", "description": "Searches for relevant Actors using keywords and returns their details.", "parameter": {}}, {"name": "add-actor-as-tool", "description": "Adds an Actor by name to the available tools list without executing it, requiring user consent to run later.", "parameter": {}}, {"name": "remove-actor-from-tool", "description": "Removes an Actor by name from the available tools list when it's no longer needed.", "parameter": {}}]}
{"name": "APIMatic MCP", "description": "APIMatic MCP Server is used to validate OpenAPI specifications using APIMatic. The server processes OpenAPI files and returns validation summaries by leveraging APIMatic’s API.", "url": "https://github.com/apimatic/apimatic-validator-mcp", "readme_file": "official/APIMatic_MCP.md", "summary": "A Model Context Protocol (MCP) Server for validating OpenAPI specifications using APIMatic. It supports OpenAPI 2.0 and 3.0 files in both JSON and YAML formats, leveraging APIMatic’s API for comprehensive validation.", "tools": [{"name": "validate-openapi-using-apimatic", "description": "Validates an OpenAPI file using APIMatic’s API and returns a validation summary.", "parameter": {}}]}
{"name": "Arize Phoenix", "description": "Inspect traces, manage prompts, curate datasets, and run experiments using Arize Phoenix, an open-source AI and LLM observability tool.", "url": "https://github.com/Arize-ai/phoenix/tree/main/js/packages/phoenix-mcp", "readme_file": "official/Arize_Phoenix.md", "summary": "An open-source AI observability platform designed for experimentation, evaluation, and troubleshooting. It provides tracing, evaluation, dataset management, experiment tracking, a playground for optimizing prompts, and prompt management.", "tools": [{"name": "arize-phoenix-otel", "description": "Provides a lightweight wrapper around OpenTelemetry primitives with Phoenix-aware defaults", "parameter": {}}, {"name": "arize-phoenix-client", "description": "Lightweight client for interacting with the Phoenix server via its OpenAPI REST interface", "parameter": {}}, {"name": "arize-phoenix-evals", "description": "Tooling to evaluate LLM applications including RAG relevance, answer relevance, and more", "parameter": {}}, {"name": "@arizeai/phoenix-client", "description": "Client for the Arize Phoenix API", "parameter": {}}, {"name": "@arizeai/phoenix-mcp", "description": "MCP server implementation for Arize Phoenix providing a unified interface to Phoenix's capabilities", "parameter": {}}]}
{"name": "Astra DB", "description": "Comprehensive tools for managing collections and documents in a DataStax Astra DB NoSQL database with a full range of operations such as create, update, delete, find, and associated bulk actions.", "url": "https://github.com/datastax/astra-db-mcp", "readme_file": "official/Astra_DB.md", "summary": "A Model Context Protocol (MCP) server for interacting with Astra DB, extending the capabilities of Large Language Models (LLMs) by allowing them to interact with external systems as agents.", "tools": [{"name": "GetCollections", "description": "Get all collections in the database", "parameter": {}}, {"name": "CreateCollection", "description": "Create a new collection in the database", "parameter": {}}, {"name": "UpdateCollection", "description": "Update an existing collection in the database", "parameter": {}}, {"name": "DeleteCollection", "description": "Delete a collection from the database", "parameter": {}}, {"name": "ListRecords", "description": "List records from a collection in the database", "parameter": {}}, {"name": "GetRecord", "description": "Get a specific record from a collection by ID", "parameter": {}}, {"name": "CreateRecord", "description": "Create a new record in a collection", "parameter": {}}, {"name": "UpdateRecord", "description": "Update an existing record in a collection", "parameter": {}}, {"name": "DeleteRecord", "description": "Delete a record from a collection", "parameter": {}}, {"name": "FindRecord", "description": "Find records in a collection by field value", "parameter": {}}, {"name": "BulkCreateRecords", "description": "Create multiple records in a collection at once", "parameter": {}}, {"name": "BulkUpdateRecords", "description": "Update multiple records in a collection at once", "parameter": {}}, {"name": "BulkDeleteRecords", "description": "Delete multiple records from a collection at once", "parameter": {}}, {"name": "OpenBrowser", "description": "Open a web browser for authentication and setup", "parameter": {}}, {"name": "HelpAddToClient", "description": "Get assistance with adding Astra DB client to your MCP client", "parameter": {}}, {"name": "EstimateDocumentCount", "description": "Get estimate of the number of documents in a collection", "parameter": {}}]}
{"name": "Audiense Insights", "description": "Marketing insights and audience analysis from Audiense reports, covering demographic, cultural, influencer, and content engagement analysis.", "url": "https://github.com/AudienseCo/mcp-audiense-insights", "readme_file": "official/Audiense_Insights.md", "summary": "This server allows MCP-compatible clients to interact with an Audiense Insights account, extracting marketing insights and audience analysis including demographic, cultural, influencer, and content engagement data.", "tools": [{"name": "get-reports", "description": "Retrieves the list of Audiense insights reports owned by the authenticated user.", "parameter": {}}, {"name": "get-report-info", "description": "Fetches detailed information about a specific intelligence report, including status, segmentation type, audience size, segments, and access links.", "parameter": {"report_id": "(string) The ID of the intelligence report."}}, {"name": "get-audience-insights", "description": "Retrieves aggregated insights for a given audience, including demographics, behavioral traits, psychographics, and socioeconomic factors.", "parameter": {"audience_insights_id": "(string) The ID of the audience insights.", "insights": "(array of strings, optional) List of specific insight names to filter."}}, {"name": "get-baselines", "description": "Retrieves available baseline audiences, optionally filtered by country.", "parameter": {"country": "(string, optional) ISO country code to filter by."}}, {"name": "get-categories", "description": "Retrieves the list of available affinity categories that can be used in influencer comparisons.", "parameter": {}}, {"name": "compare-audience-influencers", "description": "Compares influencers of a given audience with a baseline audience, providing affinity scores, baseline comparisons, and uniqueness scores.", "parameter": {"audience_influencers_id": "(string) ID of the audience influencers.", "baseline_audience_influencers_id": "(string) ID of the baseline audience influencers.", "cursor": "(number, optional) Pagination cursor.", "count": "(number, optional) Number of items per page (default: 200).", "bio_keyword": "(string, optional) Filter influencers by bio keyword.", "entity_type": "(enum: person | brand, optional) Filter by entity type.", "followers_min": "(number, optional) Minimum number of followers.", "followers_max": "(number, optional) Maximum number of followers.", "categories": "(array of strings, optional) Filter influencers by categories.", "countries": "(array of strings, optional) Filter influencers by country ISO codes."}}, {"name": "get-audience-content", "description": "Retrieves audience content engagement details, including liked, shared, and influential content.", "parameter": {"audience_content_id": "(string) The ID of the audience content."}}, {"name": "report-summary", "description": "Generates a comprehensive summary of an Audiense report, including metadata, audience size, segment information, top insights, and top influencers with comparison metrics.", "parameter": {"report_id": "(string) The ID of the intelligence report to summarize."}}]}
{"name": "AWS", "description": "Specialized MCP servers that bring AWS best practices directly to your development workflow.", "url": "https://github.com/awslabs/mcp", "readme_file": "official/AWS.md", "summary": "A suite of specialized MCP servers that help you get the most out of AWS, wherever you use MCP. These servers enhance the capabilities of foundation models by providing relevant information, access to the latest documentation, workflow automation, and specialized domain knowledge for AWS services.", "tools": [{"name": "Search Documentation", "description": "Search AWS documentation and best practices using the official AWS search API.", "parameter": {}}, {"name": "Get Content Recommendations", "description": "Get content recommendations for AWS documentation pages.", "parameter": {}}, {"name": "Convert Documentation to Markdown", "description": "Convert AWS documentation to markdown format.", "parameter": {}}, {"name": "Discover Knowledge Bases", "description": "Discover Amazon Bedrock Knowledge Bases and their data sources.", "parameter": {}}, {"name": "Query Knowledge Bases", "description": "Query Amazon Bedrock Knowledge Bases with natural language.", "parameter": {}}, {"name": "Filter Results by Data Source", "description": "Filter query results by data source.", "parameter": {}}, {"name": "Rerank Results", "description": "Rerank query results.", "parameter": {}}, {"name": "AWS CDK Project Analysis", "description": "Analyze and assist with AWS CDK projects.", "parameter": {}}, {"name": "CDK Construct Recommendations", "description": "Provide recommendations for CDK constructs.", "parameter": {}}, {"name": "Infrastructure as Code Best Practices", "description": "Provide best practices for infrastructure as code.", "parameter": {}}, {"name": "Analyze and Visualize Costs", "description": "Analyze and visualize AWS costs.", "parameter": {}}, {"name": "Query Cost Data with Natural Language", "description": "Query cost data using natural language.", "parameter": {}}, {"name": "Generate Cost Reports and Insights", "description": "Generate detailed cost reports and insights.", "parameter": {}}, {"name": "Text-Based Image Generation", "description": "Generate images using text with customizable parameters.", "parameter": {}}, {"name": "Color-Guided Image Generation", "description": "Generate images with specific color palettes.", "parameter": {}}, {"name": "Save Generated Images", "description": "Save generated images to the workspace.", "parameter": {}}, {"name": "Generate Professional Diagrams", "description": "Generate professional diagrams using Python code.", "parameter": {}}, {"name": "Customize Diagram Appearance", "description": "Customize the appearance, layout, and styling of diagrams.", "parameter": {}}, {"name": "Code Scanning for Secure Diagram Generation", "description": "Scan code to ensure secure diagram generation.", "parameter": {}}, {"name": "Run AWS Lambda Functions", "description": "Select and run AWS Lambda functions as MCP tools without code changes.", "parameter": {}}, {"name": "Security-First Development Workflow", "description": "Implement a security-first development workflow.", "parameter": {}}, {"name": "Checkov Integration", "description": "Integrate Checkov for security checks.", "parameter": {}}, {"name": "AWS and AWSCC Provider Documentation", "description": "Provide documentation for AWS and AWSCC providers.", "parameter": {}}, {"name": "AWS-IA GenAI Modules", "description": "Use AWS-IA GenAI modules.", "parameter": {}}, {"name": "Terraform Workflow Execution", "description": "Execute Terraform workflows.", "parameter": {}}, {"name": "Search for Places Using Geocoding", "description": "Search for places using geocoding.", "parameter": {}}, {"name": "Get Details for Specific Places", "description": "Get details for specific places by PlaceId.", "parameter": {}}, {"name": "Reverse Geocode Coordinates to Addresses", "description": "Reverse geocode coordinates to addresses.", "parameter": {}}, {"name": "Search for Places Near a Location", "description": "Search for places near a specified location.", "parameter": {}}, {"name": "Search for Places That Are Currently Open", "description": "Search for places that are currently open.", "parameter": {}}, {"name": "Calculate Routes Between Locations", "description": "Calculate routes between locations with turn-by-turn directions.", "parameter": {}}, {"name": "Optimize Waypoints for Efficient Routing", "description": "Optimize waypoints for efficient routing.", "parameter": {}}, {"name": "Repository Indexing", "description": "Index Git repositories using FAISS and Amazon Bedrock embeddings.", "parameter": {}}, {"name": "Semantic Search Within Repositories", "description": "Perform semantic search within repositories.", "parameter": {}}, {"name": "Repository Structure Analysis", "description": "Analyze the structure of repositories.", "parameter": {}}, {"name": "GitHub Repository Search in AWS Organizations", "description": "Search GitHub repositories within AWS organizations.", "parameter": {}}, {"name": "File Access with Text and Binary Support", "description": "Access files with text and binary support.", "parameter": {}}]}
{"name": "Axiom", "description": "Query and analyze your Axiom logs, traces, and all other event data in natural language", "url": "https://github.com/axiomhq/mcp-server-axiom", "readme_file": "official/Axiom.md", "summary": "A Model Context Protocol (MCP) server for Axiom that allows AI agents to query data using Axiom Processing Language (APL). It supports executing APL queries and listing available datasets.", "tools": [{"name": "queryApl", "description": "Execute APL queries against Axiom datasets", "parameter": {}}, {"name": "listDatasets", "description": "List available Axiom datasets", "parameter": {}}]}
{"name": "Azure", "description": "The Azure MCP Server gives MCP Clients access to key Azure services and tools like Azure Storage, Cosmos DB, the Azure CLI, and more.", "url": "https://github.com/Azure/azure-mcp", "readme_file": "official/Azure.md", "summary": "The Azure MCP Server implements the MCP specification to create a seamless connection between AI agents and key Azure services, including Azure Storage, Cosmos DB, and more. It enables AI agents to interact with Azure resources through smart JSON communication, natural language commands, intelligent parameter suggestions, and consistent error handling.", "tools": [{"name": "List Azure AI Search services", "description": "Lists all Azure AI Search services.", "parameter": {}}, {"name": "List indexes and look at their schema and configuration", "description": "Lists indexes and provides details about their schema and configuration.", "parameter": {}}, {"name": "Query search indexes", "description": "Queries search indexes for specific data.", "parameter": {}}, {"name": "List Cosmos DB accounts", "description": "Lists all Cosmos DB accounts.", "parameter": {}}, {"name": "List and query databases", "description": "Lists and queries databases within a Cosmos DB account.", "parameter": {}}, {"name": "Manage containers and items", "description": "Manages containers and items within a Cosmos DB database.", "parameter": {}}, {"name": "Execute SQL queries against containers", "description": "Executes SQL queries against containers within a Cosmos DB database.", "parameter": {}}, {"name": "List and query databases", "description": "Lists and queries databases within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}}, {"name": "List and get schema for tables", "description": "Lists and retrieves the schema for tables within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}}, {"name": "List, get configuration and get parameters for servers", "description": "Lists, retrieves configuration, and retrieves parameters for servers within an Azure Database for PostgreSQL - Flexible Server.", "parameter": {}}, {"name": "List Kusto clusters", "description": "Lists all Kusto clusters.", "parameter": {}}, {"name": "List databases in a Kusto cluster", "description": "Lists databases within a Kusto cluster.", "parameter": {}}, {"name": "List tables in a Kusto database", "description": "Lists tables within a Kusto database.", "parameter": {}}, {"name": "Get schema for a Kusto table", "description": "Retrieves the schema for a Kusto table.", "parameter": {}}, {"name": "Sample rows from a Kusto table", "description": "Samples rows from a Kusto table.", "parameter": {}}, {"name": "Query Kusto databases using KQL", "description": "Queries Kusto databases using KQL.", "parameter": {}}, {"name": "List Storage accounts", "description": "Lists all Storage accounts.", "parameter": {}}, {"name": "Manage blob containers and blobs", "description": "Manages blob containers and blobs within a Storage account.", "parameter": {}}, {"name": "List and query Storage tables", "description": "Lists and queries tables within a Storage account.", "parameter": {}}, {"name": "Get container properties and metadata", "description": "Retrieves properties and metadata for a Storage container.", "parameter": {}}, {"name": "List Log Analytics workspaces", "description": "Lists all Log Analytics workspaces.", "parameter": {}}, {"name": "Query logs using KQL", "description": "Queries logs using KQL.", "parameter": {}}, {"name": "List available tables", "description": "Lists available tables within a Log Analytics workspace.", "parameter": {}}, {"name": "Configure monitoring options", "description": "Configures monitoring options within a Log Analytics workspace.", "parameter": {}}, {"name": "List App Configuration stores", "description": "Lists all App Configuration stores.", "parameter": {}}, {"name": "Manage key-value pairs", "description": "Manages key-value pairs within an App Configuration store.", "parameter": {}}, {"name": "Handle labeled configurations", "description": "Handles labeled configurations within an App Configuration store.", "parameter": {}}, {"name": "Lock/unlock configuration settings", "description": "Locks or unlocks configuration settings within an App Configuration store.", "parameter": {}}, {"name": "List, create, and get keys", "description": "Lists, creates, and retrieves keys within an Azure Key Vault.", "parameter": {}}, {"name": "List resource groups", "description": "Lists all resource groups.", "parameter": {}}, {"name": "Resource group management operations", "description": "Performs management operations on resource groups.", "parameter": {}}, {"name": "Execute Azure CLI commands directly", "description": "Executes Azure CLI commands directly.", "parameter": {}}, {"name": "Support for all Azure CLI functionality", "description": "Supports all Azure CLI functionality.", "parameter": {}}, {"name": "JSON output formatting", "description": "Formats output in JSON.", "parameter": {}}, {"name": "Cross-platform compatibility", "description": "Ensures cross-platform compatibility.", "parameter": {}}, {"name": "Execute Azure Developer CLI commands directly", "description": "Executes Azure Developer CLI commands directly.", "parameter": {}}, {"name": "Support for template discovery, template initialization, provisioning and deployment", "description": "Supports template discovery, template initialization, provisioning, and deployment.", "parameter": {}}, {"name": "Cross-platform compatibility", "description": "Ensures cross-platform compatibility.", "parameter": {}}]}
{"name": "Bankless Onchain", "description": "Query Onchain data, like ERC20 tokens, transaction history, smart contract state.", "url": "https://github.com/bankless/onchain-mcp", "readme_file": "official/Bankless_Onchain.md", "summary": "A framework for interacting with on-chain data via the Bankless API, implementing the Model Context Protocol (MCP) to allow AI models to access blockchain state and event data.", "tools": [{"name": "read_contract", "description": "Read state from smart contracts on various blockchain networks.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'polygon')", "contract": "(string, required) The contract address", "method": "(string, required) The contract method to call", "inputs": "(array, required) Input parameters for the method call, each containing: { type (string), value (any) }", "outputs": "(array, required) Expected output types, each containing: { type (string) }"}}, {"name": "get_proxy", "description": "Retrieve proxy implementation contract addresses.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "contract": "(string, required) The contract address"}}, {"name": "get_events", "description": "Fetch event logs for a contract based on topics.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "addresses": "(array, required) List of contract addresses to filter events", "topic": "(string, required) Primary topic to filter events", "optionalTopics": "(array, optional) Optional additional topics (can include null values)"}}, {"name": "build_event_topic", "description": "Generate an event topic signature from event name and argument types.", "parameter": {"network": "(string, required) The blockchain network (e.g., 'ethereum', 'base')", "name": "(string, required) Event name (e.g., 'Transfer(address,address,uint256)')", "arguments": "(array, required) Event arguments types, each containing: { type (string) }"}}]}
{"name": "Bitrise", "description": "Chat with your builds, CI, and more.", "url": "https://github.com/bitrise-io/bitrise-mcp", "readme_file": "official/Bitrise.md", "summary": "MCP Server for the Bitrise API, enabling app management, build operations, artifact management, and more.", "tools": [{"name": "list_apps", "description": "List all the apps available for the authenticated account", "parameter": {"sort_by": "(Optional, string) Order of the apps: last_build_at (default) or created_at", "next": "(Optional, string) Slug of the first app in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}}, {"name": "register_app", "description": "Add a new app to Bitrise", "parameter": {"repo_url": "(string) Repository URL", "is_public": "(boolean) Whether the app's builds visibility is 'public'", "organization_slug": "(string) The organization (aka workspace) the app to add to", "project_type": "(Optional, string) Type of project (ios, android, etc.)", "provider": "(Optional, string) github"}}, {"name": "finish_bitrise_app", "description": "Finish the setup of a Bitrise app", "parameter": {"app_slug": "(string) The slug of the Bitrise app to finish setup for", "project_type": "(Optional, string) The type of project (e.g., android, ios, flutter, etc.)", "stack_id": "(Optional, string) The stack ID to use for the app", "mode": "(Optional, string) The mode of setup", "config": "(Optional, string) The configuration to use for the app"}}, {"name": "get_app", "description": "Get the details of a specific app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "delete_app", "description": "Delete an app from Bitrise", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "update_app", "description": "Update an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "is_public": "(boolean) Whether the app's builds visibility is 'public'", "project_type": "(string) Type of project", "provider": "(string) Repository provider", "repo_url": "(string) Repository URL"}}, {"name": "get_bitrise_yml", "description": "Get the current Bitrise YML config file of a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "update_bitrise_yml", "description": "Update the Bitrise YML config file of a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "bitrise_yml_as_json": "(string) The new Bitrise YML config file content"}}, {"name": "list_branches", "description": "List the branches with existing builds of an app's repository", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "register_ssh_key", "description": "Add an SSH-key to a specific app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "auth_ssh_private_key": "(string) Private SSH key", "auth_ssh_public_key": "(string) Public SSH key", "is_register_key_into_provider_service": "(boolean) Register the key in the provider service"}}, {"name": "register_webhook", "description": "Register an incoming webhook for a specific application", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "list_builds", "description": "List all the builds of a specified Bitrise app or all accessible builds", "parameter": {"app_slug": "(Optional, string) Identifier of the Bitrise app", "sort_by": "(Optional, string) Order of builds: created_at (default), running_first", "branch": "(Optional, string) Filter builds by branch", "workflow": "(Optional, string) Filter builds by workflow", "status": "(Optional, integer) Filter builds by status (0: not finished, 1: successful, 2: failed, 3: aborted, 4: in-progress)", "next": "(Optional, string) Slug of the first build in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}}, {"name": "trigger_bitrise_build", "description": "Trigger a new build/pipeline for a specified Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "branch": "(Optional, string) The branch to build (default: main)", "workflow_id": "(Optional, string) The workflow to build", "commit_message": "(Optional, string) The commit message for the build", "commit_hash": "(Optional, string) The commit hash for the build"}}, {"name": "get_build", "description": "Get a specific build of a given app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build"}}, {"name": "abort_build", "description": "Abort a specific build", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "reason": "(Optional, string) Reason for aborting the build"}}, {"name": "get_build_log", "description": "Get the build log of a specified build of a Bitrise app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the Bitrise build"}}, {"name": "get_build_bitrise_yml", "description": "Get the bitrise.yml of a build", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build"}}, {"name": "list_build_workflows", "description": "List the workflows of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "list_artifacts", "description": "Get a list of all build artifacts", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "next": "(Optional, string) Slug of the first artifact in the response", "limit": "(Optional, integer) Max number of elements per page (default: 50)"}}, {"name": "get_artifact", "description": "Get a specific build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact"}}, {"name": "delete_artifact", "description": "Delete a build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact"}}, {"name": "update_artifact", "description": "Update a build artifact", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "build_slug": "(string) Identifier of the build", "artifact_slug": "(string) Identifier of the artifact", "is_public_page_enabled": "(boolean) Enable public page for the artifact"}}, {"name": "list_outgoing_webhooks", "description": "List the outgoing webhooks of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "delete_outgoing_webhook", "description": "Delete the outgoing webhook of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "webhook_slug": "(string) Identifier of the webhook"}}, {"name": "update_outgoing_webhook", "description": "Update an outgoing webhook for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "webhook_slug": "(string) Identifier of the webhook", "events": "(array) List of events to trigger the webhook", "url": "(string) URL of the webhook", "headers": "(Optional, array) Headers to be sent with the webhook"}}, {"name": "create_outgoing_webhook", "description": "Create an outgoing webhook for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "events": "(array) List of events to trigger the webhook", "url": "(string) URL of the webhook", "headers": "(Optional, array) Headers to be sent with the webhook"}}, {"name": "list_cache_items", "description": "List the key-value cache items belonging to an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "delete_all_cache_items", "description": "Delete all key-value cache items belonging to an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "delete_cache_item", "description": "Delete a key-value cache item", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "cache_item_id": "(string) Identifier of the cache item"}}, {"name": "get_cache_item_download_url", "description": "Get the download URL of a key-value cache item", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "cache_item_id": "(string) Identifier of the cache item"}}, {"name": "list_pipelines", "description": "List all pipelines and standalone builds of an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app"}}, {"name": "get_pipeline", "description": "Get a pipeline of a given app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline"}}, {"name": "abort_pipeline", "description": "Abort a pipeline", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline", "reason": "(Optional, string) Reason for aborting the pipeline"}}, {"name": "rebuild_pipeline", "description": "Rebuild a pipeline", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "pipeline_id": "(string) Identifier of the pipeline"}}, {"name": "list_group_roles", "description": "List group roles for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "role_name": "(string) Name of the role"}}, {"name": "replace_group_roles", "description": "Replace group roles for an app", "parameter": {"app_slug": "(string) Identifier of the Bitrise app", "role_name": "(string) Name of the role", "group_slugs": "(array) List of group slugs"}}, {"name": "list_workspaces", "description": "List the workspaces the user has access to", "parameter": {}}, {"name": "get_workspace", "description": "Get details for one workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}}, {"name": "get_workspace_groups", "description": "Get the groups in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}}, {"name": "create_workspace_group", "description": "Create a group in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace", "group_name": "(string) Name of the group"}}, {"name": "get_workspace_members", "description": "Get the members in a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace"}}, {"name": "invite_member_to_workspace", "description": "Invite a member to a workspace", "parameter": {"workspace_slug": "(string) Slug of the Bitrise workspace", "email": "(string) Email address of the user"}}, {"name": "add_member_to_group", "description": "Add a member to a group", "parameter": {"group_slug": "(string) Slug of the group", "user_slug": "(string) Slug of the user"}}, {"name": "me", "description": "Get info from the currently authenticated user account", "parameter": {}}, {"name": "create_connected_app", "description": "Add a new Release Management connected app to Bitrise", "parameter": {"platform": "(string) The mobile platform for the connected app (ios/android)", "store_app_id": "(string) The app store identifier for the connected app", "workspace_slug": "(string) Identifier of the Bitrise workspace", "id": "(Optional, string) An uuidV4 identifier for your new connected app", "manual_connection": "(Optional, boolean) Indicates a manual connection", "project_id": "(Optional, string) Specifies which Bitrise Project to associate with", "store_app_name": "(Optional, string) App name for manual connections", "store_credential_id": "(Optional, string) Selection of credentials added on Bitrise"}}, {"name": "list_connected_apps", "description": "List Release Management connected apps available for the authenticated account within a workspace", "parameter": {"workspace_slug": "(string) Identifier of the Bitrise workspace", "items_per_page": "(Optional, integer) Maximum number of connected apps per page", "page": "(Optional, integer) Page number to return", "platform": "(Optional, string) Filter for a specific mobile platform", "project_id": "(Optional, string) Filter for a specific Bitrise Project", "search": "(Optional, string) Search by bundle ID, package name, or app title"}}, {"name": "get_connected_app", "description": "Gives back a Release Management connected app for the authenticated account", "parameter": {"id": "(string) Identifier of the Release Management connected app"}}, {"name": "update_connected_app", "description": "Updates a connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier for your connected app", "store_app_id": "(string) The store identifier for your app", "connect_to_store": "(Optional, boolean) Check validity against the App Store or Google Play", "store_credential_id": "(Optional, string) Selection of credentials added on Bitrise"}}, {"name": "list_installable_artifacts", "description": "List Release Management installable artifacts of a connected app", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "after_date": "(Optional, string) Start of the interval for artifact creation/upload", "artifact_type": "(Optional, string) Filter for a specific artifact type", "before_date": "(Optional, string) End of the interval for artifact creation/upload", "branch": "(Optional, string) Filter for the Bitrise CI branch", "distribution_ready": "(Optional, boolean) Filter for distribution ready artifacts", "items_per_page": "(Optional, integer) Maximum number of artifacts per page", "page": "(Optional, integer) Page number to return", "platform": "(Optional, string) Filter for a specific mobile platform", "search": "(Optional, string) Search by version, filename or build number", "source": "(Optional, string) Filter for the source of installable artifacts", "store_signed": "(Optional, boolean) Filter for store ready installable artifacts", "version": "(Optional, string) Filter for a specific version", "workflow": "(Optional, string) Filter for a specific Bitrise CI workflow"}}, {"name": "generate_installable_artifact_upload_url", "description": "Generates a signed upload URL for an installable artifact to be uploaded to Bitrise", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) An uuidv4 identifier for the installable artifact", "file_name": "(string) The name of the installable artifact file", "file_size_bytes": "(integer) The byte size of the installable artifact file", "branch": "(Optional, string) Name of the CI branch", "with_public_page": "(Optional, boolean) Enable public install page", "workflow": "(Optional, string) Name of the CI workflow"}}, {"name": "get_installable_artifact_upload_and_processing_status", "description": "Gets the processing and upload status of an installable artifact", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) The uuidv4 identifier for the installable artifact"}}, {"name": "set_installable_artifact_public_install_page", "description": "Changes whether public install page should be available for the installable artifact", "parameter": {"connected_app_id": "(string) Identifier of the Release Management connected app", "installable_artifact_id": "(string) The uuidv4 identifier for the installable artifact", "with_public_page": "(boolean) Boolean flag for enabling/disabling public install page"}}, {"name": "list_build_distribution_versions", "description": "Lists Build Distribution versions available for testers", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "items_per_page": "(Optional, integer) Maximum number of versions per page", "page": "(Optional, integer) Page number to return"}}, {"name": "list_build_distribution_version_test_builds", "description": "Gives back a list of test builds for the given build distribution version", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "version": "(string) The version of the build distribution", "items_per_page": "(Optional, integer) Maximum number of test builds per page", "page": "(Optional, integer) Page number to return"}}, {"name": "create_tester_group", "description": "Creates a tester group for a Release Management connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "name": "(string) The name for the new tester group", "auto_notify": "(Optional, boolean) Indicates automatic notifications for the group"}}, {"name": "notify_tester_group", "description": "Notifies a tester group about a new test build", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "test_build_id": "(string) The unique identifier of the test build"}}, {"name": "add_testers_to_tester_group", "description": "Adds testers to a tester group of a connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "user_slugs": "(array) The list of users identified by slugs to be added"}}, {"name": "update_tester_group", "description": "Updates the given tester group settings", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "auto_notify": "(Optional, boolean) Setting for automatic email notifications", "name": "(Optional, string) The new name for the tester group"}}, {"name": "list_tester_groups", "description": "Gives back a list of tester groups related to a specific connected app", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "items_per_page": "(Optional, integer) Maximum number of tester groups per page", "page": "(Optional, integer) Page number to return"}}, {"name": "get_tester_group", "description": "Gives back the details of the selected tester group", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group"}}, {"name": "get_potential_testers", "description": "Gets a list of potential testers who can be added to a specific tester group", "parameter": {"connected_app_id": "(string) The uuidV4 identifier of the connected app", "id": "(string) The uuidV4 identifier of the tester group", "items_per_page": "(Optional, integer) Maximum number of potential testers per page", "page": "(Optional, integer) Page number to return", "search": "(Optional, string) Search for testers by email or username"}}]}
{"name": "Box", "description": "Interact with the Intelligent Content Management platform through Box AI.", "url": "https://github.com/box-community/mcp-server-box", "readme_file": "official/Box.md", "summary": "A Python project that integrates with the Box API to perform various operations such as file search, text extraction, AI-based querying, and data extraction. It leverages the `box-sdk-gen` library and provides a set of tools to interact with Box files and folders.", "tools": [{"name": "box_who_am_i", "description": "Get your current user information and check connection status.", "parameter": {}}, {"name": "box_authorize_app_tool", "description": "Start the Box application authorization process.", "parameter": {}}, {"name": "box_search_tool", "description": "Search for files in Box.", "parameter": {"query": "(str) The query to search for.", "file_extensions": "(List[str], optional) File extensions to filter results.", "where_to_look_for_query": "(List[str], optional) Locations to search (e.g. NAME, DESCRIPTION, FILE_CONTENT, COMMENTS, TAG).", "ancestor_folder_ids": "(List[str], optional) List of folder IDs in which to search."}}, {"name": "box_read_tool", "description": "Read the text content of a Box file.", "parameter": {"file_id": "(str) ID of the file to read"}}, {"name": "box_ask_ai_tool", "description": "Ask Box AI about a file.", "parameter": {"file_id": "(str) ID of the file", "prompt": "(str) Question for the AI"}}, {"name": "box_hubs_ask_ai_tool", "description": "Ask Box AI about a hub. There is currently no way via API to discover a hub ID, so you must know the ID to use this tool. We will fix this in the future.", "parameter": {"hubs_id": "(str) ID of the hub", "prompt": "(str) Question for the AI"}}, {"name": "box_search_folder_by_name", "description": "Locate a folder by name.", "parameter": {"folder_name": "(str) Name of the folder"}}, {"name": "box_ai_extract_data", "description": "Extract data from a file using AI.", "parameter": {"file_id": "(str) ID of the file", "fields": "(str) Fields to extract"}}, {"name": "box_list_folder_content_by_folder_id", "description": "List folder contents.", "parameter": {"folder_id": "(str) ID of the folder", "is_recursive": "(bool) Whether to list recursively"}}, {"name": "box_manage_folder_tool", "description": "Create, update, or delete folders in Box.", "parameter": {"action": "(str) Action to perform: 'create', 'delete', or 'update'", "folder_id": "(str, optional) ID of the folder (required for delete/update)", "name": "(str, optional) Folder name (required for create, optional for update)", "parent_id": "(str, optional) Parent folder ID (required for create, optional for update)", "description": "(str, optional) Folder description (optional for update)", "recursive": "(bool, optional) Whether to delete recursively (optional for delete)"}}, {"name": "box_upload_file_from_path_tool", "description": "Upload a file to Box from a local filesystem path.", "parameter": {"file_path": "(str) Local file path", "folder_id": "(str, optional) Destination folder ID (defaults to '0')", "new_file_name": "(str, optional) New file name (if not provided, uses the original file name)"}}, {"name": "box_upload_file_from_content_tool", "description": "Upload content as a file to Box.", "parameter": {"content": "(str | bytes) Content to upload (text or binary)", "file_name": "(str) The name to assign the file", "folder_id": "(str, optional) Destination folder ID (defaults to '0')", "is_base64": "(bool, optional) Indicates if the provided content is base64 encoded"}}, {"name": "box_download_file_tool", "description": "Download a file from Box.", "parameter": {"file_id": "(str) The ID of the file to download", "save_file": "(bool, optional) Whether to save the file locally", "save_path": "(str, optional) The local path where the file should be saved"}}, {"name": "box_docgen_create_batch_tool", "description": "Generate documents using a Box Doc Gen template and a local JSON file.", "parameter": {"file_id": "(str) Template file ID", "destination_folder_id": "(str) Folder ID where generated documents should be stored", "user_input_file_path": "(str) Path to a JSON file with input data", "output_type": "(str, optional) Output format (default is 'pdf')"}}, {"name": "box_docgen_get_job_tool", "description": "Fetch a single Doc Gen job by its ID.", "parameter": {"job_id": "(str) The job identifier"}}, {"name": "box_docgen_list_jobs_tool", "description": "List all Doc Gen jobs associated with the current user.", "parameter": {"marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to return"}}, {"name": "box_docgen_list_jobs_by_batch_tool", "description": "List Doc Gen jobs belonging to a specific batch.", "parameter": {"batch_id": "(str) The batch identifier", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to return"}}, {"name": "box_docgen_template_create_tool", "description": "Mark a file as a Box Doc Gen template.", "parameter": {"file_id": "(str) File ID to mark as a template"}}, {"name": "box_docgen_template_list_tool", "description": "List all available Box Doc Gen templates.", "parameter": {"marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of templates to list"}}, {"name": "box_docgen_template_delete_tool", "description": "Remove the Doc Gen template marking from a file.", "parameter": {"template_id": "(str) The template identifier"}}, {"name": "box_docgen_template_get_by_id_tool", "description": "Retrieve details of a specific Doc Gen template.", "parameter": {"template_id": "(str) The template identifier"}}, {"name": "box_docgen_template_list_tags_tool", "description": "List all tags associated with a Box Doc Gen template.", "parameter": {"template_id": "(str) The template ID", "template_version_id": "(str | None, optional) Specific version ID", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of tags to return"}}, {"name": "box_docgen_template_list_jobs_tool", "description": "List all Doc Gen jobs that used a specific template.", "parameter": {"template_id": "(str) The template identifier", "marker": "(str | None, optional) Pagination marker", "limit": "(int | None, optional) Maximum number of jobs to list"}}]}
{"name": "Chroma", "description": "Embeddings, vector search, document storage, and full-text search with the open-source AI application database", "url": "https://github.com/chroma-core/chroma-mcp", "readme_file": "official/Chroma.md", "summary": "An MCP server that provides data retrieval capabilities powered by Chroma, enabling AI models to create and manage collections of data and perform various operations like vector search, full text search, and metadata filtering.", "tools": [{"name": "chroma_list_collections", "description": "List all collections with pagination support", "parameter": {}}, {"name": "chroma_create_collection", "description": "Create a new collection with optional HNSW configuration", "parameter": {}}, {"name": "chroma_peek_collection", "description": "View a sample of documents in a collection", "parameter": {}}, {"name": "chroma_get_collection_info", "description": "Get detailed information about a collection", "parameter": {}}, {"name": "chroma_get_collection_count", "description": "Get the number of documents in a collection", "parameter": {}}, {"name": "chroma_modify_collection", "description": "Update a collection's name or metadata", "parameter": {}}, {"name": "chroma_delete_collection", "description": "Delete a collection", "parameter": {}}, {"name": "chroma_add_documents", "description": "Add documents with optional metadata and custom IDs", "parameter": {}}, {"name": "chroma_query_documents", "description": "Query documents using semantic search with advanced filtering", "parameter": {}}, {"name": "chroma_get_documents", "description": "Retrieve documents by IDs or filters with pagination", "parameter": {}}, {"name": "chroma_update_documents", "description": "Update existing documents' content, metadata, or embeddings", "parameter": {}}, {"name": "chroma_delete_documents", "description": "Delete specific documents from a collection", "parameter": {}}]}
{"name": "CircleCI", "description": "Enable AI Agents to fix build failures from CircleCI.", "url": "https://github.com/CircleCI-Public/mcp-server-circleci", "readme_file": "official/CircleCI.md", "summary": "An MCP Server for CircleCI that allows users to interact with CircleCI using natural language through various MCP clients such as Cursor IDE, VS Code, Claude Desktop, Claude Code, and Windsurf. It provides tools for retrieving build failure logs, finding flaky tests, getting the latest pipeline status, retrieving job test results, validating CircleCI configurations, creating prompt templates, and generating test cases for prompt templates.", "tools": [{"name": "get_build_failure_logs", "description": "Retrieves detailed failure logs from CircleCI builds. Can be used with CircleCI URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI URL or a combination of workspace root path, Git remote URL, and branch name"}}, {"name": "find_flaky_tests", "description": "Identifies flaky tests in a CircleCI project by analyzing test execution history. Can be used with CircleCI project URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI project URL or a combination of workspace root path and Git remote URL"}}, {"name": "get_latest_pipeline_status", "description": "Retrieves the status of the latest pipeline for a given branch. Can be used with CircleCI project URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI project URL or a combination of workspace root path, Git remote URL, and branch name"}}, {"name": "get_job_test_results", "description": "Retrieves test metadata for CircleCI jobs. Can be used with CircleCI URLs or local project context.", "parameter": {"url_or_context": "(string) Either a CircleCI URL (job, workflow, or pipeline) or a combination of workspace root path, Git remote URL, and branch name"}}, {"name": "config_helper", "description": "Assists with CircleCI configuration tasks by providing guidance and validation. Can validate CircleCI config files.", "parameter": {"config_path": "(string) Path to the .circleci/config.yml file"}}, {"name": "create_prompt_template", "description": "Helps generate structured prompt templates for AI-enabled applications based on feature requirements.", "parameter": {"requirements": "(string) User requirements for the prompt template"}}, {"name": "recommend_prompt_template_tests", "description": "Generates test cases for prompt templates to ensure they produce expected results.", "parameter": {"template": "(string) The prompt template to generate tests for"}}]}
{"name": "ClickHouse", "description": "Query your ClickHouse database server.", "url": "https://github.com/ClickHouse/mcp-clickhouse", "readme_file": "official/ClickHouse.md", "summary": "An MCP server designed to interact with ClickHouse clusters, providing tools to execute SQL queries, list databases, and list tables within a database.", "tools": [{"name": "run_select_query", "description": "Execute SQL queries on your ClickHouse cluster.", "parameter": {"sql": "(string) The SQL query to execute."}}, {"name": "list_databases", "description": "List all databases on your ClickHouse cluster.", "parameter": {}}, {"name": "list_tables", "description": "List all tables in a database.", "parameter": {"database": "(string) The name of the database."}}]}
{"name": "Codacy", "description": "Interact with Codacy API to query code quality issues, vulnerabilities, and coverage insights about your code.", "url": "https://github.com/codacy/codacy-mcp-server/", "readme_file": "official/Codacy.md", "summary": "MCP Server for the Codacy API, enabling access to repositories, files, quality, coverage, security, and more.", "tools": [{"name": "codacy_list_organizations", "description": "List organizations with pagination support.", "parameter": {}}, {"name": "codacy_list_organization_repositories", "description": "List repositories in an organization with pagination support.", "parameter": {}}, {"name": "codacy_get_repository_with_analysis", "description": "Get repository with analysis information, including metrics for Grade, Issues, Duplication, Complexity, and Coverage.", "parameter": {}}, {"name": "codacy_list_repository_issues", "description": "Lists and filters code quality issues in a repository. This is the primary tool for investigating general code quality concerns (e.g., best practices, performance, complexity, style) but NOT security issues. For security-related issues, use the SRM items tool instead.", "parameter": {"severity": "(Optional, string) Filter by issue severity", "category": "(Optional, string) Filter by issue category", "language": "(Optional, string) Filter by programming language", "author": "(Optional, string) Filter by author", "branch": "(Optional, string) Specify the branch for analysis", "pattern": "(Optional, string) Pattern-based searching"}}, {"name": "codacy_list_files", "description": "List files in a repository with pagination support.", "parameter": {}}, {"name": "codacy_get_file_issues", "description": "Get the issue list for a file in a repository.", "parameter": {}}, {"name": "codacy_get_file_coverage", "description": "Get coverage information for a file in the head commit of a repository branch.", "parameter": {}}, {"name": "codacy_get_file_clones", "description": "Get the list of duplication clones (identical or very similar code segments) for a file in a repository.", "parameter": {}}, {"name": "codacy_get_file_with_analysis", "description": "Get detailed analysis information for a file, including metrics for Grade, Issues, Duplication, Complexity, and Coverage.", "parameter": {}}, {"name": "codacy_search_organization_srm_items", "description": "Primary tool to list security items/issues/vulnerabilities/findings across an organization. Results are related to the organization's security and risk management (SRM) dashboard on Codacy.", "parameter": {}}, {"name": "codacy_search_repository_srm_items", "description": "List security items/issues/vulnerabilities/findings for a specific repository.", "parameter": {}}, {"name": "codacy_list_repository_pull_requests", "description": "List pull requests from a repository that the user has access to.", "parameter": {}}, {"name": "codacy_get_repository_pull_request", "description": "Get detailed information about a specific pull request.", "parameter": {}}, {"name": "codacy_list_pull_request_issues", "description": "Returns a list of issues found in a pull request (new or fixed issues).", "parameter": {}}, {"name": "codacy_get_pull_request_files_coverage", "description": "Get diff coverage information for all files in a pull request.", "parameter": {}}, {"name": "codacy_get_pull_request_git_diff", "description": "Returns the human-readable Git diff of a pull request.", "parameter": {}}, {"name": "codacy_list_tools", "description": "List all code analysis tools available in Codacy.", "parameter": {}}, {"name": "codacy_list_repository_tools", "description": "Get analysis tools settings and available tools for a repository.", "parameter": {}}, {"name": "codacy_get_pattern", "description": "Get the definition of a specific pattern.", "parameter": {}}, {"name": "codacy_list_repository_tool_patterns", "description": "List the patterns of a tool available for a repository.", "parameter": {}}, {"name": "codacy_get_issue", "description": "Get detailed information about a specific issue.", "parameter": {}}, {"name": "codacy_cli_analyze", "description": "Run quality analysis locally using Codacy CLI. Features include analyzing specific files or entire directories, using specific tools or all available tools, getting immediate results without waiting for scheduled analysis, and applying fixes based on Codacy configuration.", "parameter": {}}]}
{"name": "CodeLogic", "description": "Interact with CodeLogic, a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.", "url": "https://github.com/CodeLogicIncEngineering/codelogic-mcp-server", "readme_file": "official/CodeLogic.md", "summary": "An MCP Server that leverages Codelogic's rich software dependency data to provide impact assessments for code and database modifications in AI programming assistants.", "tools": [{"name": "codelogic-method-impact", "description": "Pulls an impact assessment from the CodeLogic server's APIs for the specified code method and class.", "parameter": {"method": "(string) The method that you're working on", "class": "(string) The class associated with the method"}}, {"name": "codelogic-database-impact", "description": "Analyzes impacts between code and database entities.", "parameter": {"entity_type": "(string) The type of database entity (column, table, or view)", "entity_name": "(string) The name of the database entity"}}]}
{"name": "Comet Opik", "description": "Query and analyze your Opik logs, traces, prompts and all other telemtry data from your LLMs in natural language.", "url": "https://github.com/comet-ml/opik-mcp", "readme_file": "official/Comet_Opik.md", "summary": "An open-source implementation of the Model Context Protocol for the Opik platform, providing a unified interface for interacting with Opik's capabilities and supporting multiple transport mechanisms for flexible integration into various environments.", "tools": [{"name": "Prompts Management", "description": "Create, list, update, and delete prompts", "parameter": {}}, {"name": "Projects/Workspaces Management", "description": "Organize and manage projects", "parameter": {}}, {"name": "Traces", "description": "Track and analyze trace data", "parameter": {}}, {"name": "Metrics", "description": "Gather and query metrics data", "parameter": {}}]}
{"name": "Couchbase", "description": "Interact with the data stored in Couchbase clusters.", "url": "https://github.com/Couchbase-Ecosystem/mcp-server-couchbase", "readme_file": "official/Couchbase.md", "summary": "An MCP server implementation of Couchbase that enables LLMs to interact directly with Couchbase clusters, allowing for CRUD operations and SQL++ queries.", "tools": [{"name": "get_scopes_and_collections", "description": "Get a list of all the scopes and collections in the specified bucket.", "parameter": {}}, {"name": "get_collection_structure", "description": "Get the structure for a collection.", "parameter": {}}, {"name": "get_document_by_id", "description": "Get a document by ID from a specified scope and collection.", "parameter": {}}, {"name": "upsert_document_by_id", "description": "Upsert a document by ID to a specified scope and collection.", "parameter": {}}, {"name": "delete_document_by_id", "description": "Delete a document by ID from a specified scope and collection.", "parameter": {}}, {"name": "run_sqlpp_query", "description": "Run a SQL++ query on a specified scope. The `READ_ONLY_QUERY_MODE` environment variable controls whether data-modifying queries are allowed.", "parameter": {}}]}
{"name": "Dart", "description": "Interact with task, doc, and project data in Dart, an AI-native project management tool", "url": "https://github.com/its-dart/dart-mcp-server", "readme_file": "official/Dart.md", "summary": "The official AI Model Context Protocol (MCP) server for Dart, providing AI-powered project management capabilities such as task and document management.", "tools": [{"name": "get_config", "description": "Get information about the user's space, including available assignees, dartboards, folders, statuses, tags, priorities, and sizes", "parameter": {}}, {"name": "list_tasks", "description": "List tasks with optional filtering by assignee, status, dartboard, priority, due date, and more", "parameter": {}}, {"name": "create_task", "description": "Create a new task with title, description, status, priority, size, dates, dartboard, assignees, tags, and parent task", "parameter": {}}, {"name": "get_task", "description": "Retrieve an existing task by its ID", "parameter": {}}, {"name": "update_task", "description": "Update an existing task's properties", "parameter": {}}, {"name": "delete_task", "description": "Move a task to the trash (recoverable)", "parameter": {}}, {"name": "list_docs", "description": "List docs with optional filtering by folder, title, text content, and more", "parameter": {}}, {"name": "create_doc", "description": "Create a new doc with title, text content, and folder", "parameter": {}}, {"name": "get_doc", "description": "Retrieve an existing doc by its ID", "parameter": {}}, {"name": "update_doc", "description": "Update an existing doc's properties", "parameter": {}}, {"name": "delete_doc", "description": "Move a doc to the trash (recoverable)", "parameter": {}}]}
{"name": "DevHub", "description": "Manage and utilize website content within the DevHub CMS platform", "url": "https://github.com/devhub/devhub-cms-mcp", "readme_file": "official/DevHub.md", "summary": "A Model Context Protocol (MCP) integration for managing content in the DevHub CMS system. It allows Large Language Models to manage businesses, locations, blog posts, and media without direct API access.", "tools": [{"name": "get_businesses", "description": "Gets all businesses within the DevHub account. Returns a list of businesses with their IDs and names.", "parameter": {}}, {"name": "get_locations", "description": "Gets all locations for a specific business. Returns detailed location information including address, coordinates, and URLs.", "parameter": {"business_id": "(string) The ID of the business."}}, {"name": "get_hours_of_operation", "description": "Gets the hours of operation for a specific DevHub location. Returns a structured list of time ranges for each day of the week.", "parameter": {"location_id": "(string) The ID of the location.", "hours_type": "(Optional, string) The type of hours to retrieve, default is 'primary'."}}, {"name": "update_hours", "description": "Updates the hours of operation for a DevHub location.", "parameter": {"location_id": "(string) The ID of the location.", "new_hours": "(dict) The new hours of operation.", "hours_type": "(Optional, string) The type of hours to update, default is 'primary'."}}, {"name": "get_nearest_location", "description": "Finds the nearest DevHub location based on geographic coordinates.", "parameter": {"business_id": "(string) The ID of the business.", "latitude": "(float) The latitude coordinate.", "longitude": "(float) The longitude coordinate."}}, {"name": "site_from_url", "description": "Gets the DevHub site ID and details from a URL. Returns site ID, URL, and associated location IDs.", "parameter": {"url": "(string) The URL of the DevHub site."}}, {"name": "get_blog_post", "description": "Retrieves a single blog post by ID, including its title, date, and HTML content.", "parameter": {"post_id": "(string) The ID of the blog post."}}, {"name": "create_blog_post", "description": "Creates a new blog post. The content should be in HTML format and should not include an H1 tag.", "parameter": {"site_id": "(string) The ID of the site where the blog post will be created.", "title": "(string) The title of the blog post.", "content": "(string) The HTML content of the blog post."}}, {"name": "update_blog_post", "description": "Updates an existing blog post's title and/or content.", "parameter": {"post_id": "(string) The ID of the blog post.", "title": "(Optional, string) The new title of the blog post.", "content": "(Optional, string) The new HTML content of the blog post."}}, {"name": "upload_image", "description": "Uploads an image to the DevHub media gallery. Supports webp, jpeg, and png formats. The image must be provided as a base64-encoded string.", "parameter": {"base64_image_content": "(string) The base64-encoded content of the image.", "filename": "(string) The filename of the image."}}]}
{"name": "Dynatrace", "description": "Manage and interact with the Dynatrace Platform  for real-time observability and monitoring.", "url": "https://github.com/dynatrace-oss/dynatrace-mcp", "readme_file": "official/Dynatrace.md", "summary": "A remote MCP server that enables interaction with the Dynatrace observability platform, allowing real-time observability data to be integrated into development workflows. It supports fetching production-level data, monitoring exceptions, logs, and anomalies, and provides more context on security issues.", "tools": [{"name": "list_problems", "description": "Lists problem details from your services, such as Kubernetes.", "parameter": {}}, {"name": "get_security_problems", "description": "Lists and retrieves security problems or vulnerability details.", "parameter": {}}, {"name": "execute_dql", "description": "Executes DQL (Dynatrace Query Language) queries to fetch events or logs.", "parameter": {}}, {"name": "send_slack_message", "description": "Sends Slack messages using the Slack Connector.", "parameter": {}}, {"name": "set_up_notification_workflow", "description": "Sets up notification workflows using the Dynatrace Automation Engine.", "parameter": {}}, {"name": "get_ownership", "description": "Retrieves ownership information of an entity.", "parameter": {}}]}
{"name": "EduBase", "description": "Interact with EduBase, a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities", "url": "https://github.com/EduBase/MCP", "readme_file": "official/EduBase.md", "summary": "The EduBase MCP server implements the Model Context Protocol for the EduBase platform, enabling MCP clients and LLMs to interact with EduBase accounts and perform various educational tasks.", "tools": [{"name": "edubase_get_user", "description": "Retrieves user information from the EduBase platform.", "parameter": {}}]}
{"name": "Elasticsearch", "description": "Query your data in Elasticsearch", "url": "https://github.com/elastic/mcp-server-elasticsearch", "readme_file": "official/Elasticsearch.md", "summary": "This server connects agents to your Elasticsearch data using the Model Context Protocol, allowing interaction with Elasticsearch indices through natural language conversations.", "tools": [{"name": "list_indices", "description": "List all available Elasticsearch indices", "parameter": {}}, {"name": "get_mappings", "description": "Get field mappings for a specific Elasticsearch index", "parameter": {}}, {"name": "search", "description": "Perform an Elasticsearch search with the provided query DSL", "parameter": {}}, {"name": "get_shards", "description": "Get shard information for all or specific indices", "parameter": {}}]}
{"name": "eSignatures", "description": "Contract and template management for drafting, reviewing, and sending binding contracts.", "url": "https://github.com/esignaturescom/mcp-server-esignatures", "readme_file": "official/eSignatures.md", "summary": "MCP server for eSignatures, providing functionalities to manage contracts and templates, including creation, querying, updating, withdrawing, deleting, and listing. It also supports managing collaborators for templates.", "tools": [{"name": "create_contract", "description": "Draft for review or send contract", "parameter": {}}, {"name": "query_contract", "description": "Retrieve contract info", "parameter": {}}, {"name": "withdraw_contract", "description": "Withdraw an unsigned contract", "parameter": {}}, {"name": "delete_contract", "description": "Delete a draft or test contract", "parameter": {}}, {"name": "list_recent_contracts", "description": "List the recent contracts", "parameter": {}}, {"name": "create_template", "description": "Create a new contract template", "parameter": {}}, {"name": "update_template", "description": "Update an existing template", "parameter": {}}, {"name": "query_template", "description": "Retrieve template content and info", "parameter": {}}, {"name": "delete_template", "description": "Delete a template", "parameter": {}}, {"name": "list_templates", "description": "List all your templates", "parameter": {}}, {"name": "add_template_collaborator", "description": "Invite someone to edit a template", "parameter": {}}, {"name": "remove_template_collaborator", "description": "Revoke template editing rights", "parameter": {}}, {"name": "list_template_collaborators", "description": "View who can edit a template", "parameter": {}}]}
{"name": "Exa", "description": "Search Engine made for AIs by Exa", "url": "https://github.com/exa-labs/exa-mcp-server", "readme_file": "official/Exa.md", "summary": "A Model Context Protocol (MCP) server that enables AI assistants like Claude to use the Exa AI Search API for real-time web searches, providing safe and controlled access to web information.", "tools": [{"name": "web_search_exa", "description": "Performs real-time web searches with optimized results and content extraction.", "parameter": {}}, {"name": "research_paper_search", "description": "Specialized search focused on academic papers and research content.", "parameter": {}}, {"name": "company_research", "description": "Comprehensive company research tool that crawls company websites to gather detailed information about businesses.", "parameter": {}}, {"name": "crawling", "description": "Extracts content from specific URLs, useful for reading articles, PDFs, or any web page when you have the exact URL.", "parameter": {}}, {"name": "competitor_finder", "description": "Identifies competitors of a company by searching for businesses offering similar products or services.", "parameter": {}}, {"name": "linkedin_search", "description": "Search LinkedIn for companies and people using Exa AI. Simply include company names, person names, or specific LinkedIn URLs in your query.", "parameter": {}}, {"name": "wikipedia_search_exa", "description": "Search and retrieve information from Wikipedia articles on specific topics, giving you accurate, structured knowledge from the world's largest encyclopedia.", "parameter": {}}, {"name": "github_search", "description": "Search GitHub repositories using Exa AI - performs real-time searches on GitHub.com to find relevant repositories, issues, and GitHub accounts.", "parameter": {}}]}
{"name": "Fewsats", "description": "Enable AI Agents to purchase anything in a secure way using Fewsats", "url": "https://github.com/Fewsats/fewsats-mcp", "readme_file": "official/Fewsats.md", "summary": "A Fewsats MCP Server that integrates with Fewsats and allows AI Agents to securely purchase items.", "tools": [{"name": "balance", "description": "Retrieve the balance of the user's wallet", "parameter": {}}, {"name": "payment_methods", "description": "Retrieve the user's payment methods", "parameter": {}}, {"name": "pay_offer", "description": "Pays an offer with the specified ID from the l402_offers", "parameter": {"offer_id": "(string) String identifier for the offer", "l402_offer": "(object) Offer details containing: offers (Array of offer objects with ID, amount, currency, description, title), payment_context_token (Payment context token string), payment_request_url (URL for payment request), version (API version string)"}}, {"name": "payment_info", "description": "Retrieve the details of a payment", "parameter": {"pid": "(string) Payment ID to retrieve information for"}}]}
{"name": "Fibery", "description": "Perform queries and entity operations in your Fibery workspace.", "url": "https://github.com/Fibery-inc/fibery-mcp-server", "readme_file": "official/Fibery.md", "summary": "This MCP server provides integration between Fibery and any LLM provider supporting the MCP protocol, enabling interaction with Fibery workspaces using natural language.", "tools": [{"name": "list_databases", "description": "Retrieves a list of all databases available in your Fibery workspace.", "parameter": {}}, {"name": "describe_database", "description": "Provides a detailed breakdown of a specific database's structure, showing all fields with their titles, names, and types.", "parameter": {}}, {"name": "query_database", "description": "Offers powerful, flexible access to your Fibery data through the Fibery API.", "parameter": {}}, {"name": "create_entity", "description": "Creates new entities in your Fibery workspace with specified field values.", "parameter": {}}, {"name": "create_entities_batch", "description": "Creates multiple new entities in your Fibery workspace with specified field values.", "parameter": {}}, {"name": "update_entity", "description": "Updates existing entities in your Fibery workspace with new field values.", "parameter": {}}]}
{"name": "Financial Datasets", "description": "Stock market API made for AI agents", "url": "https://github.com/financial-datasets/mcp-server", "readme_file": "official/Financial_Datasets.md", "summary": "This MCP server provides access to stock market data, including income statements, balance sheets, cash flow statements, stock prices, and market news for companies, as well as historical and current prices for cryptocurrencies.", "tools": [{"name": "get_income_statements", "description": "Get income statements for a company.", "parameter": {}}, {"name": "get_balance_sheets", "description": "Get balance sheets for a company.", "parameter": {}}, {"name": "get_cash_flow_statements", "description": "Get cash flow statements for a company.", "parameter": {}}, {"name": "get_current_stock_price", "description": "Get the current / latest price of a company.", "parameter": {}}, {"name": "get_historical_stock_prices", "description": "Gets historical stock prices for a company.", "parameter": {}}, {"name": "get_company_news", "description": "Get news for a company.", "parameter": {}}, {"name": "get_available_crypto_tickers", "description": "Gets all available crypto tickers.", "parameter": {}}, {"name": "get_crypto_prices", "description": "Gets historical prices for a crypto currency.", "parameter": {}}, {"name": "get_historical_crypto_prices", "description": "Gets historical prices for a crypto currency.", "parameter": {}}, {"name": "get_current_crypto_price", "description": "Get the current / latest price of a crypto currency.", "parameter": {}}]}
{"name": "Firecrawl", "description": "Extract web data with Firecrawl", "url": "https://github.com/mendableai/firecrawl-mcp-server", "readme_file": "official/Firecrawl.md", "summary": "A Model Context Protocol (MCP) server implementation that integrates with Firecrawl for web scraping capabilities, including scraping, crawling, searching, and extracting content with advanced options such as JS rendering, URL discovery, automatic retries, rate limiting, and smart content filtering.", "tools": [{"name": "firecrawl_scrape", "description": "Scrape content from a single URL with advanced options.", "parameter": {"url": "(string) The URL to scrape", "formats": "(array) List of formats to return (e.g., ['markdown'])", "onlyMainContent": "(boolean) Whether to only return the main content", "waitFor": "(number) Time to wait for page elements to load (in milliseconds)", "timeout": "(number) Maximum time to wait for the scrape to complete (in milliseconds)", "mobile": "(boolean) Whether to simulate a mobile device", "includeTags": "(array) List of tags to include in the scrape", "excludeTags": "(array) List of tags to exclude from the scrape", "skipTlsVerification": "(boolean) Whether to skip TLS verification"}}, {"name": "firecrawl_batch_scrape", "description": "Scrape multiple URLs efficiently with built-in rate limiting and parallel processing.", "parameter": {"urls": "(array) List of URLs to scrape", "options": "(object) Additional options for the scrape"}}, {"name": "firecrawl_check_batch_status", "description": "Check the status of a batch operation.", "parameter": {"id": "(string) The ID of the batch operation to check"}}, {"name": "firecrawl_search", "description": "Search the web and optionally extract content from search results.", "parameter": {"query": "(string) The search query", "limit": "(number) Maximum number of results to return", "lang": "(string) Language of the search results", "country": "(string) Country code for the search results", "scrapeOptions": "(object) Additional options for scraping the search results"}}, {"name": "firecrawl_crawl", "description": "Start an asynchronous crawl with advanced options.", "parameter": {"url": "(string) The starting URL for the crawl", "maxDepth": "(number) Maximum recursive depth for the crawl", "limit": "(number) Maximum number of URLs to crawl", "allowExternalLinks": "(boolean) Whether to follow external links", "deduplicateSimilarURLs": "(boolean) Whether to deduplicate similar URLs"}}, {"name": "firecrawl_extract", "description": "Extract structured information from web pages using LLM capabilities.", "parameter": {"urls": "(array) List of URLs to extract information from", "prompt": "(string) Custom prompt for the LLM extraction", "systemPrompt": "(string) System prompt to guide the LLM", "schema": "(object) JSON schema for structured data extraction", "allowExternalLinks": "(boolean) Allow extraction from external links", "enableWebSearch": "(boolean) Enable web search for additional context", "includeSubdomains": "(boolean) Include subdomains in extraction"}}, {"name": "firecrawl_deep_research", "description": "Conduct deep web research on a query using intelligent crawling, search, and LLM analysis.", "parameter": {"query": "(string, required) The research question or topic to explore", "maxDepth": "(number, optional) Maximum recursive depth for crawling/search (default: 3)", "timeLimit": "(number, optional) Time limit in seconds for the research session (default: 120)", "maxUrls": "(number, optional) Maximum number of URLs to analyze (default: 50)"}}, {"name": "firecrawl_generate_llmstxt", "description": "Generate a standardized llms.txt (and optionally llms-full.txt) file for a given domain.", "parameter": {"url": "(string, required) The base URL of the website to analyze", "maxUrls": "(number, optional) Max number of URLs to include (default: 10)", "showFullText": "(boolean, optional) Whether to include llms-full.txt contents in the response"}}]}
{"name": "Gitee", "description": "Gitee API integration, repository, issue, and pull request management, and more.", "url": "https://github.com/oschina/mcp-gitee", "readme_file": "official/Gitee.md", "summary": "A Model Context Protocol (MCP) server implementation for Gitee, providing tools for managing repositories, issues, pull requests, and notifications.", "tools": [{"name": "list_user_repos", "description": "List user authorized repositories", "parameter": {}}, {"name": "get_file_content", "description": "Get the content of a file in a repository", "parameter": {}}, {"name": "create_user_repo", "description": "Create a user repository", "parameter": {}}, {"name": "create_org_repo", "description": "Create an organization repository", "parameter": {}}, {"name": "create_enter_repo", "description": "Create an enterprise repository", "parameter": {}}, {"name": "fork_repository", "description": "Fork a repository", "parameter": {}}, {"name": "create_release", "description": "Create a release for a repository", "parameter": {}}, {"name": "list_releases", "description": "List repository releases", "parameter": {}}, {"name": "search_open_source_repositories", "description": "Search open source repositories on Gitee", "parameter": {}}, {"name": "list_repo_pulls", "description": "List pull requests in a repository", "parameter": {}}, {"name": "merge_pull", "description": "Merge a pull request", "parameter": {}}, {"name": "create_pull", "description": "Create a pull request", "parameter": {}}, {"name": "update_pull", "description": "Update a pull request", "parameter": {}}, {"name": "get_pull_detail", "description": "Get details of a pull request", "parameter": {}}, {"name": "comment_pull", "description": "Comment on a pull request", "parameter": {}}, {"name": "list_pull_comments", "description": "List all comments for a pull request", "parameter": {}}, {"name": "create_issue", "description": "Create an issue", "parameter": {}}, {"name": "update_issue", "description": "Update an issue", "parameter": {}}, {"name": "get_repo_issue_detail", "description": "Get details of a repository issue", "parameter": {}}, {"name": "list_repo_issues", "description": "List repository issues", "parameter": {}}, {"name": "comment_issue", "description": "Comment on an issue", "parameter": {}}, {"name": "list_issue_comments", "description": "List comments on an issue", "parameter": {}}, {"name": "get_user_info", "description": "Get current authenticated user information", "parameter": {}}, {"name": "search_users", "description": "Search for users", "parameter": {}}, {"name": "list_user_notifications", "description": "List user notifications", "parameter": {}}]}
{"name": "Gyazo", "description": "Search, fetch, upload, and interact with Gyazo images, including metadata and OCR data.", "url": "https://github.com/nota/gyazo-mcp-server", "readme_file": "official/Gyazo.md", "summary": "A TypeScript-based MCP server that provides access to Gyazo images, allowing AI assistants to interact with Gyazo images through the Model Context Protocol. It supports listing, searching, fetching, uploading, and accessing metadata of Gyazo images.", "tools": [{"name": "gyazo_search", "description": "Full-text search for captures uploaded by users on Gyazo", "parameter": {"keyword": "(string) Search by keyword, title, app, URL, or date range", "pagination": "(Optional, boolean) Supports pagination for browsing multiple results"}}, {"name": "gyazo_image", "description": "Fetch image content and metadata from Gyazo", "parameter": {"id_or_url": "(string) Retrieve specific images by ID or URL"}}, {"name": "gyazo_latest_image", "description": "Fetch the most recent image from Gyazo", "parameter": {}}, {"name": "gyazo_upload", "description": "Upload an image to Gyazo", "parameter": {"image_data": "(string) Base64 encoded image data", "title": "(Optional, string) Title of the image", "description": "(Optional, string) Description of the image", "referer_url": "(Optional, string) Referer URL", "app_name": "(Optional, string) App name"}}]}
{"name": "gotoHuman", "description": "Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your gotoHuman inbox.", "url": "https://github.com/gotohuman/gotohuman-mcp-server", "readme_file": "official/gotoHuman.md", "summary": "A fully-managed async human-in-the-loop workflow server that provides human approvals for AI agents and agentic workflows. It includes a customizable approval UI, built-in auth, webhooks, notifications, team features, and an evolving training dataset.", "tools": [{"name": "list-forms", "description": "List all available review forms.", "parameter": {}}, {"name": "get-form-schema", "description": "Get the schema to use when requesting a human review for a given form.", "parameter": {"formId": "(string) The form ID to fetch the schema for"}}, {"name": "request-human-review-with-form", "description": "Request a human review. Will appear in your gotoHuman inbox.", "parameter": {"formId": "(string) The form ID for the review", "fieldData": "(object) Content (AI-output to review, context,...) and configuration for the form's fields. The schema for this needs to be fetched with get-form-schema", "metadata": "(Optional, object) Optional additional data that will be incl. in the webhook response after form submission", "assignToUsers": "(Optional, array) Optional list of user emails to assign the review to"}}]}
{"name": "Grafana", "description": "Search dashboards, investigate incidents and query datasources in your Grafana instance", "url": "https://github.com/grafana/mcp-grafana", "readme_file": "official/Grafana.md", "summary": "A Model Context Protocol (MCP) server for Grafana, providing access to dashboards, datasources, alerts, incidents, and Grafana OnCall functionality.", "tools": [{"name": "search_dashboards", "description": "Search for dashboards", "parameter": {}}, {"name": "get_dashboard_by_uid", "description": "Get a dashboard by uid", "parameter": {}}, {"name": "update_dashboard", "description": "Update or create a new dashboard", "parameter": {}}, {"name": "list_datasources", "description": "List datasources", "parameter": {}}, {"name": "get_datasource_by_uid", "description": "Get a datasource by uid", "parameter": {}}, {"name": "get_datasource_by_name", "description": "Get a datasource by name", "parameter": {}}, {"name": "query_prometheus", "description": "Execute a query against a Prometheus datasource", "parameter": {}}, {"name": "list_prometheus_metric_metadata", "description": "List metric metadata", "parameter": {}}, {"name": "list_prometheus_metric_names", "description": "List available metric names", "parameter": {}}, {"name": "list_prometheus_label_names", "description": "List label names matching a selector", "parameter": {}}, {"name": "list_prometheus_label_values", "description": "List values for a specific label", "parameter": {}}, {"name": "list_incidents", "description": "List incidents in Grafana Incident", "parameter": {}}, {"name": "create_incident", "description": "Create an incident in Grafana Incident", "parameter": {}}, {"name": "add_activity_to_incident", "description": "Add an activity item to an incident in Grafana Incident", "parameter": {}}, {"name": "resolve_incident", "description": "Resolve an incident in Grafana Incident", "parameter": {}}, {"name": "query_loki_logs", "description": "Query and retrieve logs using LogQL (either log or metric queries)", "parameter": {}}, {"name": "list_loki_label_names", "description": "List all available label names in logs", "parameter": {}}, {"name": "list_loki_label_values", "description": "List values for a specific log label", "parameter": {}}, {"name": "query_loki_stats", "description": "Get statistics about log streams", "parameter": {}}, {"name": "list_alert_rules", "description": "List alert rules", "parameter": {}}, {"name": "get_alert_rule_by_uid", "description": "Get alert rule by UID", "parameter": {}}, {"name": "list_oncall_schedules", "description": "List schedules from Grafana OnCall", "parameter": {}}, {"name": "get_oncall_shift", "description": "Get details for a specific OnCall shift", "parameter": {}}, {"name": "get_current_oncall_users", "description": "Get users currently on-call for a specific schedule", "parameter": {}}, {"name": "list_oncall_teams", "description": "List teams from Grafana OnCall", "parameter": {}}, {"name": "list_oncall_users", "description": "List users from Grafana OnCall", "parameter": {}}, {"name": "get_investigation", "description": "Retrieve an existing Sift investigation by its UUID", "parameter": {}}, {"name": "get_analysis", "description": "Retrieve a specific analysis from a Sift investigation", "parameter": {}}, {"name": "list_investigations", "description": "Retrieve a list of Sift investigations with an optional limit", "parameter": {}}, {"name": "find_error_pattern_logs", "description": "Finds elevated error patterns in Loki logs", "parameter": {}}, {"name": "find_slow_requests", "description": "Finds slow requests from the relevant tempo datasources", "parameter": {}}]}
{"name": "Graphlit", "description": "Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable Graphlit project.", "url": "https://github.com/graphlit/graphlit-mcp-server", "readme_file": "official/Graphlit.md", "summary": "The MCP Server facilitates integration between MCP clients and the Graphlit service, enabling the ingestion and retrieval of knowledge from various sources into a searchable, RAG-ready knowledge base.", "tools": [{"name": "Query Contents", "description": "Searches and retrieves contents from the knowledge base.", "parameter": {}}, {"name": "Query Collections", "description": "Searches and retrieves collections from the knowledge base.", "parameter": {}}, {"name": "Query Feeds", "description": "Searches and retrieves feeds from the knowledge base.", "parameter": {}}, {"name": "Query Conversations", "description": "Searches and retrieves conversations from the knowledge base.", "parameter": {}}, {"name": "Retrieve Relevant Sources", "description": "Retrieves relevant sources based on a query.", "parameter": {}}, {"name": "Retrieve Similar Images", "description": "Retrieves images similar to a given image.", "parameter": {}}, {"name": "Visually Describe Image", "description": "Provides a visual description of an image.", "parameter": {}}, {"name": "Prompt LLM Conversation", "description": "Initiates a conversation with a language model.", "parameter": {}}, {"name": "Extract Structured JSON from Text", "description": "Extracts structured JSON data from text.", "parameter": {}}, {"name": "Publish as Audio (ElevenLabs Audio)", "description": "Publishes content as audio using ElevenLabs.", "parameter": {}}, {"name": "Publish as Image (OpenAI Image Generation)", "description": "Publishes content as an image using OpenAI.", "parameter": {}}, {"name": "Files", "description": "Ingests files into the knowledge base.", "parameter": {}}, {"name": "Web Pages", "description": "Ingests web pages into the knowledge base.", "parameter": {}}, {"name": "Messages", "description": "Ingests messages from communication platforms into the knowledge base.", "parameter": {}}, {"name": "Posts", "description": "Ingests posts from social media platforms into the knowledge base.", "parameter": {}}, {"name": "Emails", "description": "Ingests emails into the knowledge base.", "parameter": {}}, {"name": "Issues", "description": "Ingests issues from project management tools into the knowledge base.", "parameter": {}}, {"name": "Text", "description": "Ingests plain text into the knowledge base.", "parameter": {}}, {"name": "Memory (Short-Term)", "description": "Ingests short-term memory data into the knowledge base.", "parameter": {}}, {"name": "Microsoft Outlook email", "description": "Connects to Microsoft Outlook to ingest emails.", "parameter": {}}, {"name": "Google Mail", "description": "Connects to Google Mail to ingest emails.", "parameter": {}}, {"name": "Notion", "description": "Connects to Notion to ingest data.", "parameter": {}}, {"name": "Reddit", "description": "Connects to Reddit to ingest data.", "parameter": {}}, {"name": "Linear", "description": "Connects to Linear to ingest data.", "parameter": {}}, {"name": "Jira", "description": "Connects to Jira to ingest data.", "parameter": {}}, {"name": "GitHub Issues", "description": "Connects to GitHub to ingest issues.", "parameter": {}}, {"name": "Google Drive", "description": "Connects to Google Drive to ingest files.", "parameter": {}}, {"name": "OneDrive", "description": "Connects to OneDrive to ingest files.", "parameter": {}}, {"name": "SharePoint", "description": "Connects to SharePoint to ingest files.", "parameter": {}}, {"name": "Dropbox", "description": "Connects to Dropbox to ingest files.", "parameter": {}}, {"name": "Box", "description": "Connects to Box to ingest files.", "parameter": {}}, {"name": "GitHub", "description": "Connects to GitHub to ingest repositories and files.", "parameter": {}}, {"name": "Slack", "description": "Connects to Slack to ingest messages and files.", "parameter": {}}, {"name": "Microsoft Teams", "description": "Connects to Microsoft Teams to ingest messages and files.", "parameter": {}}, {"name": "Discord", "description": "Connects to Discord to ingest messages and files.", "parameter": {}}, {"name": "Twitter/X", "description": "Connects to Twitter/X to ingest tweets and media.", "parameter": {}}, {"name": "Podcasts (RSS)", "description": "Connects to podcast RSS feeds to ingest episodes.", "parameter": {}}, {"name": "Web Crawling", "description": "Crawls web pages and ingests the content.", "parameter": {}}, {"name": "Web Search (including Podcast Search)", "description": "Performs web searches and ingests the results.", "parameter": {}}, {"name": "Web Mapping", "description": "Maps and visualizes web content.", "parameter": {}}, {"name": "Screenshot Page", "description": "Takes screenshots of web pages and ingests them.", "parameter": {}}, {"name": "Slack", "description": "Sends notifications to Slack.", "parameter": {}}, {"name": "Email", "description": "Sends notifications via email.", "parameter": {}}, {"name": "Webhook", "description": "Sends notifications via webhook.", "parameter": {}}, {"name": "Twitter/X", "description": "Sends notifications to Twitter/X.", "parameter": {}}, {"name": "Configure Project", "description": "Configures a project in the knowledge base.", "parameter": {}}, {"name": "Create Collection", "description": "Creates a new collection in the knowledge base.", "parameter": {}}, {"name": "Add Contents to Collection", "description": "Adds contents to an existing collection.", "parameter": {}}, {"name": "Remove Contents from Collection", "description": "Removes contents from an existing collection.", "parameter": {}}, {"name": "Delete Collection(s)", "description": "Deletes one or more collections from the knowledge base.", "parameter": {}}, {"name": "Delete Feed(s)", "description": "Deletes one or more feeds from the knowledge base.", "parameter": {}}, {"name": "Delete Content(s)", "description": "Deletes one or more contents from the knowledge base.", "parameter": {}}, {"name": "Delete Conversation(s)", "description": "Deletes one or more conversations from the knowledge base.", "parameter": {}}, {"name": "Is Feed Done?", "description": "Checks if a feed is done processing.", "parameter": {}}, {"name": "Is Content Done?", "description": "Checks if a content item is done processing.", "parameter": {}}, {"name": "List Slack Channels", "description": "Lists available Slack channels.", "parameter": {}}, {"name": "List Microsoft Teams Teams", "description": "Lists available Microsoft Teams teams.", "parameter": {}}, {"name": "List Microsoft Teams Channels", "description": "Lists available channels within a Microsoft Teams team.", "parameter": {}}, {"name": "List SharePoint Libraries", "description": "Lists available libraries in SharePoint.", "parameter": {}}, {"name": "List SharePoint Folders", "description": "Lists available folders within a SharePoint library.", "parameter": {}}, {"name": "List Linear Projects", "description": "Lists available projects in Linear.", "parameter": {}}, {"name": "List Notion Databases", "description": "Lists available databases in Notion.", "parameter": {}}]}
{"name": "GreptimeDB", "description": "Provides AI assistants with a secure and structured way to explore and analyze data in GreptimeDB.", "url": "https://github.com/GreptimeTeam/greptimedb-mcp-server", "readme_file": "official/GreptimeDB.md", "summary": "A Model Context Protocol (MCP) server implementation for GreptimeDB, providing AI assistants with a secure and structured way to explore and analyze databases through a controlled interface.", "tools": [{"name": "list_resources", "description": "Lists tables in the database.", "parameter": {}}, {"name": "read_resource", "description": "Reads data from a table.", "parameter": {}}, {"name": "list_tools", "description": "Lists available tools.", "parameter": {}}, {"name": "call_tool", "description": "Executes an SQL query.", "parameter": {}}, {"name": "list_prompts", "description": "Lists available prompts.", "parameter": {}}, {"name": "get_prompt", "description": "Gets a prompt by name.", "parameter": {}}]}
{"name": "Heroku", "description": "Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.", "url": "https://github.com/heroku/heroku-mcp-server", "readme_file": "official/Heroku.md", "summary": "The Heroku Platform MCP Server is a specialized Model Context Protocol (MCP) implementation designed to facilitate seamless interaction between large language models (LLMs) and the Heroku Platform. It provides tools for managing and operating Heroku Platform resources, including application management, process and dyno management, add-on management, maintenance and logging, pipeline management, team and space management, and PostgreSQL database management.", "tools": [{"name": "list_apps", "description": "List all Heroku apps. You can filter apps by personal, collaborator, team, or space.", "parameter": {}}, {"name": "get_app_info", "description": "Get detailed information about an app, including its configuration, dynos, and add-ons.", "parameter": {}}, {"name": "create_app", "description": "Create a new app with customizable settings for region, team, and space.", "parameter": {}}, {"name": "rename_app", "description": "Rename an existing app.", "parameter": {}}, {"name": "transfer_app", "description": "Transfer ownership of an app to another user or team.", "parameter": {}}, {"name": "deploy_to_heroku", "description": "Deploy projects to Heroku with an `app.json` configuration, supporting team deployments, private spaces, and environment setups.", "parameter": {}}, {"name": "deploy_one_off_dyno", "description": "Execute code or commands in a sandboxed environment on a Heroku one-off dyno. Supports file creation, network access, environment variables, and automatic cleanup. Ideal for running scripts, tests, or temporary workloads.", "parameter": {}}, {"name": "ps_list", "description": "List all dynos for an app.", "parameter": {}}, {"name": "ps_scale", "description": "Scale the number of dynos up or down, or resize dynos.", "parameter": {}}, {"name": "ps_restart", "description": "Restart specific dynos, process types, or all dynos.", "parameter": {}}, {"name": "list_addons", "description": "List all add-ons for all apps or for a specific app.", "parameter": {}}, {"name": "get_addon_info", "description": "Get detailed information about a specific add-on.", "parameter": {}}, {"name": "create_addon", "description": "Provision a new add-on for an app.", "parameter": {}}, {"name": "maintenance_on", "description": "Enable maintenance mode for an app.", "parameter": {}}, {"name": "maintenance_off", "description": "Disable maintenance mode for an app.", "parameter": {}}, {"name": "get_app_logs", "description": "View application logs.", "parameter": {}}, {"name": "pipelines_create", "description": "Create a new pipeline.", "parameter": {}}, {"name": "pipelines_promote", "description": "Promote apps to the next stage in a pipeline.", "parameter": {}}, {"name": "pipelines_list", "description": "List available pipelines.", "parameter": {}}, {"name": "pipelines_info", "description": "Get detailed pipeline information.", "parameter": {}}, {"name": "list_teams", "description": "List teams you belong to.", "parameter": {}}, {"name": "list_private_spaces", "description": "List available spaces.", "parameter": {}}, {"name": "pg_psql", "description": "Execute SQL queries against the Heroku PostgreSQL database.", "parameter": {}}, {"name": "pg_info", "description": "Display detailed database information.", "parameter": {}}, {"name": "pg_ps", "description": "View active queries and execution details.", "parameter": {}}, {"name": "pg_locks", "description": "View database locks and identify blocking transactions.", "parameter": {}}, {"name": "pg_outliers", "description": "Identify resource-intensive queries.", "parameter": {}}, {"name": "pg_credentials", "description": "Manage database credentials and access.", "parameter": {}}, {"name": "pg_kill", "description": "Terminate specific database processes.", "parameter": {}}, {"name": "pg_maintenance", "description": "Show database maintenance information.", "parameter": {}}, {"name": "pg_backups", "description": "Manage database backups and schedules.", "parameter": {}}, {"name": "pg_upgrade", "description": "Upgrade PostgreSQL to a newer version.", "parameter": {}}]}
{"name": "Hologres", "description": "Connect to a Hologres instance, get table metadata, query and analyze data.", "url": "https://github.com/aliyun/alibabacloud-hologres-mcp-server", "readme_file": "official/Hologres.md", "summary": "A universal interface between AI Agents and Hologres databases, enabling seamless communication for retrieving metadata and executing SQL operations.", "tools": [{"name": "execute_select_sql", "description": "Execute a SELECT SQL query on the Hologres server", "parameter": {}}, {"name": "execute_dml_sql", "description": "Execute a DML (INSERT, UPDATE, DELETE) SQL query on the Hologres server", "parameter": {}}, {"name": "execute_ddl_sql", "description": "Execute a DDL (CREATE, ALTER, DROP) SQL query on the Hologres server", "parameter": {}}, {"name": "gather_table_statistics", "description": "Collect table statistics", "parameter": {}}, {"name": "get_query_plan", "description": "Get query plan", "parameter": {}}, {"name": "get_execution_plan", "description": "Get execution plan", "parameter": {}}]}
{"name": "Hyperbrowser", "description": "Hyperbrowser is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.", "url": "https://github.com/hyperbrowserai/mcp", "readme_file": "official/Hyperbrowser.md", "summary": "Provides tools for scraping, extracting structured data, and crawling webpages. Also offers access to general purpose browser agents like OpenAI's CUA, Anthropic's Claude Computer Use, and Browser Use.", "tools": [{"name": "scrape_webpage", "description": "Extract formatted (markdown, screenshot etc) content from any webpage", "parameter": {}}, {"name": "crawl_webpages", "description": "Navigate through multiple linked pages and extract LLM-friendly formatted content", "parameter": {}}, {"name": "extract_structured_data", "description": "Convert messy HTML into structured JSON", "parameter": {}}, {"name": "search_with_bing", "description": "Query the web and get results with Bing search", "parameter": {}}, {"name": "browser_use_agent", "description": "Fast, lightweight browser automation with the Browser Use agent", "parameter": {}}, {"name": "openai_computer_use_agent", "description": "General-purpose automation using OpenAI’s CUA model", "parameter": {}}, {"name": "claude_computer_use_agent", "description": "Complex browser tasks using Claude computer use", "parameter": {}}, {"name": "create_profile", "description": "Creates a new persistent Hyperbrowser profile", "parameter": {}}, {"name": "delete_profile", "description": "Deletes an existing persistent Hyperbrowser profile", "parameter": {}}, {"name": "list_profiles", "description": "Lists existing persistent Hyperbrowser profiles", "parameter": {}}]}
{"name": "ForeverVM", "description": "Run Python in a code sandbox.", "url": "https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server", "readme_file": "official/ForeverVM.md", "summary": "foreverVM provides an API for running arbitrary, stateful Python code securely. It allows users to create and manage stateful Python processes (machines) and execute instructions on them.", "tools": [{"name": "repl", "description": "Connects to a new machine or an existing one by ID.", "parameter": {"machine_name": "(Optional, string) The ID of an existing machine to connect to."}}, {"name": "createMachine", "description": "Creates a new machine with optional tags and memory limits.", "parameter": {"tags": "(Optional, object) Key-value pairs to tag the machine.", "memory_mb": "(Optional, number) Memory limit in megabytes for the machine."}}, {"name": "listMachines", "description": "Lists all machines, optionally filtered by tags.", "parameter": {"tags": "(Optional, object) Key-value pairs to filter the machines by tags."}}]}
{"name": "Inkeep", "description": "RAG Search over your content powered by Inkeep", "url": "https://github.com/inkeep/mcp-server-python", "readme_file": "official/Inkeep.md", "summary": "An MCP server that retrieves product documentation about Inkeep using conversational queries.", "tools": [{"name": "search-product-content", "description": "Retrieves product documentation about Inkeep. The query should be framed as a conversational question about Inkeep.", "parameter": {}}]}
{"name": "Kagi Search", "description": "Search the web using Kagi's search API", "url": "https://github.com/kagisearch/kagimcp", "readme_file": "official/Kagi_Search.md", "summary": "The Kagi MCP server provides access to search and summarization capabilities, enabling users to perform web searches and generate summaries of content such as videos.", "tools": [{"name": "search", "description": "Performs a web search to find information based on the query provided.", "parameter": {}}, {"name": "summarizer", "description": "Generates a summary of the content, such as a video, based on the URL provided.", "parameter": {}}]}
{"name": "Keboola", "description": "Build robust data workflows, integrations, and analytics on a single intuitive platform.", "url": "https://github.com/keboola/keboola-mcp-server", "readme_file": "official/Keboola.md", "summary": "A Model Context Protocol (MCP) server for interacting with Keboola Connection. This server provides tools for listing and accessing data from Keboola Storage API.", "tools": [{"name": "get_bucket_detail", "description": "Gets detailed information about a specific bucket.", "parameter": {}}, {"name": "get_table_detail", "description": "Gets detailed information about a specific table including its DB identifier and column information.", "parameter": {}}, {"name": "retrieve_bucket_tables", "description": "Retrieves all tables in a specific bucket with their basic information.", "parameter": {}}, {"name": "retrieve_buckets", "description": "Retrieves information about all buckets in the project.", "parameter": {}}, {"name": "update_bucket_description", "description": "Update the description for a given Keboola bucket.", "parameter": {}}, {"name": "update_table_description", "description": "Update the description for a given Keboola table.", "parameter": {}}, {"name": "get_sql_dialect", "description": "Gets the name of the SQL dialect used by Keboola project's underlying database.", "parameter": {}}, {"name": "query_table", "description": "Executes an SQL SELECT query to get the data from the underlying database.", "parameter": {}}, {"name": "create_sql_transformation", "description": "Creates an SQL transformation using the specified name, SQL query following the current SQL dialect, a detailed description, and optionally a list of created table names if and only if they are generated within the SQL statements.", "parameter": {}}, {"name": "get_component_details", "description": "Gets detailed information about a specific Keboola component configuration given component/transformation ID and configuration ID.", "parameter": {}}, {"name": "retrieve_components", "description": "Retrieves components configurations in the project, optionally filtered by component types or specific component IDs. If component_ids are supplied, only those components identified by the IDs are retrieved, disregarding component_types.", "parameter": {}}, {"name": "retrieve_transformations", "description": "Retrieves transformations configurations in the project, optionally filtered by specific transformation IDs.", "parameter": {}}, {"name": "get_job_detail", "description": "Retrieves detailed information about a specific job, identified by the job_id, including its status, parameters, results, and any relevant metadata.", "parameter": {}}, {"name": "retrieve_jobs", "description": "Retrieves all jobs in the project, or filter jobs by a specific component_id or config_id, with optional status filtering.", "parameter": {}}, {"name": "start_job", "description": "Starts a new job for a given component or transformation.", "parameter": {}}, {"name": "docs_query", "description": "Answers a question using the Keboola documentation as a source.", "parameter": {}}]}
{"name": "Lara Translate", "description": "MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.", "url": "https://github.com/translated/lara-mcp", "readme_file": "official/Lara_Translate.md", "summary": "A Model Context Protocol (MCP) Server for the Lara Translate API, enabling powerful translation capabilities with support for language detection, context-aware translations, and translation memories.", "tools": [{"name": "translate", "description": "Translate text between languages", "parameter": {"text": "(array) An array of text blocks to translate, each with: 'text' (string), 'translatable' (boolean)", "source": "(Optional, string) Source language code (e.g., 'en-EN')", "target": "(string) Target language code (e.g., 'it-IT')", "context": "(Optional, string) Additional context to improve translation quality", "instructions": "(Optional, string[]) Instructions to adjust translation behavior", "source_hint": "(Optional, string) Guidance for language detection"}}, {"name": "list_memories", "description": "List saved translation memories", "parameter": {}}, {"name": "create_memory", "description": "Create a new translation memory", "parameter": {"name": "(string) Name of the new memory", "external_id": "(Optional, string) ID of the memory to import from MyMemory (e.g., 'ext_my_[MyMemory ID]')"}}, {"name": "update_memory", "description": "Update translation memory name", "parameter": {"id": "(string) ID of the memory to update", "name": "(string) The new name for the memory"}}, {"name": "delete_memory", "description": "Delete a translation memory", "parameter": {"id": "(string) ID of the memory to delete"}}, {"name": "add_translation", "description": "Add a translation unit to memory", "parameter": {"id": "(string | string[]) ID or IDs of memories where to add the translation unit", "source": "(string) Source language code", "target": "(string) Target language code", "sentence": "(string) The source sentence", "translation": "(string) The translated sentence", "tuid": "(Optional, string) Translation Unit unique identifier", "sentence_before": "(Optional, string) Context sentence before", "sentence_after": "(Optional, string) Context sentence after"}}, {"name": "delete_translation", "description": "Delete a translation unit from memory", "parameter": {"id": "(string) ID of the memory", "source": "(string) Source language code", "target": "(string) Target language code", "sentence": "(string) The source sentence", "translation": "(string) The translated sentence", "tuid": "(Optional, string) Translation Unit unique identifier", "sentence_before": "(Optional, string) Context sentence before", "sentence_after": "(Optional, string) Context sentence after"}}, {"name": "import_tmx", "description": "Import a TMX file into a memory", "parameter": {"id": "(string) ID of the memory to update", "tmx": "(file path) The path of the TMX file to upload", "gzip": "(boolean) Indicates if the file is compressed (.gz)"}}, {"name": "check_import_status", "description": "Checks the status of a TMX file import", "parameter": {"id": "(string) The ID of the import job"}}]}
{"name": "Logfire", "description": "Provides access to OpenTelemetry traces and metrics through Logfire.", "url": "https://github.com/pydantic/logfire-mcp", "readme_file": "official/Logfire.md", "summary": "A Model Context Protocol (MCP) server that enables LLMs to retrieve and analyze OpenTelemetry traces and metrics from Logfire. It provides tools to find exceptions, execute custom SQL queries, and retrieve the OpenTelemetry schema.", "tools": [{"name": "find_exceptions", "description": "Get exception counts from traces grouped by file", "parameter": {"age": "(int) Number of minutes to look back (e.g., 30 for last 30 minutes, max 7 days)"}}, {"name": "find_exceptions_in_file", "description": "Get detailed trace information about exceptions in a specific file", "parameter": {"filepath": "(string) Path to the file to analyze", "age": "(int) Number of minutes to look back (max 7 days)"}}, {"name": "arbitrary_query", "description": "Run custom SQL queries on your OpenTelemetry traces and metrics", "parameter": {"query": "(string) SQL query to execute", "age": "(int) Number of minutes to look back (max 7 days)"}}, {"name": "get_logfire_records_schema", "description": "Get the OpenTelemetry schema to help with custom queries", "parameter": {}}]}
{"name": "Langfuse Prompt Management", "description": "Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.", "url": "https://github.com/langfuse/mcp-server-langfuse", "readme_file": "official/Langfuse_Prompt_Management.md", "summary": "This server allows you to access and manage your Langfuse prompts through the Model Context Protocol, providing features for prompt discovery and retrieval.", "tools": [{"name": "get-prompts", "description": "List available prompts", "parameter": {"cursor": "(Optional, string) Parameter for pagination"}}, {"name": "get-prompt", "description": "Retrieve and compile a specific prompt", "parameter": {"name": "(string) Name of the prompt to retrieve", "arguments": "(Optional, JSON object) Prompt variables"}}]}
{"name": "Lingo.dev", "description": "Make your AI agent speak every language on the planet, using Lingo.dev Localization Engine.", "url": "https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md", "readme_file": "official/Lingo.dev.md", "summary": "The MCP CLI provides command-line utilities to manage and interact with the MCP server, enabling users to perform administrative tasks and operations.", "tools": [{"name": "start-server", "description": "Starts the MCP server.", "parameter": {}}, {"name": "stop-server", "description": "Stops the running MCP server.", "parameter": {}}, {"name": "status", "description": "Checks the current status of the MCP server.", "parameter": {}}, {"name": "list-users", "description": "Lists all users registered with the MCP server.", "parameter": {}}, {"name": "add-user", "description": "Adds a new user to the MCP server.", "parameter": {"username": "(string) The username for the new user.", "password": "(string) The password for the new user."}}, {"name": "remove-user", "description": "Removes an existing user from the MCP server.", "parameter": {"username": "(string) The username of the user to remove."}}]}
{"name": "MCP Toolbox for Databases", "description": "Open source MCP server specializing in easy, fast, and secure tools for Databases. Supports  AlloyDB, BigQuery, Bigtable, Cloud SQL, Dgraph, MySQL, Neo4j, Postgres, Spanner, and more.", "url": "https://github.com/googleapis/genai-toolbox", "readme_file": "official/MCP_Toolbox_for_Databases.md", "summary": "An open source MCP server for databases that simplifies development, improves performance, enhances security, and provides end-to-end observability by handling complexities such as connection pooling, authentication, and more.", "tools": [{"name": "search-hotels-by-name", "description": "Search for hotels based on name.", "parameter": {"name": "(string) The name of the hotel."}}]}
{"name": "Meilisearch", "description": "Interact & query with Meilisearch (Full-text & semantic search API)", "url": "https://github.com/meilisearch/meilisearch-mcp", "readme_file": "official/Meilisearch.md", "summary": "A Model Context Protocol (MCP) server for interacting with Meilisearch through LLM interfaces like Claude. It provides features such as index and document management, settings configuration, task monitoring, API key management, built-in logging, and dynamic connection configuration.", "tools": [{"name": "get-connection-settings", "description": "View current Meilisearch connection URL and API key status", "parameter": {}}, {"name": "update-connection-settings", "description": "Update URL and/or API key to connect to a different instance", "parameter": {"url": "(string) New Meilisearch instance URL", "api_key": "(string) New Meilisearch API key"}}, {"name": "create-index", "description": "Create a new index with optional primary key", "parameter": {"uid": "(string) Unique identifier for the index", "primaryKey": "(Optional, string) Primary key for the index"}}, {"name": "list-indexes", "description": "List all available indexes", "parameter": {}}, {"name": "get-index-metrics", "description": "Get detailed metrics for a specific index", "parameter": {"uid": "(string) Unique identifier for the index"}}, {"name": "get-documents", "description": "Retrieve documents from an index with pagination", "parameter": {"indexUid": "(string) Unique identifier for the index", "offset": "(Optional, integer) Number of results to skip (default: 0)", "limit": "(Optional, integer) Maximum number of results to return (default: 20)"}}, {"name": "add-documents", "description": "Add or update documents in an index", "parameter": {"indexUid": "(string) Unique identifier for the index", "documents": "(array of objects) Documents to add or update"}}, {"name": "search", "description": "Flexible search across single or multiple indices with filtering and sorting options", "parameter": {"query": "(string) The search query (required)", "indexUid": "(Optional, string) Specific index to search in", "limit": "(Optional, integer) Maximum number of results per index (default: 20)", "offset": "(Optional, integer) Number of results to skip (default: 0)", "filter": "(Optional, string) Filter expression", "sort": "(Optional, array of strings) Sorting rules"}}, {"name": "get-settings", "description": "View current settings for an index", "parameter": {"uid": "(string) Unique identifier for the index"}}, {"name": "update-settings", "description": "Update index settings (ranking, faceting, etc.)", "parameter": {"uid": "(string) Unique identifier for the index", "settings": "(object) New settings to apply"}}, {"name": "get-keys", "description": "List all API keys", "parameter": {}}, {"name": "create-key", "description": "Create new API key with specific permissions", "parameter": {"description": "(string) Description for the API key", "actions": "(array of strings) Actions allowed for the API key", "indexes": "(array of strings) Indexes the API key can access", "expiresAt": "(Optional, string) Expiration date and time for the API key"}}, {"name": "delete-key", "description": "Delete an existing API key", "parameter": {"key": "(string) API key to delete"}}, {"name": "get-task", "description": "Get information about a specific task", "parameter": {"uid": "(string) Unique identifier for the task"}}, {"name": "get-tasks", "description": "List tasks with optional filters", "parameter": {"limit": "(Optional, integer) Maximum number of tasks to return", "from": "(Optional, integer) Number of tasks to skip", "reverse": "(Optional, boolean) Sort order of tasks", "batchUids": "(Optional, array of strings) Filter by batch UIDs", "uids": "(Optional, array of strings) Filter by task UIDs", "canceledBy": "(Optional, string) Filter by cancellation source", "types": "(Optional, array of strings) Filter by task types", "statuses": "(Optional, array of strings) Filter by task statuses", "indexUids": "(Optional, array of strings) Filter by index UIDs", "afterEnqueuedAt": "(Optional, string) Filter by enqueue time", "beforeEnqueuedAt": "(Optional, string) Filter by enqueue time", "afterStartedAt": "(Optional, string) Filter by start time", "beforeStartedAt": "(Optional, string) Filter by start time", "afterFinishedAt": "(Optional, string) Filter by finish time", "beforeFinishedAt": "(Optional, string) Filter by finish time"}}, {"name": "cancel-tasks", "description": "Cancel pending or enqueued tasks", "parameter": {"uids": "(array of strings) Task UIDs to cancel", "batchUids": "(Optional, array of strings) Batch UIDs to filter tasks", "types": "(Optional, array of strings) Task types to filter tasks", "statuses": "(Optional, array of strings) Task statuses to filter tasks", "indexUids": "(Optional, array of strings) Index UIDs to filter tasks", "canceledBy": "(Optional, string) Cancellation source"}}, {"name": "delete-tasks", "description": "Delete completed tasks", "parameter": {"uids": "(array of strings) Task UIDs to delete", "batchUids": "(Optional, array of strings) Batch UIDs to filter tasks", "types": "(Optional, array of strings) Task types to filter tasks", "statuses": "(Optional, array of strings) Task statuses to filter tasks", "indexUids": "(Optional, array of strings) Index UIDs to filter tasks", "canceledBy": "(Optional, string) Cancellation source"}}, {"name": "health-check", "description": "Basic health check", "parameter": {}}, {"name": "get-health-status", "description": "Comprehensive health status", "parameter": {}}, {"name": "get-version", "description": "Get Meilisearch version information", "parameter": {}}, {"name": "get-stats", "description": "Get database statistics", "parameter": {}}, {"name": "get-system-info", "description": "Get system-level information", "parameter": {}}]}
{"name": "Milvus", "description": "Search, Query and interact with data in your Milvus Vector Database.", "url": "https://github.com/zilliztech/mcp-server-milvus", "readme_file": "official/Milvus.md", "summary": "An MCP server that provides access to Milvus vector database functionality, enabling seamless integration with LLM applications for tasks such as full-text search, vector similarity search, and data management.", "tools": [{"name": "milvus_text_search", "description": "Search for documents using full text search", "parameter": {"collection_name": "(string) Name of collection to search", "query_text": "(string) Text to search for", "limit": "(Optional, int) Maximum results (default: 5)", "output_fields": "(Optional, list) Fields to include in results", "drop_ratio": "(Optional, float) Proportion of low-frequency terms to ignore (0.0-1.0)"}}, {"name": "milvus_vector_search", "description": "Perform vector similarity search on a collection", "parameter": {"collection_name": "(string) Name of collection to search", "vector": "(list) Query vector", "vector_field": "(Optional, string) Field containing vectors to search (default: 'vector')", "limit": "(Optional, int) Maximum results (default: 5)", "output_fields": "(Optional, list) Fields to include in results", "metric_type": "(Optional, string) Distance metric (COSINE, L2, IP) (default: 'COSINE')"}}, {"name": "milvus_query", "description": "Query collection using filter expressions", "parameter": {"collection_name": "(string) Name of collection to query", "filter_expr": "(string) Filter expression (e.g. 'age > 20')", "output_fields": "(Optional, list) Fields to include in results", "limit": "(Optional, int) Maximum results (default: 10)"}}, {"name": "milvus_list_collections", "description": "List all collections in the database", "parameter": {}}, {"name": "milvus_create_collection", "description": "Create a new collection with specified schema", "parameter": {"collection_name": "(string) Name for the new collection", "collection_schema": "(dict) Collection schema definition", "index_params": "(Optional, dict) Optional index parameters"}}, {"name": "milvus_load_collection", "description": "Load a collection into memory for search and query", "parameter": {"collection_name": "(string) Name of collection to load", "replica_number": "(Optional, int) Number of replicas (default: 1)"}}, {"name": "milvus_release_collection", "description": "Release a collection from memory", "parameter": {"collection_name": "(string) Name of collection to release"}}, {"name": "milvus_insert_data", "description": "Insert data into a collection", "parameter": {"collection_name": "(string) Name of collection", "data": "(dict) Dictionary mapping field names to lists of values"}}, {"name": "milvus_delete_entities", "description": "Delete entities from a collection based on filter expression", "parameter": {"collection_name": "(string) Name of collection", "filter_expr": "(string) Filter expression to select entities to delete"}}]}
{"name": "Momento", "description": "Momento Cache lets you quickly improve your performance, reduce costs, and handle load at any scale.", "url": "https://github.com/momentohq/mcp-momento", "readme_file": "official/Momento.md", "summary": "A simple Model Context Protocol (MCP) server implementation for Momento Cache, providing basic cache operations and management.", "tools": [{"name": "get", "description": "Get the cache value stored for the given key.", "parameter": {"key": "string -- the key to look up in the cache.", "cacheName": "(Optional, string) -- the name cache where the key presides"}}, {"name": "set", "description": "Sets the value in cache with a given Time To Live (TTL) seconds. If a value for this key is already present, it will be replaced by the new value regardless of the previous value's data type.", "parameter": {"key": "string -- the key to set in the cache", "value": "string -- the value to set for the given key", "ttl": "(Optional, integer) -- the number of seconds to keep this value in the cache", "cacheName": "(Optional, string) -- the name of the cache to store the key in"}}, {"name": "list-caches", "description": "Lists the names of all the caches in your Momento account.", "parameter": {}}, {"name": "create-cache", "description": "Creates a new cache in your Momento account.", "parameter": {"name": "string -- the name of the cache to create"}}, {"name": "delete-cache", "description": "Deletes a cache from your Momento account.", "parameter": {"name": "string -- the name of the cache to delete"}}]}
{"name": "MongoDB", "description": "Both MongoDB Community Server and MongoDB Atlas are supported.", "url": "https://github.com/mongodb-js/mongodb-mcp-server", "readme_file": "official/MongoDB.md", "summary": "A Model Context Protocol server for interacting with MongoDB Databases and MongoDB Atlas. It provides tools for managing MongoDB databases and Atlas projects, including creating, listing, and inspecting resources.", "tools": [{"name": "atlas-list-orgs", "description": "Lists MongoDB Atlas organizations", "parameter": {}}, {"name": "atlas-list-projects", "description": "Lists MongoDB Atlas projects", "parameter": {}}, {"name": "atlas-create-project", "description": "Creates a new MongoDB Atlas project", "parameter": {}}, {"name": "atlas-list-clusters", "description": "Lists MongoDB Atlas clusters", "parameter": {}}, {"name": "atlas-inspect-cluster", "description": "Inspect a specific MongoDB Atlas cluster", "parameter": {}}, {"name": "atlas-create-free-cluster", "description": "Create a free MongoDB Atlas cluster", "parameter": {}}, {"name": "atlas-connect-cluster", "description": "Connects to MongoDB Atlas cluster", "parameter": {}}, {"name": "atlas-inspect-access-list", "description": "Inspect IP/CIDR ranges with access to MongoDB Atlas clusters", "parameter": {}}, {"name": "atlas-create-access-list", "description": "Configure IP/CIDR access list for MongoDB Atlas clusters", "parameter": {}}, {"name": "atlas-list-db-users", "description": "List MongoDB Atlas database users", "parameter": {}}, {"name": "atlas-create-db-user", "description": "List MongoDB Atlas database users", "parameter": {}}, {"name": "connect", "description": "Connect to a MongoDB instance", "parameter": {}}, {"name": "find", "description": "Run a find query against a MongoDB collection", "parameter": {}}, {"name": "aggregate", "description": "Run an aggregation against a MongoDB collection", "parameter": {}}, {"name": "count", "description": "Get the number of documents in a MongoDB collection", "parameter": {}}, {"name": "insert-one", "description": "Insert a single document into a MongoDB collection", "parameter": {}}, {"name": "insert-many", "description": "Insert multiple documents into a MongoDB collection", "parameter": {}}, {"name": "create-index", "description": "Create an index for a MongoDB collection", "parameter": {}}, {"name": "update-one", "description": "Update a single document in a MongoDB collection", "parameter": {}}, {"name": "update-many", "description": "Update multiple documents in a MongoDB collection", "parameter": {}}, {"name": "rename-collection", "description": "Rename a MongoDB collection", "parameter": {}}, {"name": "delete-one", "description": "Delete a single document from a MongoDB collection", "parameter": {}}, {"name": "delete-many", "description": "Delete multiple documents from a MongoDB collection", "parameter": {}}, {"name": "drop-collection", "description": "Remove a collection from a MongoDB database", "parameter": {}}, {"name": "drop-database", "description": "Remove a MongoDB database", "parameter": {}}, {"name": "list-databases", "description": "List all databases for a MongoDB connection", "parameter": {}}, {"name": "list-collections", "description": "List all collections for a given database", "parameter": {}}, {"name": "collection-indexes", "description": "Describe the indexes for a collection", "parameter": {}}, {"name": "collection-schema", "description": "Describe the schema for a collection", "parameter": {}}, {"name": "collection-storage-size", "description": "Get the size of a collection in MB", "parameter": {}}, {"name": "db-stats", "description": "Return statistics about a MongoDB database", "parameter": {}}]}
{"name": "MotherDuck", "description": "Query and analyze data with MotherDuck and local DuckDB", "url": "https://github.com/motherduckdb/mcp-server-motherduck", "readme_file": "official/MotherDuck.md", "summary": "An MCP server implementation that interacts with DuckDB and MotherDuck databases, providing SQL analytics capabilities to AI Assistants and IDEs. It supports hybrid execution, cloud storage integration, data sharing, and a serverless architecture.", "tools": [{"name": "query", "description": "Execute a SQL query on the DuckDB or MotherDuck database", "parameter": {"query": "(string, required) The SQL query to execute"}}]}
{"name": "Neo4j", "description": "Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory", "url": "https://github.com/neo4j-contrib/mcp-neo4j/", "readme_file": "official/Neo4j.md", "summary": "A suite of MCP servers that enable interaction with Neo4j databases and Neo4j Aura cloud services using natural language through various MCP clients like Claude Desktop, VS Code, Cursor, and Windsurf.", "tools": [{"name": "mcp-neo4j-cypher", "description": "Converts natural language to Cypher queries for executing read and write operations on a configured Neo4j database.", "parameter": {}}, {"name": "mcp-neo4j-memory", "description": "Manages a personal knowledge graph in a Neo4j instance, allowing storage and retrieval of entities and relationships across different sessions and clients.", "parameter": {}}, {"name": "mcp-neo4j-cloud-aura-api", "description": "Provides management capabilities for Neo4j Aura cloud instances, including creating, destroying, finding, scaling, and enabling features.", "parameter": {}}]}
{"name": "Neon", "description": "Interact with the Neon serverless Postgres platform", "url": "https://github.com/neondatabase/mcp-server-neon", "readme_file": "official/Neon.md", "summary": "An open-source tool that enables natural language interaction with Neon Postgres databases, simplifying database management and making it accessible to users with varying technical backgrounds. It supports project and branch management, SQL query execution, and database migrations.", "tools": [{"name": "list_projects", "description": "Retrieves a list of your Neon projects, providing a summary of each project associated with your Neon account.", "parameter": {}}, {"name": "describe_project", "description": "Fetches detailed information about a specific Neon project, including its ID, name, and associated branches and databases.", "parameter": {}}, {"name": "create_project", "description": "Creates a new Neon project in your Neon account. A project acts as a container for branches, databases, roles, and computes.", "parameter": {}}, {"name": "delete_project", "description": "Deletes an existing Neon project and all its associated resources.", "parameter": {}}, {"name": "create_branch", "description": "Creates a new branch within a specified Neon project. Leverages Neon's branching feature for development, testing, or migrations.", "parameter": {}}, {"name": "delete_branch", "description": "Deletes an existing branch from a Neon project.", "parameter": {}}, {"name": "describe_branch", "description": "Retrieves details about a specific branch, such as its name, ID, and parent branch.", "parameter": {}}, {"name": "get_connection_string", "description": "Returns your database connection string.", "parameter": {}}, {"name": "run_sql", "description": "Executes a single SQL query against a specified Neon database. Supports both read and write operations.", "parameter": {}}, {"name": "run_sql_transaction", "description": "Executes a series of SQL queries within a single transaction against a Neon database.", "parameter": {}}, {"name": "get_database_tables", "description": "Lists all tables within a specified Neon database.", "parameter": {}}, {"name": "describe_table_schema", "description": "Retrieves the schema definition of a specific table, detailing columns, data types, and constraints.", "parameter": {}}, {"name": "prepare_database_migration", "description": "Initiates a database migration process. Creates a temporary branch to apply and test the migration safely before affecting the main branch.", "parameter": {}}, {"name": "complete_database_migration", "description": "Finalizes and applies a prepared database migration to the main branch. Merges changes from the temporary migration branch and cleans up temporary resources.", "parameter": {}}, {"name": "provision_neon_auth", "description": "Action to provision Neon Auth for a Neon project. It allows developers to easily set up authentication infrastructure by creating an integration with Stack Auth.", "parameter": {}}]}
{"name": "Octagon", "description": "Deliver real-time investment research with extensive private and public market data.", "url": "https://github.com/OctagonAI/octagon-mcp-server", "readme_file": "official/Octagon.md", "summary": "The Octagon MCP server provides specialized AI-powered financial research and analysis by integrating with the Octagon Market Intelligence API. It enables users to analyze and extract detailed insights from public filings, earnings call transcripts, financial metrics, stock market data, and extensive private market transactions.", "tools": [{"name": "octagon-sec-agent", "description": "Extract information from SEC filings.", "parameter": {"prompt": "(string) A natural language query specifying the information to extract from SEC filings."}}, {"name": "octagon-transcripts-agent", "description": "Analyze earnings call transcripts.", "parameter": {"prompt": "(string) A natural language query specifying the information to extract from earnings call transcripts."}}, {"name": "octagon-financials-agent", "description": "Retrieve financial metrics and ratios.", "parameter": {"prompt": "(string) A natural language query specifying the financial metrics or ratios to retrieve."}}, {"name": "octagon-stock-data-agent", "description": "Access stock market data.", "parameter": {"prompt": "(string) A natural language query specifying the stock market data to access."}}, {"name": "octagon-companies-agent", "description": "Research private company information.", "parameter": {"prompt": "(string) A natural language query specifying the private company information to research."}}, {"name": "octagon-funding-agent", "description": "Research startup funding rounds and venture capital.", "parameter": {"prompt": "(string) A natural language query specifying the funding rounds or venture capital information to research."}}, {"name": "octagon-deals-agent", "description": "Research M&A and IPO transactions.", "parameter": {"prompt": "(string) A natural language query specifying the M&A or IPO transaction information to research."}}, {"name": "octagon-investors-agent", "description": "A specialized database agent for looking up information on investors.", "parameter": {"prompt": "(string) A natural language query specifying the investor information to look up."}}, {"name": "octagon-debts-agent", "description": "A specialized database agent for analyzing private debts, borrowers, and lenders.", "parameter": {"prompt": "(string) A natural language query specifying the debt information to analyze."}}, {"name": "octagon-scraper-agent", "description": "Extract data from any public website.", "parameter": {"prompt": "(string) A natural language query specifying the data to extract from a public website."}}, {"name": "octagon-deep-research-agent", "description": "Perform comprehensive research on any topic.", "parameter": {"prompt": "(string) A natural language query specifying the topic to research."}}]}
{"name": "Oxylabs", "description": "Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.", "url": "https://github.com/oxylabs/oxylabs-mcp", "readme_file": "official/Oxylabs.md", "summary": "The Oxylabs MCP server provides a bridge between AI models and the web, enabling seamless data scraping, JavaScript rendering, content extraction, and access to geo-restricted web data from 195+ countries.", "tools": [{"name": "oxylabs_scraper", "description": "Uses Oxylabs Web Scraper API for general website scraping with support for JavaScript rendering, parsed structured data, and cleaned HTML in Markdown format.", "parameter": {"url": "(string) The URL to scrape", "parse": "(Optional, boolean) Enable structured data extraction", "render": "(Optional, string) Use headless browser rendering; values: 'html' or 'None'"}}, {"name": "oxylabs_web_unblocker", "description": "Uses Oxylabs Web Unblocker for hard-to-access websites with support for JavaScript rendering and cleaned HTML, but does not return parsed data.", "parameter": {"url": "(string) The URL to scrape", "render": "(Optional, string) Use headless browser rendering; values: 'html' or 'None'"}}]}
{"name": "Perplexity", "description": "An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.", "url": "https://github.com/ppl-ai/modelcontextprotocol", "readme_file": "official/Perplexity.md", "summary": "An MCP server implementation that integrates the Sonar API to enable Claude to perform real-time, web-wide research through live web searches.", "tools": [{"name": "perplexity_ask", "description": "Engage in a conversation with the Sonar API for live web searches.", "parameter": {"messages": "(array) An array of conversation messages. Each message must include: role (string) The role of the message (e.g., system, user, assistant), content (string) The content of the message."}}]}
{"name": "Pinecone", "description": "Pinecone's developer MCP Server assist developers in searching documentation and managing data within their development environment.", "url": "https://github.com/pinecone-io/pinecone-mcp", "readme_file": "official/Pinecone.md", "summary": "The Pinecone Developer MCP Server enables AI tools to interact with Pinecone projects and documentation, providing capabilities such as searching documentation, configuring indexes, generating code, and managing data in indexes.", "tools": [{"name": "search-docs", "description": "Search the official Pinecone documentation.", "parameter": {}}, {"name": "list-indexes", "description": "Lists all Pinecone indexes.", "parameter": {}}, {"name": "describe-index", "description": "Describes the configuration of an index.", "parameter": {}}, {"name": "describe-index-stats", "description": "Provides statistics about the data in the index, including the number of records and available namespaces.", "parameter": {}}, {"name": "create-index-for-model", "description": "Creates a new index that uses an integrated inference model to embed text as vectors.", "parameter": {}}, {"name": "upsert-records", "description": "Inserts or updates records in an index with integrated inference.", "parameter": {}}, {"name": "search-records", "description": "Searches for records in an index based on a text query, using integrated inference for embedding. Has options for metadata filtering and reranking.", "parameter": {}}, {"name": "cascading-search", "description": "Searches for records across multiple indexes, deduplicating and reranking the results.", "parameter": {}}, {"name": "rerank-documents", "description": "Reranks a collection of records or text documents using a specialized reranking model.", "parameter": {}}]}
{"name": "Redis", "description": "The Redis official MCP Server offers an interface to manage and search data in Redis.", "url": "https://github.com/redis/mcp-redis/", "readme_file": "official/Redis.md", "summary": "A natural language interface designed for agentic applications to efficiently manage and search data in Redis. It integrates seamlessly with MCP clients, enabling AI-driven workflows to interact with structured and unstructured data in Redis.", "tools": [{"name": "string", "description": "Tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.", "parameter": {}}, {"name": "hash", "description": "Tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.", "parameter": {}}, {"name": "list", "description": "Tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.", "parameter": {}}, {"name": "set", "description": "Tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.", "parameter": {}}, {"name": "sorted set", "description": "Tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.", "parameter": {}}, {"name": "pub/sub", "description": "Functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.", "parameter": {}}, {"name": "streams", "description": "Tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.", "parameter": {}}, {"name": "JSON", "description": "Tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.", "parameter": {}}, {"name": "query engine", "description": "Tools to manage vector indexes and perform vector search.", "parameter": {}}, {"name": "server management", "description": "Tool to retrieve information about the database.", "parameter": {}}]}
{"name": "Redis Cloud API", "description": "The Redis Cloud API MCP Server allows you to manage your Redis Cloud resources using natural language.", "url": "https://github.com/redis/mcp-redis-cloud/", "readme_file": "official/Redis_Cloud_API.md", "summary": "An MCP Server for Redis Cloud's API, enabling management of Redis Cloud resources using natural language through MCP Clients like Claude Desktop.", "tools": [{"name": "get_current_account", "description": "Get details about your current Redis Cloud account", "parameter": {}}, {"name": "get_current_payment_methods", "description": "List all payment methods configured for your account", "parameter": {}}, {"name": "get_pro_subscriptions", "description": "List all Pro subscriptions in your account", "parameter": {}}, {"name": "create_pro_subscription", "description": "Create a new Pro subscription with advanced configuration options", "parameter": {"multi_cloud_deployment": "(Optional, boolean) Whether to support multi-cloud deployment", "memory": "(Optional, number) Memory configuration", "persistence": "(Optional, boolean) Persistence configuration", "modules": "(Optional, array) List of modules to configure", "active_active_deployments": "(Optional, boolean) Set up Active-Active deployments", "networking_configuration": "(Optional, object) Custom networking configuration"}}, {"name": "get_essential_subscriptions", "description": "List all Essential subscriptions (paginated)", "parameter": {}}, {"name": "get_essential_subscription_by_id", "description": "Get detailed information about a specific Essential subscription", "parameter": {"subscription_id": "(string) ID of the Essential subscription"}}, {"name": "create_essential_subscription", "description": "Create a new Essential subscription", "parameter": {}}, {"name": "delete_essential_subscription", "description": "Delete an Essential subscription", "parameter": {"subscription_id": "(string) ID of the Essential subscription to delete"}}, {"name": "get_database_modules", "description": "List all available database modules (capabilities) supported in your account", "parameter": {}}, {"name": "get_pro_plans_regions", "description": "Get available regions across cloud providers", "parameter": {}}, {"name": "get_essentials_plans", "description": "List available Essential subscription plans (paginated)", "parameter": {}}, {"name": "get_tasks", "description": "List all current tasks in your account", "parameter": {}}, {"name": "get_task_by_id", "description": "Get detailed information about a specific task", "parameter": {"task_id": "(string) ID of the task"}}]}
{"name": "Qdrant", "description": "Implement semantic memory layer on top of the Qdrant vector search engine", "url": "https://github.com/qdrant/mcp-server-qdrant/", "readme_file": "official/Qdrant.md", "summary": "An official Model Context Protocol (MCP) server for Qdrant, a vector search engine. It acts as a semantic memory layer on top of the Qdrant database, enabling the storage and retrieval of information.", "tools": [{"name": "qdrant-store", "description": "Store some information in the Qdrant database", "parameter": {"information": "(string) Information to store", "metadata": "(Optional, JSON) Optional metadata to store", "collection_name": "(string) Name of the collection to store the information in. Required if there is no default collection name."}}, {"name": "qdrant-find", "description": "Retrieve relevant information from the Qdrant database", "parameter": {"query": "(string) Query to use for searching", "collection_name": "(string) Name of the collection to store the information in. Required if there is no default collection name."}}]}
{"name": "Ramp", "description": "Interact with Ramp's Developer API to run analysis on your spend and gain insights leveraging LLMs", "url": "https://github.com/ramp-public/ramp-mcp", "readme_file": "official/Ramp.md", "summary": "A Model Context Protocol server for retrieving and analyzing data or running tasks for Ramp using the Developer API. It implements a simple ETL pipeline and an ephemeral SQLite database in memory for analysis by an LLM.", "tools": [{"name": "process_data", "description": "Processes data for analysis.", "parameter": {}}, {"name": "execute_query", "description": "Executes a query on the ephemeral database.", "parameter": {}}, {"name": "clear_table", "description": "Clears a table in the ephemeral database.", "parameter": {}}, {"name": "get_ramp_categories", "description": "Fetches Ramp categories.", "parameter": {}}, {"name": "get_currencies", "description": "Fetches available currencies.", "parameter": {}}, {"name": "load_transactions", "description": "Loads transactions data.", "parameter": {}}, {"name": "load_reimbursements", "description": "Loads reimbursements data.", "parameter": {}}, {"name": "load_bills", "description": "Loads bills data.", "parameter": {}}, {"name": "load_locations", "description": "Loads locations data.", "parameter": {}}, {"name": "load_departments", "description": "Loads departments data.", "parameter": {}}, {"name": "load_bank_accounts", "description": "Loads bank accounts data.", "parameter": {}}, {"name": "load_vendors", "description": "Loads vendors data.", "parameter": {}}, {"name": "load_vendor_bank_accounts", "description": "Loads vendor bank accounts data.", "parameter": {}}, {"name": "load_entities", "description": "Loads entities data.", "parameter": {}}, {"name": "load_spend_limits", "description": "Loads spend limits data.", "parameter": {}}, {"name": "load_spend_programs", "description": "Loads spend programs data.", "parameter": {}}, {"name": "load_users", "description": "Loads users data.", "parameter": {}}]}
{"name": "Raygun", "description": "Interact with your crash reporting and real using monitoring data on your Raygun account", "url": "https://github.com/MindscapeHQ/mcp-server-raygun", "readme_file": "official/Raygun.md", "summary": "MCP Server for Raygun's API V3 endpoints, providing comprehensive access to Crash Reporting and Real User Monitoring applications.", "tools": [{"name": "list_applications", "description": "List all applications under your account", "parameter": {}}, {"name": "get_application", "description": "Get application details by identifier", "parameter": {}}, {"name": "get_application_by_api_key", "description": "Get application details by API key", "parameter": {}}, {"name": "regenerate_application_api_key", "description": "Generate a new API key for an application", "parameter": {}}, {"name": "list_error_groups", "description": "List error groups for an application", "parameter": {}}, {"name": "get_error_group", "description": "Get detailed information about an error group", "parameter": {}}, {"name": "resolve_error_group", "description": "Set error group status to resolved", "parameter": {}}, {"name": "activate_error_group", "description": "Set error group status to active", "parameter": {}}, {"name": "ignore_error_group", "description": "Set error group status to ignored", "parameter": {}}, {"name": "permanently_ignore_error_group", "description": "Set error group status to permanently ignored", "parameter": {}}, {"name": "list_deployments", "description": "List deployments for an application", "parameter": {}}, {"name": "get_deployment", "description": "Get deployment details by identifier", "parameter": {}}, {"name": "delete_deployment", "description": "Remove a deployment", "parameter": {}}, {"name": "update_deployment", "description": "Update deployment information", "parameter": {}}, {"name": "reprocess_deployment_commits", "description": "Reprocess deployment commit data", "parameter": {}}, {"name": "list_customers", "description": "List customers for an application", "parameter": {}}, {"name": "list_sessions", "description": "List user sessions for an application", "parameter": {}}, {"name": "get_session", "description": "Get detailed session information", "parameter": {}}, {"name": "list_pages", "description": "List monitored pages for an application", "parameter": {}}, {"name": "get_page_metrics_time_series", "description": "Get time-series performance metrics", "parameter": {}}, {"name": "get_page_metrics_histogram", "description": "Get histogram of performance metrics", "parameter": {}}, {"name": "get_error_metrics_time_series", "description": "Get time-series error metrics", "parameter": {}}, {"name": "list_source_maps", "description": "List source maps for an application", "parameter": {}}, {"name": "get_source_map", "description": "Get source map details", "parameter": {}}, {"name": "update_source_map", "description": "Update source map information", "parameter": {}}, {"name": "delete_source_map", "description": "Remove a source map", "parameter": {}}, {"name": "upload_source_map", "description": "Upload a new source map", "parameter": {}}, {"name": "delete_all_source_maps", "description": "Remove all source maps", "parameter": {}}, {"name": "list_invitations", "description": "List pending team invitations", "parameter": {}}, {"name": "send_invitation", "description": "Send a new team invitation", "parameter": {}}, {"name": "get_invitation", "description": "Get invitation details", "parameter": {}}, {"name": "revoke_invitation", "description": "Revoke a pending invitation", "parameter": {}}]}
{"name": "Rember", "description": "Create spaced repetition flashcards in Rember to remember anything you learn in your chats", "url": "https://github.com/rember/rember-mcp", "readme_file": "official/Rember.md", "summary": "Allows Claude to create flashcards for users with the Model Context Protocol (MCP) for Rember, a platform that helps users study and remember information through spaced repetition.", "tools": [{"name": "create_flashcards", "description": "Creates flashcards with AI by taking a list of notes from Claude and generating a few flashcards for each note using the Rember API.", "parameter": {"notes": "(list of strings) A list of notes from Claude to generate flashcards from."}}]}
{"name": "Riza", "description": "Arbitrary code execution and tool-use platform for LLMs by Riza", "url": "https://github.com/riza-io/riza-mcp", "readme_file": "official/Riza.md", "summary": "An MCP server implementation that wraps the Riza API, providing endpoints as individual tools for executing and managing code securely.", "tools": [{"name": "create_tool", "description": "Creates a new tool by writing code and saving it using the Riza Tools API.", "parameter": {}}, {"name": "fetch_tool", "description": "Fetches saved Riza tools, including their source code, for editing purposes.", "parameter": {}}, {"name": "execute_tool", "description": "Executes a saved tool securely on Riza's code interpreter API.", "parameter": {}}, {"name": "edit_tool", "description": "Edits an existing saved tool.", "parameter": {}}, {"name": "list_tools", "description": "Lists all available saved tools.", "parameter": {}}, {"name": "execute_code", "description": "Executes arbitrary code safely on Riza's code interpreter API without saving it as a tool.", "parameter": {}}]}
{"name": "ScreenshotOne", "description": "Render website screenshots with ScreenshotOne", "url": "https://github.com/screenshotone/mcp/", "readme_file": "official/ScreenshotOne.md", "summary": "An official implementation of an MCP (Model Context Protocol) server for ScreenshotOne, which provides the capability to render website screenshots.", "tools": [{"name": "render-website-screenshot", "description": "Render a screenshot of a website and returns it as an image.", "parameter": {}}]}
{"name": "Semgrep", "description": "Enable AI agents to secure code with Semgrep.", "url": "https://github.com/semgrep/mcp", "readme_file": "official/Semgrep.md", "summary": "A Model Context Protocol (MCP) server for using Semgrep to scan code for security vulnerabilities. It integrates with various IDEs and platforms to provide secure coding practices and context-aware assistance.", "tools": [{"name": "security_check", "description": "Scan code for security vulnerabilities", "parameter": {}}, {"name": "semgrep_scan", "description": "Scan code files for security vulnerabilities with a given config string", "parameter": {"code_files": "(list of objects) List of code files to scan, each with 'filename' and 'content' keys"}}, {"name": "semgrep_scan_with_custom_rule", "description": "Scan code files using a custom Semgrep rule", "parameter": {"code_files": "(list of objects) List of code files to scan, each with 'filename' and 'content' keys", "custom_rule": "(string) Custom Semgrep rule to use for scanning"}}, {"name": "get_abstract_syntax_tree", "description": "Output the Abstract Syntax Tree (AST) of code", "parameter": {"code": "(string) Code to generate the AST for"}}, {"name": "supported_languages", "description": "Return the list of languages Semgrep supports", "parameter": {}}, {"name": "semgrep_rule_schema", "description": "Fetches the latest semgrep rule JSON Schema", "parameter": {}}]}
{"name": "SingleStore", "description": "Interact with the SingleStore database platform", "url": "https://github.com/singlestore-labs/mcp-server-singlestore", "readme_file": "official/SingleStore.md", "summary": "A server implementing the Model Context Protocol (MCP) for SingleStore, allowing seamless interaction with SingleStore using natural language through compatible clients like Claude Desktop and Cursor.", "tools": [{"name": "workspace_groups_info", "description": "Retrieve details about the workspace groups accessible to the user", "parameter": {}}, {"name": "workspaces_info", "description": "Retrieve details about the workspaces in a specific workspace group", "parameter": {"workspaceGroupID": "(string) ID of the workspace group"}}, {"name": "organization_info", "description": "Retrieve details about the user's current organization", "parameter": {}}, {"name": "list_of_regions", "description": "Retrieve a list of all regions that support workspaces for the user", "parameter": {}}, {"name": "execute_sql", "description": "Execute SQL operations on a connected workspace", "parameter": {"workspace_group_identifier": "(string) Identifier of the workspace group", "workspace_identifier": "(string) Identifier of the workspace", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "database": "(string) Name of the database", "sql_query": "(string) SQL query to execute"}}, {"name": "list_virtual_workspaces", "description": "List all starter workspaces accessible to the user", "parameter": {}}, {"name": "create_virtual_workspace", "description": "Create a new starter workspace with a user", "parameter": {"name": "(string) Name of the starter workspace", "database_name": "(string) Name of the database to create", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "workspace_group": "(object) Object containing 'name' (optional) and 'cellID' (mandatory)"}}, {"name": "execute_sql_on_virtual_workspace", "description": "Execute SQL operations on a virtual workspace", "parameter": {"virtual_workspace_id": "(string) ID of the virtual workspace", "username": "(string) Username for accessing the workspace", "password": "(string) Password for the user", "sql_query": "(string) SQL query to execute"}}, {"name": "list_notebook_samples", "description": "List all notebook samples available in SingleStore Spaces", "parameter": {}}, {"name": "create_notebook", "description": "Create a new notebook in the user's personal space", "parameter": {"notebook_name": "(string) Name of the notebook", "content": "(Optional, string) Content of the notebook"}}, {"name": "list_personal_files", "description": "List all files in the user's personal space", "parameter": {}}, {"name": "create_scheduled_job", "description": "Create a new scheduled job to run a notebook", "parameter": {"name": "(string) Name for the job", "notebook_path": "(string) Path to the notebook to execute", "schedule_mode": "(string) Once or Recurring", "execution_interval_minutes": "(Optional, number) Minutes between executions", "start_at": "(Optional, string) When to start the job", "description": "(Optional, string) Description of the job", "create_snapshot": "(Optional, boolean) Whether to create notebook snapshots", "runtime_name": "(string) Name of the runtime environment", "parameters": "(Optional, object) Parameters for the job", "target_config": "(Optional, object) Target configuration for the job"}}, {"name": "get_job_details", "description": "Get details about a specific job", "parameter": {"job_id": "(string) ID of the job"}}, {"name": "list_job_executions", "description": "List execution history for a specific job", "parameter": {"job_id": "(string) ID of the job", "start": "(Optional, string) Start date for the execution history", "end": "(Optional, string) End date for the execution history"}}]}
{"name": "StarRocks", "description": "Interact with StarRocks", "url": "https://github.com/StarRocks/mcp-server-starrocks", "readme_file": "official/StarRocks.md", "summary": "The StarRocks MCP Server acts as a bridge between AI assistants and StarRocks databases, enabling direct SQL execution, database exploration, data visualization, and retrieval of detailed schema/data overviews.", "tools": [{"name": "read_query", "description": "Execute a SELECT query or other commands that return a ResultSet (e.g., SHOW, DESCRIBE).", "parameter": {"query": "(string) SQL query string"}}, {"name": "write_query", "description": "Execute a DDL (CREATE, ALTER, DROP), DML (INSERT, UPDATE, DELETE), or other StarRocks command that does not return a ResultSet.", "parameter": {"query": "(string) SQL command string"}}, {"name": "query_and_plotly_chart", "description": "Executes a SQL query, loads the results into a Pandas DataFrame, and generates a Plotly chart using a provided Python expression.", "parameter": {"query": "(string) SQL query to fetch data", "plotly_expr": "(string) Python expression string using 'px' (Plotly Express) and 'df' (DataFrame). Example: 'px.scatter(df, x=\"col1\", y=\"col2\")'"}}, {"name": "table_overview", "description": "Get an overview of a specific table: columns (from DESCRIBE), total row count, and sample rows (LIMIT 3). Uses an in-memory cache unless refresh is true.", "parameter": {"table": "(string) Table name, optionally prefixed with database name (e.g., 'db_name.table_name' or 'table_name'). If database is omitted, uses STARROCKS_DB environment variable if set.", "refresh": "(Optional, boolean) Set to true to bypass the cache. Defaults to false."}}, {"name": "db_overview", "description": "Get an overview (columns, row count, sample rows) for all tables within a specified database. Uses the table-level cache for each table unless refresh is true.", "parameter": {"db": "(string) Database name. Optional if STARROCKS_DB env var is set.", "refresh": "(Optional, boolean) Set to true to bypass the cache for all tables in the DB. Defaults to false."}}]}
{"name": "Stripe", "description": "Interact with Stripe API", "url": "https://github.com/stripe/agent-toolkit", "readme_file": "official/Stripe.md", "summary": "The Stripe MCP Server enables integration with Stripe APIs through function calling, supporting popular agent frameworks like OpenAI's Agent SDK, LangChain, CrewAI, Vercel's AI SDK, and Model Context Protocol (MCP). It provides a way to perform various Stripe operations such as creating customers, products, prices, and payment links, as well as managing invoices, subscriptions, refunds, and disputes.", "tools": [{"name": "createCustomer", "description": "Creates a new customer in Stripe.", "parameter": {"name": "(string) The customer's name.", "email": "(string) The customer's email address.", "phone": "(Optional, string) The customer's phone number."}}, {"name": "listCustomers", "description": "Lists all customers in Stripe.", "parameter": {}}, {"name": "createCoupon", "description": "Creates a new coupon in Stripe.", "parameter": {"percent_off": "(number) The percentage discount.", "duration": "(string) The duration of the coupon (e.g., 'once', 'repeating').", "duration_in_months": "(Optional, number) The number of months the coupon lasts if the duration is 'repeating'."}}, {"name": "listCoupons", "description": "Lists all coupons in Stripe.", "parameter": {}}, {"name": "createProduct", "description": "Creates a new product in Stripe.", "parameter": {"name": "(string) The product's name.", "description": "(string) The product's description.", "unit_label": "(Optional, string) The label for the unit of measure."}}, {"name": "listProducts", "description": "Lists all products in Stripe.", "parameter": {}}, {"name": "createPrice", "description": "Creates a new price in Stripe.", "parameter": {"product": "(string) The ID of the product this price is associated with.", "unit_amount": "(number) The unit amount in cents.", "currency": "(string) The currency of the price."}}, {"name": "listPrices", "description": "Lists all prices in Stripe.", "parameter": {}}, {"name": "createPaymentLink", "description": "Creates a new payment link in Stripe.", "parameter": {"line_items": "(array) An array of line items to include in the payment link.", "success_url": "(string) The URL to redirect to after a successful payment.", "cancel_url": "(string) The URL to redirect to if the payment is canceled."}}, {"name": "createInvoice", "description": "Creates a new invoice in Stripe.", "parameter": {"customer": "(string) The ID of the customer to create the invoice for.", "lines": "(array) An array of line items to include in the invoice."}}, {"name": "createInvoiceItem", "description": "Creates a new invoice item in Stripe.", "parameter": {"customer": "(string) The ID of the customer to create the invoice item for.", "amount": "(number) The amount of the invoice item in cents.", "currency": "(string) The currency of the invoice item."}}, {"name": "finalizeInvoice", "description": "Finalizes an invoice in Stripe.", "parameter": {"invoice": "(string) The ID of the invoice to finalize."}}, {"name": "retrieveBalance", "description": "Retrieves the current balance in Stripe.", "parameter": {}}, {"name": "listSubscriptions", "description": "Lists all subscriptions in Stripe.", "parameter": {}}, {"name": "updateSubscription", "description": "Updates an existing subscription in Stripe.", "parameter": {"subscription": "(string) The ID of the subscription to update.", "items": "(array) An array of subscription items to update."}}, {"name": "cancelSubscription", "description": "Cancels an existing subscription in Stripe.", "parameter": {"subscription": "(string) The ID of the subscription to cancel."}}, {"name": "createRefund", "description": "Creates a new refund in Stripe.", "parameter": {"charge": "(string) The ID of the charge to refund.", "amount": "(Optional, number) The amount to refund in cents."}}, {"name": "listDisputes", "description": "Lists all disputes in Stripe.", "parameter": {}}, {"name": "updateDispute", "description": "Updates an existing dispute in Stripe.", "parameter": {"dispute": "(string) The ID of the dispute to update.", "evidence": "(object) Evidence to submit for the dispute."}}]}
{"name": "Tavily", "description": "Search engine for AI agents (search + extract) powered by Tavily", "url": "https://github.com/tavily-ai/tavily-mcp", "readme_file": "official/Tavily.md", "summary": "The Tavily MCP server provides seamless interaction with the tavily-search and tavily-extract tools, enabling real-time web search capabilities and intelligent data extraction from web pages.", "tools": [{"name": "tavily-search", "description": "Performs real-time web searches with sophisticated filtering options and domain-specific search features.", "parameter": {}}, {"name": "tavily-extract", "description": "Extracts intelligent data from web pages, such as main content, images, and metadata.", "parameter": {}}]}
{"name": "Thirdweb", "description": "Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by Thirdweb", "url": "https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp", "readme_file": "official/Thirdweb.md", "summary": "A comprehensive toolkit for blockchain data analysis, wallet management, and AI agent interaction with blockchains, featuring Insight for data analysis, Engine for wallet and contract operations, Storage for decentralized file management, and Nebula for natural language-powered blockchain interactions.", "tools": [{"name": "get_tools", "description": "Retrieves a list of tools for AI agents, which can be used with different frameworks like LangChain and OpenAI Agents.", "parameter": {"secret_key": "(string) The secret key required for authentication."}}]}
{"name": "Tinybird", "description": "Interact with Tinybird serverless ClickHouse platform", "url": "https://github.com/tinybirdco/mcp-tinybird", "readme_file": "official/Tinybird.md", "summary": "An MCP server to interact with a Tinybird Workspace from any MCP client. It supports querying data sources, getting results from API endpoints, and pushing data files.", "tools": [{"name": "list-data-sources", "description": "Lists all Data Sources in the Tinybird Workspace", "parameter": {}}, {"name": "list-pipes", "description": "Lists all Pipe Endpoints in the Tinybird Workspace", "parameter": {}}, {"name": "get-data-source", "description": "Gets the information of a Data Source given its name, including the schema", "parameter": {"name": "(string) The name of the Data Source"}}, {"name": "get-pipe", "description": "Gets the information of a Pipe Endpoint given its name, including its nodes and SQL transformation", "parameter": {"name": "(string) The name of the Pipe Endpoint"}}, {"name": "request-pipe-data", "description": "Requests data from a Pipe Endpoint via an HTTP request. Pipe endpoints can have parameters to filter the analytical data", "parameter": {"name": "(string) The name of the Pipe Endpoint", "parameters": "(Optional, object) Parameters to filter the data"}}, {"name": "run-select-query", "description": "Allows to run a select query over a Data Source to extract insights", "parameter": {"query": "(string) The SQL select query"}}, {"name": "append-insight", "description": "Adds a new business insight to the memo resource", "parameter": {"insight": "(string) The business insight to add"}}, {"name": "llms-tinybird-docs", "description": "Contains the whole Tinybird product documentation, so you can use it to get context about what Tinybird is, what it does, API reference and more", "parameter": {}}, {"name": "save-event", "description": "Sends an event to a Tinybird Data Source. Use it to save a user-generated prompt to the prompts Data Source", "parameter": {"event": "(object) The event data to send"}}, {"name": "analyze-pipe", "description": "Uses the Tinybird analyze API to run a ClickHouse explain on the Pipe Endpoint query and check if indexes, sorting key, and partition key are being used and propose optimization suggestions", "parameter": {"name": "(string) The name of the Pipe Endpoint"}}, {"name": "push-datafile", "description": "Creates a remote Data Source or Pipe in the Tinybird Workspace from a local datafile", "parameter": {"file_path": "(string) The path to the local datafile", "data_source_name": "(string) The name of the Data Source to create", "pipe_name": "(Optional, string) The name of the Pipe to create"}}]}
{"name": "Unstructured", "description": "Set up and interact with your unstructured data processing workflows in Unstructured Platform", "url": "https://github.com/Unstructured-IO/UNS-MCP", "readme_file": "official/Unstructured.md", "summary": "An MCP server implementation for interacting with the Unstructured API. It provides tools to manage sources, destinations, workflows, and jobs.", "tools": [{"name": "list_sources", "description": "Lists available sources from the Unstructured API.", "parameter": {}}, {"name": "get_source_info", "description": "Get detailed information about a specific source connector.", "parameter": {}}, {"name": "create_source_connector", "description": "Create a source connector.", "parameter": {}}, {"name": "update_source_connector", "description": "Update an existing source connector by params.", "parameter": {}}, {"name": "delete_source_connector", "description": "Delete a source connector by source id.", "parameter": {}}, {"name": "list_destinations", "description": "Lists available destinations from the Unstructured API.", "parameter": {}}, {"name": "get_destination_info", "description": "Get detailed info about a specific destination connector.", "parameter": {}}, {"name": "create_destination_connector", "description": "Create a destination connector by params.", "parameter": {}}, {"name": "update_destination_connector", "description": "Update an existing destination connector by destination id.", "parameter": {}}, {"name": "delete_destination_connector", "description": "Delete a destination connector by destination id.", "parameter": {}}, {"name": "list_workflows", "description": "Lists workflows from the Unstructured API.", "parameter": {}}, {"name": "get_workflow_info", "description": "Get detailed information about a specific workflow.", "parameter": {}}, {"name": "create_workflow", "description": "Create a new workflow with source, destination id, etc.", "parameter": {}}, {"name": "run_workflow", "description": "Run a specific workflow with workflow id.", "parameter": {}}, {"name": "update_workflow", "description": "Update an existing workflow by params.", "parameter": {}}, {"name": "delete_workflow", "description": "Delete a specific workflow by id.", "parameter": {}}, {"name": "list_jobs", "description": "Lists jobs for a specific workflow from the Unstructured API.", "parameter": {}}, {"name": "get_job_info", "description": "Get detailed information about a specific job by job id.", "parameter": {}}, {"name": "cancel_job", "description": "Delete a specific job by id.", "parameter": {}}, {"name": "list_workflows_with_finished_jobs", "description": "Lists all workflows that have any completed job, together with information about source and destination details.", "parameter": {}}, {"name": "invoke_firecrawl_crawlhtml", "description": "Starts a crawl job using Firecrawl to retrieve HTML content.", "parameter": {}}, {"name": "check_crawlhtml_status", "description": "Checks the status of a crawl job.", "parameter": {}}, {"name": "invoke_firecrawl_llmtxt", "description": "Generates LLM-optimized text from crawled pages.", "parameter": {}}, {"name": "check_llmtxt_status", "description": "Retrieves the results of an LLM-optimized text generation job.", "parameter": {}}, {"name": "cancel_crawlhtml_job", "description": "Cancels a crawl job.", "parameter": {}}, {"name": "cancel_llmtxt_job", "description": "Cancels an LLM-optimized text generation job.", "parameter": {}}]}
{"name": "Vectorize", "description": "Vectorize MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.", "url": "https://github.com/vectorize-io/vectorize-mcp-server/", "readme_file": "official/Vectorize.md", "summary": "A Model Context Protocol (MCP) server implementation that integrates with Vectorize for advanced Vector retrieval and text extraction.", "tools": [{"name": "retrieve", "description": "Performs vector search and retrieves documents.", "parameter": {"question": "(string) The query to search for.", "k": "(integer) The number of results to return."}}, {"name": "extract", "description": "Extracts text from a document and chunks it into Markdown format.", "parameter": {"base64document": "(string) The base64-encoded document to extract text from.", "contentType": "(string) The content type of the document."}}, {"name": "deep-research", "description": "Generates a Private Deep Research from your pipeline.", "parameter": {"query": "(string) The query to generate the research report.", "webSearch": "(boolean, optional) Whether to include web search results."}}]}
{"name": "Verodat", "description": "Interact with Verodat AI Ready Data platform", "url": "https://github.com/Verodat/verodat-mcp-server", "readme_file": "official/Verodat.md", "summary": "A Model Context Protocol (MCP) server implementation for Verodat, enabling seamless integration of Verodat's data management capabilities with AI systems. It provides tools for data consumption, design, and management.", "tools": [{"name": "get-accounts", "description": "Retrieve available accounts", "parameter": {}}, {"name": "get-workspaces", "description": "List workspaces within an account", "parameter": {}}, {"name": "get-datasets", "description": "List datasets in a workspace", "parameter": {}}, {"name": "get-dataset-output", "description": "Retrieve actual data from a dataset", "parameter": {}}, {"name": "get-dataset-targetfields", "description": "Retrieve field definitions for a dataset", "parameter": {}}, {"name": "get-queries", "description": "Retrieve existing AI queries", "parameter": {}}, {"name": "get-ai-context", "description": "Get workspace context and data structure", "parameter": {}}, {"name": "execute-ai-query", "description": "Execute AI-powered queries on datasets", "parameter": {}}, {"name": "create-dataset", "description": "Create a new dataset with defined schema", "parameter": {}}, {"name": "upload-dataset-rows", "description": "Upload data rows to existing datasets", "parameter": {}}]}
{"name": "Xero", "description": "Interact with the accounting data in your business using our official MCP server", "url": "https://github.com/XeroAPI/xero-mcp-server", "readme_file": "official/Xero.md", "summary": "A Model Context Protocol (MCP) server implementation for Xero, providing a bridge between the MCP protocol and Xero's API for standardized access to Xero's accounting and business features.", "tools": [{"name": "list-accounts", "description": "Retrieve a list of accounts", "parameter": {}}, {"name": "list-contacts", "description": "Retrieve a list of contacts from Xero", "parameter": {}}, {"name": "list-credit-notes", "description": "Retrieve a list of credit notes", "parameter": {}}, {"name": "list-invoices", "description": "Retrieve a list of invoices", "parameter": {}}, {"name": "list-items", "description": "Retrieve a list of items", "parameter": {}}, {"name": "list-organisation-details", "description": "Retrieve details about an organisation", "parameter": {}}, {"name": "list-profit-and-loss", "description": "Retrieve a profit and loss report", "parameter": {}}, {"name": "list-quotes", "description": "Retrieve a list of quotes", "parameter": {}}, {"name": "list-tax-rates", "description": "Retrieve a list of tax rates", "parameter": {}}, {"name": "list-payments", "description": "Retrieve a list of payments", "parameter": {}}, {"name": "list-trial-balance", "description": "Retrieve a trial balance report", "parameter": {}}, {"name": "list-payroll-employees", "description": "Retrieve a list of Payroll Employees", "parameter": {}}, {"name": "list-payroll-employee-leave", "description": "Retrieve a Payroll Employee's leave records", "parameter": {}}, {"name": "list-payroll-employee-leave-balances", "description": "Retrieve a Payroll Employee's leave balances", "parameter": {}}, {"name": "list-payroll-employee-leave-types", "description": "Retrieve a list of Payroll leave types", "parameter": {}}, {"name": "list-payroll-leave-periods", "description": "Retrieve a list of a Payroll Employee's leave periods", "parameter": {}}, {"name": "list-aged-receivables-by-contact", "description": "Retrieves aged receivables for a contact", "parameter": {}}, {"name": "list-aged-payables-by-contact", "description": "Retrieves aged payables for a contact", "parameter": {}}, {"name": "list-contact-groups", "description": "Retrieve a list of contact groups", "parameter": {}}, {"name": "create-contact", "description": "Create a new contact", "parameter": {}}, {"name": "create-credit-note", "description": "Create a new credit note", "parameter": {}}, {"name": "create-invoice", "description": "Create a new invoice", "parameter": {}}, {"name": "create-payment", "description": "Create a new payment", "parameter": {}}, {"name": "create-quote", "description": "Create a new quote", "parameter": {}}, {"name": "update-contact", "description": "Update an existing contact", "parameter": {}}, {"name": "update-invoice", "description": "Update an existing draft invoice", "parameter": {}}, {"name": "update-quote", "description": "Update an existing draft quote", "parameter": {}}, {"name": "update-credit-note", "description": "Update an existing draft credit note", "parameter": {}}, {"name": "update-payroll-timesheet-line", "description": "Update a line on an existing Payroll Timesheet", "parameter": {}}, {"name": "approve-payroll-timesheet", "description": "Approve a Payroll Timesheet", "parameter": {}}, {"name": "revert-payroll-timesheet", "description": "Revert an approved Payroll Timesheet", "parameter": {}}, {"name": "add-payroll-timesheet-line", "description": "Add new line on an existing Payroll Timesheet", "parameter": {}}, {"name": "delete-payroll-timesheet", "description": "Delete an existing Payroll Timesheet", "parameter": {}}, {"name": "get-payroll-timesheet", "description": "Retrieve an existing Payroll Timesheet", "parameter": {}}]}
{"name": "Airbnb", "description": "Provides tools to search Airbnb and get listing details.", "url": "https://github.com/openbnb-org/mcp-server-airbnb", "readme_file": "community/Airbnb.md", "summary": "MCP Server for searching Airbnb and getting listing details.", "tools": [{"name": "airbnb_search", "description": "Search for Airbnb listings", "parameter": {"location": "(string) The location to search for listings", "placeId": "(Optional, string) The place ID", "checkin": "(Optional, string, YYYY-MM-DD) Check-in date", "checkout": "(Optional, string, YYYY-MM-DD) Check-out date", "adults": "(Optional, number) Number of adults", "children": "(Optional, number) Number of children", "infants": "(Optional, number) Number of infants", "pets": "(Optional, number) Number of pets", "minPrice": "(Optional, number) Minimum price", "maxPrice": "(Optional, number) Maximum price", "cursor": "(Optional, string) Cursor for pagination", "ignoreRobotsText": "(Optional, boolean) Ignore robots.txt rules"}}, {"name": "airbnb_listing_details", "description": "Get detailed information about a specific Airbnb listing", "parameter": {"id": "(string) The ID of the listing", "checkin": "(Optional, string, YYYY-MM-DD) Check-in date", "checkout": "(Optional, string, YYYY-MM-DD) Check-out date", "adults": "(Optional, number) Number of adults", "children": "(Optional, number) Number of children", "infants": "(Optional, number) Number of infants", "pets": "(Optional, number) Number of pets", "ignoreRobotsText": "(Optional, boolean) Ignore robots.txt rules"}}]}
{"name": "AI Agent Marketplace Index", "description": "MCP server to search more than 5000+ AI agents and tools of various categories from AI Agent Marketplace Index and monitor traffic of AI Agents.", "url": "https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp", "readme_file": "community/AI_Agent_Marketplace_Index.md", "summary": "MCP Server for AI Agent Marketplace Index from DeepNLP, allowing AI assistants to search available AI agents by keywords or categories, monitor web traffic performance, and list AI agents to the marketplace.", "tools": [{"name": "search_ai_agent", "description": "General search of AI Agents for information, websites, content, and metric statistics of web traffic, etc.", "parameter": {"q": "(str) Query string for searching AI agents", "limit": "(Optional, int) Maximum number of results to return (default is 100)", "timeout": "(Optional, int) Timeout for the search request in seconds (default is 5)"}}]}
{"name": "Airflow", "description": "A MCP Server that connects to Apache Airflow using official python client.", "url": "https://github.com/yangkyeongmo/mcp-server-apache-airflow", "readme_file": "community/Airflow.md", "summary": "A Model Context Protocol (MCP) server implementation for Apache Airflow, providing a standardized way to interact with Apache Airflow through the Model Context Protocol.", "tools": [{"name": "List DAGs", "description": "Lists all DAGs.", "parameter": {}}, {"name": "Get DAG Details", "description": "Gets details of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Pause DAG", "description": "Pauses a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Unpause DAG", "description": "Unpauses a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Update DAG", "description": "Updates a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Delete DAG", "description": "Deletes a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Get DAG Source", "description": "Gets the source code of a specific DAG.", "parameter": {"file_token": "(string) The token of the DAG source file."}}, {"name": "Patch Multiple DAGs", "description": "Patches multiple DAGs.", "parameter": {}}, {"name": "Reparse DAG File", "description": "Reparses a specific DAG file.", "parameter": {"file_token": "(string) The token of the DAG source file."}}, {"name": "List DAG Runs", "description": "Lists all runs of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Create DAG Run", "description": "Creates a new run for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Get DAG Run Details", "description": "Gets details of a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "Update DAG Run", "description": "Updates a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "Delete DAG Run", "description": "Deletes a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "Get DAG Runs Batch", "description": "Gets a batch of DAG runs.", "parameter": {}}, {"name": "Clear DAG Run", "description": "Clears a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "Set DAG Run Note", "description": "Sets a note for a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "Get Upstream Dataset Events", "description": "Gets upstream dataset events for a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "List DAG Tasks", "description": "Lists all tasks of a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Get Task Details", "description": "Gets details of a specific task.", "parameter": {"dag_id": "(string) The ID of the DAG.", "task_id": "(string) The ID of the task."}}, {"name": "Get Task Instance", "description": "Gets a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}}, {"name": "List Task Instances", "description": "Lists all task instances of a specific DAG run.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run."}}, {"name": "Update Task Instance", "description": "Updates a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}}, {"name": "Clear Task Instances", "description": "Clears task instances.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Set Task Instances State", "description": "Sets the state of task instances.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "List Variables", "description": "Lists all variables.", "parameter": {}}, {"name": "Create Variable", "description": "Creates a new variable.", "parameter": {}}, {"name": "Get Variable", "description": "Gets a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}}, {"name": "Update Variable", "description": "Updates a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}}, {"name": "Delete Variable", "description": "Deletes a specific variable.", "parameter": {"variable_key": "(string) The key of the variable."}}, {"name": "List Connections", "description": "Lists all connections.", "parameter": {}}, {"name": "Create Connection", "description": "Creates a new connection.", "parameter": {}}, {"name": "Get Connection", "description": "Gets a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}}, {"name": "Update Connection", "description": "Updates a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}}, {"name": "Delete Connection", "description": "Deletes a specific connection.", "parameter": {"connection_id": "(string) The ID of the connection."}}, {"name": "Test Connection", "description": "Tests a specific connection.", "parameter": {}}, {"name": "List Pools", "description": "Lists all pools.", "parameter": {}}, {"name": "Create Pool", "description": "Creates a new pool.", "parameter": {}}, {"name": "Get Pool", "description": "Gets a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}}, {"name": "Update Pool", "description": "Updates a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}}, {"name": "Delete Pool", "description": "Deletes a specific pool.", "parameter": {"pool_name": "(string) The name of the pool."}}, {"name": "List XComs", "description": "Lists all XCom entries for a specific task instance.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task."}}, {"name": "Get XCom Entry", "description": "Gets a specific XCom entry.", "parameter": {"dag_id": "(string) The ID of the DAG.", "dag_run_id": "(string) The ID of the DAG run.", "task_id": "(string) The ID of the task.", "xcom_key": "(string) The key of the XCom entry."}}, {"name": "List Datasets", "description": "Lists all datasets.", "parameter": {}}, {"name": "Get Dataset", "description": "Gets a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}}, {"name": "Get Dataset Events", "description": "Gets events for a specific dataset.", "parameter": {}}, {"name": "Create Dataset Event", "description": "Creates a new dataset event.", "parameter": {}}, {"name": "Get DAG Dataset Queued Event", "description": "Gets a queued dataset event for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG.", "uri": "(string) The URI of the dataset."}}, {"name": "Get DAG Dataset Queued Events", "description": "Gets queued dataset events for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Delete DAG Dataset Queued Event", "description": "Deletes a queued dataset event for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG.", "uri": "(string) The URI of the dataset."}}, {"name": "Delete DAG Dataset Queued Events", "description": "Deletes queued dataset events for a specific DAG.", "parameter": {"dag_id": "(string) The ID of the DAG."}}, {"name": "Get Dataset Queued Events", "description": "Gets queued dataset events for a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}}, {"name": "Delete Dataset Queued Events", "description": "Deletes queued dataset events for a specific dataset.", "parameter": {"uri": "(string) The URI of the dataset."}}, {"name": "Get Health", "description": "Gets the health status of the server.", "parameter": {}}, {"name": "Get DAG Stats", "description": "Gets statistics for all DAGs.", "parameter": {}}, {"name": "Get Config", "description": "Gets the configuration of the server.", "parameter": {}}, {"name": "Get Plugins", "description": "Gets a list of plugins.", "parameter": {}}, {"name": "List Providers", "description": "Lists all providers.", "parameter": {}}, {"name": "List Event Logs", "description": "Lists all event logs.", "parameter": {}}, {"name": "Get Event Log", "description": "Gets a specific event log.", "parameter": {"event_log_id": "(string) The ID of the event log."}}, {"name": "Get Import Errors", "description": "Lists all import errors.", "parameter": {}}, {"name": "Get Import Error Details", "description": "Gets details of a specific import error.", "parameter": {"import_error_id": "(string) The ID of the import error."}}, {"name": "Get Health Status", "description": "Gets the health status of the server.", "parameter": {}}, {"name": "Get Version", "description": "Gets the version of the server.", "parameter": {}}]}
{"name": "Airtable", "description": "Read and write access to Airtable databases, with schema inspection.", "url": "https://github.com/domdomegg/airtable-mcp-server", "readme_file": "community/Airtable.md", "summary": "A Model Context Protocol server that provides read and write access to Airtable databases, enabling LLMs to inspect database schemas, read, and write records.", "tools": [{"name": "list_records", "description": "Lists records from a specified Airtable table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to query", "maxRecords": "(number, optional) Maximum number of records to return. Defaults to 100.", "filterByFormula": "(string, optional) Airtable formula to filter records"}}, {"name": "search_records", "description": "Search for records containing specific text", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to query", "searchTerm": "(string, required) Text to search for in records", "fieldIds": "(array, optional) Specific field IDs to search in. If not provided, searches all text-based fields.", "maxRecords": "(number, optional) Maximum number of records to return. Defaults to 100."}}, {"name": "list_bases", "description": "Lists all accessible Airtable bases", "parameter": {}}, {"name": "list_tables", "description": "Lists all tables in a specific base", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "detailLevel": "(string, optional) The amount of detail to get about the tables (tableIdentifiersOnly, identifiersOnly, or full)"}}, {"name": "describe_table", "description": "Gets detailed information about a specific table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table to describe", "detailLevel": "(string, optional) The amount of detail to get about the table (tableIdentifiersOnly, identifiersOnly, or full)"}}, {"name": "get_record", "description": "Gets a specific record by ID", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "recordId": "(string, required) The ID of the record to retrieve"}}, {"name": "create_record", "description": "Creates a new record in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "fields": "(object, required) The fields and values for the new record"}}, {"name": "update_records", "description": "Updates one or more records in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "records": "(array, required) Array of objects containing record ID and fields to update"}}, {"name": "delete_records", "description": "Deletes one or more records from a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "recordIds": "(array, required) Array of record IDs to delete"}}, {"name": "create_table", "description": "Creates a new table in a base", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "name": "(string, required) Name of the new table", "description": "(string, optional) Description of the table", "fields": "(array, required) Array of field definitions (name, type, description, options)"}}, {"name": "update_table", "description": "Updates a table's name or description", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "name": "(string, optional) New name for the table", "description": "(string, optional) New description for the table"}}, {"name": "create_field", "description": "Creates a new field in a table", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "name": "(string, required) Name of the new field", "type": "(string, required) Type of the field", "description": "(string, optional) Description of the field", "options": "(object, optional) Field-specific options"}}, {"name": "update_field", "description": "Updates a field's name or description", "parameter": {"baseId": "(string, required) The ID of the Airtable base", "tableId": "(string, required) The ID of the table", "fieldId": "(string, required) The ID of the field", "name": "(string, optional) New name for the field", "description": "(string, optional) New description for the field"}}]}
{"name": "Anki", "description": "An MCP server for interacting with your Anki decks and cards.", "url": "https://github.com/scorzeth/anki-mcp-server", "readme_file": "community/Anki.md", "summary": "An MCP server implementation that connects to a locally running Anki, providing card review and creation. It works with the Anki desktop app and the Anki-Connect add-on.", "tools": [{"name": "update_cards", "description": "Marks cards with given card IDs as answered and gives them an ease score between 1 (Again) and 4 (Easy)", "parameter": {"answers": "(array) Array of objects with `cardId` (number) and `ease` (number) fields"}}, {"name": "add_card", "description": "Creates a new card in the Default Anki deck", "parameter": {"front": "(string) Front of card", "back": "(string) Back of card"}}, {"name": "get_due_cards", "description": "Returns n number of cards currently due for review", "parameter": {"num": "(number) Number of cards"}}, {"name": "get_new_cards", "description": "Returns n number of cards from new", "parameter": {"num": "(number) Number of cards"}}]}
{"name": "Any Chat Completions", "description": "Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.", "url": "https://github.com/pyroprompts/any-chat-completions-mcp", "readme_file": "community/Any_Chat_Completions.md", "summary": "A TypeScript-based MCP server that integrates Claude with any OpenAI SDK Compatible Chat Completion API, including OpenAI, Perplexity, Groq, xAI, PyroPrompts, and more.", "tools": [{"name": "chat", "description": "Relays a question to a configured AI Chat Provider.", "parameter": {}}]}
{"name": "Apache Gravitino(incubating)", "description": "Allow LLMs to explore metadata of structured data and unstructured data with Gravitino, and perform data governance tasks including tagging/classification.", "url": "https://github.com/datastrato/mcp-server-gravitino", "readme_file": "community/Apache_Gravitino(incubating).md", "summary": "MCP server providing Gravitino APIs, integrating FastMCP for metadata management, including support for catalog/schema/table metadata, tags, and user-role information.", "tools": [{"name": "get_list_of_catalogs", "description": "Get a list of catalogs with basic information", "parameter": {}}, {"name": "get_list_of_schemas", "description": "Get a list of schemas with basic information", "parameter": {}}, {"name": "get_list_of_tables", "description": "Get a paginated list of tables with basic information", "parameter": {}}, {"name": "get_table_by_fqn", "description": "Get detailed table information by fully qualified name", "parameter": {}}, {"name": "get_table_columns_by_fqn", "description": "Get table columns information by fully qualified name", "parameter": {}}, {"name": "get_list_of_tags", "description": "Get a list of tags with basic information", "parameter": {}}, {"name": "associate_tag_to_table", "description": "Associate a tag to a table", "parameter": {}}, {"name": "associate_tag_to_column", "description": "Associate a tag to a column", "parameter": {}}, {"name": "list_objects_by_tag", "description": "Get a list of objects associated with a tag", "parameter": {}}, {"name": "get_list_of_roles", "description": "Get a list of roles with basic information", "parameter": {}}, {"name": "get_list_of_users", "description": "Get a list of users with basic information", "parameter": {}}, {"name": "grant_role_to_user", "description": "Grant a role to a user", "parameter": {}}, {"name": "revoke_role_from_user", "description": "Revoke a role from a user", "parameter": {}}]}
{"name": "Apple Calendar", "description": "An MCP server that allows you to interact with your MacOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.", "url": "https://github.com/Omar-v2/mcp-ical", "readme_file": "community/Apple_Calendar.md", "summary": "The MCP iCal Server transforms natural language interactions into calendar management tasks on macOS, enabling users to create, update, and manage calendar events through conversational commands.", "tools": [{"name": "Event Creation", "description": "Creates calendar events based on natural language input.", "parameter": {"calendar": "(Optional, string) The calendar to add the event to.", "location": "(Optional, string) The location of the event.", "notes": "(Optional, string) Additional notes for the event.", "reminder": "(Optional, string) Reminder settings for the event.", "recurring": "(Optional, string) Recurrence pattern for the event."}}, {"name": "Smart Schedule Management & Availability", "description": "Provides information about the user's schedule and finds available time slots for meetings.", "parameter": {}}, {"name": "Intelligent Event Updates", "description": "Updates existing calendar events based on natural language input.", "parameter": {"time": "(Optional, string) New time for the event.", "date": "(Optional, string) New date for the event.", "calendar": "(Optional, string) New calendar for the event.", "location": "(Optional, string) New location for the event.", "notes": "(Optional, string) Additional notes to add to the event.", "reminder": "(Optional, string) New reminder settings for the event.", "recurring": "(Optional, string) New recurrence pattern for the event."}}, {"name": "Calendar Management", "description": "Manages and provides information about available calendars.", "parameter": {}}]}
{"name": "Aranet4", "description": "MCP Server to manage your Aranet4 CO2 sensor. Fetch data and store in a local SQLite. Ask questions about historical data.", "url": "https://github.com/diegobit/aranet4-mcp-server", "readme_file": "community/Aranet4.md", "summary": "MCP server to manage Aranet4 CO2 sensors, including scanning devices, fetching and storing data, and querying historical measurements.", "tools": [{"name": "init_aranet4_config", "description": "Assisted configuration of the Aranet4 device.", "parameter": {}}, {"name": "scan_devices", "description": "Scan for nearby Bluetooth Aranet4 devices.", "parameter": {}}, {"name": "get_configuration_and_db_stats", "description": "Get the current configuration and database statistics.", "parameter": {}}, {"name": "set_configuration", "description": "Set values in the configuration file.", "parameter": {}}, {"name": "fetch_new_data", "description": "Fetch new data from the configured nearby Aranet4 device and save it to the local database.", "parameter": {}}, {"name": "get_recent_data", "description": "Get recent data from the local database. Can specify the number of measurements.", "parameter": {"measurements": "(Optional, int) Number of recent measurements to retrieve."}}, {"name": "get_data_by_timerange", "description": "Get data within a specific time range from the local database. Can specify the number of measurements.", "parameter": {"start_time": "(str) Start time of the range.", "end_time": "(str) End time of the range.", "measurements": "(Optional, int) Number of measurements to retrieve."}}]}
{"name": "ArangoDB", "description": "MCP Server that provides database interaction capabilities through ArangoDB.", "url": "https://github.com/ravenwits/mcp-server-arangodb", "readme_file": "community/ArangoDB.md", "summary": "A TypeScript-based MCP server that provides database interaction capabilities through ArangoDB. It implements core database operations and allows seamless integration with ArangoDB through MCP tools.", "tools": [{"name": "arango_query", "description": "Execute AQL queries", "parameter": {"query": "(string) AQL query string", "bindVariables": "(Optional, object) Bind variables for parameterized queries"}}, {"name": "arango_insert", "description": "Insert documents into collections", "parameter": {"collection": "(string) Collection name", "document": "(object) Document object"}}, {"name": "arango_update", "description": "Update existing documents", "parameter": {"collection": "(string) Collection name", "key": "(string) Document key", "update": "(object) Update object"}}, {"name": "arango_remove", "description": "Remove documents from collections", "parameter": {"collection": "(string) Collection name", "key": "(string) Document key"}}, {"name": "arango_backup", "description": "Backup all collections to JSON files", "parameter": {"outputDir": "(string) Output directory path", "collection": "(Optional, string) Collection name to backup", "docLimit": "(Optional, number) Maximum number of documents to backup per collection"}}, {"name": "arango_list_collections", "description": "List all collections in the database", "parameter": {}}, {"name": "arango_create_collection", "description": "Create a new collection in the database", "parameter": {"name": "(string) Collection name", "type": "(Optional, string) Collection type (document or edge collection)", "waitForSync": "(Optional, boolean) Configure waitForSync behavior for write operations"}}]}
{"name": "Atlassian", "description": "Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.", "url": "https://github.com/sooperset/mcp-atlassian", "readme_file": "community/Atlassian.md", "summary": "A Model Context Protocol (MCP) server for integrating with Atlassian products (Confluence and Jira). It supports both Cloud and Server/Data Center deployments, enabling automatic updates, AI-powered search, smart issue filtering, and content management.", "tools": [{"name": "jira_get_issue", "description": "Get details of a specific issue", "parameter": {}}, {"name": "jira_search", "description": "Search issues using JQL", "parameter": {}}, {"name": "jira_create_issue", "description": "Create a new issue", "parameter": {}}, {"name": "jira_update_issue", "description": "Update an existing issue", "parameter": {}}, {"name": "jira_transition_issue", "description": "Transition an issue to a new status", "parameter": {}}, {"name": "jira_add_comment", "description": "Add a comment to an issue", "parameter": {}}, {"name": "confluence_search", "description": "Search Confluence content using CQL", "parameter": {}}, {"name": "confluence_get_page", "description": "Get content of a specific page", "parameter": {}}, {"name": "confluence_create_page", "description": "Create a new page", "parameter": {}}, {"name": "confluence_update_page", "description": "Update an existing page", "parameter": {}}]}
{"name": "AWS", "description": "Perform operations on your AWS resources using an LLM.", "url": "https://github.com/rishikavikondala/mcp-server-aws", "readme_file": "community/AWS.md", "summary": "A Model Context Protocol server implementation for AWS operations that supports S3 and DynamoDB services, with automatic logging accessible through the audit://aws-operations resource endpoint.", "tools": [{"name": "s3_bucket_create", "description": "Create a new S3 bucket", "parameter": {}}, {"name": "s3_bucket_list", "description": "List all S3 buckets", "parameter": {}}, {"name": "s3_bucket_delete", "description": "Delete an S3 bucket", "parameter": {}}, {"name": "s3_object_upload", "description": "Upload an object to S3", "parameter": {}}, {"name": "s3_object_delete", "description": "Delete an object from S3", "parameter": {}}, {"name": "s3_object_list", "description": "List objects in an S3 bucket", "parameter": {}}, {"name": "s3_object_read", "description": "Read an object's content from S3", "parameter": {}}, {"name": "dynamodb_table_create", "description": "Create a new DynamoDB table", "parameter": {}}, {"name": "dynamodb_table_describe", "description": "Get details about a DynamoDB table", "parameter": {}}, {"name": "dynamodb_table_delete", "description": "Delete a DynamoDB table", "parameter": {}}, {"name": "dynamodb_table_update", "description": "Update a DynamoDB table", "parameter": {}}, {"name": "dynamodb_item_put", "description": "Put an item into a DynamoDB table", "parameter": {}}, {"name": "dynamodb_item_get", "description": "Get an item from a DynamoDB table", "parameter": {}}, {"name": "dynamodb_item_update", "description": "Update an item in a DynamoDB table", "parameter": {}}, {"name": "dynamodb_item_delete", "description": "Delete an item from a DynamoDB table", "parameter": {}}, {"name": "dynamodb_item_query", "description": "Query items in a DynamoDB table", "parameter": {}}, {"name": "dynamodb_item_scan", "description": "Scan items in a DynamoDB table", "parameter": {}}, {"name": "dynamodb_batch_get", "description": "Batch get multiple items from DynamoDB tables", "parameter": {}}, {"name": "dynamodb_item_batch_write", "description": "Batch write operations (put/delete) for DynamoDB items", "parameter": {}}, {"name": "dynamodb_batch_execute", "description": "Execute multiple PartiQL statements in a batch", "parameter": {}}, {"name": "dynamodb_describe_ttl", "description": "Get the TTL settings for a table", "parameter": {}}, {"name": "dynamodb_update_ttl", "description": "Update the TTL settings for a table", "parameter": {}}]}
{"name": "AWS Athena", "description": "A MCP server for AWS Athena to run SQL queries on Glue Catalog.", "url": "https://github.com/lishenxydlgzs/aws-athena-mcp", "readme_file": "community/AWS_Athena.md", "summary": "A Model Context Protocol (MCP) server for running AWS Athena queries. It enables AI assistants to execute SQL queries against AWS Athena databases and retrieve results.", "tools": [{"name": "run_query", "description": "Execute a SQL query using AWS Athena", "parameter": {"database": "(string) The Athena database to query", "query": "(string) SQL query to execute", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000, max: 10000)"}}, {"name": "get_status", "description": "Check the status of a query execution", "parameter": {"queryExecutionId": "(string) The ID returned from run_query"}}, {"name": "get_result", "description": "Retrieve results for a completed query", "parameter": {"queryExecutionId": "(string) The ID returned from run_query", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000, max: 10000)"}}, {"name": "list_saved_queries", "description": "List all saved (named) queries in Athena", "parameter": {}}, {"name": "run_saved_query", "description": "Run a previously saved query by its ID", "parameter": {"namedQueryId": "(string) ID of the saved query", "databaseOverride": "(Optional, string) Optional override of the saved query's default database", "maxRows": "(Optional, integer) Maximum number of rows to return (default: 1000)", "timeoutMs": "(Optional, integer) Timeout in milliseconds (default: 60000)"}}]}
{"name": "AWS Cost Explorer", "description": "Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models (demo video).", "url": "https://github.com/aarora79/aws-cost-explorer-mcp-server", "readme_file": "community/AWS_Cost_Explorer.md", "summary": "An MCP server for retrieving AWS spend data via Cost Explorer and Amazon Bedrock usage data via CloudWatch Logs. It allows users to analyze and visualize AWS cloud spending data using Anthropic's Claude model as an interactive interface.", "tools": [{"name": "get_ec2_spend_last_day", "description": "Retrieves EC2 spending data for the previous day", "parameter": {}}, {"name": "get_detailed_breakdown_by_day", "description": "Delivers a comprehensive analysis of costs by region, service, and instance type", "parameter": {"days": "(int) Number of days to analyze (default: 7)"}}, {"name": "get_bedrock_daily_usage_stats", "description": "Delivers a per-day breakdown of model usage by region and users", "parameter": {"days": "(int) Number of days to analyze (default: 7)", "region": "(str) AWS region (default: 'us-east-1')", "log_group_name": "(str) Name of the CloudWatch Log Group (default: 'BedrockModelInvocationLogGroup')"}}, {"name": "get_bedrock_hourly_usage_stats", "description": "Delivers a per-day per-hour breakdown of model usage by region and users", "parameter": {"days": "(int) Number of days to analyze (default: 7)", "region": "(str) AWS region (default: 'us-east-1')", "log_group_name": "(str) Name of the CloudWatch Log Group (default: 'BedrockModelInvocationLogGroup')"}}]}
{"name": "AWS Resources Operations", "description": "Run generated python code to securely query or modify any AWS resources supported by boto3.", "url": "https://github.com/baryhuang/mcp-server-aws-resources-python", "readme_file": "community/AWS_Resources_Operations.md", "summary": "A Model Context Protocol (MCP) server implementation that provides running generated Python code to query any AWS resources through boto3. It supports both read and management operations, with permissions dictated by the AWS user role.", "tools": [{"name": "aws_resources_query_or_modify", "description": "Execute a boto3 code snippet to query or modify AWS resources", "parameter": {"code_snippet": "(string) Python code using boto3 to query AWS resources. The code must set a `result` variable with the query output."}}]}
{"name": "AWS S3", "description": "A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.", "url": "https://github.com/aws-samples/sample-mcp-server-s3", "readme_file": "community/AWS_S3.md", "summary": "An MCP server implementation for retrieving data such as PDFs from S3, supporting up to 1000 objects.", "tools": [{"name": "ListBuckets", "description": "Returns a list of all buckets owned by the authenticated sender of the request", "parameter": {}}, {"name": "ListObjectsV2", "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request", "parameter": {}}, {"name": "GetObject", "description": "Retrieves an object from Amazon S3. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported", "parameter": {}}]}
{"name": "Azure ADX", "description": "Query and analyze Azure Data Explorer databases.", "url": "https://github.com/pab1it0/adx-mcp-server", "readme_file": "community/Azure_ADX.md", "summary": "A Model Context Protocol (MCP) server for Azure Data Explorer/Eventhouse in Microsoft Fabric, providing access to clusters and databases through standardized MCP interfaces, allowing AI assistants to execute KQL queries and explore data.", "tools": [{"name": "execute_query", "description": "Execute a KQL query against Azure Data Explorer", "parameter": {"query": "(string) The KQL query to execute"}}, {"name": "list_tables", "description": "List all tables in the configured database", "parameter": {}}, {"name": "get_table_schema", "description": "Get the schema for a specific table", "parameter": {"table_name": "(string) The name of the table to get the schema for"}}, {"name": "sample_table_data", "description": "Get sample data from a table with optional sample size", "parameter": {"table_name": "(string) The name of the table to sample data from", "sample_size": "(Optional, int) The number of rows to sample (default is 10)"}}]}
{"name": "Azure DevOps", "description": "An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.", "url": "https://github.com/Vortiago/mcp-azure-devops", "readme_file": "community/Azure_DevOps.md", "summary": "A Model Context Protocol (MCP) server that enables AI assistants to interact with Azure DevOps services, providing a bridge between natural language interactions and the Azure DevOps REST API.", "tools": [{"name": "Query Work Items", "description": "Search for work items using WIQL queries", "parameter": {}}, {"name": "Get Work Item Details", "description": "View complete work item information", "parameter": {}}, {"name": "Create Work Items", "description": "Add new tasks, bugs, user stories, and other work item types", "parameter": {}}, {"name": "Update Work Items", "description": "Modify existing work items' fields and properties", "parameter": {}}, {"name": "Add Comments", "description": "Post comments on work items", "parameter": {}}, {"name": "View Comments", "description": "Retrieve the comment history for a work item", "parameter": {}}, {"name": "Get Projects", "description": "View all accessible projects in the organization", "parameter": {}}, {"name": "Get Teams", "description": "List all teams within the organization", "parameter": {}}, {"name": "Team Members", "description": "View team membership information", "parameter": {}}, {"name": "Team Area Paths", "description": "Retrieve area paths assigned to teams", "parameter": {}}, {"name": "Team Iterations", "description": "Access team iteration/sprint configurations", "parameter": {}}]}
{"name": "Baidu AI Search", "description": "Web search with Baidu Cloud's AI Search", "url": "https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search", "readme_file": "community/Baidu_AI_Search.md", "summary": "百度智能云千帆AppBuilder-SDK是一站式开发平台的客户端SDK，面向AI原生应用开发者提供调用大模型、能力组件和AI原生应用的功能，支持配置知识库、编排工作流、监控和部署等操作。", "tools": [{"name": "Playground", "description": "用于调用大模型，支持自定义prompt模板和模型参数。", "parameter": {"prompt_template": "(string) 自定义的prompt模板", "model": "(string) 调用的模型名称", "stream": "(Optional, boolean) 是否以流式方式返回结果", "temperature": "(Optional, float) 模型的温度参数，控制输出的随机性"}}, {"name": "RagWithBaiduSearchPro", "description": "结合百度搜索的搜索引擎技术和ERNIE模型的语义理解能力，提供更准确的搜索结果。", "parameter": {"message": "(Message) 输入的消息", "instruction": "(Message) 指令消息"}}, {"name": "AppBuilderClient", "description": "用于访问和管理在百度智能云千帆AppBuilder网页端发布的AI原生应用，支持创建会话和运行应用。", "parameter": {"app_id": "(string) 应用ID", "conversation_id": "(string) 会话ID"}}]}
{"name": "Base Free USDC Transfer", "description": "Send USDC on Base for free using Claude AI! Built with Coinbase CDP.", "url": "https://github.com/magnetai/mcp-free-usdc-transfer", "readme_file": "community/Base_Free_USDC_Transfer.md", "summary": "An MCP server implementation enabling free USDC transfers on Base with Coinbase CDP MPC Wallet integration. It supports sending USDC to any address or ENS/BaseName domain on Base, creating and managing Coinbase MPC wallets, and automatic name resolution for ENS and BaseName domains.", "tools": [{"name": "tranfer-usdc", "description": "Analyzes the value of the purchased items and schedules a USDC transfer to the recipient via the Base chain. Does not wait for the transaction to complete.", "parameter": {"usdc_amount": "(number) USDC amount, greater than 0.", "recipient": "(string) Recipient's on-chain address or ENS domain (e.g., example.eth)."}}, {"name": "create_coinbase_mpc_wallet", "description": "Creates a new Coinbase MPC wallet address. If a wallet already exists, returns the existing wallet address.", "parameter": {}}]}
{"name": "Basic Memory", "description": "Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.", "url": "https://github.com/basicmachines-co/basic-memory", "readme_file": "community/Basic_Memory.md", "summary": "Basic Memory enables persistent knowledge building through natural conversations with Large Language Models (LLMs) like Claude, storing everything in simple Markdown files on your computer. It uses the Model Context Protocol (MCP) to allow LLMs to read and write to a local knowledge base, creating a bi-directional, structured, and traversable knowledge graph.", "tools": [{"name": "write_note", "description": "Create or update notes in the knowledge base.", "parameter": {"title": "(string) The title of the note", "content": "(string) The content of the note", "folder": "(string) The folder where the note should be saved", "tags": "(array) Tags to associate with the note"}}, {"name": "read_note", "description": "Read notes by title or permalink.", "parameter": {"identifier": "(string) The title or permalink of the note", "page": "(integer) The page number for paginated results", "page_size": "(integer) The number of items per page"}}, {"name": "build_context", "description": "Navigate the knowledge graph via memory:// URLs.", "parameter": {"url": "(string) The memory:// URL to start from", "depth": "(integer) The depth to traverse the graph", "timeframe": "(string) The timeframe to consider (e.g., 'past week')"}}, {"name": "search_notes", "description": "Search across the knowledge base.", "parameter": {"query": "(string) The search query", "page": "(integer) The page number for paginated results", "page_size": "(integer) The number of items per page"}}, {"name": "recent_activity", "description": "Find recently updated information.", "parameter": {"type": "(string) The type of activity to filter by (e.g., 'note', 'update')", "depth": "(integer) The depth to traverse the graph", "timeframe": "(string) The timeframe to consider (e.g., 'past week')"}}, {"name": "canvas", "description": "Generate knowledge visualizations.", "parameter": {"nodes": "(array) The nodes to include in the visualization", "edges": "(array) The edges to connect the nodes", "title": "(string) The title of the visualization", "folder": "(string) The folder where the visualization should be saved"}}]}
{"name": "Calculator", "description": "This server enables LLMs to use calculator for precise numerical calculations.", "url": "https://github.com/githejie/mcp-server-calculator", "readme_file": "community/Calculator.md", "summary": "A Model Context Protocol server for enabling LLMs to perform precise numerical calculations.", "tools": [{"name": "calculate", "description": "Calculates/evaluates the given expression.", "parameter": {"expression": "(string, required) Expression to be calculated"}}]}
{"name": "CFBD API", "description": "An MCP server for the College Football Data API.", "url": "https://github.com/lenwood/cfbd-mcp-server", "readme_file": "community/CFBD_API.md", "summary": "An MCP server implementation that provides access to college football statistics and data, enabling users to query comprehensive statistics, analyze game results, team records, player statistics, play-by-play data, drive summaries, rankings, and win probability metrics.", "tools": [{"name": "get-games", "description": "Retrieve game data", "parameter": {}}, {"name": "get-records", "description": "Get team records", "parameter": {}}, {"name": "get-games-teams", "description": "Access team game statistics", "parameter": {}}, {"name": "get-plays", "description": "Query play-by-play data", "parameter": {}}, {"name": "get-drives", "description": "Analyze drive information", "parameter": {}}, {"name": "get-play-stats", "description": "View play statistics", "parameter": {}}, {"name": "get-rankings", "description": "Check team rankings", "parameter": {}}, {"name": "get-pregame-win-probability", "description": "See win probabilities", "parameter": {}}, {"name": "get-advanced-box-score", "description": "Access detailed game statistics and analytics", "parameter": {}}]}
{"name": "ChatSum", "description": "Query and Summarize chat messages with LLM. by mcpso", "url": "https://github.com/mcpso/mcp-server-chatsum", "readme_file": "community/ChatSum.md", "summary": "This MCP Server is used to summarize your chat messages.", "tools": [{"name": "query_chat_messages", "description": "Query chat messages with given parameters and summarize chat messages based on the query prompt.", "parameter": {}}]}
{"name": "Chess.com", "description": "Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.", "url": "https://github.com/pab1it0/chess-mcp", "readme_file": "community/Chess.com.md", "summary": "A Model Context Protocol (MCP) server for accessing Chess.com player data, game records, and other public information. It allows AI assistants to search and analyze chess information without requiring authentication.", "tools": [{"name": "get_player_profile", "description": "Get a player's profile from Chess.com", "parameter": {}}, {"name": "get_player_stats", "description": "Get a player's stats from Chess.com", "parameter": {}}, {"name": "is_player_online", "description": "Check if a player is currently online on Chess.com", "parameter": {}}, {"name": "get_titled_players", "description": "Get a list of titled players from Chess.com", "parameter": {}}, {"name": "get_player_current_games", "description": "Get a player's ongoing games on Chess.com", "parameter": {}}, {"name": "get_player_games_by_month", "description": "Get a player's games for a specific month from Chess.com", "parameter": {}}, {"name": "get_player_game_archives", "description": "Get a list of available monthly game archives for a player on Chess.com", "parameter": {}}, {"name": "download_player_games_pgn", "description": "Download PGN files for all games in a specific month from Chess.com", "parameter": {}}, {"name": "get_club_profile", "description": "Get information about a club on Chess.com", "parameter": {}}, {"name": "get_club_members", "description": "Get members of a club on Chess.com", "parameter": {}}]}
{"name": "Chroma", "description": "Vector database server for semantic document search and metadata filtering, built on Chroma", "url": "https://github.com/privetin/chroma", "readme_file": "community/Chroma.md", "summary": "A Model Context Protocol (MCP) server implementation that provides vector database capabilities through Chroma. It supports semantic document search, metadata filtering, and document management with persistent storage.", "tools": [{"name": "create_document", "description": "Create a new document", "parameter": {"document_id": "(string) Unique identifier for the document", "content": "(string) Content of the document", "metadata": "(Optional, object) Key-value pairs of metadata"}}, {"name": "read_document", "description": "Retrieve a document by ID", "parameter": {"document_id": "(string) Unique identifier for the document"}}, {"name": "update_document", "description": "Update an existing document", "parameter": {"document_id": "(string) Unique identifier for the document", "content": "(string) Updated content of the document", "metadata": "(Optional, object) Key-value pairs of updated metadata"}}, {"name": "delete_document", "description": "Remove a document", "parameter": {"document_id": "(string) Unique identifier for the document"}}, {"name": "list_documents", "description": "List all documents", "parameter": {"limit": "(Optional, integer) Maximum number of documents to return", "offset": "(Optional, integer) Offset for pagination"}}, {"name": "search_similar", "description": "Find semantically similar documents", "parameter": {"query": "(string) Query to find similar documents", "num_results": "(Optional, integer) Number of results to return", "metadata_filter": "(Optional, object) Metadata filters", "content_filter": "(Optional, string) Content filter"}}]}
{"name": "ClickUp", "description": "MCP server for ClickUp task management, supporting task creation, updates, bulk operations, and markdown descriptions.", "url": "https://github.com/TaazKareem/clickup-mcp-server", "readme_file": "community/ClickUp.md", "summary": "A Model Context Protocol (MCP) server for integrating ClickUp tasks with AI applications. It allows AI agents to interact with ClickUp tasks, spaces, lists, and folders through a standardized protocol. Features include task management, time tracking, document management, and workspace organization.", "tools": [{"name": "get_workspace_hierarchy", "description": "Get workspace structure", "parameter": {}}, {"name": "create_task", "description": "Create a task", "parameter": {"name": "(string) The name of the task", "listId": "(Optional, string) The ID of the list where the task will be created", "listName": "(Optional, string) The name of the list where the task will be created"}}, {"name": "create_bulk_tasks", "description": "Create multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to create"}}, {"name": "update_task", "description": "Modify task", "parameter": {"taskId": "(string) The ID of the task to update", "taskName": "(Optional, string) The name of the task to update"}}, {"name": "update_bulk_tasks", "description": "Update multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to update, each containing IDs or names"}}, {"name": "get_tasks", "description": "Get tasks from list", "parameter": {"listId": "(string) The ID of the list to get tasks from", "listName": "(Optional, string) The name of the list to get tasks from"}}, {"name": "get_task", "description": "Get single task details", "parameter": {"taskId": "(string) The ID of the task to get", "taskName": "(Optional, string) The name of the task to get (with smart disambiguation)"}}, {"name": "get_workspace_tasks", "description": "Get tasks with filtering", "parameter": {"tags": "(Optional, array) Tags to filter tasks by", "list_ids": "(Optional, array) List IDs to filter tasks by", "space_ids": "(Optional, array) Space IDs to filter tasks by"}}, {"name": "get_task_comments", "description": "Get comments on a task", "parameter": {"taskId": "(string) The ID of the task to get comments from", "taskName": "(Optional, string) The name of the task to get comments from"}}, {"name": "create_task_comment", "description": "Add a comment to a task", "parameter": {"commentText": "(string) The text of the comment", "taskId": "(string) The ID of the task to add the comment to", "taskName": "(Optional, string) The name of the task to add the comment to", "listName": "(Optional, string) The name of the list containing the task"}}, {"name": "attach_task_file", "description": "Attach file to a task", "parameter": {"taskId": "(string) The ID of the task to attach the file to", "taskName": "(Optional, string) The name of the task to attach the file to", "file_data": "(Optional, string) The file data to attach", "file_url": "(Optional, string) The URL of the file to attach"}}, {"name": "delete_task", "description": "Remove task", "parameter": {"taskId": "(string) The ID of the task to delete", "taskName": "(Optional, string) The name of the task to delete"}}, {"name": "delete_bulk_tasks", "description": "Remove multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to delete, each containing IDs or names"}}, {"name": "move_task", "description": "Move task", "parameter": {"taskId": "(string) The ID of the task to move", "taskName": "(Optional, string) The name of the task to move", "listId": "(string) The ID of the target list", "listName": "(Optional, string) The name of the target list"}}, {"name": "move_bulk_tasks", "description": "Move multiple tasks", "parameter": {"tasks[]": "(array) An array of task objects to move, each containing IDs or names", "targetList": "(string) The ID or name of the target list"}}, {"name": "duplicate_task", "description": "Copy task", "parameter": {"taskId": "(string) The ID of the task to duplicate", "taskName": "(Optional, string) The name of the task to duplicate", "listId": "(string) The ID of the target list", "listName": "(Optional, string) The name of the target list"}}, {"name": "create_list", "description": "Create list in space", "parameter": {"name": "(string) The name of the list to create", "spaceId": "(string) The ID of the space where the list will be created", "spaceName": "(Optional, string) The name of the space where the list will be created"}}, {"name": "create_folder", "description": "Create folder", "parameter": {"name": "(string) The name of the folder to create", "spaceId": "(string) The ID of the space where the folder will be created", "spaceName": "(Optional, string) The name of the space where the folder will be created"}}, {"name": "create_list_in_folder", "description": "Create list in folder", "parameter": {"name": "(string) The name of the list to create", "folderId": "(string) The ID of the folder where the list will be created", "folderName": "(Optional, string) The name of the folder where the list will be created"}}, {"name": "get_folder", "description": "Get folder details", "parameter": {"folderId": "(string) The ID of the folder to get", "folderName": "(Optional, string) The name of the folder to get"}}, {"name": "update_folder", "description": "Update folder properties", "parameter": {"folderId": "(string) The ID of the folder to update", "folderName": "(Optional, string) The name of the folder to update"}}, {"name": "delete_folder", "description": "Delete folder", "parameter": {"folderId": "(string) The ID of the folder to delete", "folderName": "(Optional, string) The name of the folder to delete"}}, {"name": "get_list", "description": "Get list details", "parameter": {"listId": "(string) The ID of the list to get", "listName": "(Optional, string) The name of the list to get"}}, {"name": "update_list", "description": "Update list properties", "parameter": {"listId": "(string) The ID of the list to update", "listName": "(Optional, string) The name of the list to update"}}, {"name": "delete_list", "description": "Delete list", "parameter": {"listId": "(string) The ID of the list to delete", "listName": "(Optional, string) The name of the list to delete"}}, {"name": "get_space_tags", "description": "Get space tags", "parameter": {"spaceId": "(string) The ID of the space to get tags from", "spaceName": "(Optional, string) The name of the space to get tags from"}}, {"name": "create_space_tag", "description": "Create tag", "parameter": {"tagName": "(string) The name of the tag to create", "spaceId": "(string) The ID of the space where the tag will be created", "spaceName": "(Optional, string) The name of the space where the tag will be created"}}, {"name": "update_space_tag", "description": "Update tag", "parameter": {"tagName": "(string) The name of the tag to update", "spaceId": "(string) The ID of the space where the tag exists", "spaceName": "(Optional, string) The name of the space where the tag exists"}}, {"name": "delete_space_tag", "description": "Delete tag", "parameter": {"tagName": "(string) The name of the tag to delete", "spaceId": "(string) The ID of the space where the tag exists", "spaceName": "(Optional, string) The name of the space where the tag exists"}}, {"name": "add_tag_to_task", "description": "Add tag to task", "parameter": {"tagName": "(string) The name of the tag to add", "taskId": "(string) The ID of the task to add the tag to", "taskName": "(Optional, string) The name of the task to add the tag to", "listName": "(Optional, string) The name of the list containing the task"}}, {"name": "remove_tag_from_task", "description": "Remove tag from task", "parameter": {"tagName": "(string) The name of the tag to remove", "taskId": "(string) The ID of the task to remove the tag from", "taskName": "(Optional, string) The name of the task to remove the tag from", "listName": "(Optional, string) The name of the list containing the task"}}, {"name": "get_task_time_entries", "description": "Get time entries for a task", "parameter": {"taskId": "(string) The ID of the task to get time entries for", "taskName": "(Optional, string) The name of the task to get time entries for"}}, {"name": "start_time_tracking", "description": "Start time tracking on a task", "parameter": {"taskId": "(string) The ID of the task to start time tracking on", "taskName": "(Optional, string) The name of the task to start time tracking on"}}, {"name": "stop_time_tracking", "description": "Stop current time tracking", "parameter": {}}, {"name": "add_time_entry", "description": "Add manual time entry to a task", "parameter": {"taskId": "(string) The ID of the task to add the time entry to", "taskName": "(Optional, string) The name of the task to add the time entry to", "start": "(string) The start time of the time entry", "duration": "(string) The duration of the time entry"}}, {"name": "delete_time_entry", "description": "Delete a time entry", "parameter": {"timeEntryId": "(string) The ID of the time entry to delete"}}, {"name": "get_current_time_entry", "description": "Get currently running timer", "parameter": {}}, {"name": "create_document", "description": "Create a document", "parameter": {"workspaceId": "(string) The ID of the workspace where the document will be created", "name": "(string) The name of the document", "parentId": "(Optional, string) The ID of the parent item", "parentType": "(Optional, string) The type of the parent item", "visibility": "(Optional, string) The visibility of the document", "create_pages": "(Optional, boolean) Whether to create initial pages"}}, {"name": "get_document", "description": "Get a document", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(Optional, string) The ID of the document", "creator": "(Optional, string) The creator of the document", "deleted": "(Optional, boolean) Whether to include deleted documents", "archived": "(Optional, boolean) Whether to include archived documents", "parent_id": "(Optional, string) The ID of the parent item", "parent_type": "(Optional, string) The type of the parent item", "limit": "(Optional, integer) The maximum number of documents to return", "next_cursor": "(Optional, string) The cursor for pagination"}}, {"name": "list_documents", "description": "List documents", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(Optional, string) The ID of the document", "creator": "(Optional, string) The creator of the document", "deleted": "(Optional, boolean) Whether to include deleted documents", "archived": "(Optional, boolean) Whether to include archived documents", "parent_id": "(Optional, string) The ID of the parent item", "parent_type": "(Optional, string) The type of the parent item", "limit": "(Optional, integer) The maximum number of documents to return", "next_cursor": "(Optional, string) The cursor for pagination"}}, {"name": "list_document_pages", "description": "List document pages", "parameter": {"documentId": "(string) The ID of the document", "documentName": "(Optional, string) The name of the document"}}, {"name": "get_document_pages", "description": "Get document pages", "parameter": {"documentId": "(string) The ID of the document", "documentName": "(Optional, string) The name of the document", "pageIds": "(Optional, array) The IDs of the pages to get"}}, {"name": "create_document_pages", "description": "Create a document page", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(string) The ID of the document", "parent_page_id": "(Optional, string) The ID of the parent page", "name": "(string) The name of the page", "sub_title": "(Optional, string) The subtitle of the page", "content": "(string) The content of the page", "content_format": "(Optional, string) The format of the content"}}, {"name": "update_document_page", "description": "Update a document page", "parameter": {"workspaceId": "(string) The ID of the workspace", "documentId": "(string) The ID of the document", "name": "(string) The name of the page", "sub_title": "(Optional, string) The subtitle of the page", "content": "(string) The content of the page", "content_edit_mode": "(Optional, string) The edit mode of the content", "content_format": "(Optional, string) The format of the content"}}]}
{"name": "Cloudinary", "description": "Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.", "url": "https://github.com/felores/cloudinary-mcp-server", "readme_file": "community/Cloudinary.md", "summary": "This MCP server provides tools for uploading images and videos to Cloudinary through Claude Desktop and compatible MCP clients.", "tools": [{"name": "upload", "description": "Upload images and videos to Cloudinary.", "parameter": {"file": "(required) Path to file, URL, or base64 data URI to upload", "resource_type": "(optional) Type of resource ('image', 'video', or 'raw')", "public_id": "(optional) Custom public ID for the uploaded asset", "overwrite": "(optional) Whether to overwrite existing assets with the same public ID", "tags": "(optional) Array of tags to assign to the uploaded asset"}}]}
{"name": "code-executor", "description": "An MCP server that allows LLMs to execute Python code within a specified Conda environment.", "url": "https://github.com/bazinga012/mcp_code_executor", "readme_file": "community/code-executor.md", "summary": "An MCP server that allows LLMs to execute Python code within a specified Python environment, enabling access to libraries and dependencies defined in the environment.", "tools": [{"name": "execute_code", "description": "Executes Python code in the configured environment.", "parameter": {"code": "(string) The Python code to execute", "filename": "(string) The filename to store the generated code"}}, {"name": "install_dependencies", "description": "Installs Python packages in the environment.", "parameter": {"packages": "(array) List of package names to install"}}, {"name": "check_installed_packages", "description": "Checks if packages are already installed in the environment.", "parameter": {"packages": "(array) List of package names to check"}}, {"name": "configure_environment", "description": "Dynamically changes the environment configuration.", "parameter": {"type": "(string) The type of environment (e.g., 'conda', 'venv')", "conda_name": "(string) The name of the Conda environment to use (if applicable)"}}, {"name": "get_environment_config", "description": "Gets the current environment configuration.", "parameter": {}}]}
{"name": "code-sandbox-mcp", "description": "An MCP server to create secure code sandbox environment for executing code within Docker containers.", "url": "https://github.com/Automata-Labs-team/code-sandbox-mcp", "readme_file": "community/code-sandbox-mcp.md", "summary": "A secure sandbox environment for executing code within Docker containers. Provides AI applications with a safe and isolated environment for running code while maintaining security through containerization.", "tools": [{"name": "sandbox_initialize", "description": "Initialize a new compute environment for code execution. Creates a container based on the specified Docker image.", "parameter": {"image": "(string, optional) Docker image to use as the base environment. Default: 'python:3.12-slim-bookworm'"}}, {"name": "copy_project", "description": "Copy a directory to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "local_src_dir": "(string, required) Path to a directory in the local file system", "dest_dir": "(string, optional) Path to save the src directory in the sandbox environment"}}, {"name": "write_file", "description": "Write a file to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "file_name": "(string, required) Name of the file to create", "file_contents": "(string, required) Contents to write to the file", "dest_dir": "(string, optional) Directory to create the file in (Default: ${WORKDIR})"}}, {"name": "sandbox_exec", "description": "Execute commands in the sandboxed environment.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "commands": "(array, required) List of command(s) to run in the sandboxed environment"}}, {"name": "copy_file", "description": "Copy a single file to the sandboxed filesystem.", "parameter": {"container_id": "(string, required) ID of the container returned from the initialize call", "local_src_file": "(string, required) Path to a file in the local file system", "dest_path": "(string, optional) Path to save the file in the sandbox environment"}}, {"name": "sandbox_stop", "description": "Stop and remove a running container sandbox. Gracefully stops the specified container with a 10-second timeout and removes it along with its volumes.", "parameter": {"container_id": "(string, required) ID of the container to stop and remove"}}]}
{"name": "consul-mcp", "description": "A consul MCP server for service management, health check and Key-Value Store", "url": "https://github.com/kocierik/consul-mcp-server", "readme_file": "community/consul-mcp.md", "summary": "A Model Context Protocol (MCP) server that provides access to Consul's functionality through a standardized interface, including service management, health checks, key-value store operations, session management, event handling, prepared queries, status checks, agent information, and system health service information.", "tools": [{"name": "List running services", "description": "Lists all currently running services.", "parameter": {}}, {"name": "Register and deregister services", "description": "Registers new services and deregisters existing ones.", "parameter": {}}, {"name": "Get service information", "description": "Retrieves detailed information about a specific service.", "parameter": {}}, {"name": "List catalog services", "description": "Lists all services in the Consul catalog.", "parameter": {}}, {"name": "Get catalog service information", "description": "Retrieves detailed information about a specific service in the Consul catalog.", "parameter": {}}, {"name": "Register health checks", "description": "Registers new health checks for services.", "parameter": {}}, {"name": "Deregister health checks", "description": "Deregisters existing health checks for services.", "parameter": {}}, {"name": "Get health checks for services", "description": "Retrieves health check information for specific services.", "parameter": {}}, {"name": "Get values from KV store", "description": "Retrieves values from the Consul key-value store.", "parameter": {}}, {"name": "List keys in KV store", "description": "Lists all keys in the Consul key-value store.", "parameter": {}}, {"name": "Put values in KV store", "description": "Adds or updates values in the Consul key-value store.", "parameter": {}}, {"name": "Delete keys from KV store", "description": "Deletes keys from the Consul key-value store.", "parameter": {}}, {"name": "List sessions", "description": "Lists all active sessions.", "parameter": {}}, {"name": "Destroy sessions", "description": "Destroys specified sessions.", "parameter": {}}, {"name": "Fire events", "description": "Fires user-defined events.", "parameter": {}}, {"name": "List events", "description": "Lists all fired events.", "parameter": {}}, {"name": "Create prepared queries", "description": "Creates prepared queries for efficient service discovery.", "parameter": {}}, {"name": "Execute prepared queries", "description": "Executes previously created prepared queries.", "parameter": {}}, {"name": "Get current leader", "description": "Retrieves the current leader node in the Consul cluster.", "parameter": {}}, {"name": "Get current peers", "description": "Retrieves the current peer nodes in the Consul cluster.", "parameter": {}}, {"name": "Get agent members", "description": "Retrieves information about the members of the local Consul agent.", "parameter": {}}, {"name": "Get agent self information", "description": "Retrieves information about the local Consul agent itself.", "parameter": {}}, {"name": "Get system health service information", "description": "Retrieves system health service information.", "parameter": {}}]}
{"name": "cognee-mcp", "description": "GraphRAG memory server with customizable ingestion, data processing and search", "url": "https://github.com/topoteretes/cognee/tree/main/cognee-mcp", "readme_file": "community/cognee-mcp.md", "summary": "A tool for building dynamic agent memory using scalable, modular ECL (Extract, Cognify, Load) pipelines, which interconnects and retrieves past conversations, documents, images, and audio transcriptions, reducing hallucinations, developer effort, and cost.", "tools": [{"name": "add", "description": "Adds text to the cognee system.", "parameter": {"text": "(string) The text to be added."}}, {"name": "cognify", "description": "Generates a knowledge graph from the added data.", "parameter": {}}, {"name": "search", "description": "Queries the knowledge graph with a given search term.", "parameter": {"query": "(string) The search term to query the knowledge graph."}}]}
{"name": "coin_api_mcp", "description": "Provides access to coinmarketcap cryptocurrency data.", "url": "https://github.com/longmans/coin_api_mcp", "readme_file": "community/coin_api_mcp.md", "summary": "A Model Context Protocol server that provides access to CoinMarketCap's cryptocurrency data, enabling AI-powered applications to retrieve cryptocurrency listings, quotes, and detailed information about various coins.", "tools": [{"name": "listing-coins", "description": "Fetches a paginated list of all active cryptocurrencies with the latest market data.", "parameter": {"start": "(integer, optional) Offset the start (1-based index) of the paginated list of items to return.", "limit": "(integer, optional) Number of results to return (default: 10, max: 5000).", "price_min": "(number, optional) Minimum USD price to filter results.", "price_max": "(number, optional) Maximum USD price to filter results.", "market_cap_min": "(number, optional) Minimum market cap to filter results.", "market_cap_max": "(number, optional) Maximum market cap to filter results.", "convert": "(string, optional) Calculate market quotes in multiple currencies.", "sort": "(string, optional) Field to sort the list of cryptocurrencies by.", "sort_dir": "(string, optional) Direction to order cryptocurrencies (asc or desc)."}}, {"name": "get-coin-info", "description": "Retrieves detailed information about a specific cryptocurrency.", "parameter": {"id": "(string, optional) One or more comma-separated CoinMarketCap cryptocurrency IDs.", "slug": "(string, optional) A comma-separated list of cryptocurrency slugs.", "symbol": "(string, optional) One or more comma-separated cryptocurrency symbols."}}, {"name": "get-coin-quotes", "description": "Fetches the latest market quotes for one or more cryptocurrencies.", "parameter": {"id": "(string, optional) One or more comma-separated cryptocurrency CoinMarketCap IDs.", "slug": "(string, optional) A comma-separated list of cryptocurrency slugs.", "symbol": "(string, optional) One or more comma-separated cryptocurrency symbols."}}]}
{"name": "CoinMarketCap", "description": "Implements the complete CoinMarketCap API for accessing cryptocurrency market data, exchange information, and other blockchain-related metrics.", "url": "https://github.com/shinzo-labs/coinmarketcap-mcp", "readme_file": "community/CoinMarketCap.md", "summary": "A Model Context Protocol (MCP) implementation for the CoinMarketCap API, providing a standardized interface for accessing cryptocurrency market data, exchange information, and other blockchain-related metrics.", "tools": [{"name": "cryptoCurrencyMap", "description": "Get mapping of all cryptocurrencies", "parameter": {}}, {"name": "getCryptoMetadata", "description": "Get metadata for one or more cryptocurrencies", "parameter": {}}, {"name": "allCryptocurrencyListings", "description": "Get latest market quote for 1-5000 cryptocurrencies", "parameter": {}}, {"name": "cryptoQuotesLatest", "description": "Get latest market quote for 1 or more cryptocurrencies", "parameter": {}}, {"name": "cryptoCategories", "description": "Get list of all cryptocurrency categories", "parameter": {}}, {"name": "cryptoCategory", "description": "Get metadata about a cryptocurrency category", "parameter": {}}, {"name": "exchangeMap", "description": "Get mapping of all exchanges", "parameter": {}}, {"name": "exchangeInfo", "description": "Get metadata for one or more exchanges", "parameter": {}}, {"name": "exchangeAssets", "description": "Get list of all assets available on an exchange", "parameter": {}}, {"name": "dexInfo", "description": "Get metadata for one or more decentralised exchanges", "parameter": {}}, {"name": "dexListingsLatest", "description": "Get latest market data for all DEXes", "parameter": {}}, {"name": "dexNetworksList", "description": "Get list of all networks with unique IDs", "parameter": {}}, {"name": "dexSpotPairsLatest", "description": "Get latest market data for all active DEX spot pairs", "parameter": {}}, {"name": "dexPairsQuotesLatest", "description": "Get latest market quotes for spot pairs", "parameter": {}}, {"name": "dexPairsOhlcvLatest", "description": "Get latest OHLCV data for spot pairs", "parameter": {}}, {"name": "dexPairsOhlcvHistorical", "description": "Get historical OHLCV data for spot pairs", "parameter": {}}, {"name": "dexPairsTradeLatest", "description": "Get latest trades for spot pairs", "parameter": {}}, {"name": "globalMetricsLatest", "description": "Get latest global cryptocurrency metrics", "parameter": {}}, {"name": "cmc100IndexLatest", "description": "Get latest CoinMarketCap 100 Index value and constituents", "parameter": {}}, {"name": "cmc100IndexHistorical", "description": "Get historical CoinMarketCap 100 Index values", "parameter": {}}, {"name": "priceConversion", "description": "Convert an amount of one cryptocurrency or fiat currency into another", "parameter": {}}, {"name": "getPostmanCollection", "description": "Get Postman collection for the API", "parameter": {}}, {"name": "fiatMap", "description": "Get mapping of all fiat currencies", "parameter": {}}, {"name": "keyInfo", "description": "Get API key usage and status", "parameter": {}}, {"name": "fearAndGreedLatest", "description": "Get latest Fear & Greed Index", "parameter": {}}, {"name": "fearAndGreedHistorical", "description": "Get historical Fear & Greed Index values", "parameter": {}}, {"name": "cryptoAirdrops", "description": "Get list of all cryptocurrency airdrops", "parameter": {}}, {"name": "cryptoAirdrop", "description": "Get metadata about a specific airdrop", "parameter": {}}, {"name": "historicalCryptocurrencyListings", "description": "Get historical market quotes for any cryptocurrency", "parameter": {}}, {"name": "cryptoQuotesHistorical", "description": "Get historical market quotes for any cryptocurrency", "parameter": {}}, {"name": "cryptoQuotesHistoricalV3", "description": "Get historical market quotes with advanced time-based intervals", "parameter": {}}, {"name": "exchangeQuotesHistorical", "description": "Get historical quotes for any exchange", "parameter": {}}, {"name": "globalMetricsHistorical", "description": "Get historical global cryptocurrency metrics", "parameter": {}}, {"name": "newCryptocurrencyListings", "description": "Get list of most recently added cryptocurrencies", "parameter": {}}, {"name": "cryptoTrendingGainersLosers", "description": "Get biggest gainers and losers in a given time period", "parameter": {}}, {"name": "cryptoTrendingLatest", "description": "Get top cryptocurrencies by search volume", "parameter": {}}, {"name": "cryptoTrendingMostVisited", "description": "Get most visited cryptocurrencies", "parameter": {}}, {"name": "cryptoOhlcvLatest", "description": "Get latest OHLCV market data for any cryptocurrency", "parameter": {}}, {"name": "cryptoOhlcvHistorical", "description": "Get historical OHLCV market data for any cryptocurrency", "parameter": {}}, {"name": "cryptoPricePerformanceStatsLatest", "description": "Get price performance statistics for any cryptocurrency", "parameter": {}}, {"name": "cryptoMarketPairsLatest", "description": "Get latest market pairs for any cryptocurrency", "parameter": {}}, {"name": "exchangeListingsLatest", "description": "Get latest market data for all exchanges", "parameter": {}}, {"name": "exchangeMarketPairsLatest", "description": "Get latest market pairs for any exchange", "parameter": {}}, {"name": "exchangeQuotesLatest", "description": "Get latest market quotes for one or more exchanges", "parameter": {}}, {"name": "contentLatest", "description": "Get latest cryptocurrency news and content", "parameter": {}}, {"name": "contentPostsTop", "description": "Get top cryptocurrency posts", "parameter": {}}, {"name": "contentPostsLatest", "description": "Get latest cryptocurrency posts", "parameter": {}}, {"name": "contentPostsComments", "description": "Get comments for a specific post", "parameter": {}}, {"name": "communityTrendingTopic", "description": "Get trending topics in the cryptocurrency community", "parameter": {}}, {"name": "communityTrendingToken", "description": "Get trending tokens in the cryptocurrency community", "parameter": {}}, {"name": "blockchainStatisticsLatest", "description": "Get latest statistics for one or more blockchains", "parameter": {}}]}
{"name": "Computer-Use - Remote MacOS Use", "description": "Open-source out-of-the-box alternative to OpenAI Operator, providing a full desktop experience and optimized for using remote macOS machines as autonomous AI agents.", "url": "https://github.com/baryhuang/mcp-remote-macos-use", "readme_file": "community/Computer-Use_-_Remote_MacOS_Use.md", "summary": "An open-source MCP server that enables AI to fully control remote macOS systems, providing a native macOS experience without the need for additional software installation. It supports various AI-driven tasks such as social media management, video editing, and automated email handling.", "tools": [{"name": "remote_macos_get_screen", "description": "Connect to a remote macOS machine and get a screenshot of the remote desktop.", "parameter": {}}, {"name": "remote_macos_send_keys", "description": "Send keyboard input to a remote macOS machine.", "parameter": {}}, {"name": "remote_macos_mouse_move", "description": "Move the mouse cursor to specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}}, {"name": "remote_macos_mouse_click", "description": "Perform a mouse click at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}}, {"name": "remote_macos_mouse_double_click", "description": "Perform a mouse double-click at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}}, {"name": "remote_macos_mouse_scroll", "description": "Perform a mouse scroll at specified coordinates on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}}, {"name": "remote_macos_open_application", "description": "Opens/activates an application and returns its PID for further interactions.", "parameter": {}}, {"name": "remote_macos_mouse_drag_n_drop", "description": "Perform a mouse drag operation from start point and drop to end point on a remote macOS machine, with automatic coordinate scaling.", "parameter": {}}]}
{"name": "Contentful-mcp", "description": "Read, update, delete, publish content in your Contentful space(s) from this MCP Server.", "url": "https://github.com/ivo-toby/contentful-mcp", "readme_file": "community/Contentful-mcp.md", "summary": "An MCP server implementation that integrates with Contentful's Content Management API, providing comprehensive content management capabilities including CRUD operations for entries and assets, space and environment management, content type management, localization, publishing, bulk operations, and smart pagination.", "tools": [{"name": "search_entries", "description": "Search for entries using query parameters", "parameter": {}}, {"name": "create_entry", "description": "Create new entries", "parameter": {}}, {"name": "get_entry", "description": "Retrieve existing entries", "parameter": {}}, {"name": "update_entry", "description": "Update entry fields", "parameter": {}}, {"name": "delete_entry", "description": "Remove entries", "parameter": {}}, {"name": "publish_entry", "description": "Publish entries", "parameter": {}}, {"name": "unpublish_entry", "description": "Unpublish entries", "parameter": {}}, {"name": "bulk_publish", "description": "Publish multiple entries and assets in a single operation. Accepts an array of entities (entries and assets) and processes their publication as a batch.", "parameter": {}}, {"name": "bulk_unpublish", "description": "Unpublish multiple entries and assets in a single operation. Similar to bulk_publish but removes content from the delivery API.", "parameter": {}}, {"name": "bulk_validate", "description": "Validate multiple entries for content consistency, references, and required fields. Returns validation results without modifying content.", "parameter": {}}, {"name": "list_assets", "description": "List assets with pagination (3 items per page)", "parameter": {}}, {"name": "upload_asset", "description": "Upload new assets with metadata", "parameter": {}}, {"name": "get_asset", "description": "Retrieve asset details and information", "parameter": {}}, {"name": "update_asset", "description": "Update asset metadata and files", "parameter": {}}, {"name": "delete_asset", "description": "Remove assets from space", "parameter": {}}, {"name": "publish_asset", "description": "Publish assets to delivery API", "parameter": {}}, {"name": "unpublish_asset", "description": "Unpublish assets from delivery API", "parameter": {}}, {"name": "list_spaces", "description": "List available spaces", "parameter": {}}, {"name": "get_space", "description": "Get space details", "parameter": {}}, {"name": "list_environments", "description": "List environments in a space", "parameter": {}}, {"name": "create_environment", "description": "Create new environment", "parameter": {}}, {"name": "delete_environment", "description": "Remove environment", "parameter": {}}, {"name": "list_content_types", "description": "List available content types", "parameter": {}}, {"name": "get_content_type", "description": "Get content type details", "parameter": {}}, {"name": "create_content_type", "description": "Create new content type", "parameter": {}}, {"name": "update_content_type", "description": "Update content type", "parameter": {}}, {"name": "delete_content_type", "description": "Remove content type", "parameter": {}}, {"name": "publish_content_type", "description": "Publish a content type", "parameter": {}}]}
{"name": "crypto-feargreed-mcp", "description": "Providing real-time and historical Crypto Fear & Greed Index data.", "url": "https://github.com/kukapay/crypto-feargreed-mcp", "readme_file": "community/crypto-feargreed-mcp.md", "summary": "A server that provides real-time and historical Crypto Fear & Greed Index data, powered by Alternative.me. It includes tools for fetching and analyzing the index, making it easy to integrate into MCP-compatible clients.", "tools": [{"name": "get_current_fng_tool", "description": "Retrieves the latest Fear & Greed Index value and classification.", "parameter": {}}, {"name": "get_historical_fng_tool", "description": "Fetches historical index values for a specified number of days.", "parameter": {"days": "(int) Number of days to fetch historical data for."}}, {"name": "analyze_fng_trend", "description": "Analyzes trends over time with statistics like average value and trend direction.", "parameter": {"days": "(int) Number of days to analyze the trend for."}}]}
{"name": "cryptopanic-mcp-server", "description": "Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.", "url": "https://github.com/kukapay/cryptopanic-mcp-server", "readme_file": "community/cryptopanic-mcp-server.md", "summary": "Provides the latest cryptocurrency news to AI agents, powered by CryptoPanic.", "tools": [{"name": "get_crypto_news", "description": "Fetches cryptocurrency news, analysis, or videos from CryptoPanic.", "parameter": {"kind": "(str) Content type (news, analysis, videos)", "num_pages": "(Optional, int) Number of pages to fetch (default: 1, max: 10)"}}]}
{"name": "Databricks", "description": "Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.", "url": "https://github.com/JordiNeil/mcp-databricks-server", "readme_file": "community/Databricks.md", "summary": "A Model Context Protocol (MCP) server that connects to Databricks API, allowing LLMs to run SQL queries, list jobs, and get job status.", "tools": [{"name": "run_sql_query", "description": "Execute SQL queries on your Databricks SQL warehouse", "parameter": {"sql": "(str) The SQL query to execute"}}, {"name": "list_jobs", "description": "List all Databricks jobs in your workspace", "parameter": {}}, {"name": "get_job_status", "description": "Get the status of a specific Databricks job by ID", "parameter": {"job_id": "(int) The ID of the Databricks job"}}, {"name": "get_job_details", "description": "Get detailed information about a specific Databricks job", "parameter": {"job_id": "(int) The ID of the Databricks job"}}]}
{"name": "Datadog", "description": "Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.", "url": "https://github.com/GeLi2001/datadog-mcp-server", "readme_file": "community/Datadog.md", "summary": "A Model Context Protocol (MCP) server for interacting with the Datadog API, providing access to monitoring, dashboards, metrics, events, logs, and incident management data.", "tools": [{"name": "get-monitors", "description": "Fetch monitors with optional filtering", "parameter": {"groupStates": "(Optional, array) States to filter monitors by", "limit": "(Optional, number) Maximum number of monitors to return"}}, {"name": "get-monitor", "description": "Get details of a specific monitor by ID", "parameter": {"monitorId": "(string) ID of the monitor to fetch"}}, {"name": "get-dashboards", "description": "List all dashboards", "parameter": {}}, {"name": "get-dashboard", "description": "Get a specific dashboard by ID", "parameter": {"dashboardId": "(string) ID of the dashboard to fetch"}}, {"name": "get-metrics", "description": "List available metrics", "parameter": {}}, {"name": "get-metric-metadata", "description": "Get metadata for a specific metric", "parameter": {"metricName": "(string) Name of the metric to fetch metadata for"}}, {"name": "get-events", "description": "Fetch events within a time range", "parameter": {"start": "(number) Start time in milliseconds since epoch", "end": "(number) End time in milliseconds since epoch", "priority": "(Optional, string) Priority of events to fetch", "tags": "(Optional, array) Tags to filter events by"}}, {"name": "get-incidents", "description": "List incidents with optional filtering", "parameter": {"includeArchived": "(Optional, boolean) Include archived incidents", "query": "(Optional, string) Query to filter incidents by", "pageSize": "(Optional, number) Number of incidents to return per page"}}, {"name": "search-logs", "description": "Search logs with advanced query filtering", "parameter": {"filter": "(object) Filter object containing query, from, and to", "sort": "(Optional, string) Sorting order (e.g., -timestamp)", "limit": "(Optional, number) Maximum number of logs to return"}}, {"name": "aggregate-logs", "description": "Perform analytics and aggregations on log data", "parameter": {"filter": "(object) Filter object containing query, from, and to", "compute": "(array) Array of compute objects for aggregations", "groupBy": "(array) Array of groupBy objects for grouping results"}}]}
{"name": "Data Exploration", "description": "MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!", "url": "https://github.com/reading-plus-ai/mcp-server-data-exploration", "readme_file": "community/Data_Exploration.md", "summary": "A versatile tool designed for interactive data exploration, providing clear and actionable insights from complex datasets.", "tools": [{"name": "load-csv", "description": "Loads a CSV file into a DataFrame.", "parameter": {"csv_path": "(string, required) Path to the CSV file", "df_name": "(string, optional) Name for the DataFrame. Defaults to df_1, df_2, etc., if not provided"}}, {"name": "run-script", "description": "Executes a Python script.", "parameter": {"script": "(string, required) The script to execute"}}]}
{"name": "DaVinci Resolve", "description": "MCP server integration for DaVinci Resolve providing powerful tools for video editing, color grading, media management, and project control.", "url": "https://github.com/samuelgursky/davinci-resolve-mcp", "readme_file": "community/DaVinci_Resolve.md", "summary": "A Model Context Protocol (MCP) server that connects AI coding assistants (Cursor, Claude Desktop) to DaVinci Resolve, enabling them to query and control DaVinci Resolve through natural language.", "tools": [{"name": "get_da_vinci_resolve_version", "description": "Gets the version of DaVinci Resolve currently running.", "parameter": {}}, {"name": "get_current_page", "description": "Gets the current page (e.g., Edit, Color, Fusion) in DaVinci Resolve.", "parameter": {}}, {"name": "switch_page", "description": "Switches the current page in DaVinci Resolve.", "parameter": {"page": "(string) The page to switch to (e.g., 'Edit', 'Color', 'Fusion')."}}, {"name": "list_projects", "description": "Lists all available projects in DaVinci Resolve.", "parameter": {}}, {"name": "get_current_project_name", "description": "Gets the name of the current project in DaVinci Resolve.", "parameter": {}}, {"name": "open_project", "description": "Opens a project by name in DaVinci Resolve.", "parameter": {"project_name": "(string) The name of the project to open."}}, {"name": "create_new_project", "description": "Creates a new project in DaVinci Resolve.", "parameter": {"project_name": "(string) The name of the new project."}}, {"name": "save_current_project", "description": "Saves the current project in DaVinci Resolve.", "parameter": {}}, {"name": "list_timelines", "description": "Lists all timelines in the current project.", "parameter": {}}, {"name": "get_current_timeline_info", "description": "Gets information about the current timeline.", "parameter": {}}, {"name": "create_new_timeline", "description": "Creates a new timeline in the current project.", "parameter": {"timeline_name": "(string) The name of the new timeline."}}, {"name": "switch_to_timeline", "description": "Switches to a timeline by name.", "parameter": {"timeline_name": "(string) The name of the timeline to switch to."}}, {"name": "add_marker_to_timeline", "description": "Adds a marker to the current timeline.", "parameter": {}}, {"name": "list_media_pool_clips", "description": "Lists all clips in the media pool.", "parameter": {}}, {"name": "import_media_file", "description": "Imports a media file into the media pool.", "parameter": {"file_path": "(string) The path to the media file to import."}}, {"name": "create_media_bin", "description": "Creates a new media bin in the media pool.", "parameter": {"bin_name": "(string) The name of the new media bin."}}, {"name": "add_clip_to_timeline", "description": "Adds a clip to the current timeline.", "parameter": {"clip_name": "(string) The name of the clip to add."}}]}
{"name": "Dataset Viewer", "description": "Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export", "url": "https://github.com/privetin/dataset-viewer", "readme_file": "community/Dataset_Viewer.md", "summary": "An MCP server for interacting with the Hugging Face Dataset Viewer API, providing capabilities to browse and analyze datasets hosted on the Hugging Face Hub.", "tools": [{"name": "validate", "description": "Check if a dataset exists and is accessible", "parameter": {"dataset": "string, Dataset identifier (e.g. 'stanfordnlp/imdb')", "auth_token": "(Optional, string) For private datasets"}}, {"name": "get_info", "description": "Get detailed information about a dataset", "parameter": {"dataset": "string, Dataset identifier", "auth_token": "(Optional, string) For private datasets"}}, {"name": "get_rows", "description": "Get paginated contents of a dataset", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "page": "(Optional, integer) Page number (0-based)", "auth_token": "(Optional, string) For private datasets"}}, {"name": "get_first_rows", "description": "Get first rows from a dataset split", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "auth_token": "(Optional, string) For private datasets"}}, {"name": "get_statistics", "description": "Get statistics about a dataset split", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "auth_token": "(Optional, string) For private datasets"}}, {"name": "search_dataset", "description": "Search for text within a dataset", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "query": "string, Text to search for", "auth_token": "(Optional, string) For private datasets"}}, {"name": "filter", "description": "Filter rows using SQL-like conditions", "parameter": {"dataset": "string, Dataset identifier", "config": "string, Configuration name", "split": "string, Split name", "where": "string, SQL WHERE clause (e.g. 'score > 0.5')", "orderby": "(Optional, string) SQL ORDER BY clause", "page": "(Optional, integer) Page number (0-based)", "auth_token": "(Optional, string) For private datasets"}}, {"name": "get_parquet", "description": "Download entire dataset in Parquet format", "parameter": {"dataset": "string, Dataset identifier", "auth_token": "(Optional, string) For private datasets"}}]}
{"name": "DBHub", "description": "Universal database MCP server connecting to MySQL, PostgreSQL, SQLite, DuckDB and etc.", "url": "https://github.com/bytebase/dbhub/", "readme_file": "community/DBHub.md", "summary": "A universal database gateway implementing the Model Context Protocol (MCP) server interface, allowing MCP-compatible clients to connect to and explore various databases.", "tools": [{"name": "execute_sql", "description": "Executes SQL queries on the connected database.", "parameter": {"dsn": "(string) The database connection string.", "sql": "(string) The SQL query to execute."}}, {"name": "list_connectors", "description": "Lists available connectors for database connections.", "parameter": {}}, {"name": "generate_sql", "description": "Generates SQL statements based on the provided context.", "parameter": {"context": "(string) The context for generating the SQL statement."}}, {"name": "explain_db", "description": "Explains database elements such as tables, indexes, and procedures.", "parameter": {"element_type": "(string) The type of database element to explain (e.g., 'table', 'index', 'procedure').", "element_name": "(string) The name of the database element to explain."}}]}
{"name": "Deepseek_R1", "description": "A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)", "url": "https://github.com/66julienmartin/MCP-server-Deepseek_R1", "readme_file": "community/Deepseek_R1.md", "summary": "A Model Context Protocol (MCP) server implementation for the Deepseek R1 language model, optimized for reasoning tasks with a context window of 8192 tokens.", "tools": [{"name": "deepseek_r1", "description": "Generates advanced text using the Deepseek R1 model with configurable parameters.", "parameter": {"prompt": "(string) The input prompt for text generation", "max_tokens": "(number) Maximum tokens to generate", "temperature": "(number) Controls randomness, default is 0.2"}}]}
{"name": "deepseek-thinker-mcp", "description": "A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.", "url": "https://github.com/ruixingshi/deepseek-thinker-mcp", "readme_file": "community/deepseek-thinker-mcp.md", "summary": "A MCP (Model Context Protocol) provider that delivers Deepseek reasoning content to MCP-enabled AI clients, such as Claude Desktop. It supports access to Deepseek's thought processes from the Deepseek API service or a local Ollama server.", "tools": [{"name": "get-deepseek-thinker", "description": "Perform reasoning using the Deepseek model", "parameter": {"originPrompt": "(string) User's original prompt"}}]}
{"name": "Descope", "description": "An MCP server to integrate with Descope to search audit logs, manage users, and more.", "url": "https://github.com/descope-sample-apps/descope-mcp-server", "readme_file": "community/Descope.md", "summary": "Provides an interface to interact with Descope's Management APIs, enabling the search and retrieval of project-related information.", "tools": [{"name": "search-audits", "description": "Retrieves up to 10 audit log entries from your Descope project.", "parameter": {}}, {"name": "search-users", "description": "Retrieves up to 10 user records from your Descope project.", "parameter": {}}, {"name": "create-user", "description": "Creates a new user in your Descope project.", "parameter": {}}, {"name": "invite-user", "description": "Invites a new user to your Descope project.", "parameter": {}}]}
{"name": "DevDb", "description": "An MCP server that runs right inside the IDE, for connecting to MySQL, Postgres, SQLite, and MSSQL databases.", "url": "https://github.com/damms005/devdb-vscode?tab=readme-ov-file#mcp-configuration", "readme_file": "community/DevDb.md", "summary": "Provides database connections to AI-powered IDEs and MCP clients like Cursor, Windsurf, etc.", "tools": [{"name": "MCP Configuration", "description": "Allows copying of MCP settings to integrate with IDEs and AI-tools for database access.", "parameter": {}}, {"name": "URI Handler", "description": "Enables opening specific database tables directly from external applications or links.", "parameter": {"connectionId": "(string) The ID of the database connection", "database": "(string) The database name", "table": "(string) The table name to open", "workspace": "(Optional, string) The workspace path", "authority": "(Optional, string) The authority for the URI"}}]}
{"name": "DevRev", "description": "An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed here.", "url": "https://github.com/kpsunil97/devrev-mcp-server", "readme_file": "community/DevRev.md", "summary": "A Model Context Protocol server for DevRev used to search and retrieve information using the DevRev APIs.", "tools": [{"name": "search", "description": "Search for information using the DevRev search API with the provided query and namespace.", "parameter": {}}, {"name": "get_object", "description": "Get all information about a DevRev object using its ID.", "parameter": {}}]}
{"name": "Dicom", "description": "An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.).", "url": "https://github.com/ChristianHinge/dicom-mcp", "readme_file": "community/Dicom.md", "summary": "The `dicom-mcp` server enables AI assistants to query, read, and move data on DICOM servers (PACS, VNA, etc.). It provides tools to search for patients, studies, series, and instances, retrieve and extract text from DICOM reports, and send DICOM images to other destinations.", "tools": [{"name": "query_patients", "description": "Search for patients based on criteria like name, ID, or birth date.", "parameter": {}}, {"name": "query_studies", "description": "Find studies using patient ID, date, modality, description, accession number, or Study UID.", "parameter": {}}, {"name": "query_series", "description": "Locate series within a specific study using modality, series number/description, or Series UID.", "parameter": {}}, {"name": "query_instances", "description": "Find individual instances (images/objects) within a series using instance number or SOP Instance UID.", "parameter": {}}, {"name": "extract_pdf_text_from_dicom", "description": "Retrieve a specific DICOM instance containing an encapsulated PDF and extract its text content.", "parameter": {}}, {"name": "move_series", "description": "Send a specific DICOM series to another configured DICOM node using C-MOVE.", "parameter": {}}, {"name": "move_study", "description": "Send an entire DICOM study to another configured DICOM node using C-MOVE.", "parameter": {}}, {"name": "list_dicom_nodes", "description": "Show the currently active DICOM node and list all configured nodes.", "parameter": {}}, {"name": "switch_dicom_node", "description": "Change the active DICOM node for subsequent operations.", "parameter": {}}, {"name": "verify_connection", "description": "Test the DICOM network connection to the currently active node using C-ECHO.", "parameter": {}}, {"name": "get_attribute_presets", "description": "List the available levels of detail (minimal, standard, extended) for metadata query results.", "parameter": {}}]}
{"name": "Discord", "description": "A MCP server to connect to Discord guilds through a bot and read and write messages in channels", "url": "https://github.com/v-3/discordmcp", "readme_file": "community/Discord.md", "summary": "A Model Context Protocol (MCP) server that enables LLMs to interact with Discord channels, allowing them to send and read messages through Discord's API. It supports automatic server and channel discovery, and includes proper error handling and validation.", "tools": [{"name": "send-message", "description": "Sends a message to a specified Discord channel.", "parameter": {"server": "(Optional, string) Server name or ID (required if bot is in multiple servers)", "channel": "(string) Channel name (e.g., 'general') or ID", "message": "(string) Message content to send"}}, {"name": "read-messages", "description": "Reads recent messages from a specified Discord channel.", "parameter": {"server": "(Optional, string) Server name or ID (required if bot is in multiple servers)", "channel": "(string) Channel name (e.g., 'general') or ID", "limit": "(Optional, number) Number of messages to fetch (default: 50, max: 100)"}}]}
{"name": "Discord", "description": "A MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.", "url": "https://github.com/SaseQ/discord-mcp", "readme_file": "community/Discord_2.md", "summary": "A Model Context Protocol (MCP) server for the Discord API, allowing seamless integration of Discord Bot with MCP-compatible applications like Claude Desktop. It enables AI assistants to interact with Discord, manage channels, send messages, and retrieve server information.", "tools": [{"name": "get_server_info", "description": "Get detailed discord server information", "parameter": {}}, {"name": "send_message", "description": "Send a message to a specific channel", "parameter": {}}, {"name": "edit_message", "description": "Edit a message from a specific channel", "parameter": {}}, {"name": "delete_message", "description": "Delete a message from a specific channel", "parameter": {}}, {"name": "read_messages", "description": "Read recent message history from a specific channel", "parameter": {}}, {"name": "send_private_message", "description": "Send a private message to a specific user", "parameter": {}}, {"name": "edit_private_message", "description": "Edit a private message from a specific user", "parameter": {}}, {"name": "delete_private_message", "description": "Delete a private message from a specific user", "parameter": {}}, {"name": "read_private_messages", "description": "Read recent message history from a specific user", "parameter": {}}, {"name": "add_reaction", "description": "Add a reaction (emoji) to a specific message", "parameter": {}}, {"name": "remove_reaction", "description": "Remove a specified reaction (emoji) from a message", "parameter": {}}, {"name": "create_text_channel", "description": "Create text a channel", "parameter": {}}, {"name": "delete_channel", "description": "Delete a channel", "parameter": {}}, {"name": "find_channel", "description": "Find a channel type and ID using name and server ID", "parameter": {}}, {"name": "list_channels", "description": "List of all channels", "parameter": {}}, {"name": "create_category", "description": "Create a new category for channels", "parameter": {}}, {"name": "delete_category", "description": "Delete a category", "parameter": {}}, {"name": "find_category", "description": "Find a category ID using name and server ID", "parameter": {}}, {"name": "list_channels_in_category", "description": "List of channels in a specific category", "parameter": {}}, {"name": "create_webhook", "description": "Create a new webhook on a specific channel", "parameter": {}}, {"name": "delete_webhook", "description": "Delete a webhook", "parameter": {}}, {"name": "list_webhooks", "description": "List of webhooks on a specific channel", "parameter": {}}, {"name": "send_webhook_message", "description": "Send a message via webhook", "parameter": {}}]}
{"name": "Discourse", "description": "A MCP server to search Discourse posts on a Discourse forum.", "url": "https://github.com/AshDevFr/discourse-mcp-server", "readme_file": "community/Discourse.md", "summary": "A Node.js server implementing Model Context Protocol (MCP) for performing search operations on Discourse forums.", "tools": [{"name": "search_posts", "description": "Searches posts on a Discourse forum.", "parameter": {"query": "(string) The search query to use."}}]}
{"name": "Docker", "description": "Integrate with Docker to manage containers, images, volumes, and networks.", "url": "https://github.com/ckreiling/mcp-server-docker", "readme_file": "community/Docker.md", "summary": "An MCP server for managing Docker with natural language, enabling users to compose containers, introspect and debug running containers, and manage persistent data with Docker volumes.", "tools": [{"name": "list_containers", "description": "Lists all existing containers.", "parameter": {}}, {"name": "create_container", "description": "Creates a new container.", "parameter": {}}, {"name": "run_container", "description": "Runs a container.", "parameter": {}}, {"name": "recreate_container", "description": "Recreates a container.", "parameter": {}}, {"name": "start_container", "description": "Starts a container.", "parameter": {}}, {"name": "fetch_container_logs", "description": "Fetches logs from a container.", "parameter": {}}, {"name": "stop_container", "description": "Stops a container.", "parameter": {}}, {"name": "remove_container", "description": "Removes a container.", "parameter": {}}, {"name": "list_images", "description": "Lists all Docker images.", "parameter": {}}, {"name": "pull_image", "description": "Pulls a Docker image from a registry.", "parameter": {}}, {"name": "push_image", "description": "Pushes a Docker image to a registry.", "parameter": {}}, {"name": "build_image", "description": "Builds a Docker image from a Dockerfile.", "parameter": {}}, {"name": "remove_image", "description": "Removes a Docker image.", "parameter": {}}, {"name": "list_networks", "description": "Lists all Docker networks.", "parameter": {}}, {"name": "create_network", "description": "Creates a new Docker network.", "parameter": {}}, {"name": "remove_network", "description": "Removes a Docker network.", "parameter": {}}, {"name": "list_volumes", "description": "Lists all Docker volumes.", "parameter": {}}, {"name": "create_volume", "description": "Creates a new Docker volume.", "parameter": {}}, {"name": "remove_volume", "description": "Removes a Docker volume.", "parameter": {}}]}
{"name": "DPLP", "description": "Searches the DBLP computer science bibliography database.", "url": "https://github.com/szeider/mcp-dblp", "readme_file": "community/DPLP.md", "summary": "An MCP server that provides access to the DBLP computer science bibliography database for Large Language Models, enabling AI models to search and retrieve academic publications, process citations, perform fuzzy matching, extract bibliographic information, and export BibTeX entries.", "tools": [{"name": "search", "description": "Search DBLP for publications using boolean queries.", "parameter": {"query": "(string, required) A query string that may include boolean operators 'and' and 'or' (case-insensitive)", "max_results": "(number, optional) Maximum number of publications to return. Default is 10", "year_from": "(number, optional) Lower bound for publication year", "year_to": "(number, optional) Upper bound for publication year", "venue_filter": "(string, optional) Case-insensitive substring filter for publication venues (e.g., 'iclr')", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}}, {"name": "fuzzy_title_search", "description": "Search publications with fuzzy title matching.", "parameter": {"title": "(string, required) Full or partial title of the publication (case-insensitive)", "similarity_threshold": "(number, required) A float between 0 and 1 where 1.0 means an exact match", "max_results": "(number, optional) Maximum number of publications to return. Default is 10", "year_from": "(number, optional) Lower bound for publication year", "year_to": "(number, optional) Upper bound for publication year", "venue_filter": "(string, optional) Case-insensitive substring filter for publication venues", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}}, {"name": "get_author_publications", "description": "Retrieve publication details for a specific author with fuzzy matching.", "parameter": {"author_name": "(string, required) Full or partial author name (case-insensitive)", "similarity_threshold": "(number, required) A float between 0 and 1 where 1.0 means an exact match", "max_results": "(number, optional) Maximum number of publications to return. Default is 20", "include_bibtex": "(boolean, optional) Whether to include BibTeX entries in the results. Default is false"}}, {"name": "get_venue_info", "description": "Retrieve detailed information about a publication venue.", "parameter": {"venue_name": "(string, required) Venue name or abbreviation (e.g., 'ICLR' or full name)"}}, {"name": "calculate_statistics", "description": "Calculate statistics from a list of publication results.", "parameter": {"results": "(array, required) An array of publication objects, each with at least 'title', 'authors', 'venue', and 'year'"}}, {"name": "export_bibtex", "description": "Export BibTeX entries directly from DBLP to a local file.", "parameter": {"links": "(string, required) HTML string containing one or more <a href=biburl>key</a> links"}}]}
{"name": "dune-analytics-mcp", "description": "A mcp server that bridges Dune Analytics data to AI agents.", "url": "https://github.com/kukapay/dune-analytics-mcp", "readme_file": "community/dune-analytics-mcp.md", "summary": "A MCP server that bridges Dune Analytics data to AI agents, providing tools to fetch and execute Dune queries with results returned as CSV-formatted strings.", "tools": [{"name": "get_latest_result", "description": "Retrieves the latest results of a specified Dune query.", "parameter": {"query_id": "(int) The ID of the Dune query."}}, {"name": "run_query", "description": "Executes a Dune query and returns the results.", "parameter": {"query_id": "(int) The ID of the Dune query to run."}}]}
{"name": "EdgeOne Pages MCP", "description": "An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.", "url": "https://github.com/TencentEdgeOne/edgeone-pages-mcp", "readme_file": "community/EdgeOne_Pages_MCP.md", "summary": "An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.", "tools": [{"name": "deploy-html", "description": "Deploys HTML content to EdgeOne Pages and returns a publicly accessible URL.", "parameter": {}}]}
{"name": "Elasticsearch", "description": "MCP server implementation that provides Elasticsearch interaction.", "url": "https://github.com/cr7258/elasticsearch-mcp-server", "readme_file": "community/Elasticsearch.md", "summary": "An MCP server implementation that provides interaction with Elasticsearch and OpenSearch, enabling operations such as searching documents, analyzing indices, and managing the cluster.", "tools": [{"name": "general_api_request", "description": "Perform a general HTTP API request for any Elasticsearch/OpenSearch API that does not have a dedicated tool.", "parameter": {}}, {"name": "list_indices", "description": "List all indices.", "parameter": {}}, {"name": "get_index", "description": "Returns information (mappings, settings, aliases) about one or more indices.", "parameter": {}}, {"name": "create_index", "description": "Create a new index.", "parameter": {}}, {"name": "delete_index", "description": "Delete an index.", "parameter": {}}, {"name": "search_documents", "description": "Search for documents.", "parameter": {}}, {"name": "index_document", "description": "Creates or updates a document in the index.", "parameter": {}}, {"name": "get_document", "description": "Get a document by ID.", "parameter": {}}, {"name": "delete_document", "description": "Delete a document by ID.", "parameter": {}}, {"name": "delete_by_query", "description": "Deletes documents matching the provided query.", "parameter": {}}, {"name": "get_cluster_health", "description": "Returns basic information about the health of the cluster.", "parameter": {}}, {"name": "get_cluster_stats", "description": "Returns high-level overview of cluster statistics.", "parameter": {}}, {"name": "list_aliases", "description": "List all aliases.", "parameter": {}}, {"name": "get_alias", "description": "Get alias information for a specific index.", "parameter": {}}, {"name": "put_alias", "description": "Create or update an alias for a specific index.", "parameter": {}}, {"name": "delete_alias", "description": "Delete an alias for a specific index.", "parameter": {}}]}
{"name": "ElevenLabs", "description": "A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.", "url": "https://github.com/mamertofabian/elevenlabs-mcp-server", "readme_file": "community/ElevenLabs.md", "summary": "A Model Context Protocol (MCP) server that integrates with ElevenLabs text-to-speech API, providing capabilities for generating audio from text, supporting multiple voices and script parts, and storing voice generation history in an SQLite database.", "tools": [{"name": "generate_audio_simple", "description": "Generate audio from plain text using default voice settings", "parameter": {}}, {"name": "generate_audio_script", "description": "Generate audio from a structured script with multiple voices and actors", "parameter": {}}, {"name": "delete_job", "description": "Delete a job by its ID", "parameter": {}}, {"name": "get_audio_file", "description": "Get the audio file by its ID", "parameter": {}}, {"name": "list_voices", "description": "List all available voices", "parameter": {}}, {"name": "get_voiceover_history", "description": "Get voiceover job history. Optionally specify a job ID for a specific job.", "parameter": {"job_id": "(Optional, string) The ID of the specific job to retrieve history for"}}]}
{"name": "EVM MCP Server", "description": "Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.", "url": "https://github.com/mcpdotdirect/evm-mcp-server", "readme_file": "community/EVM_MCP_Server.md", "summary": "A comprehensive Model Context Protocol (MCP) server that provides blockchain services across multiple EVM-compatible networks. It enables AI agents to interact with Ethereum, Optimism, Arbitrum, Base, Polygon, and many other EVM chains with a unified interface. The server supports reading blockchain state, interacting with smart contracts, transferring tokens, querying token metadata and balances, and ENS name resolution.", "tools": [{"name": "get-token-info", "description": "Get ERC20 token metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the token", "network": "(string) The network identifier"}}, {"name": "get-token-balance", "description": "Check ERC20 token balance", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the token", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}}, {"name": "transfer-token", "description": "Transfer ERC20 tokens", "parameter": {"privateKey": "(string) The private key of the sender", "tokenAddress": "(address/ENS) The address or ENS name of the token", "toAddress": "(address/ENS) The address or ENS name of the recipient", "amount": "(number) The amount of tokens to transfer", "network": "(string) The network identifier"}}, {"name": "approve-token-spending", "description": "Approve token allowances", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the token", "spenderAddress": "(address/ENS) The address or ENS name of the spender", "amount": "(number) The amount of tokens to approve", "network": "(string) The network identifier"}}, {"name": "get-nft-info", "description": "Get NFT metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "network": "(string) The network identifier"}}, {"name": "check-nft-ownership", "description": "Verify NFT ownership", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}}, {"name": "transfer-nft", "description": "Transfer an NFT", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the NFT", "tokenId": "(string) The token ID", "toAddress": "(address/ENS) The address or ENS name of the recipient", "network": "(string) The network identifier"}}, {"name": "get-nft-balance", "description": "Count NFTs owned", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the NFT", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}}, {"name": "get-erc1155-token-uri", "description": "Get ERC1155 metadata", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "network": "(string) The network identifier"}}, {"name": "get-erc1155-balance", "description": "Check ERC1155 balance", "parameter": {"tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "ownerAddress": "(address/ENS) The address or ENS name of the owner", "network": "(string) The network identifier"}}, {"name": "transfer-erc1155", "description": "Transfer ERC1155 tokens", "parameter": {"privateKey": "(string) The private key of the owner", "tokenAddress": "(address/ENS) The address or ENS name of the ERC1155 token", "tokenId": "(string) The token ID", "amount": "(number) The amount of tokens to transfer", "toAddress": "(address/ENS) The address or ENS name of the recipient", "network": "(string) The network identifier"}}, {"name": "get-chain-info", "description": "Get network information", "parameter": {"network": "(string) The network identifier"}}, {"name": "get-balance", "description": "Get native token balance", "parameter": {"address": "(address/ENS) The address or ENS name of the account", "network": "(string) The network identifier"}}, {"name": "transfer-eth", "description": "Send native tokens", "parameter": {"privateKey": "(string) The private key of the sender", "to": "(address/ENS) The address or ENS name of the recipient", "amount": "(number) The amount of native tokens to transfer", "network": "(string) The network identifier"}}, {"name": "get-transaction", "description": "Get transaction details", "parameter": {"txHash": "(string) The transaction hash", "network": "(string) The network identifier"}}, {"name": "read-contract", "description": "Read smart contract state", "parameter": {"contractAddress": "(address/ENS) The address or ENS name of the contract", "abi": "(array) The ABI of the contract", "functionName": "(string) The name of the function to call", "args": "(array) The arguments to pass to the function", "network": "(string) The network identifier"}}, {"name": "write-contract", "description": "Write to smart contract", "parameter": {"contractAddress": "(address/ENS) The address or ENS name of the contract", "abi": "(array) The ABI of the contract", "functionName": "(string) The name of the function to call", "args": "(array) The arguments to pass to the function", "privateKey": "(string) The private key of the caller", "network": "(string) The network identifier"}}, {"name": "is-contract", "description": "Check if address is a contract", "parameter": {"address": "(address/ENS) The address or ENS name to check", "network": "(string) The network identifier"}}, {"name": "resolve-ens", "description": "Resolve ENS name to address", "parameter": {"ensName": "(string) The ENS name to resolve", "network": "(string) The network identifier"}}]}
{"name": "Everything Search", "description": "Fast file searching capabilities across Windows (using Everything SDK), macOS (using mdfind command), and Linux (using locate/plocate command).", "url": "https://github.com/mamertofabian/mcp-everything-search", "readme_file": "community/Everything_Search.md", "summary": "An MCP server that provides fast file searching capabilities across Windows, macOS, and Linux. Uses the Everything SDK on Windows, the built-in `mdfind` command on macOS, and the `locate`/`plocate` command on Linux.", "tools": [{"name": "search", "description": "Search for files and folders across the system. The search capabilities and syntax support vary by platform.", "parameter": {"query": "(required) Search query string. See platform-specific notes below.", "max_results": "(optional, integer) Maximum number of results to return (default: 100, max: 1000)", "match_path": "(optional, boolean) Match against full path instead of filename only (default: false)", "match_case": "(optional, boolean) Enable case-sensitive search (default: false)", "match_whole_word": "(optional, boolean) Match whole words only (default: false)", "match_regex": "(optional, boolean) Enable regex search (default: false)", "sort_by": "(optional, integer) Sort order for results (default: 1). Available options: 1 (filename A to Z), 2 (filename Z to A), 3 (path A to Z), 4 (path Z to A), 5 (size smallest first), 6 (size largest first), 7 (extension A to Z), 8 (extension Z to A), 11 (creation date oldest first), 12 (creation date newest first), 13 (modification date oldest first), 14 (modification date newest first)"}}]}
{"name": "Fantasy PL", "description": "Give your coding agent direct access to up-to date Fantasy Premier League data", "url": "https://github.com/rishijatia/fantasy-pl-mcp", "readme_file": "community/Fantasy_PL.md", "summary": "A Model Context Protocol (MCP) server that provides access to Fantasy Premier League (FPL) data and tools, allowing interaction with FPL data in Claude for Desktop and other MCP-compatible clients.", "tools": [{"name": "get_gameweek_status", "description": "Get precise information about current, previous, and next gameweeks", "parameter": {}}, {"name": "analyze_player_fixtures", "description": "Analyze upcoming fixtures for a player with difficulty ratings", "parameter": {}}, {"name": "get_blank_gameweeks", "description": "Get information about upcoming blank gameweeks", "parameter": {}}, {"name": "get_double_gameweeks", "description": "Get information about upcoming double gameweeks", "parameter": {}}, {"name": "analyze_players", "description": "Filter and analyze FPL players based on multiple criteria", "parameter": {}}, {"name": "analyze_fixtures", "description": "Analyze upcoming fixtures for players, teams, or positions", "parameter": {}}, {"name": "compare_players", "description": "Compare multiple players across various metrics", "parameter": {}}, {"name": "check_fpl_authentication", "description": "Check if FPL authentication is working correctly", "parameter": {}}, {"name": "get_my_team", "description": "View your authenticated team (requires authentication)", "parameter": {}}, {"name": "get_team", "description": "View any team with a specific ID (requires authentication)", "parameter": {}}, {"name": "get_manager_info", "description": "Get manager details (requires authentication)", "parameter": {}}]}
{"name": "Fetch", "description": "A server that flexibly fetches HTML, JSON, Markdown, or plaintext.", "url": "https://github.com/zcaceres/fetch-mcp", "readme_file": "community/Fetch.md", "summary": "This MCP server provides functionality to fetch web content in various formats, including HTML, JSON, plain text, and Markdown. It supports custom headers for requests and uses modern APIs for content fetching and transformation.", "tools": [{"name": "fetch_html", "description": "Fetch a website and return the content as HTML", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}}, {"name": "fetch_json", "description": "Fetch a JSON file from a URL", "parameter": {"url": "(string, required): URL of the JSON to fetch", "headers": "(object, optional): Custom headers to include in the request"}}, {"name": "fetch_txt", "description": "Fetch a website and return the content as plain text (no HTML)", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}}, {"name": "fetch_markdown", "description": "Fetch a website and return the content as Markdown", "parameter": {"url": "(string, required): URL of the website to fetch", "headers": "(object, optional): Custom headers to include in the request"}}]}
{"name": "Firebase", "description": "Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.", "url": "https://github.com/gannonh/firebase-mcp", "readme_file": "community/Firebase.md", "summary": "Firebase MCP enables AI assistants to work directly with Firebase services, including Firestore for document database operations, Storage for file management with robust upload capabilities, and Authentication for user management and verification.", "tools": [{"name": "storage_upload", "description": "Upload files from text, base64 content, or local file paths", "parameter": {"filePath": "(string) The path where the file will be stored in Firebase Storage", "content": "(string) The content of the file to upload, can be a local file path, base64 data URL, or plain text"}}, {"name": "storage_upload_from_url", "description": "Import files directly from external URLs", "parameter": {"filePath": "(string) The path where the file will be stored in Firebase Storage", "url": "(string) The external URL of the file to upload"}}, {"name": "firestore_add_document", "description": "Add a document to a collection", "parameter": {"collection": "(string) The name of the collection", "data": "(object) The data to add to the document"}}, {"name": "firestore_list_documents", "description": "List documents with filtering", "parameter": {"collection": "(string) The name of the collection"}}, {"name": "firestore_get_document", "description": "Get a specific document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document"}}, {"name": "firestore_update_document", "description": "Update an existing document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document", "data": "(object) The data to update in the document"}}, {"name": "firestore_delete_document", "description": "Delete a document", "parameter": {"collection": "(string) The name of the collection", "id": "(string) The ID of the document"}}, {"name": "firestore_list_collections", "description": "List root collections", "parameter": {}}, {"name": "firestore_query_collection_group", "description": "Query across subcollections", "parameter": {"collectionId": "(string) The ID of the collection group"}}, {"name": "storage_list_files", "description": "List files in a directory", "parameter": {"directoryPath": "(Optional, string) The path of the directory to list files from"}}, {"name": "storage_get_file_info", "description": "Get file metadata and URL", "parameter": {"filePath": "(string) The path of the file in Firebase Storage"}}, {"name": "auth_get_user", "description": "Get user by ID or email", "parameter": {"identifier": "(string) The user ID or email"}}]}
{"name": "FireCrawl", "description": "Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting", "url": "https://github.com/vrknetha/mcp-server-firecrawl", "readme_file": "community/FireCrawl.md", "summary": "A Model Context Protocol (MCP) server implementation that integrates with Firecrawl for web scraping capabilities, including scraping, crawling, searching, extracting, and deep research.", "tools": [{"name": "firecrawl_scrape", "description": "Scrape content from a single URL with advanced options.", "parameter": {"url": "(string) The URL to scrape.", "formats": "(array) List of formats to return the content in (e.g., ['markdown']).", "onlyMainContent": "(boolean) Whether to only extract the main content.", "waitFor": "(number) Time to wait for page elements to load (in milliseconds).", "timeout": "(number) Maximum time to wait for the scrape operation (in milliseconds).", "mobile": "(boolean) Whether to emulate a mobile device.", "includeTags": "(array) List of HTML tags to include in the scrape.", "excludeTags": "(array) List of HTML tags to exclude from the scrape.", "skipTlsVerification": "(boolean) Whether to skip TLS verification."}}, {"name": "firecrawl_batch_scrape", "description": "Scrape multiple URLs efficiently with built-in rate limiting and parallel processing.", "parameter": {"urls": "(array) List of URLs to scrape.", "options": "(object) Additional options for the scrape operation, including 'formats' and 'onlyMainContent'."}}, {"name": "firecrawl_check_batch_status", "description": "Check the status of a batch operation.", "parameter": {"id": "(string) The ID of the batch operation to check."}}, {"name": "firecrawl_search", "description": "Search the web and optionally extract content from search results.", "parameter": {"query": "(string) The search query.", "limit": "(number) Maximum number of results to return.", "lang": "(string) Language for the search.", "country": "(string) Country for the search.", "scrapeOptions": "(object) Additional options for scraping the search results, including 'formats' and 'onlyMainContent'."}}, {"name": "firecrawl_crawl", "description": "Start an asynchronous crawl with advanced options.", "parameter": {"url": "(string) The starting URL for the crawl.", "maxDepth": "(number) Maximum recursive depth for the crawl.", "limit": "(number) Maximum number of URLs to crawl.", "allowExternalLinks": "(boolean) Whether to follow external links.", "deduplicateSimilarURLs": "(boolean) Whether to deduplicate similar URLs."}}, {"name": "firecrawl_extract", "description": "Extract structured information from web pages using LLM capabilities.", "parameter": {"urls": "(array) List of URLs to extract information from.", "prompt": "(string) Custom prompt for the LLM extraction.", "systemPrompt": "(string) System prompt to guide the LLM.", "schema": "(object) JSON schema for structured data extraction.", "allowExternalLinks": "(boolean) Allow extraction from external links.", "enableWebSearch": "(boolean) Enable web search for additional context.", "includeSubdomains": "(boolean) Include subdomains in extraction."}}, {"name": "firecrawl_deep_research", "description": "Conduct deep web research on a query using intelligent crawling, search, and LLM analysis.", "parameter": {"query": "(string, required) The research question or topic to explore.", "maxDepth": "(number, optional) Maximum recursive depth for crawling/search (default: 3).", "timeLimit": "(number, optional) Time limit in seconds for the research session (default: 120).", "maxUrls": "(number, optional) Maximum number of URLs to analyze (default: 50)."}}, {"name": "firecrawl_generate_llmstxt", "description": "Generate a standardized llms.txt (and optionally llms-full.txt) file for a given domain.", "parameter": {"url": "(string, required) The base URL of the website to analyze.", "maxUrls": "(number, optional) Max number of URLs to include (default: 10).", "showFullText": "(boolean, optional) Whether to include llms-full.txt contents in the response."}}]}
{"name": "Ghost", "description": "A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.", "url": "https://github.com/MFYDev/ghost-mcp", "readme_file": "community/Ghost.md", "summary": "A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude. It provides secure and comprehensive access to manage posts, users, members, tiers, offers, and newsletters.", "tools": [{"name": "Browse Posts", "description": "List posts with optional filters, pagination, and ordering.", "parameter": {}}, {"name": "Read Post", "description": "Retrieve a post by ID or slug.", "parameter": {}}, {"name": "Add Post", "description": "Create a new post with title, content, and status.", "parameter": {}}, {"name": "Edit Post", "description": "Update an existing post by ID.", "parameter": {}}, {"name": "Delete Post", "description": "Remove a post by ID.", "parameter": {}}, {"name": "Browse Members", "description": "List members with filters and pagination.", "parameter": {}}, {"name": "Read Member", "description": "Retrieve a member by ID or email.", "parameter": {}}, {"name": "Add Member", "description": "Create a new member.", "parameter": {}}, {"name": "Edit Member", "description": "Update member details.", "parameter": {}}, {"name": "Delete Member", "description": "Remove a member.", "parameter": {}}, {"name": "Browse Newsletters", "description": "List newsletters.", "parameter": {}}, {"name": "Read Newsletter", "description": "Retrieve a newsletter by ID.", "parameter": {}}, {"name": "Add Newsletter", "description": "Create a new newsletter.", "parameter": {}}, {"name": "Edit Newsletter", "description": "Update newsletter details.", "parameter": {}}, {"name": "Delete Newsletter", "description": "Remove a newsletter.", "parameter": {}}, {"name": "Browse Offers", "description": "List offers.", "parameter": {}}, {"name": "Read Offer", "description": "Retrieve an offer by ID.", "parameter": {}}, {"name": "Add Offer", "description": "Create a new offer.", "parameter": {}}, {"name": "Edit Offer", "description": "Update offer details.", "parameter": {}}, {"name": "Delete Offer", "description": "Remove an offer.", "parameter": {}}, {"name": "Browse Invites", "description": "List invites.", "parameter": {}}, {"name": "Add Invite", "description": "Create a new invite.", "parameter": {}}, {"name": "Delete Invite", "description": "Remove an invite.", "parameter": {}}, {"name": "Browse Roles", "description": "List roles.", "parameter": {}}, {"name": "Read Role", "description": "Retrieve a role by ID.", "parameter": {}}, {"name": "Browse Tags", "description": "List tags.", "parameter": {}}, {"name": "Read Tag", "description": "Retrieve a tag by ID or slug.", "parameter": {}}, {"name": "Add Tag", "description": "Create a new tag.", "parameter": {}}, {"name": "Edit Tag", "description": "Update tag details.", "parameter": {}}, {"name": "Delete Tag", "description": "Remove a tag.", "parameter": {}}, {"name": "Browse Tiers", "description": "List tiers.", "parameter": {}}, {"name": "Read Tier", "description": "Retrieve a tier by ID.", "parameter": {}}, {"name": "Add Tier", "description": "Create a new tier.", "parameter": {}}, {"name": "Edit Tier", "description": "Update tier details.", "parameter": {}}, {"name": "Delete Tier", "description": "Remove a tier.", "parameter": {}}, {"name": "Browse Users", "description": "List users.", "parameter": {}}, {"name": "Read User", "description": "Retrieve a user by ID or slug.", "parameter": {}}, {"name": "Edit User", "description": "Update user details.", "parameter": {}}, {"name": "Delete User", "description": "Remove a user.", "parameter": {}}, {"name": "Browse Webhooks", "description": "List webhooks.", "parameter": {}}, {"name": "Add Webhook", "description": "Create a new webhook.", "parameter": {}}, {"name": "Delete Webhook", "description": "Remove a webhook.", "parameter": {}}]}
{"name": "Git", "description": "Allows LLM to interact with a local git repository, incl. optional push support.", "url": "https://github.com/geropl/git-mcp-go", "readme_file": "community/Git.md", "summary": "A Model Context Protocol (MCP) server for Git repository interaction and automation, written in Go. It provides tools to read, search, and manipulate Git repositories via Large Language Models.", "tools": [{"name": "git_status", "description": "Shows the working tree status", "parameter": {}}, {"name": "git_diff_unstaged", "description": "Shows changes in the working directory that are not yet staged", "parameter": {}}, {"name": "git_diff_staged", "description": "Shows changes that are staged for commit", "parameter": {}}, {"name": "git_diff", "description": "Shows differences between branches or commits", "parameter": {}}, {"name": "git_commit", "description": "Records changes to the repository", "parameter": {}}, {"name": "git_add", "description": "Adds file contents to the staging area", "parameter": {}}, {"name": "git_reset", "description": "Unstages all staged changes", "parameter": {}}, {"name": "git_log", "description": "Shows the commit logs", "parameter": {}}, {"name": "git_create_branch", "description": "Creates a new branch from an optional base branch", "parameter": {}}, {"name": "git_checkout", "description": "Switches branches", "parameter": {}}, {"name": "git_show", "description": "Shows the contents of a commit", "parameter": {}}, {"name": "git_init", "description": "Initialize a new Git repository", "parameter": {}}, {"name": "git_push", "description": "Pushes local commits to a remote repository (requires --write-access flag)", "parameter": {}}, {"name": "git_list_repositories", "description": "Lists all available Git repositories", "parameter": {}}]}
{"name": "Github Actions", "description": "A Model Context Protocol (MCP) server for interacting with Github Actions.", "url": "https://github.com/ko1ynnky/github-actions-mcp-server", "readme_file": "community/Github_Actions.md", "summary": "MCP Server for the GitHub Actions API, enabling AI assistants to manage and operate GitHub Actions workflows. It provides complete workflow management, workflow run analysis, comprehensive error handling, flexible type validation, and a security-focused design.", "tools": [{"name": "list_workflows", "description": "List workflows in a GitHub repository", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}}, {"name": "get_workflow", "description": "Get details of a specific workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename"}}, {"name": "get_workflow_usage", "description": "Get usage statistics of a workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename"}}, {"name": "list_workflow_runs", "description": "List all workflow runs for a repository or a specific workflow", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(optional string or number) The ID of the workflow or filename", "actor": "(optional string) Filter by user who triggered the workflow", "branch": "(optional string) Filter by branch", "event": "(optional string) Filter by event type", "status": "(optional string) Filter by status", "created": "(optional string) Filter by creation date (YYYY-MM-DD)", "excludePullRequests": "(optional boolean) Exclude PR-triggered runs", "checkSuiteId": "(optional number) Filter by check suite ID", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}}, {"name": "get_workflow_run", "description": "Get details of a specific workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}}, {"name": "get_workflow_run_jobs", "description": "Get jobs for a specific workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run", "filter": "(optional string) Filter jobs by completion status ('latest', 'all')", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}}, {"name": "trigger_workflow", "description": "Trigger a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "workflowId": "(string or number) The ID of the workflow or filename", "ref": "(string) The reference to run the workflow on (branch, tag, or SHA)", "inputs": "(optional object) Input parameters for the workflow"}}, {"name": "cancel_workflow_run", "description": "Cancel a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}}, {"name": "rerun_workflow", "description": "Re-run a workflow run", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "runId": "(number) The ID of the workflow run"}}]}
{"name": "Glean", "description": "A server that uses Glean API to search and chat.", "url": "https://github.com/longyi1207/glean-mcp-server", "readme_file": "community/Glean.md", "summary": "An MCP server implementation that integrates the Glean API, providing search and chat functionalities.", "tools": [{"name": "Search", "description": "Provides a list of search results given a query.", "parameter": {}}, {"name": "Chat", "description": "Enables Q&A interactions with a chatbot.", "parameter": {}}]}
{"name": "Gmail", "description": "A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.", "url": "https://github.com/GongRzhe/Gmail-MCP-Server", "readme_file": "community/Gmail.md", "summary": "A Model Context Protocol (MCP) server for integrating Gmail in Claude Desktop with auto authentication support. It enables AI assistants to manage Gmail through natural language interactions, including sending, reading, searching, and modifying emails, as well as comprehensive label management and batch operations.", "tools": [{"name": "send_email", "description": "Sends a new email immediately.", "parameter": {"to": "(array) List of recipient email addresses", "subject": "(string) Subject of the email", "body": "(string) Body content of the email", "cc": "(Optional, array) List of CC recipient email addresses", "bcc": "(Optional, array) List of BCC recipient email addresses"}}, {"name": "draft_email", "description": "Creates a draft email without sending it.", "parameter": {"to": "(array) List of recipient email addresses", "subject": "(string) Subject of the email", "body": "(string) Body content of the email", "cc": "(Optional, array) List of CC recipient email addresses"}}, {"name": "read_email", "description": "Retrieves the content of a specific email by its ID.", "parameter": {"messageId": "(string) ID of the email message"}}, {"name": "search_emails", "description": "Searches for emails using Gmail search syntax.", "parameter": {"query": "(string) Gmail search query", "maxResults": "(Optional, integer) Maximum number of results to return"}}, {"name": "modify_email", "description": "Adds or removes labels from emails (move to different folders, archive, etc.).", "parameter": {"messageId": "(string) ID of the email message", "addLabelIds": "(array) List of label IDs to add", "removeLabelIds": "(array) List of label IDs to remove"}}, {"name": "delete_email", "description": "Permanently deletes an email.", "parameter": {"messageId": "(string) ID of the email message"}}, {"name": "list_email_labels", "description": "Retrieves all available Gmail labels.", "parameter": {}}, {"name": "create_label", "description": "Creates a new Gmail label.", "parameter": {"name": "(string) Name of the label", "messageListVisibility": "(string) Visibility setting for message list (show or hide)", "labelListVisibility": "(string) Visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}}, {"name": "update_label", "description": "Updates an existing Gmail label.", "parameter": {"id": "(string) ID of the label", "name": "(string) New name of the label", "messageListVisibility": "(string) New visibility setting for message list (show or hide)", "labelListVisibility": "(string) New visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}}, {"name": "delete_label", "description": "Deletes a Gmail label.", "parameter": {"id": "(string) ID of the label"}}, {"name": "get_or_create_label", "description": "Gets an existing label by name or creates it if it doesn't exist.", "parameter": {"name": "(string) Name of the label", "messageListVisibility": "(string) Visibility setting for message list (show or hide)", "labelListVisibility": "(string) Visibility setting for label list (labelShow, labelShowIfUnread, or labelHide)"}}, {"name": "batch_modify_emails", "description": "Modifies labels for multiple emails in efficient batches.", "parameter": {"messageIds": "(array) List of email message IDs", "addLabelIds": "(array) List of label IDs to add", "removeLabelIds": "(array) List of label IDs to remove", "batchSize": "(Optional, integer) Number of emails to process in each batch"}}, {"name": "batch_delete_emails", "description": "Permanently deletes multiple emails in efficient batches.", "parameter": {"messageIds": "(array) List of email message IDs", "batchSize": "(Optional, integer) Number of emails to process in each batch"}}]}
{"name": "Gmail Headless", "description": "Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.", "url": "https://github.com/baryhuang/mcp-headless-gmail", "readme_file": "community/Gmail_Headless.md", "summary": "A MCP server that provides Gmail functionalities such as getting and sending emails, and refreshing access tokens, all without local credential or token setup. It operates headlessly in remote environments and supports decoupled architecture for credential management.", "tools": [{"name": "gmail_refresh_token", "description": "Refreshes the access token using the refresh token, client ID, and client secret.", "parameter": {"google_refresh_token": "(string) The refresh token used to obtain a new access token.", "google_client_id": "(string) The client ID obtained from Google API credentials.", "google_client_secret": "(string) The client secret obtained from Google API credentials."}}, {"name": "get_recent_emails", "description": "Retrieves recent emails with the first 1k characters of each email body.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "max_results": "(Optional, integer) The maximum number of emails to retrieve. Default is 5.", "unread_only": "(Optional, boolean) Whether to retrieve only unread emails. Default is false."}}, {"name": "get_full_email_body_content", "description": "Retrieves the full content of an email in chunks of 1k characters.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "message_id": "(string) The unique identifier of the email message.", "offset": "(integer) The starting point in the email body for the chunk to be retrieved."}}, {"name": "send_email", "description": "Sends an email through Gmail.", "parameter": {"google_access_token": "(string) The access token required to authenticate the request.", "to": "(string) The recipient's email address.", "subject": "(string) The subject of the email.", "body": "(string) The plain text body of the email.", "html_body": "(Optional, string) The HTML body of the email."}}]}
{"name": "GOAT", "description": "Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.", "url": "https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol", "readme_file": "community/GOAT.md", "summary": "GOAT is the largest agentic finance toolkit for AI agents, enabling them to send and receive payments, purchase goods and services, engage in investment strategies, tokenize assets, and gain financial insights using blockchain technology.", "tools": [{"name": "Get quotes and swap on 0x", "description": "Allows agents to get quotes and perform swaps using the 0x protocol.", "parameter": {}}, {"name": "Get the balances of a wallet using 1inch API", "description": "Retrieves the balances of a wallet using the 1inch API.", "parameter": {}}, {"name": "Get price predictions using Allora API", "description": "Fetches price predictions using the Allora API.", "parameter": {}}, {"name": "Swap tokens on Starknet", "description": "Enables token swapping on the Starknet network.", "parameter": {}}, {"name": "Swap tokens and provide liquidity on Balancer", "description": "Facilitates token swapping and liquidity provision on Balancer.", "parameter": {}}, {"name": "Swap tokens on Balmy", "description": "Allows token swapping on the Balmy platform.", "parameter": {}}, {"name": "Play casino games", "description": "Enables agents to play casino games using the BetSwirl platform.", "parameter": {}}, {"name": "Get token insights using BirdEye API", "description": "Provides token insights using the BirdEye API.", "parameter": {}}, {"name": "Get token insights using BMX API", "description": "Fetches token insights using the BMX API.", "parameter": {}}, {"name": "Get coin information using CoinGecko API", "description": "Retrieves coin information using the CoinGecko API.", "parameter": {}}, {"name": "Get coin information using Coinmarketcap API", "description": "Fetches coin information using the Coinmarketcap API.", "parameter": {}}, {"name": "Interact with Cosmos tokens", "description": "Enables interaction with Cosmos tokens.", "parameter": {}}, {"name": "Purchase any NFT on any chain using Crossmint", "description": "Allows the purchase of NFTs on any supported chain using Crossmint.", "parameter": {}}, {"name": "Create a wallet, mint tokens and get test tokens on any chain using Crossmint", "description": "Facilitates the creation of wallets, minting of tokens, and retrieval of test tokens on any supported chain using Crossmint.", "parameter": {}}, {"name": "Bridge tokens on DeBridge", "description": "Enables token bridging on the DeBridge network.", "parameter": {}}, {"name": "Get token information using Dexscreener API", "description": "Provides token information using the Dexscreener API.", "parameter": {}}, {"name": "Push based real time data streams", "description": "Enables push-based real-time data streams.", "parameter": {}}, {"name": "Resolve ENS names to addresses", "description": "Resolves ENS names to their corresponding addresses.", "parameter": {}}, {"name": "Find the most optimal route between tokens", "description": "Finds the most optimal route for token swaps.", "parameter": {}}, {"name": "Interact with any ERC20 token", "description": "Enables interaction with ERC20 tokens.", "parameter": {}}, {"name": "Interact with any ERC721 token", "description": "Enables interaction with ERC721 tokens.", "parameter": {}}, {"name": "Get transaction information using Etherscan API", "description": "Retrieves transaction information using the Etherscan API.", "parameter": {}}, {"name": "Read and post casts on Farcaster", "description": "Enables reading and posting casts on the Farcaster platform.", "parameter": {}}, {"name": "Claim rewards on Hedgey", "description": "Allows claiming of rewards on the Hedgey platform.", "parameter": {}}, {"name": "Borrow and lend on Ionic", "description": "Enables borrowing and lending on the Ionic platform.", "parameter": {}}, {"name": "Create positions on Ironclad", "description": "Facilitates the creation of positions on Ironclad.", "parameter": {}}, {"name": "Interact with Irys datachain", "description": "Enables interaction with the Irys datachain.", "parameter": {}}, {"name": "Call any JSON RPC endpoint", "description": "Allows calling of any JSON RPC endpoint.", "parameter": {}}, {"name": "Swap tokens on Jupiter", "description": "Enables token swapping on the Jupiter platform.", "parameter": {}}, {"name": "Swap tokens on KIM", "description": "Allows token swapping on the KIM platform.", "parameter": {}}, {"name": "Deposit USDC on Lulo", "description": "Enables depositing of USDC on the Lulo platform.", "parameter": {}}, {"name": "Cross-chain token swap using Mayan SDK", "description": "Facilitates cross-chain token swaps using the Mayan SDK.", "parameter": {}}, {"name": "Create liquidity pools on Meteora", "description": "Enables the creation of liquidity pools on Meteora.", "parameter": {}}, {"name": "Create a governance proposal on Mode", "description": "Facilitates the creation of governance proposals on Mode.", "parameter": {}}, {"name": "Vote on a governance proposal on Mode", "description": "Enables voting on governance proposals on Mode.", "parameter": {}}, {"name": "Spray tokens on Mode", "description": "Facilitates the spraying of tokens on Mode.", "parameter": {}}, {"name": "Get Nansen information using Nansen API", "description": "Retrieves information using the Nansen API.", "parameter": {}}, {"name": "Get nft and sales information using OpenSea API", "description": "Provides NFT and sales information using the OpenSea API.", "parameter": {}}, {"name": "Create positions on Orca", "description": "Enables the creation of positions on Orca.", "parameter": {}}, {"name": "Currency exchange on Zilliqa", "description": "Facilitates currency exchange on the Zilliqa network.", "parameter": {}}, {"name": "Bet on Polymarket", "description": "Enables betting on Polymarket.", "parameter": {}}, {"name": "Launch a token on Pump.fun", "description": "Facilitates the launch of tokens on Pump.fun.", "parameter": {}}, {"name": "Create a position on Renzo", "description": "Enables the creation of positions on Renzo.", "parameter": {}}, {"name": "Check SPL token validity on Rugcheck", "description": "Checks the validity of SPL tokens using Rugcheck.", "parameter": {}}, {"name": "Interact with SNS", "description": "Enables interaction with SNS.", "parameter": {}}, {"name": "Purchase NFTs on Magic Eden", "description": "Facilitates the purchase of NFTs on Magic Eden.", "parameter": {}}, {"name": "Get NFT information using Solana NFTs API", "description": "Provides NFT information using the Solana NFTs API.", "parameter": {}}, {"name": "Interact with SPL tokens", "description": "Enables interaction with SPL tokens.", "parameter": {}}, {"name": "Interact with Starknet tokens", "description": "Enables interaction with Starknet tokens.", "parameter": {}}, {"name": "Create streams with Superfluid", "description": "Facilitates the creation of streams using Superfluid.", "parameter": {}}, {"name": "Get synthetic price data using Synth Subnet API", "description": "Provides synthetic price data using the Synth Subnet API.", "parameter": {}}, {"name": "Purchase tokens on Tensor", "description": "Enables the purchase of tokens on Tensor.", "parameter": {}}, {"name": "Swap tokens on Uniswap", "description": "Facilitates token swapping on Uniswap.", "parameter": {}}, {"name": "Create a position on Velodrome", "description": "Enables the creation of positions on Velodrome.", "parameter": {}}, {"name": "Purchase physical assets on Worldstore", "description": "Facilitates the purchase of physical assets on Worldstore.", "parameter": {}}, {"name": "Create a global address on ZeroDev", "description": "Enables the creation of a global address on ZeroDev.", "parameter": {}}, {"name": "Interact with Zilliqa", "description": "Enables interaction with the Zilliqa network.", "parameter": {}}]}
{"name": "Godot", "description": "A MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.", "url": "https://github.com/Coding-Solo/godot-mcp", "readme_file": "community/Godot.md", "summary": "A Model Context Protocol (MCP) server for interacting with the Godot game engine. It enables AI assistants to launch the Godot editor, run projects, capture debug output, and control project execution through a standardized interface.", "tools": [{"name": "launch_editor", "description": "Open the Godot editor for a specific project", "parameter": {}}, {"name": "run_project", "description": "Execute Godot projects in debug mode", "parameter": {}}, {"name": "get_debug_output", "description": "Retrieve console output and error messages", "parameter": {}}, {"name": "stop_project", "description": "Stop the execution of a Godot project", "parameter": {}}, {"name": "get_godot_version", "description": "Retrieve the installed Godot version", "parameter": {}}, {"name": "list_projects", "description": "Find Godot projects in a specified directory", "parameter": {}}, {"name": "get_project_info", "description": "Get detailed information about project structure", "parameter": {}}, {"name": "create_scene", "description": "Create new scenes with specified root node types", "parameter": {}}, {"name": "add_node", "description": "Add nodes to existing scenes with customizable properties", "parameter": {}}, {"name": "load_sprite", "description": "Load sprites and textures into Sprite2D nodes", "parameter": {}}, {"name": "export_mesh_library", "description": "Export 3D scenes as MeshLibrary resources for GridMap", "parameter": {}}, {"name": "save_scene", "description": "Save scenes with options for creating variants", "parameter": {}}, {"name": "get_uid", "description": "Get UID for specific files (for Godot 4.4+)", "parameter": {}}, {"name": "update_project_uids", "description": "Update UID references by resaving resources (for Godot 4.4+)", "parameter": {}}]}
{"name": "Golang Filesystem Server", "description": "Secure file operations with configurable access controls built with Go!", "url": "https://github.com/mark3labs/mcp-filesystem-server", "readme_file": "community/Golang_Filesystem_Server.md", "summary": "A Go server implementing Model Context Protocol (MCP) for performing various filesystem operations such as reading/writing files, creating/deleting directories, moving files/directories, searching files, getting file metadata, and generating directory tree structures.", "tools": [{"name": "read_file", "description": "Read complete contents of a file", "parameter": {"path": "(string) File path"}}, {"name": "read_multiple_files", "description": "Read multiple files simultaneously", "parameter": {"paths": "(string[]) Array of file paths"}}, {"name": "write_file", "description": "Create new file or overwrite existing", "parameter": {"path": "(string) File location", "content": "(string) File content"}}, {"name": "create_directory", "description": "Create new directory or ensure it exists", "parameter": {"path": "(string) Directory path"}}, {"name": "list_directory", "description": "List directory contents with [FILE] or [DIR] prefixes", "parameter": {"path": "(string) Directory path"}}, {"name": "move_file", "description": "Move or rename files and directories", "parameter": {"source": "(string) Source path", "destination": "(string) Destination path"}}, {"name": "search_files", "description": "Recursively search for files/directories", "parameter": {"path": "(string) Starting directory", "pattern": "(string) Search pattern"}}, {"name": "get_file_info", "description": "Get detailed file/directory metadata", "parameter": {"path": "(string) File or directory path"}}, {"name": "tree", "description": "Returns a hierarchical JSON representation of a directory structure", "parameter": {"path": "(string) Directory to traverse (required)", "depth": "(number) Maximum depth to traverse (default: 3)", "follow_symlinks": "(boolean) Whether to follow symbolic links (default: false)"}}, {"name": "list_allowed_directories", "description": "List all directories the server is allowed to access", "parameter": {}}]}
{"name": "Goodnews", "description": "A simple MCP server that delivers curated positive and uplifting news stories.", "url": "https://github.com/VectorInstitute/mcp-goodnews", "readme_file": "community/Goodnews.md", "summary": "A Model Context Protocol (MCP) application that fetches and ranks news articles based on positive sentiment using the NewsAPI and a Cohere LLM.", "tools": [{"name": "fetch_list_of_goodnews", "description": "Fetches and returns a list of good, positive, and uplifting news articles.", "parameter": {}}]}
{"name": "Google Calendar", "description": "Integration with Google Calendar to check schedules, find time, and add/delete events", "url": "https://github.com/v-3/google-calendar", "readme_file": "community/Google_Calendar.md", "summary": "This MCP server allows interaction with Google Calendar, enabling capabilities such as listing events, creating meetings, updating events, deleting events, and finding free time slots.", "tools": [{"name": "list_events", "description": "List calendar events within a specified time range", "parameter": {}}, {"name": "create_event", "description": "Create a new calendar event", "parameter": {}}, {"name": "update_event", "description": "Update an existing calendar event", "parameter": {}}, {"name": "delete_event", "description": "Delete a calendar event", "parameter": {}}, {"name": "find_free_time", "description": "Find available time slots in the calendar", "parameter": {}}]}
{"name": "Google Custom Search", "description": "Provides Google Search results via the Google Custom Search API", "url": "https://github.com/adenot/mcp-google-search", "readme_file": "community/Google_Custom_Search.md", "summary": "A Model Context Protocol server that provides web search capabilities using Google Custom Search API and webpage content extraction functionality.", "tools": [{"name": "search", "description": "Perform web searches using Google Custom Search API.", "parameter": {"query": "(string) the search query", "num": "(Optional, integer) the number of results to return, default is 5, max is 10"}}, {"name": "read_webpage", "description": "Extract content from any webpage.", "parameter": {"url": "(string) the URL of the webpage to extract content from"}}]}
{"name": "Google Sheets", "description": "Access and editing data to your Google Sheets.", "url": "https://github.com/xing5/mcp-google-sheets", "readme_file": "community/Google_Sheets.md", "summary": "A Python-based MCP server that acts as a bridge between MCP-compatible clients and the Google Sheets API, enabling powerful automation and data manipulation workflows.", "tools": [{"name": "list_spreadsheets", "description": "Lists spreadsheets in the configured Drive folder (Service Account) or accessible by the user (OAuth).", "parameter": {}}, {"name": "create_spreadsheet", "description": "Creates a new spreadsheet.", "parameter": {"title": "(string) The desired title."}}, {"name": "get_sheet_data", "description": "Reads data from a range in a sheet.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string) Name of the sheet.", "range": "(Optional, string) A1 notation (e.g., 'A1:C10', 'Sheet1!B2:D'). If omitted, reads the whole sheet."}}, {"name": "update_cells", "description": "Writes data to a specific range. Overwrites existing data.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "range": "(string) A1 notation.", "data": "(2D array) Values to write."}}, {"name": "batch_update_cells", "description": "Updates multiple ranges in one API call.", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "ranges": "(object) Dictionary mapping range strings (A1 notation) to 2D arrays of values { 'A1:B2': [[1, 2], [3, 4]], 'D5': [['Hello']] }."}}, {"name": "add_rows", "description": "Appends rows to the end of a sheet (after the last row with data).", "parameter": {"spreadsheet_id": "(string)", "sheet": "(string)", "data": "(2D array) Rows to append."}}, {"name": "list_sheets", "description": "Lists all sheet names within a spreadsheet.", "parameter": {"spreadsheet_id": "(string)"}}, {"name": "create_sheet", "description": "Adds a new sheet (tab) to a spreadsheet.", "parameter": {"spreadsheet_id": "(string)", "title": "(string) Name for the new sheet."}}, {"name": "get_multiple_sheet_data", "description": "Fetches data from multiple ranges across potentially different spreadsheets in one call.", "parameter": {"queries": "(array of objects) Each object needs `spreadsheet_id`, `sheet`, and `range`. [{spreadsheet_id: 'abc', sheet: 'Sheet1', range: 'A1:B2'}, ...]."}}, {"name": "get_multiple_spreadsheet_summary", "description": "Gets titles, sheet names, headers, and first few rows for multiple spreadsheets.", "parameter": {"spreadsheet_ids": "(array of strings)", "rows_to_fetch": "(Optional, integer, default 5) How many rows (including header) to preview."}}, {"name": "share_spreadsheet", "description": "Shares a spreadsheet with specified users/emails and roles.", "parameter": {"spreadsheet_id": "(string)", "recipients": "(array of objects) [{email_address: 'user@example.com', role: 'writer'}, ...]. Roles: reader, commenter, writer.", "send_notification": "(Optional, boolean, default True) Send email notifications."}}, {"name": "spreadsheet_info", "description": "Get basic metadata about a Google Spreadsheet.", "parameter": {"spreadsheet_id": "(string)"}}]}
{"name": "Google Sheets", "description": "A MCP Server written in TypeScript to access and edit data in your Google Sheets.", "url": "https://github.com/rohans2/mcp-google-sheets", "readme_file": "community/Google_Sheets_2.md", "summary": "A TypeScript MCP server that enables AI agents to securely interact with Google Sheets through well-typed tools, supporting both OAuth2 and Service-Account authentication.", "tools": [{"name": "create", "description": "Creates a new spreadsheet (and moves it into your Drive folder if configured).", "parameter": {"title": "(string) The title of the new spreadsheet."}}, {"name": "listSheets", "description": "Lists all sheet tabs in a given spreadsheet.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet."}}, {"name": "renameSheet", "description": "Renames an existing sheet tab.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "sheetId": "(number) The ID of the sheet tab to rename.", "newName": "(string) The new name for the sheet tab."}}, {"name": "createSheet", "description": "Adds a new sheet tab to a spreadsheet.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "title": "(string) The title of the new sheet tab."}}, {"name": "spreadsheetInfo", "description": "Fetches metadata (title, sheet IDs, grid properties) for a spreadsheet.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet."}}, {"name": "listSpreadsheets", "description": "Lists all spreadsheets in your configured Drive folder (or My Drive).", "parameter": {}}, {"name": "shareSpreadsheet", "description": "Shares a spreadsheet with users (reader/commenter/writer) and sends notifications.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "emailAddress": "(string) The email address of the user to share with.", "role": "(string) The role to assign (reader, commenter, writer).", "sendNotificationEmail": "(boolean, optional) Whether to send a notification email."}}, {"name": "sheetData", "description": "Reads cell values from a sheet and range (or whole sheet).", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "sheetId": "(number) The ID of the sheet tab.", "range": "(string, optional) The A1-style range to read. If omitted, reads the entire sheet."}}, {"name": "updateCells", "description": "Writes a 2D array of values into an A1-style range.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "sheetId": "(number) The ID of the sheet tab.", "range": "(string) The A1-style range to update.", "values": "(string[][]) The 2D array of values to write."}}, {"name": "batchUpdate", "description": "Applies multiple range updates in a single request.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "requests": "(object[]) An array of update requests, each with a 'range' and 'values' property."}}, {"name": "addRows", "description": "Inserts rows at a specified index.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "sheetId": "(number) The ID of the sheet tab.", "index": "(number) The index at which to insert the rows.", "count": "(number) The number of rows to insert."}}, {"name": "addColumns", "description": "Inserts columns at a specified index.", "parameter": {"spreadsheetId": "(string) The ID of the spreadsheet.", "sheetId": "(number) The ID of the sheet tab.", "index": "(number) The index at which to insert the columns.", "count": "(number) The number of columns to insert."}}, {"name": "copySheet", "description": "Copies a sheet tab between spreadsheets (optionally renaming it).", "parameter": {"sourceSpreadsheetId": "(string) The ID of the source spreadsheet.", "sourceSheetId": "(number) The ID of the sheet tab to copy.", "destinationSpreadsheetId": "(string) The ID of the destination spreadsheet.", "newName": "(string, optional) The new name for the copied sheet tab."}}]}
{"name": "Google Tasks", "description": "Google Tasks API Model Context Protocol Server.", "url": "https://github.com/zcaceres/gtasks-mcp", "readme_file": "community/Google_Tasks.md", "summary": "This MCP server integrates with Google Tasks to allow listing, reading, searching, creating, updating, and deleting tasks.", "tools": [{"name": "search", "description": "Search for tasks in Google Tasks", "parameter": {"query": "(string): Search query"}}, {"name": "list", "description": "List all tasks in Google Tasks", "parameter": {"cursor": "(Optional, string): Cursor for pagination"}}, {"name": "create", "description": "Create a new task in Google Tasks", "parameter": {"taskListId": "(Optional, string): Task list ID", "title": "(string, required): Task title", "notes": "(Optional, string): Task notes", "due": "(Optional, string): Due date"}}, {"name": "update", "description": "Update an existing task in Google Tasks", "parameter": {"taskListId": "(Optional, string): Task list ID", "id": "(string, required): Task ID", "uri": "(string, required): Task URI", "title": "(Optional, string): New task title", "notes": "(Optional, string): New task notes", "status": "(Optional, string): New task status (\"needsAction\" or \"completed\")", "due": "(Optional, string): New due date"}}, {"name": "delete", "description": "Delete a task in Google Tasks", "parameter": {"taskListId": "(string, required): Task list ID", "id": "(string, required): Task ID"}}, {"name": "clear", "description": "Clear completed tasks from a Google Tasks task list", "parameter": {"taskListId": "(string, required): Task list ID"}}]}
{"name": "Google Vertex AI Search", "description": "Provides Google Vertex AI Search results by grounding a Gemini model with your own private data", "url": "https://github.com/ubie-oss/mcp-vertexai-search", "readme_file": "community/Google_Vertex_AI_Search.md", "summary": "A MCP server to search documents using Vertex AI, leveraging Gemini with Vertex AI grounding to improve the quality of search results by grounding responses in private data stored in Vertex AI Datastore.", "tools": [{"name": "search", "description": "Searches documents using Vertex AI Search.", "parameter": {"--config": "(string) Path to the configuration file.", "--query": "(string) The query to search for."}}]}
{"name": "GraphQL Schema", "description": "Allow LLMs to explore large GraphQL schemas without bloating the context.", "url": "https://github.com/hannesj/mcp-graphql-schema", "readme_file": "community/GraphQL_Schema.md", "summary": "A Model Context Protocol (MCP) server that exposes GraphQL schema information to Large Language Models (LLMs). It enables LLMs to explore and understand GraphQL schemas, including query, mutation, and subscription fields, type definitions, and more.", "tools": [{"name": "list-query-fields", "description": "Lists all available root-level fields for GraphQL queries", "parameter": {}}, {"name": "get-query-field", "description": "Gets detailed definition for a specific query field in SDL format", "parameter": {}}, {"name": "list-mutation-fields", "description": "Lists all available root-level fields for GraphQL mutations", "parameter": {}}, {"name": "get-mutation-field", "description": "Gets detailed definition for a specific mutation field in SDL format", "parameter": {}}, {"name": "list-subscription-fields", "description": "Lists all available root-level fields for GraphQL subscriptions (if present in schema)", "parameter": {}}, {"name": "get-subscription-field", "description": "Gets detailed definition for a specific subscription field (if present in schema)", "parameter": {}}, {"name": "list-types", "description": "Lists all types defined in the GraphQL schema (excluding internal types)", "parameter": {}}, {"name": "get-type", "description": "Gets detailed definition for a specific GraphQL type in SDL format", "parameter": {}}, {"name": "get-type-fields", "description": "Gets a simplified list of fields with their types for a specific GraphQL object type", "parameter": {}}, {"name": "search-schema", "description": "Searches for types or fields in the schema by name pattern (case-insensitive regex)", "parameter": {}}]}
{"name": "HDW LinkedIn", "description": "Access to profile data and management of user account with HorizonDataWave.ai.", "url": "https://github.com/horizondatawave/hdw-mcp-server", "readme_file": "community/HDW_LinkedIn.md", "summary": "A Model Context Protocol (MCP) server that provides comprehensive access to LinkedIn data and functionalities using the HorizonDataWave API, enabling not only data retrieval but also robust management of user accounts.", "tools": [{"name": "search_linkedin_users", "description": "Search for LinkedIn users with various filters.", "parameter": {"keywords": "(optional) Any keyword for search.", "first_name": "(optional) First name.", "last_name": "(optional) Last name.", "title": "(optional) Job title.", "company_keywords": "(optional) Company keywords.", "school_keywords": "(optional) School keywords.", "current_company": "(optional) Current company.", "past_company": "(optional) Past company.", "location": "(optional) Location.", "industry": "(optional) Industry.", "education": "(optional) Education.", "count": "(optional, default: 10) Maximum number of results (max 1000).", "timeout": "(optional, default: 300) Timeout in seconds (20–1500)."}}, {"name": "get_linkedin_profile", "description": "Retrieve detailed profile information about a LinkedIn user.", "parameter": {"user": "(required) User alias, URL, or URN.", "with_experience": "(optional, default: true)", "with_education": "(optional, default: true)", "with_skills": "(optional, default: true)"}}, {"name": "get_linkedin_email_user", "description": "Look up LinkedIn user details by email.", "parameter": {"email": "(required) Email address.", "count": "(optional, default: 5)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_user_posts", "description": "Retrieve posts for a LinkedIn user by URN.", "parameter": {"urn": "(required) User URN (must include prefix, e.g. fsd_profile:...).", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_user_reactions", "description": "Retrieve reactions for a LinkedIn user by URN.", "parameter": {"urn": "(required)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_chat_messages", "description": "Retrieve top chat messages from the LinkedIn management API.", "parameter": {"user": "(required) User URN (with prefix).", "count": "(optional, default: 20)", "timeout": "(optional, default: 300)"}}, {"name": "send_linkedin_chat_message", "description": "Send a chat message using the LinkedIn management API.", "parameter": {"user": "(required) Recipient user URN (with prefix).", "text": "(required) Message text.", "timeout": "(optional, default: 300)"}}, {"name": "send_linkedin_connection", "description": "Send a connection invitation to a LinkedIn user.", "parameter": {"user": "(required)", "timeout": "(optional, default: 300)"}}, {"name": "send_linkedin_post_comment", "description": "Create a comment on a LinkedIn post or reply.", "parameter": {"text": "(required) Comment text.", "urn": "(required) Activity or comment URN.", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_user_connections", "description": "Retrieve a list of LinkedIn user connections.", "parameter": {"connected_after": "(optional) Timestamp filter.", "count": "(optional, default: 20)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_post_reposts", "description": "Retrieve reposts for a LinkedIn post.", "parameter": {"urn": "(required) Post URN (must start with activity:).", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_post_comments", "description": "Retrieve comments for a LinkedIn post.", "parameter": {"urn": "(required)", "sort": "(optional, default: relevance; allowed values: relevance, recent)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_google_company", "description": "Search for LinkedIn companies via Google – the first result is typically the best match.", "parameter": {"keywords": "(required) Array of company keywords.", "with_urn": "(optional, default: false)", "count_per_keyword": "(optional, default: 1; range 1–10)", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_company", "description": "Retrieve detailed information about a LinkedIn company.", "parameter": {"company": "(required) Company alias, URL, or URN.", "timeout": "(optional, default: 300)"}}, {"name": "get_linkedin_company_employees", "description": "Retrieve employees of a LinkedIn company.", "parameter": {"companies": "(required) Array of company URNs.", "keywords": "(optional)", "first_name": "(optional)", "last_name": "(optional)", "count": "(optional, default: 10)", "timeout": "(optional, default: 300)"}}]}
{"name": "Heurist Mesh Agent", "description": "Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the Heurist Mesh network.", "url": "https://github.com/heurist-network/heurist-mesh-mcp-server", "readme_file": "community/Heurist_Mesh_Agent.md", "summary": "A Model Context Protocol (MCP) server that connects to Heurist Mesh APIs, providing access to various blockchain and web3 tools. It supports both SSE and stdio transports and works with Claude in Cursor, Claude Desktop, and other MCP-compatible interfaces.", "tools": [{"name": "get_coingecko_id", "description": "Search for a token by name to get its CoinGecko ID", "parameter": {"token_name": "(string) The token name to search for"}}, {"name": "get_token_info", "description": "Get detailed token information and market data using CoinGecko ID (you can't use the token address or name or symbol)", "parameter": {"coingecko_id": "(string) The CoinGecko ID of the token"}}, {"name": "get_trending_coins", "description": "Get the current top trending cryptocurrencies on CoinGecko", "parameter": {}}, {"name": "get_specific_pair_info", "description": "Get trading pair info by chain and pair address on DexScreener", "parameter": {"chain": "(string) Chain identifier (e.g., solana, bsc, ethereum, base)", "pair_address": "(string) The pair contract address to look up"}}, {"name": "get_token_pairs", "description": "Get the trading pairs by chain and token address on DexScreener", "parameter": {"chain": "(string) Chain identifier (e.g., solana, bsc, ethereum, base)", "token_address": "(string) The token contract address to look up all pairs for"}}, {"name": "get_token_profiles", "description": "Get the basic info of the latest tokens from DexScreener", "parameter": {}}, {"name": "search_pairs", "description": "Search for trading pairs on DexScreener by token name, symbol, or address", "parameter": {"search_term": "(string) Search term (token name, symbol, or address)"}}, {"name": "get_trending_tokens", "description": "Get current trending tokens on Twitter", "parameter": {"time_window": "(string) Time window to analyze"}}, {"name": "search_account", "description": "Analyze a Twitter account with both mention search and account stats", "parameter": {"username": "(string) Twitter username to analyze (without @)", "days_ago": "(integer) Number of days to look back for mentions", "limit": "(integer) Maximum number of mention results"}}, {"name": "search_mentions", "description": "Search for mentions of specific tokens or topics on Twitter", "parameter": {"keywords": "(array) List of keywords to search for", "days_ago": "(integer) Number of days to look back", "limit": "(integer) Maximum number of results (minimum: 20)"}}, {"name": "answer", "description": "Get a direct answer to a question using Exa's answer API", "parameter": {"question": "(string) The question to answer"}}, {"name": "search", "description": "Search for webpages related to a query", "parameter": {"search_term": "(string) The search term", "limit": "(integer) Maximum number of results to return (default: 10)"}}, {"name": "search_and_answer", "description": "Perform both search and answer operations for a query", "parameter": {"topic": "(string) The topic to search for and answer"}}, {"name": "execute_search", "description": "Execute a web search query by reading the web pages", "parameter": {"search_term": "(string) The search term to execute"}}, {"name": "generate_queries", "description": "Generate related search queries for a topic that can expand the research", "parameter": {"topic": "(string) The main topic to research", "num_queries": "(integer) Number of queries to generate"}}, {"name": "fetch_security_details", "description": "Fetch security details of a blockchain token contract", "parameter": {"contract_address": "(string) The token contract address", "chain_id": "(['integer', 'string']) The blockchain chain ID or 'solana' for Solana tokens. Supported chains: Ethereum (1), Optimism (10), Cronos (25), BSC (56), Gnosis (100), HECO (128), Polygon (137), Fantom (250), KCC (321), zkSync Era (324), ETHW (10001), FON (201022), Arbitrum (42161), Avalanche (43114), Linea Mainnet (59144), Base (8453), Tron (tron), Scroll (534352), opBNB (204), Mantle (5000), ZKFair (42766), Blast (81457), Manta Pacific (169), Berachain Artio Testnet (80085), Merlin (4200), Bitlayer Mainnet (200901), zkLink Nova (810180), X Layer Mainnet (196), Solana (solana)"}}]}
{"name": "Holaspirit", "description": "Interact with Holaspirit.", "url": "https://github.com/syucream/holaspirit-mcp-server", "readme_file": "community/Holaspirit.md", "summary": "A MCP server that provides access to the Holaspirit API, enabling AI assistants to interact with Holaspirit data through a standardized interface.", "tools": [{"name": "holaspirit_list_tasks", "description": "List all tasks in the organization", "parameter": {}}, {"name": "holaspirit_list_metrics", "description": "List all metrics in the organization", "parameter": {}}, {"name": "holaspirit_list_circles", "description": "List all circles in the organization", "parameter": {}}, {"name": "holaspirit_get_circle", "description": "Get details of a specific circle", "parameter": {}}, {"name": "holaspirit_list_roles", "description": "List all roles in the organization", "parameter": {}}, {"name": "holaspirit_get_role", "description": "Get details of a specific role", "parameter": {}}, {"name": "holaspirit_list_domains", "description": "List all domains in the organization", "parameter": {}}, {"name": "holaspirit_list_policies", "description": "List all policies in the organization", "parameter": {}}, {"name": "holaspirit_list_meetings", "description": "List all meetings in the organization", "parameter": {}}, {"name": "holaspirit_get_meeting", "description": "Get details of a specific meeting", "parameter": {}}, {"name": "holaspirit_get_member_feed", "description": "Get member feed", "parameter": {}}, {"name": "holaspirit_get_tensions", "description": "Get tensions for a meeting or meetings", "parameter": {}}, {"name": "holaspirit_search_member", "description": "Search for a member by email", "parameter": {}}]}
{"name": "Home Assistant", "description": "Interact with Home Assistant including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.", "url": "https://github.com/tevonsb/homeassistant-mcp", "readme_file": "community/Home_Assistant.md", "summary": "A powerful bridge between your Home Assistant instance and Language Learning Models (LLMs), enabling natural language control and monitoring of your smart home devices through the Model Context Protocol (MCP). Provides a comprehensive API for managing your entire Home Assistant ecosystem, including device control, automation management, and system administration.", "tools": [{"name": "control", "description": "Controls Home Assistant devices with various commands.", "parameter": {"command": "(string) The command to execute (e.g., 'turn_on', 'turn_off', 'toggle')", "entity_id": "(string) The ID of the entity to control", "brightness": "(Optional, number) Brightness level for lights", "color_temp": "(Optional, number) Color temperature for lights", "rgb_color": "(Optional, array) RGB color for lights"}}, {"name": "addon", "description": "Manages Home Assistant add-ons.", "parameter": {"action": "(string) The action to perform (e.g., 'list', 'install', 'start', 'stop', 'restart')", "slug": "(Optional, string) The slug of the add-on", "version": "(Optional, string) The version of the add-on"}}, {"name": "package", "description": "Manages HACS packages.", "parameter": {"action": "(string) The action to perform (e.g., 'list', 'install')", "category": "(string) The category of the package (e.g., 'integration', 'plugin', 'theme', 'python_script', 'appdaemon', 'netdaemon')", "repository": "(Optional, string) The repository of the package", "version": "(Optional, string) The version of the package"}}, {"name": "automation_config", "description": "Manages Home Assistant automations.", "parameter": {"action": "(string) The action to perform (e.g., 'create', 'duplicate')", "config": "(Optional, object) Configuration for creating an automation", "automation_id": "(Optional, string) The ID of the automation to duplicate"}}, {"name": "execute_action", "description": "Executes a specified action with given parameters.", "parameter": {"action": "(string) The action to execute", "parameters": "(object) Parameters for the action"}}, {"name": "batch_actions", "description": "Executes multiple actions in sequence.", "parameter": {"actions": "(array) An array of action objects, each containing an action and parameters"}}]}
{"name": "Home Assistant", "description": "Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.", "url": "https://github.com/voska/hass-mcp", "readme_file": "community/Home_Assistant_2.md", "summary": "A Model Context Protocol (MCP) server for Home Assistant integration with Claude and other LLMs, enabling AI assistants to interact with Home Assistant for device control, state queries, automation management, and more.", "tools": [{"name": "get_version", "description": "Get the Home Assistant version", "parameter": {}}, {"name": "get_entity", "description": "Get the state of a specific entity with optional field filtering", "parameter": {"entity_id": "(string) ID of the entity", "fields": "(Optional, list) List of fields to include in the response"}}, {"name": "entity_action", "description": "Perform actions on entities (turn on, off, toggle)", "parameter": {"entity_id": "(string) ID of the entity", "action": "(string) Action to perform (e.g., 'turn_on', 'turn_off')"}}, {"name": "list_entities", "description": "Get a list of entities with optional domain filtering and search", "parameter": {"domain": "(Optional, string) Domain to filter entities by", "search": "(Optional, string) Search query to filter entities by name or state"}}, {"name": "search_entities_tool", "description": "Search for entities matching a query", "parameter": {"query": "(string) Search query to match entities"}}, {"name": "domain_summary_tool", "description": "Get a summary of a domain's entities", "parameter": {"domain": "(string) Domain to get a summary for"}}, {"name": "list_automations", "description": "Get a list of all automations", "parameter": {}}, {"name": "call_service_tool", "description": "Call any Home Assistant service", "parameter": {"service": "(string) Service to call", "data": "(dict) Data to pass to the service"}}, {"name": "restart_ha", "description": "Restart Home Assistant", "parameter": {}}, {"name": "get_history", "description": "Get the state history of an entity", "parameter": {"entity_id": "(string) ID of the entity", "start_time": "(Optional, datetime) Start time for the history", "end_time": "(Optional, datetime) End time for the history"}}, {"name": "get_error_log", "description": "Get the Home Assistant error log", "parameter": {}}]}
{"name": "HubSpot", "description": "HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.", "url": "https://github.com/buryhuang/mcp-hubspot", "readme_file": "community/HubSpot.md", "summary": "A Model Context Protocol (MCP) server that enables AI assistants to interact with HubSpot CRM data, providing direct access to contacts, companies, and engagement data. It includes built-in vector storage and caching mechanisms to improve response times and overcome HubSpot API limitations.", "tools": [{"name": "hubspot_create_contact", "description": "Create contacts with duplicate prevention", "parameter": {}}, {"name": "hubspot_create_company", "description": "Create companies with duplicate prevention", "parameter": {}}, {"name": "hubspot_get_company_activity", "description": "Retrieve activity for specific companies", "parameter": {}}, {"name": "hubspot_get_active_companies", "description": "Retrieve most recently active companies", "parameter": {}}, {"name": "hubspot_get_active_contacts", "description": "Retrieve most recently active contacts", "parameter": {}}, {"name": "hubspot_get_recent_conversations", "description": "Retrieve recent conversation threads with messages", "parameter": {}}, {"name": "hubspot_search_data", "description": "Semantic search across previously retrieved HubSpot data", "parameter": {}}]}
{"name": "HuggingFace Spaces", "description": "Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.", "url": "https://github.com/evalstate/mcp-hfspace", "readme_file": "community/HuggingFace_Spaces.md", "summary": "A server that connects to Hugging Face Spaces with minimal setup, providing capabilities such as image generation, text-to-speech, speech-to-text, and more to Claude Desktop.", "tools": [{"name": "use paligemma", "description": "Queries an image using the `merve/paligemma2-vqav2` space to identify objects or people in the image.", "parameter": {"filename": "(string) The filename of the image in the working directory.", "url": "(Optional, string) A URL to an image."}}, {"name": "use omniparser", "description": "Analyzes an image using the `microsoft/OmniParser` space and produces an annotated image along with descriptions and coordinates.", "parameter": {"filename": "(string) The filename of the image in the working directory."}}, {"name": "use shuttle-jaguar", "description": "Generates images using the `shuttleai/shuttle-jaguar` space.", "parameter": {}}, {"name": "use FLUX.1-schnell", "description": "Generates images using the `black-forest-labs/FLUX.1-schnell` space.", "parameter": {}}, {"name": "use whisper-large-v3-turbo", "description": "Transcribes audio using the `hf-audio/whisper-large-v3-turbo` space.", "parameter": {"filename": "(string) The filename of the audio file in the working directory."}}, {"name": "use Qwen2.5-72B-Instruct", "description": "Provides chat capabilities using the `Qwen/Qwen2.5-72B-Instruct` space.", "parameter": {}}, {"name": "use PawMatchAI", "description": "Performs vision tasks using the `DawnC/PawMatchAI` space, such as finding matches in images.", "parameter": {"filename": "(string) The filename of the image in the working directory."}}]}
{"name": "Hyperliquid", "description": "An MCP server implementation that integrates the Hyperliquid SDK for exchange data.", "url": "https://github.com/mektigboy/server-hyperliquid", "readme_file": "community/Hyperliquid.md", "summary": "An MCP server implementation that integrates the Hyperliquid SDK, providing tools to retrieve mid prices, historical candlestick data, and access the L2 order book for tokens.", "tools": [{"name": "get_all_mids", "description": "Retrieve mid prices for all coins on Hyperliquid", "parameter": {}}, {"name": "get_candle_snapshot", "description": "Get historical candlestick data for any token", "parameter": {"coin": "(string) Token symbol", "interval": "(string) Time interval (e.g., '15m', '1h')", "startTime": "(number) Start time in milliseconds since epoch", "endTime": "(Optional, number) End time in milliseconds since epoch"}}, {"name": "get_l2_book", "description": "Access the L2 order book for any token", "parameter": {"symbol": "(string) Token symbol"}}]}
{"name": "Image Generation", "description": "This MCP server provides image generation capabilities using the Replicate Flux model.", "url": "https://github.com/GongRzhe/Image-Generation-MCP-Server", "readme_file": "community/Image_Generation.md", "summary": "This MCP server provides image generation capabilities using the Replicate Flux model.", "tools": [{"name": "generate_image", "description": "Generates images using the Flux model based on text prompts.", "parameter": {"prompt": "(required) Text description of the image to generate", "seed": "(optional) Random seed for reproducible generation", "aspect_ratio": "(optional) Image aspect ratio (default: '1:1')", "output_format": "(optional) Output format - 'webp', 'jpg', or 'png' (default: 'webp')", "num_outputs": "(optional) Number of images to generate (1-4, default: 1)"}}]}
{"name": "InfluxDB", "description": "Run queries against InfluxDB OSS API v2.", "url": "https://github.com/idoru/influxdb-mcp-server", "readme_file": "community/InfluxDB.md", "summary": "A Model Context Protocol (MCP) server that exposes access to an InfluxDB instance using the InfluxDB OSS API v2. It provides access to organization, bucket, and measurement data, as well as tools for writing data, executing queries, and managing database objects.", "tools": [{"name": "write-data", "description": "Write time-series data in line protocol format", "parameter": {"org": "(string) The organization name", "bucket": "(string) The bucket name", "data": "(string) The data in line protocol format", "precision": "(Optional, string) The precision of the timestamps"}}, {"name": "query-data", "description": "Execute Flux queries", "parameter": {"org": "(string) The organization name", "query": "(string) The Flux query to execute"}}, {"name": "create-bucket", "description": "Create a new bucket", "parameter": {"name": "(string) The name of the new bucket", "orgID": "(string) The ID of the organization", "retentionPeriodSeconds": "(Optional, number) The retention period in seconds"}}, {"name": "create-org", "description": "Create a new organization", "parameter": {"name": "(string) The name of the new organization", "description": "(Optional, string) A description of the organization"}}]}
{"name": "Inoyu", "description": "Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles", "url": "https://github.com/sergehuber/inoyu-mcp-unomi-server", "readme_file": "community/Inoyu.md", "summary": "A Model Context Protocol server that enables Claude to maintain user context through Apache Unomi profile management. It supports profile lookup and creation using email, profile property management, basic session handling, and scope management for context isolation.", "tools": [{"name": "get_my_profile", "description": "Get your profile using environment variables. Automatically generates a session ID based on the current date.", "parameter": {"requireSegments": "(Optional, boolean) Include segment information", "requireScores": "(Optional, boolean) Include scoring information"}}, {"name": "update_my_profile", "description": "Update properties of your profile. Takes a properties object with key-value pairs to update.", "parameter": {"properties": "(object) Key-value pairs to update, supporting string, number, boolean, and null values"}}, {"name": "get_profile", "description": "Retrieve a specific profile by ID. Returns full profile data from Unomi.", "parameter": {"profileId": "(string) Required parameter to specify the profile ID"}}, {"name": "search_profiles", "description": "Search for profiles using a query string and optional limit/offset parameters. Searches across firstName, lastName, and email fields.", "parameter": {"query": "(string) Query string to search for profiles", "limit": "(Optional, number) Limit the number of results", "offset": "(Optional, number) Offset for pagination"}}, {"name": "create_scope", "description": "Create a new Unomi scope. Required for event tracking and profile updates.", "parameter": {"scope": "(string) Identifier for the new scope", "name": "(Optional, string) Name of the new scope", "description": "(Optional, string) Description of the new scope"}}]}
{"name": "Intercom", "description": "An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.", "url": "https://github.com/raoulbia-ai/mcp-server-for-intercom", "readme_file": "community/Intercom.md", "summary": "An MCP-compliant server that enables AI assistants to access and analyze customer support data from Intercom. It supports advanced filtering of conversations and tickets, efficient server-side filtering via Intercom's search API, and seamless integration with MCP-compliant AI assistants.", "tools": [{"name": "list_conversations", "description": "Retrieves all conversations within a date range with content filtering.", "parameter": {"startDate": "(DD/MM/YYYY) Start date (required)", "endDate": "(DD/MM/YYYY) End date (required)", "keyword": "(string) Filter to include conversations with this text", "exclude": "(string) Filter to exclude conversations with this text"}}, {"name": "search_conversations_by_customer", "description": "Finds conversations for a specific customer.", "parameter": {"customerIdentifier": "(string) Customer email or Intercom ID (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date", "keywords": "(array) Optional keywords to filter by content"}}, {"name": "search_tickets_by_status", "description": "Retrieves tickets by their status.", "parameter": {"status": "(string) 'open', 'pending', or 'resolved' (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date"}}, {"name": "search_tickets_by_customer", "description": "Finds tickets associated with a specific customer.", "parameter": {"customerIdentifier": "(string) Customer email or Intercom ID (required)", "startDate": "(Optional, DD/MM/YYYY) Optional start date", "endDate": "(Optional, DD/MM/YYYY) Optional end date"}}]}
{"name": "iOS Simulator", "description": "A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.", "url": "https://github.com/InditexTech/mcp-server-simulator-ios-idb", "readme_file": "community/iOS_Simulator.md", "summary": "A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators through natural language commands, providing comprehensive control over simulator sessions, application management, UI interaction, development and debugging, and advanced features.", "tools": [{"name": "processInstruction", "description": "Processes a natural language instruction and performs the corresponding action on the iOS simulator.", "parameter": {"instruction": "(string) The natural language command to execute."}}]}
{"name": "iTerm MCP", "description": "Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.", "url": "https://github.com/ferrislucas/iterm-mcp", "readme_file": "community/iTerm_MCP.md", "summary": "A Model Context Protocol server that provides access to your iTerm session, allowing models to inspect terminal output, write commands, and send control characters.", "tools": [{"name": "write_to_terminal", "description": "Writes to the active iTerm terminal, often used to run a command. Returns the number of lines of output produced by the command.", "parameter": {}}, {"name": "read_terminal_output", "description": "Reads the requested number of lines from the active iTerm terminal.", "parameter": {}}, {"name": "send_control_character", "description": "Sends a control character to the active iTerm terminal.", "parameter": {}}]}
{"name": "JDBC", "description": "Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and more.", "url": "https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc", "readme_file": "community/JDBC.md", "summary": "A collection of Model Context Protocol (MCP) servers implemented in Java using the Quarkus MCP server framework, designed to extend the capabilities of MCP-enabled LLM AI applications.", "tools": [{"name": "jdbc", "description": "A server for storing and retrieving data from a database via a JDBC URL.", "parameter": {}}, {"name": "jvminsight", "description": "A server for inspecting a running JVM process.", "parameter": {}}, {"name": "filesystem", "description": "A server for serving files from a file system.", "parameter": {"path1": "(string) Path to the first directory to serve", "path2": "(Optional, string) Path to an additional directory to serve"}}, {"name": "jfx", "description": "A server that exposes a canvas for making drawings using JavaFX.", "parameter": {}}, {"name": "kubernetes", "description": "A server for interacting with a Kubernetes cluster.", "parameter": {}}, {"name": "containers", "description": "A server for working with Docker/Podman/OCI compatible container engines.", "parameter": {}}, {"name": "wolfram", "description": "A server for performing web searches optimized for use by a large language model through the Wolfram Alpha LLM API.", "parameter": {}}]}
{"name": "JSON", "description": "JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.", "url": "https://github.com/GongRzhe/JSON-MCP-Server", "readme_file": "community/JSON.md", "summary": "A JSON Model Context Protocol (MCP) server implementation for querying and manipulating JSON data, enabling LLMs to interact with JSON data through a set of standardized tools.", "tools": [{"name": "query", "description": "Query JSON data using JSONPath syntax with extended operations", "parameter": {"url": "(string) URL of the JSON data source", "jsonPath": "(string) JSONPath expression with optional operations"}}, {"name": "filter", "description": "Filter JSON data using conditions", "parameter": {"url": "(string) URL of the JSON data source", "jsonPath": "(string) Base JSONPath expression", "condition": "(string) Filter condition"}}]}
{"name": "KiCad MCP", "description": "MCP server for KiCad on Mac, Windows, and Linux.", "url": "https://github.com/lamaalrajih/kicad-mcp", "readme_file": "community/KiCad_MCP.md", "summary": "A Model Context Protocol (MCP) server for KiCad, providing capabilities for project management, PCB design analysis, netlist extraction, BOM management, design rule checking, PCB visualization, and circuit pattern recognition.", "tools": [{"name": "open_project", "description": "Launches KiCad with a specific project.", "parameter": {"project_path": "(string) Path to the KiCad project file (.kicad_pro)"}}, {"name": "run_drc", "description": "Runs design rule checks on a specified PCB project and compares results.", "parameter": {"project_path": "(string) Path to the KiCad project file (.kicad_pro)", "compare_to": "(Optional, string) Path to the previous DRC report for comparison"}}]}
{"name": "Keycloak MCP", "description": "This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.", "url": "https://github.com/ChristophEnglisch/keycloak-model-context-protocol", "readme_file": "community/Keycloak_MCP.md", "summary": "A Model Context Protocol server for Keycloak administration, providing tools to manage users and realms.", "tools": [{"name": "create-user", "description": "Creates a new user in a specified realm.", "parameter": {"realm": "(string) The realm name", "username": "(string) Username for the new user", "email": "(string) Email address for the user", "firstName": "(string) User's first name", "lastName": "(string) User's last name"}}, {"name": "delete-user", "description": "Deletes a user from a specified realm.", "parameter": {"realm": "(string) The realm name", "userId": "(string) The ID of the user to delete"}}, {"name": "list-realms", "description": "Lists all available realms.", "parameter": {}}, {"name": "list-users", "description": "Lists all users in a specified realm.", "parameter": {"realm": "(string) The realm name"}}]}
{"name": "Kong Konnect", "description": "A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.", "url": "https://github.com/Kong/mcp-konnect", "readme_file": "community/Kong_Konnect.md", "summary": "A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, enabling AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.", "tools": [{"name": "Query API Requests", "description": "Query and analyze Kong API Gateway requests with customizable filters.", "parameter": {"timeRange": "(string) Time range for data retrieval (15M, 1H, 6H, 12H, 24H, 7D)", "statusCodes": "(array) Filter by specific HTTP status codes", "excludeStatusCodes": "(array) Exclude specific HTTP status codes", "httpMethods": "(array) Filter by HTTP methods", "consumerIds": "(array) Filter by consumer IDs", "serviceIds": "(array) Filter by service IDs", "routeIds": "(array) Filter by route IDs", "maxResults": "(number) Maximum number of results to return"}}, {"name": "Get Consumer Requests", "description": "Analyze API requests made by a specific consumer.", "parameter": {"consumerId": "(string) ID of the consumer to analyze", "timeRange": "(string) Time range for data retrieval", "successOnly": "(boolean) Show only successful (2xx) requests", "failureOnly": "(boolean) Show only failed (non-2xx) requests", "maxResults": "(number) Maximum number of results to return"}}, {"name": "List Services", "description": "List all services associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of services to return", "offset": "(string) Pagination offset token"}}, {"name": "List Routes", "description": "List all routes associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of routes to return", "offset": "(string) Pagination offset token"}}, {"name": "List Consumers", "description": "List all consumers associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of consumers to return", "offset": "(string) Pagination offset token"}}, {"name": "List Plugins", "description": "List all plugins associated with a control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane", "size": "(number) Number of plugins to return", "offset": "(string) Pagination offset token"}}, {"name": "List Control Planes", "description": "List all control planes in your organization.", "parameter": {"pageSize": "(number) Number of control planes per page", "pageNumber": "(number) Page number to retrieve", "filterName": "(string) Filter control planes by name", "filterClusterType": "(string) Filter by cluster type", "filterCloudGateway": "(boolean) Filter by cloud gateway capability", "labels": "(array) Filter by labels", "sort": "(string) Sort field and direction"}}, {"name": "Get Control Plane", "description": "Get detailed information about a specific control plane.", "parameter": {"controlPlaneId": "(string) ID of the control plane to retrieve"}}, {"name": "List Control Plane Group Memberships", "description": "List all control planes that are members of a specific group.", "parameter": {"groupId": "(string) Control plane group ID", "pageSize": "(number) Number of members to return per page", "pageAfter": "(string) Cursor for pagination"}}, {"name": "Check Control Plane Group Membership", "description": "Check if a control plane is a member of any group.", "parameter": {"controlPlaneId": "(string) Control plane ID to check"}}]}
{"name": "Kubernetes and OpenShift", "description": "A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.", "url": "https://github.com/manusa/kubernetes-mcp-server", "readme_file": "community/Kubernetes_and_OpenShift.md", "summary": "A powerful and flexible Kubernetes Model Context Protocol (MCP) server implementation with support for Kubernetes and OpenShift. It provides capabilities to perform operations on Kubernetes and OpenShift resources, manage configurations, and handle pods, namespaces, events, and projects.", "tools": [{"name": "configuration_view", "description": "Get the current Kubernetes configuration content as a kubeconfig YAML", "parameter": {"minified": "(Optional, boolean) Return a minified version of the configuration. Default is true."}}, {"name": "events_list", "description": "List all the Kubernetes events in the current cluster from all namespaces", "parameter": {"namespace": "(Optional, string) Namespace to retrieve the events from. If not provided, will list events from all namespaces."}}, {"name": "namespaces_list", "description": "List all the Kubernetes namespaces in the current cluster", "parameter": {}}, {"name": "pods_delete", "description": "Delete a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod to delete", "namespace": "(Required, string) Namespace to delete the Pod from"}}, {"name": "pods_exec", "description": "Execute a command in a Kubernetes Pod in the current or provided namespace with the provided name and command", "parameter": {"command": "(Required, string[]) Command to execute in the Pod container. First item is the command, rest are arguments.", "name": "(Required, string) Name of the Pod", "namespace": "(Required, string) Namespace of the Pod", "container": "(Optional, string) Name of the Pod container to get logs from"}}, {"name": "pods_get", "description": "Get a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod", "namespace": "(Required, string) Namespace to get the Pod from"}}, {"name": "pods_list", "description": "List all the Kubernetes pods in the current cluster from all namespaces", "parameter": {}}, {"name": "pods_list_in_namespace", "description": "List all the Kubernetes pods in the specified namespace in the current cluster", "parameter": {"namespace": "(Required, string) Namespace to list pods from"}}, {"name": "pods_log", "description": "Get the logs of a Kubernetes Pod in the current or provided namespace with the provided name", "parameter": {"name": "(Required, string) Name of the Pod to get logs from", "namespace": "(Required, string) Namespace to get the Pod logs from", "container": "(Optional, string) Name of the Pod container to get logs from"}}, {"name": "pods_run", "description": "Run a Kubernetes Pod in the current or provided namespace with the provided container image and optional name", "parameter": {"image": "(Required, string) Container Image to run in the Pod", "namespace": "(Required, string) Namespace to run the Pod in", "name": "(Optional, string) Name of the Pod (random name if not provided)", "port": "(Optional, number) TCP/IP port to expose from the Pod container. No port exposed if not provided."}}, {"name": "projects_list", "description": "List all the OpenShift projects in the current cluster", "parameter": {}}, {"name": "resources_create_or_update", "description": "Create or update a Kubernetes resource in the current cluster by providing a YAML or JSON representation of the resource", "parameter": {"resource": "(Required, string) A JSON or YAML containing a representation of the Kubernetes resource. Should include top-level fields such as apiVersion, kind, metadata, and spec."}}, {"name": "resources_delete", "description": "Delete a Kubernetes resource in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resource (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resource (e.g., Pod, Service, Deployment, Ingress)", "name": "(Required, string) Name of the resource", "namespace": "(Optional, string) Namespace to delete the namespaced resource from. Ignored for cluster-scoped resources. Uses configured namespace if not provided."}}, {"name": "resources_get", "description": "Get a Kubernetes resource in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resource (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resource (e.g., Pod, Service, Deployment, Ingress)", "name": "(Required, string) Name of the resource", "namespace": "(Optional, string) Namespace to retrieve the namespaced resource from. Ignored for cluster-scoped resources. Uses configured namespace if not provided."}}, {"name": "resources_list", "description": "List Kubernetes resources and objects in the current cluster", "parameter": {"apiVersion": "(Required, string) apiVersion of the resources (e.g., v1, apps/v1, networking.k8s.io/v1)", "kind": "(Required, string) kind of the resources (e.g., Pod, Service, Deployment, Ingress)", "namespace": "(Optional, string) Namespace to retrieve the namespaced resources from. Ignored for cluster-scoped resources. Lists resources from all namespaces if not provided."}}]}
{"name": "Langflow-DOC-QA-SERVER", "description": "A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.", "url": "https://github.com/GongRzhe/Langflow-DOC-QA-SERVER", "readme_file": "community/Langflow-DOC-QA-SERVER.md", "summary": "A TypeScript-based MCP server that provides a document Q&A system powered by Langflow. It allows users to query documents through a simple interface connected to a Langflow backend.", "tools": [{"name": "query_docs", "description": "Query the document Q&A system", "parameter": {"query": "(string) The query string to be sent to the document Q&A system"}}]}
{"name": "Lightdash", "description": "Interact with Lightdash, a BI tool.", "url": "https://github.com/syucream/lightdash-mcp-server", "readme_file": "community/Lightdash.md", "summary": "A MCP-compatible server that provides access to Lightdash's API, enabling AI assistants to interact with Lightdash data.", "tools": [{"name": "list_projects", "description": "List all projects in the Lightdash organization", "parameter": {}}, {"name": "get_project", "description": "Get details of a specific project", "parameter": {}}, {"name": "list_spaces", "description": "List all spaces in a project", "parameter": {}}, {"name": "list_charts", "description": "List all charts in a project", "parameter": {}}, {"name": "list_dashboards", "description": "List all dashboards in a project", "parameter": {}}, {"name": "get_custom_metrics", "description": "Get custom metrics for a project", "parameter": {}}, {"name": "get_catalog", "description": "Get catalog for a project", "parameter": {}}, {"name": "get_metrics_catalog", "description": "Get metrics catalog for a project", "parameter": {}}, {"name": "get_charts_as_code", "description": "Get charts as code for a project", "parameter": {}}, {"name": "get_dashboards_as_code", "description": "Get dashboards as code for a project", "parameter": {}}]}
{"name": "lsp-mcp", "description": "Interact with Language Servers usint the Language Server Protocol to provide additional context information via hover, code actions and completions.", "url": "https://github.com/Tritlo/lsp-mcp", "readme_file": "community/lsp-mcp.md", "summary": "An MCP server that acts as a bridge for LLMs to interact with LSP servers, enabling them to query LSP Hover and Completion providers for more accurate code suggestions.", "tools": [{"name": "get_info_on_location", "description": "Gets hover information at a specific location in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "line": "(number) Line number", "column": "(number) Column position"}}, {"name": "get_completions", "description": "Gets completion suggestions at a specific location in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "line": "(number) Line number", "column": "(number) Column position"}}, {"name": "get_code_actions", "description": "Gets code actions for a specific range in a file.", "parameter": {"file_path": "(string) Path to the file", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')", "start_line": "(number) Start line number", "start_column": "(number) Start column position", "end_line": "(number) End line number", "end_column": "(number) End column position"}}, {"name": "open_document", "description": "Opens a file in the LSP server for analysis.", "parameter": {"file_path": "(string) Path to the file to open", "language_id": "(string) The programming language the file is written in (e.g., 'haskell')"}}, {"name": "close_document", "description": "Closes a file in the LSP server when you're done working with it.", "parameter": {"file_path": "(string) Path to the file to close"}}, {"name": "get_diagnostics", "description": "Gets diagnostic messages (errors, warnings) for one or all open files.", "parameter": {"file_path": "(Optional, string) Path to the file to get diagnostics for. If not provided, returns diagnostics for all open files."}}, {"name": "start_lsp", "description": "Starts the LSP server with a specified root directory. This must be called before using any other LSP-related tools.", "parameter": {"root_dir": "(string) The root directory for the LSP server (absolute path recommended)"}}, {"name": "restart_lsp_server", "description": "Restarts the LSP server process without restarting the MCP server. This is useful for recovering from LSP server issues or for applying changes to the LSP server configuration.", "parameter": {"root_dir": "(Optional, string) The root directory for the LSP server. If provided, the server will be initialized with this directory after restart."}}, {"name": "set_log_level", "description": "Sets the server's logging level to control verbosity of log messages.", "parameter": {"level": "(string) The logging level to set. One of: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency'."}}]}
{"name": "Linear", "description": "Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.", "url": "https://github.com/jerhadf/linear-mcp-server", "readme_file": "community/Linear.md", "summary": "A Model Context Protocol server for integrating with Linear's issue tracking system, enabling LLMs to interact with Linear issues.", "tools": [{"name": "linear_create_issue", "description": "Create a new Linear issue.", "parameter": {"title": "(string) Issue title", "teamId": "(string) Team ID to create issue in", "description": "(Optional, string) Issue description (markdown supported)", "priority": "(Optional, number, 0-4) Priority level (1=urgent, 4=low)", "status": "(Optional, string) Initial status name"}}, {"name": "linear_update_issue", "description": "Update an existing Linear issue.", "parameter": {"id": "(string) Issue ID to update", "title": "(Optional, string) New title", "description": "(Optional, string) New description", "priority": "(Optional, number, 0-4) New priority", "status": "(Optional, string) New status name"}}, {"name": "linear_search_issues", "description": "Search Linear issues with flexible filtering.", "parameter": {"query": "(Optional, string) Text to search in title/description", "teamId": "(Optional, string) Filter by team", "status": "(Optional, string) Filter by status", "assigneeId": "(Optional, string) Filter by assignee", "labels": "(Optional, string[]) Filter by labels", "priority": "(Optional, number) Filter by priority", "limit": "(Optional, number, default: 10) Max results"}}, {"name": "linear_get_user_issues", "description": "Get issues assigned to a user.", "parameter": {"userId": "(Optional, string) User ID (omit for authenticated user)", "includeArchived": "(Optional, boolean) Include archived issues", "limit": "(Optional, number, default: 50) Max results"}}, {"name": "linear_add_comment", "description": "Add a comment to a Linear issue.", "parameter": {"issueId": "(string) Issue ID to comment on", "body": "(string) Comment text (markdown supported)", "createAsUser": "(Optional, string) Custom username", "displayIconUrl": "(Optional, string) Custom avatar URL"}}]}
{"name": "Linear (Go)", "description": "Allows LLM to interact with Linear's API via a single static binary.", "url": "https://github.com/geropl/linear-mcp-go", "readme_file": "community/Linear_(Go).md", "summary": "A Model Context Protocol (MCP) server for Linear, written in Go. It provides tools for interacting with the Linear API, including creating, updating, and searching issues, managing comments, retrieving user and team information, and handling rate-limited API requests.", "tools": [{"name": "linear_create_issue", "description": "Creates a new Linear issue with specified details. Supports creating sub-issues and assigning labels.", "parameter": {"title": "(required) Issue title", "team": "(required) Team identifier (key, UUID or name)", "description": "Issue description", "priority": "Priority (0-4)", "status": "Issue status", "parentIssue": "(Optional) Optional parent issue ID to create a sub-issue", "labels": "(Optional) Optional comma-separated list of label IDs to assign"}}, {"name": "linear_update_issue", "description": "Updates an existing Linear issue's properties.", "parameter": {"id": "(required) Issue ID", "title": "New title", "description": "New description", "priority": "New priority (0-4)", "status": "New status"}}, {"name": "linear_search_issues", "description": "Searches Linear issues using flexible criteria.", "parameter": {"query": "(Optional) Optional text to search in title and description", "teamId": "Filter by team ID", "status": "Filter by status name (e.g., 'In Progress', 'Done')", "assigneeId": "Filter by assignee's user ID", "labels": "Filter by label names (comma-separated)", "priority": "Filter by priority (1=urgent, 2=high, 3=normal, 4=low)", "estimate": "Filter by estimate points", "includeArchived": "Include archived issues in results (default: false)", "limit": "Max results to return (default: 10)"}}, {"name": "linear_get_user_issues", "description": "Retrieves issues assigned to a specific user or the authenticated user.", "parameter": {"userId": "(Optional) Optional user ID. If not provided, returns authenticated user's issues", "includeArchived": "Include archived issues in results", "limit": "Maximum number of issues to return (default: 50)"}}, {"name": "linear_get_issue", "description": "Retrieves a single Linear issue by its ID.", "parameter": {"issueId": "(required) ID of the issue to retrieve"}}, {"name": "linear_add_comment", "description": "Adds a comment to an existing Linear issue.", "parameter": {"issueId": "(required) ID of the issue to comment on", "body": "(required) Comment text in markdown format", "createAsUser": "(Optional) Optional custom username to show for the comment", "displayIconUrl": "(Optional) Optional avatar URL for the comment"}}, {"name": "linear_get_teams", "description": "Retrieves Linear teams with an optional name filter.", "parameter": {"name": "(Optional) Optional team name filter. Returns teams whose names contain this string."}}]}
{"name": "llm-context", "description": "Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.", "url": "https://github.com/cyberchitta/llm-context.py", "readme_file": "community/llm-context.md", "summary": "A tool that helps developers inject relevant content from code/text projects into Large Language Model chat interfaces, leveraging .gitignore patterns for smart file selection and providing both a streamlined clipboard workflow and direct LLM integration.", "tools": [{"name": "lc-init", "description": "Initialize project configuration", "parameter": {}}, {"name": "lc-set-rule", "description": "Switch rules", "parameter": {"n": "(integer) The rule number to switch to"}}, {"name": "lc-sel-files", "description": "Select files for inclusion", "parameter": {}}, {"name": "lc-sel-outlines", "description": "Select files for outline generation", "parameter": {}}, {"name": "lc-context", "description": "Generate and copy context", "parameter": {"-p": "(Optional, flag) Include prompt instructions", "-u": "(Optional, flag) Include user notes", "-f FILE": "(Optional, string) Write to output file"}}, {"name": "lc-prompt", "description": "Generate project instructions for LLMs", "parameter": {}}, {"name": "lc-clip-files", "description": "Process LLM file requests", "parameter": {}}, {"name": "lc-changed", "description": "List files modified since last context generation", "parameter": {}}, {"name": "lc-outlines", "description": "Generate outlines for code files", "parameter": {}}, {"name": "lc-clip-implementations", "description": "Extract code implementations requested by LLMs (doesn't support C/C++)", "parameter": {}}]}
{"name": "lucene-mcp-server", "description": "spring boot server using Lucene for fast document search and management.", "url": "https://github.com/VivekKumarNeu/MCP-Lucene-Server", "readme_file": "community/lucene-mcp-server.md", "summary": "A Java-based implementation of the Model Context Protocol (MCP) designed to provide efficient search and retrieval capabilities using Apache Lucene. It allows managing and querying documents with Lucene's powerful indexing and search features.", "tools": [{"name": "GET /mcp/v1/status", "description": "Returns the status of the server.", "parameter": {}}, {"name": "POST /mcp/v1/upsert", "description": "Upserts (inserts or updates) one or more documents in the Lucene index.", "parameter": {"documents": "(array) An array of documents to upsert. Each document has an 'id', 'text', and optional 'metadata'."}}, {"name": "POST /mcp/v1/query", "description": "Queries the Lucene index.", "parameter": {"queries": "(array) An array of query objects. Each query object contains a 'query' string, an optional 'top_k' integer, and an optional 'filter' map."}}, {"name": "POST /mcp/v1/delete", "description": "Deletes documents from the Lucene index.", "parameter": {"ids": "(array) An array of document IDs to delete."}}, {"name": "GET /mcp/v1/list", "description": "Lists documents from the Lucene index.", "parameter": {"ids": "(array) An array of document IDs to list."}}]}
{"name": "mac-messages-mcp", "description": "An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.", "url": "https://github.com/carterlasalle/mac_messages_mcp", "readme_file": "community/mac-messages-mcp.md", "summary": "A Python bridge for interacting with the macOS Messages app using MCP (Multiple Context Protocol). It allows reading recent messages, filtering by contact, sending new messages through iMessage, and accessing messages via an API.", "tools": [{"name": "get_recent_messages", "description": "Retrieves recent messages from the macOS Messages app.", "parameter": {"hours": "(int) Number of hours to look back for recent messages"}}, {"name": "send_message", "description": "Sends a new message through iMessage.", "parameter": {"recipient": "(str) Phone number or email of the recipient", "message": "(str) Content of the message to be sent"}}]}
{"name": "MariaDB", "description": "MariaDB database integration with configurable access controls in Python.", "url": "https://github.com/abel9851/mcp-server-mariadb", "readme_file": "community/MariaDB.md", "summary": "An MCP server implementation for retrieving data from MariaDB, exposing schema lists and enabling read-only database queries.", "tools": [{"name": "query_database", "description": "Execute read-only operations against MariaDB", "parameter": {}}]}
{"name": "MCP Create", "description": "A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.", "url": "https://github.com/tesla0225/mcp-create", "readme_file": "community/MCP_Create.md", "summary": "A dynamic MCP server management service that creates, runs, and manages Model Context Protocol (MCP) servers dynamically. It supports TypeScript and enables a flexible MCP ecosystem.", "tools": [{"name": "create-server-from-template", "description": "Create MCP server from template", "parameter": {"language": "(string) The programming language for the server template"}}, {"name": "execute-tool", "description": "Execute tool on server", "parameter": {"serverId": "(string) The ID of the server", "toolName": "(string) The name of the tool to execute", "args": "(object) Arguments for the tool"}}, {"name": "get-server-tools", "description": "Get list of server tools", "parameter": {"serverId": "(string) The ID of the server"}}, {"name": "delete-server", "description": "Delete server", "parameter": {"serverId": "(string) The ID of the server to delete"}}, {"name": "list-servers", "description": "Get list of running servers", "parameter": {}}]}
{"name": "mcp-k8s-go", "description": "Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.", "url": "https://github.com/strowk/mcp-k8s-go", "readme_file": "community/mcp-k8s-go.md", "summary": "A Golang-based MCP server that connects to Kubernetes, providing tools to list and manage Kubernetes contexts, namespaces, resources, nodes, events, pod logs, and commands.", "tools": [{"name": "List Kubernetes contexts", "description": "Lists available Kubernetes contexts.", "parameter": {}}, {"name": "List Kubernetes namespaces", "description": "Lists available Kubernetes namespaces.", "parameter": {}}, {"name": "List and get any Kubernetes resources", "description": "Lists and retrieves any Kubernetes resources, including custom mappings for pods, services, and deployments.", "parameter": {}}, {"name": "List Kubernetes nodes", "description": "Lists available Kubernetes nodes.", "parameter": {}}, {"name": "List Kubernetes pods", "description": "Lists available Kubernetes pods.", "parameter": {}}, {"name": "Get Kubernetes events", "description": "Retrieves Kubernetes events.", "parameter": {}}, {"name": "Get Kubernetes pod logs", "description": "Retrieves logs from a specified Kubernetes pod.", "parameter": {}}, {"name": "Run command in Kubernetes pod", "description": "Executes a command within a specified Kubernetes pod.", "parameter": {}}]}
{"name": "mcp-local-rag", "description": "\"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search. ✨ no APIs required ✨.", "url": "https://github.com/nkapila6/mcp-local-rag", "readme_file": "community/mcp-local-rag.md", "summary": "A 'primitive' RAG-like web search model context protocol (MCP) server that runs locally, enhancing model responses with real-time web search results.", "tools": [{"name": "rag_search", "description": "Performs a web search to fetch the latest information and provides it to the model to enhance its responses.", "parameter": {}}]}
{"name": "mcp-proxy", "description": "Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.", "url": "https://github.com/sparfenyuk/mcp-proxy", "readme_file": "community/mcp-proxy.md", "summary": "A tool that facilitates switching between server transports, supporting two modes: stdio to SSE and SSE to stdio. It enables communication between clients like Claude Desktop and remote servers over SSE, and allows remote connections to local stdio servers.", "tools": [{"name": "stdio to SSE", "description": "Runs a proxy server from stdio that connects to a remote SSE server, allowing clients to communicate with the remote server over SSE.", "parameter": {"command_or_url": "(string) The MCP server SSE endpoint to connect to", "--headers": "(Optional, string) Headers to use for the MCP server SSE connection"}}, {"name": "SSE to stdio", "description": "Runs a proxy server exposing a SSE server that connects to a local stdio server, allowing remote connections to the local stdio server.", "parameter": {"command_or_url": "(string) The command to spawn the MCP stdio server", "--sse-port": "(Optional, int) The SSE server port to listen on", "--sse-host": "(Optional, string) The host IP address that the SSE server will listen on", "--env": "(Optional, string) Additional environment variables to pass to the MCP stdio server", "--pass-environment": "(Optional, flag) Pass through all environment variables when spawning the server", "--allow-origin": "(Optional, string) Allowed origins for the SSE server"}}]}
{"name": "mem0-mcp", "description": "A Model Context Protocol server for Mem0, which helps with managing coding preferences.", "url": "https://github.com/mem0ai/mem0-mcp", "readme_file": "community/mem0-mcp.md", "summary": "A structured MCP server with mem0 for managing coding preferences efficiently. It provides tools for storing, retrieving, and searching coding preferences.", "tools": [{"name": "add_coding_preference", "description": "Store code snippets, implementation details, and coding patterns with comprehensive context.", "parameter": {"code_snippet": "(string) The complete code snippet with dependencies.", "language_version": "(string) The language or framework version used.", "setup_instructions": "(string) Instructions for setting up the environment.", "documentation": "(string) Additional documentation and comments.", "example_usage": "(string) Example usage of the code snippet.", "best_practices": "(string) Best practices associated with the code."}}, {"name": "get_all_coding_preferences", "description": "Retrieve all stored coding preferences for analysis and review.", "parameter": {}}, {"name": "search_coding_preferences", "description": "Semantically search through stored coding preferences to find relevant information.", "parameter": {"query": "(string) The search query to find relevant coding preferences."}}]}
{"name": "Membase", "description": "Save and query your agent memory in distributed way by Membase.", "url": "https://github.com/unibaseio/membase-mcp", "readme_file": "community/Membase.md", "summary": "Enables seamless integration with the membase protocol for decentralized storage, providing functionality to upload and download memory to/from the Unibase DA network.", "tools": [{"name": "get_conversation_id", "description": "Get the current conversation id.", "parameter": {}}, {"name": "switch_conversation", "description": "Switch to a different conversation.", "parameter": {}}, {"name": "save_message", "description": "Save a message/memory into the current conversation.", "parameter": {}}, {"name": "get_messages", "description": "Get the last n messages from the current conversation.", "parameter": {}}]}
{"name": "Markdownify", "description": "MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)", "url": "https://github.com/zcaceres/mcp-markdownify-server", "readme_file": "community/Markdownify.md", "summary": "A Model Context Protocol (MCP) server that converts various file types and web content to Markdown format, including PDFs, images, audio files, web pages, and more.", "tools": [{"name": "youtube-to-markdown", "description": "Convert YouTube videos to Markdown", "parameter": {}}, {"name": "pdf-to-markdown", "description": "Convert PDF files to Markdown", "parameter": {}}, {"name": "bing-search-to-markdown", "description": "Convert Bing search results to Markdown", "parameter": {}}, {"name": "webpage-to-markdown", "description": "Convert web pages to Markdown", "parameter": {}}, {"name": "image-to-markdown", "description": "Convert images to Markdown with metadata", "parameter": {}}, {"name": "audio-to-markdown", "description": "Convert audio files to Markdown with transcription", "parameter": {}}, {"name": "docx-to-markdown", "description": "Convert DOCX files to Markdown", "parameter": {}}, {"name": "xlsx-to-markdown", "description": "Convert XLSX files to Markdown", "parameter": {}}, {"name": "pptx-to-markdown", "description": "Convert PPTX files to Markdown", "parameter": {}}, {"name": "get-markdown-file", "description": "Retrieve an existing Markdown file. File extension must end with: *.md, *.markdown.", "parameter": {"MD_SHARE_DIR": "(Optional, string) Restrict the directory from which files can be retrieved."}}]}
{"name": "MongoDB", "description": "A Model Context Protocol Server for MongoDB.", "url": "https://github.com/kiliczsh/mcp-mongo-server", "readme_file": "community/MongoDB.md", "summary": "A Model Context Protocol server that enables LLMs to interact with MongoDB databases, providing capabilities for inspecting collection schemas and executing MongoDB operations through a standardized interface.", "tools": [{"name": "query", "description": "Execute MongoDB queries", "parameter": {"collection": "(string) The name of the collection to query", "filter": "(object) The filter to apply to the query", "projection": "(object, Optional) The fields to include or exclude in the result", "limit": "(number, Optional) The maximum number of documents to return", "explain": "(string, Optional) The level of detail to include in the query execution plan"}}, {"name": "aggregate", "description": "Run aggregation pipelines", "parameter": {"collection": "(string) The name of the collection to aggregate", "pipeline": "(array) The stages of the aggregation pipeline", "explain": "(string, Optional) The level of detail to include in the query execution plan"}}, {"name": "count", "description": "Count matching documents", "parameter": {"collection": "(string) The name of the collection to count documents in", "query": "(object) The filter to apply to the count operation"}}, {"name": "update", "description": "Modify documents", "parameter": {"collection": "(string) The name of the collection to update documents in", "filter": "(object) The filter to apply to the update operation", "update": "(object) The update operations to apply", "upsert": "(boolean, Optional) Whether to insert a document if no documents match the filter", "multi": "(boolean, Optional) Whether to update multiple documents"}}, {"name": "insert", "description": "Add new documents", "parameter": {"collection": "(string) The name of the collection to insert documents into", "documents": "(array) The documents to insert"}}, {"name": "createIndex", "description": "Create collection indexes", "parameter": {"collection": "(string) The name of the collection to create indexes on", "indexes": "(array) The indexes to create"}}, {"name": "serverInfo", "description": "Get MongoDB server details", "parameter": {"includeDebugInfo": "(boolean, Optional) Whether to include debug information"}}]}
{"name": "MongoDB Lens", "description": "Full Featured MCP Server for MongoDB Databases.", "url": "https://github.com/furey/mongodb-lens", "readme_file": "community/MongoDB_Lens.md", "summary": "A local Model Context Protocol (MCP) server with full featured access to MongoDB databases using natural language via LLMs to perform queries, run aggregations, optimize performance, and more.", "tools": [{"name": "add-connection-alias", "description": "Add a new MongoDB connection alias", "parameter": {}}, {"name": "aggregate-data", "description": "Execute aggregation pipelines", "parameter": {}}, {"name": "analyze-query-patterns", "description": "Analyze live queries and suggest optimizations", "parameter": {}}, {"name": "analyze-schema", "description": "Automatically infer collection schemas", "parameter": {}}, {"name": "bulk-operations", "description": "Perform multiple operations efficiently (requires confirmation for destructive operations)", "parameter": {}}, {"name": "clear-cache", "description": "Clear memory caches to ensure fresh data", "parameter": {}}, {"name": "collation-query", "description": "Find documents with language-specific collation rules", "parameter": {}}, {"name": "compare-schemas", "description": "Compare schemas between two collections", "parameter": {}}, {"name": "connect-mongodb", "description": "Connect to a different MongoDB URI", "parameter": {}}, {"name": "connect-original", "description": "Connect back to the original MongoDB URI used at startup", "parameter": {}}, {"name": "count-documents", "description": "Count documents matching specified criteria", "parameter": {}}, {"name": "create-collection", "description": "Create new collections with custom options", "parameter": {}}, {"name": "create-database", "description": "Create a new database with option to switch to it", "parameter": {}}, {"name": "create-index", "description": "Create new indexes for performance optimization", "parameter": {}}, {"name": "create-timeseries", "description": "Create time series collections for temporal data", "parameter": {}}, {"name": "create-user", "description": "Create new database users with specific roles", "parameter": {}}, {"name": "current-database", "description": "Show the current database context", "parameter": {}}, {"name": "delete-document", "description": "Delete documents matching specified criteria (requires confirmation)", "parameter": {}}, {"name": "distinct-values", "description": "Extract unique values for any field", "parameter": {}}, {"name": "drop-collection", "description": "Remove collections from the database (requires confirmation)", "parameter": {}}, {"name": "drop-database", "description": "Drop a database (requires confirmation)", "parameter": {}}, {"name": "drop-index", "description": "Remove indexes from collections (requires confirmation)", "parameter": {}}, {"name": "drop-user", "description": "Remove database users (requires confirmation)", "parameter": {}}, {"name": "explain-query", "description": "Analyze query execution plans", "parameter": {}}, {"name": "export-data", "description": "Export query results in JSON or CSV format", "parameter": {}}, {"name": "find-documents", "description": "Run queries with filters, projections, and sorting", "parameter": {}}, {"name": "generate-schema-validator", "description": "Generate JSON Schema validators", "parameter": {}}, {"name": "geo-query", "description": "Perform geospatial queries with various operators", "parameter": {}}, {"name": "get-stats", "description": "Retrieve database or collection statistics", "parameter": {}}, {"name": "gridfs-operation", "description": "Manage large files with GridFS buckets", "parameter": {}}, {"name": "insert-document", "description": "Insert one or more documents into collections", "parameter": {}}, {"name": "list-collections", "description": "Explore collections in the current database", "parameter": {}}, {"name": "list-connections", "description": "View all available MongoDB connection aliases", "parameter": {}}, {"name": "list-databases", "description": "View all accessible databases", "parameter": {}}, {"name": "rename-collection", "description": "Rename existing collections (requires confirmation when dropping targets)", "parameter": {}}, {"name": "shard-status", "description": "View sharding configuration for databases and collections", "parameter": {}}, {"name": "text-search", "description": "Perform full-text search across text-indexed fields", "parameter": {}}, {"name": "transaction", "description": "Execute multiple operations in a single ACID transaction", "parameter": {}}, {"name": "update-document", "description": "Update documents matching specified criteria", "parameter": {}}, {"name": "use-database", "description": "Switch to a specific database context", "parameter": {}}, {"name": "validate-collection", "description": "Check for data inconsistencies", "parameter": {}}, {"name": "watch-changes", "description": "Monitor real-time changes to collections", "parameter": {}}]}
{"name": "Monday.com", "description": "MCP Server to interact with Monday.com boards and items.", "url": "https://github.com/sakce/mcp-server-monday", "readme_file": "community/Monday.com.md", "summary": "Enables MCP clients to interact with Monday.com boards, items, updates, and documents.", "tools": [{"name": "monday-create-item", "description": "Creates a new item or sub-item in a Monday.com board", "parameter": {}}, {"name": "monday-get-board-groups", "description": "Retrieves all groups from a specified Monday.com board", "parameter": {}}, {"name": "monday-create-update", "description": "Creates a comment/update on a Monday.com item", "parameter": {}}, {"name": "monday-list-boards", "description": "Lists all available Monday.com boards", "parameter": {}}, {"name": "monday-list-items-in-groups", "description": "Lists all items in specified groups of a Monday.com board", "parameter": {}}, {"name": "monday-list-subitems-in-items", "description": "Lists all sub-items for given Monday.com items", "parameter": {}}, {"name": "monday-create-board", "description": "Creates a new Monday.com board", "parameter": {}}, {"name": "monday-create-board-group", "description": "Creates a new group in a Monday.com board", "parameter": {}}, {"name": "monday-move-item-to-group", "description": "Moves a Monday.com item to a different group", "parameter": {}}, {"name": "monday-delete-item", "description": "Deletes a Monday.com item", "parameter": {}}, {"name": "monday-archive-item", "description": "Archives a Monday.com item", "parameter": {}}, {"name": "monday-get-item-updates", "description": "Retrieves updates/comments for a specific item", "parameter": {}}, {"name": "monday-get-docs", "description": "Lists documents in Monday.com, optionally filtered by folder", "parameter": {}}, {"name": "monday-get-doc-content", "description": "Retrieves the content of a specific document", "parameter": {}}, {"name": "monday-create-doc", "description": "Creates a new document in Monday.com", "parameter": {}}, {"name": "monday-add-doc-block", "description": "Adds a block to an existing document", "parameter": {}}]}
{"name": "Multicluster-MCP-Sever", "description": "The gateway for GenAI systems to interact with multiple Kubernetes clusters.", "url": "https://github.com/yanmxa/multicluster-mcp-server", "readme_file": "community/Multicluster-MCP-Sever.md", "summary": "The Multi-Cluster MCP Server provides a robust gateway for Generative AI systems to interact with multiple Kubernetes clusters through the Model Context Protocol (MCP). It facilitates comprehensive operations on Kubernetes resources, streamlined multi-cluster management, and interactive cluster observability.", "tools": [{"name": "Retrieve resources from the hub cluster", "description": "Retrieves resources from the current context (hub cluster).", "parameter": {}}, {"name": "Retrieve resources from the managed clusters", "description": "Retrieves resources from managed clusters.", "parameter": {}}, {"name": "Connect to a managed cluster", "description": "Connects to a managed cluster using a specified ClusterRole.", "parameter": {"ClusterRole": "(string) The name of the ClusterRole to use for connecting to the managed cluster."}}, {"name": "Access resources across multiple Kubernetes clusters", "description": "Accesses resources across multiple Kubernetes clusters via Open Cluster Management.", "parameter": {}}]}
{"name": "n8n", "description": "This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.", "url": "https://github.com/leonardsellem/n8n-mcp-server", "readme_file": "community/n8n.md", "summary": "A Model Context Protocol (MCP) server that allows AI assistants to interact with n8n workflows through natural language. It provides tools for managing workflows and executions, including listing, creating, updating, deleting, activating, deactivating, and executing workflows, as well as accessing workflow and execution information.", "tools": [{"name": "run_webhook", "description": "Triggers a workflow via a webhook, passing the workflow name and optional data.", "parameter": {"workflowName": "(string) The name of the workflow to trigger", "data": "(Optional, object) Additional data to pass to the webhook"}}, {"name": "workflow_list", "description": "Lists all workflows.", "parameter": {}}, {"name": "workflow_get", "description": "Gets details of a specific workflow.", "parameter": {"id": "(string) The ID of the workflow"}}, {"name": "workflow_create", "description": "Creates a new workflow.", "parameter": {"name": "(string) The name of the new workflow", "data": "(object) The workflow data"}}, {"name": "workflow_update", "description": "Updates an existing workflow.", "parameter": {"id": "(string) The ID of the workflow to update", "data": "(object) The updated workflow data"}}, {"name": "workflow_delete", "description": "Deletes a workflow.", "parameter": {"id": "(string) The ID of the workflow to delete"}}, {"name": "workflow_activate", "description": "Activates a workflow.", "parameter": {"id": "(string) The ID of the workflow to activate"}}, {"name": "workflow_deactivate", "description": "Deactivates a workflow.", "parameter": {"id": "(string) The ID of the workflow to deactivate"}}, {"name": "execution_run", "description": "Executes a workflow via the API.", "parameter": {"id": "(string) The ID of the workflow to execute"}}, {"name": "execution_get", "description": "Gets details of a specific execution.", "parameter": {"id": "(string) The ID of the execution"}}, {"name": "execution_list", "description": "Lists executions for a workflow.", "parameter": {"workflowId": "(string) The ID of the workflow"}}, {"name": "execution_stop", "description": "Stops a running execution.", "parameter": {"id": "(string) The ID of the execution to stop"}}]}
{"name": "National Parks", "description": "The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.", "url": "https://github.com/KyrieTangSheng/mcp-server-nationalparks", "readme_file": "community/National_Parks.md", "summary": "MCP Server for the National Park Service (NPS) API, providing real-time information about U.S. National Parks, including park details, alerts, and activities.", "tools": [{"name": "findParks", "description": "Search for national parks based on various criteria", "parameter": {"stateCode": "(optional string) Filter parks by state code (e.g., 'CA' for California). Multiple states can be comma-separated (e.g., 'CA,OR,WA')", "q": "(optional string) Search term to filter parks by name or description", "limit": "(optional number) Maximum number of parks to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "activities": "(optional string) Filter by available activities (e.g., 'hiking,camping')"}}, {"name": "getParkDetails", "description": "Get comprehensive information about a specific national park", "parameter": {"parkCode": "(string) The park code of the national park (e.g., 'yose' for Yosemite, 'grca' for Grand Canyon)"}}, {"name": "getAlerts", "description": "Get current alerts for national parks including closures, hazards, and important information", "parameter": {"parkCode": "(optional string) Filter alerts by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of alerts to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter alerts by title or description"}}, {"name": "getVisitorCenters", "description": "Get information about visitor centers and their operating hours", "parameter": {"parkCode": "(optional string) Filter visitor centers by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of visitor centers to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter visitor centers by name or description"}}, {"name": "getCampgrounds", "description": "Get information about available campgrounds and their amenities", "parameter": {"parkCode": "(optional string) Filter campgrounds by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of campgrounds to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "q": "(optional string) Search term to filter campgrounds by name or description"}}, {"name": "getEvents", "description": "Find upcoming events at parks", "parameter": {"parkCode": "(optional string) Filter events by park code (e.g., 'yose' for Yosemite). Multiple parks can be comma-separated (e.g., 'yose,grca')", "limit": "(optional number) Maximum number of events to return (default: 10, max: 50)", "start": "(optional number) Start position for results (useful for pagination)", "dateStart": "(optional string) Start date for filtering events (format: YYYY-MM-DD)", "dateEnd": "(optional string) End date for filtering events (format: YYYY-MM-DD)", "q": "(optional string) Search term to filter events by title or description"}}]}
{"name": "NS Travel Information", "description": "Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.", "url": "https://github.com/r-huijts/ns-mcp-server", "readme_file": "community/NS_Travel_Information.md", "summary": "This MCP server connects Claude to real-time NS (Nederlandse Spoorwegen) travel information, providing comprehensive data on train departures, arrivals, journey planning, service updates, ticket pricing, station details, and more.", "tools": [{"name": "Real-time Train Information", "description": "Provides real-time information about train departures and arrivals, including platform numbers, delays, and travel notes.", "parameter": {}}, {"name": "Journey Planning", "description": "Finds optimal travel routes with transfers and real-time updates.", "parameter": {}}, {"name": "Service Updates", "description": "Checks for disruptions, maintenance work, and engineering activities.", "parameter": {}}, {"name": "Ticket Prices", "description": "Gets accurate pricing for single and return journeys, including travel classes and group pricing.", "parameter": {}}, {"name": "Station Details", "description": "Accesses comprehensive station information such as facilities, accessibility features, platform layouts, OV-fiets availability, and location details.", "parameter": {}}]}
{"name": "Neo4j", "description": "A community built server that interacts with Neo4j Graph Database.", "url": "https://github.com/da-okazaki/mcp-neo4j-server", "readme_file": "community/Neo4j.md", "summary": "An MCP server that integrates Neo4j graph database with Claude Desktop, enabling users to perform graph database operations through natural language interactions.", "tools": [{"name": "execute_query", "description": "Execute Cypher queries on the Neo4j database", "parameter": {"query": "(string) The Cypher query to execute", "parameters": "(Optional, object) Parameters to pass to the query to prevent injection attacks"}}, {"name": "create_node", "description": "Create a new node in the graph database", "parameter": {"labels": "(array) Labels for the node", "properties": "(object) Properties of the node, supporting all Neo4j data types"}}, {"name": "create_relationship", "description": "Create a relationship between two existing nodes", "parameter": {"source_node_id": "(number) Internal ID of the source node", "target_node_id": "(number) Internal ID of the target node", "relationship_type": "(string) Type of the relationship", "direction": "(string) Direction of the relationship (e.g., 'OUTGOING', 'INCOMING')", "properties": "(Optional, object) Properties of the relationship"}}]}
{"name": "Neovim", "description": "An MCP Server for your Neovim session.", "url": "https://github.com/bigcodegen/mcp-neovim-server", "readme_file": "community/Neovim.md", "summary": "Connects Claude Desktop (or any Model Context Protocol client) to Neovim using MCP and the official neovim/node-client JavaScript library. It leverages Vim's native text editing commands and workflows to provide a lightweight code or general purpose AI text assistance layer.", "tools": [{"name": "vim_buffer", "description": "Returns the current active buffer content with line numbers shown. The filename parameter is ignored.", "parameter": {"filename": "(string) Ignored, returns a string of numbered lines with the current active buffer content"}}, {"name": "vim_command", "description": "Sends a command to VIM for navigation, spot editing, and line deletion. Multiple commands can be separated by newlines.", "parameter": {"command": "(string) Vim command to execute"}}, {"name": "vim_status", "description": "Gets the status of the VIM editor, including cursor position, mode, filename, visual selection, window layout, current tab, marks, registers, and working directory.", "parameter": {}}, {"name": "vim_edit", "description": "Edits lines in the VIM editor using insert, replace, or replaceAll modes.", "parameter": {"startLine": "(number) Line number where the edit starts", "mode": "(\"insert\" | \"replace\" | \"replaceAll\") Mode of editing", "lines": "(string) Lines to insert or replace"}}, {"name": "vim_window", "description": "Manipulates Neovim windows, such as splitting, vertical splitting, closing, navigating, and making the current window the only one.", "parameter": {"command": "(string: \"split\", \"vsplit\", \"only\", \"close\", \"wincmd h/j/k/l\") Window management operation"}}, {"name": "vim_mark", "description": "Sets a mark at a specific position in the VIM editor.", "parameter": {"mark": "(string: a-z) Mark name", "line": "(number) Line number", "column": "(number) Column number"}}, {"name": "vim_register", "description": "Sets the content of a register in the VIM editor.", "parameter": {"register": "(string: a-z or \") Register name", "content": "(string) Content to set in the register"}}, {"name": "vim_visual", "description": "Creates a visual selection in the VIM editor.", "parameter": {"startLine": "(number) Start line of the selection", "startColumn": "(number) Start column of the selection", "endLine": "(number) End line of the selection", "endColumn": "(number) End column of the selection"}}]}
{"name": "nomad-mcp", "description": "A server that provides a set of tools for managing Nomad clusters through the MCP.", "url": "https://github.com/kocierik/mcp-nomad", "readme_file": "community/nomad-mcp.md", "summary": "A Golang-based MCP server designed to connect and manage various aspects of a Nomad cluster, including job, deployment, namespace, node, allocation, variable, volume, ACL, Sentinel policy, and cluster management.", "tools": [{"name": "list_variables", "description": "Lists variables with optional filtering and pagination.", "parameter": {"namespace": "(string) The namespace to filter variables by.", "prefix": "(string) The prefix to filter variables by.", "per_page": "(int) The number of results per page."}}, {"name": "get_variable", "description": "Gets details of a specific variable.", "parameter": {"path": "(string) The path of the variable.", "namespace": "(string) The namespace of the variable."}}, {"name": "create_variable", "description": "Creates a new variable with namespace support.", "parameter": {"path": "(string) The path of the variable.", "key": "(string) The key of the variable.", "value": "(string) The value of the variable.", "namespace": "(string) The namespace of the variable."}}, {"name": "delete_variable", "description": "Deletes a variable with CAS support.", "parameter": {"path": "(string) The path of the variable.", "namespace": "(string) The namespace of the variable."}}]}
{"name": "oatpp-mcp", "description": "C++ MCP integration for Oat++. Use Oat++ to build MCP servers.", "url": "https://github.com/oatpp/oatpp-mcp", "readme_file": "community/oatpp-mcp.md", "summary": "An implementation of Anthropic’s Model Context Protocol for Oat++, enabling the creation of tools to query APIs with LLMs and supporting transport via STDIO and HTTP SSE.", "tools": [{"name": "Logger", "description": "A tool for logging purposes.", "parameter": {}}]}
{"name": "obsidian-mcp", "description": "(by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.", "url": "https://github.com/StevenStavrakis/obsidian-mcp", "readme_file": "community/obsidian-mcp.md", "summary": "An MCP server that enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing, and managing notes and tags.", "tools": [{"name": "read-note", "description": "Read the contents of a note", "parameter": {}}, {"name": "create-note", "description": "Create a new note", "parameter": {}}, {"name": "edit-note", "description": "Edit an existing note", "parameter": {}}, {"name": "delete-note", "description": "Delete a note", "parameter": {}}, {"name": "move-note", "description": "Move a note to a different location", "parameter": {}}, {"name": "create-directory", "description": "Create a new directory", "parameter": {}}, {"name": "search-vault", "description": "Search notes in the vault", "parameter": {}}, {"name": "add-tags", "description": "Add tags to a note", "parameter": {}}, {"name": "remove-tags", "description": "Remove tags from a note", "parameter": {}}, {"name": "rename-tag", "description": "Rename a tag across all notes", "parameter": {}}, {"name": "manage-tags", "description": "List and organize tags", "parameter": {}}, {"name": "list-available-vaults", "description": "List all available vaults (helps with multi-vault setups)", "parameter": {}}]}
{"name": "Okta", "description": "Interact with Okta API.", "url": "https://github.com/kapilduraphe/okta-mcp-server", "readme_file": "community/Okta.md", "summary": "This MCP server enables Claude to interact with Okta's user management system, providing comprehensive user and group management capabilities along with onboarding automation.", "tools": [{"name": "get_user", "description": "Retrieves detailed user information from Okta, including user details, account dates, personal information, employment details, contact information, address, and preferences.", "parameter": {}}, {"name": "list_users", "description": "Lists users from Okta with optional filtering and pagination, supporting SCIM filter expressions, free-form text search, sorting options, and pagination.", "parameter": {}}, {"name": "activate_user", "description": "Activates a user in Okta, with an option to send an activation email and update the user's status to active.", "parameter": {}}, {"name": "suspend_user", "description": "Suspends a user in Okta.", "parameter": {}}, {"name": "unsuspend_user", "description": "Unsuspends a previously suspended user in Okta.", "parameter": {}}, {"name": "delete_user", "description": "Deletes a user from Okta, noting that the user must be deactivated first.", "parameter": {}}, {"name": "get_user_last_location", "description": "Retrieves the last known location and login information for a user from Okta system logs.", "parameter": {}}, {"name": "list_groups", "description": "Lists user groups from Okta with optional filtering and pagination, supporting filter expressions, free-form text search, sorting options, and pagination.", "parameter": {}}, {"name": "create_group", "description": "Creates a new group in Okta with a name and optional description.", "parameter": {}}, {"name": "get_group", "description": "Retrieves detailed information about a specific group.", "parameter": {}}, {"name": "delete_group", "description": "Deletes a group from Okta.", "parameter": {}}, {"name": "assign_user_to_group", "description": "Assigns a user to a group in Okta.", "parameter": {}}, {"name": "remove_user_from_group", "description": "Removes a user from a group in Okta.", "parameter": {}}, {"name": "list_group_users", "description": "Lists all users in a specific group with pagination support.", "parameter": {}}, {"name": "bulk_user_import", "description": "Imports multiple users from a CSV string, creating user accounts based on CSV data, with optional activation of users, email notifications, and assignment to default groups.", "parameter": {}}, {"name": "assign_users_to_groups", "description": "Assigns multiple users to groups based on attribute mappings, mapping user attributes (department, title, etc.) to specific groups and performing bulk assignment of users based on attributes.", "parameter": {}}, {"name": "provision_applications", "description": "Provisions application access for multiple users, assigning users to applications and supporting bulk provisioning.", "parameter": {}}, {"name": "run_onboarding_workflow", "description": "Runs a complete onboarding workflow for multiple users from CSV data, including user import from CSV, automatic activation, group assignment based on attributes, application provisioning, and welcome email configuration.", "parameter": {}}]}
{"name": "OpenAI WebSearch MCP", "description": "This is a Python-based MCP server that provides OpenAI `web_search` build-in tool.", "url": "https://github.com/ConechoAI/openai-websearch-mcp", "readme_file": "community/OpenAI_WebSearch_MCP.md", "summary": "This MCP server provides access to OpenAI's websearch functionality, allowing AI assistants to search the web during conversations with users to provide up-to-date information.", "tools": [{"name": "web_search", "description": "Call OpenAI websearch as a tool.", "parameter": {"type": "(string) web_search_preview", "search_context_size": "(string) High level guidance for the amount of context window space to use for the search. One of low, medium, or high. medium is the default.", "user_location": "(object or null) User location details, including type, city, country, region, and timezone."}}]}
{"name": "OpenAPI AnyApi", "description": "Interact with large OpenAPI docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.", "url": "https://github.com/baryhuang/mcp-server-any-openapi", "readme_file": "community/OpenAPI_AnyApi.md", "summary": "A server designed to discover and request APIs using OpenAPI specifications. It supports semantic search for API endpoints, fast in-memory processing, and customizable tool namespaces.", "tools": [{"name": "{prefix}_api_request_schema", "description": "Get API endpoint schemas that match your intent. Returns endpoint details including path, method, parameters, and response formats.", "parameter": {"query": "(string) Describe what you want to do with the API (e.g., 'Get user profile information', 'Create a new job posting')"}}, {"name": "{prefix}_make_request", "description": "Essential for reliable execution with complex APIs where simplified implementations fail. Provides the ability to make HTTP requests to specified URLs with detailed options.", "parameter": {"method": "(string) HTTP method (GET, POST, PUT, DELETE, PATCH) (Enum: GET, POST, PUT, DELETE, PATCH)", "url": "(string) Fully qualified API URL (e.g., https://api.example.com/users/123)", "headers": "(Optional, object) Request headers", "query_params": "(Optional, object) Query parameters", "body": "(Optional, object) Request body for POST, PUT, PATCH"}}]}
{"name": "OpenAPI Schema", "description": "Allow LLMs to explore large OpenAPI schemas without bloating the context.", "url": "https://github.com/hannesj/mcp-openapi-schema", "readme_file": "community/OpenAPI_Schema.md", "summary": "A Model Context Protocol (MCP) server that exposes OpenAPI schema information to Large Language Models (LLMs). It allows LLMs to explore and understand OpenAPI specifications, including API paths, operations, parameters, schemas, and more.", "tools": [{"name": "list-endpoints", "description": "Lists all API paths and their HTTP methods with summaries in a nested object structure", "parameter": {}}, {"name": "get-endpoint", "description": "Gets detailed information about a specific endpoint including parameters and responses", "parameter": {}}, {"name": "get-request-body", "description": "Gets the request body schema for a specific endpoint and method", "parameter": {}}, {"name": "get-response-schema", "description": "Gets the response schema for a specific endpoint, method, and status code", "parameter": {}}, {"name": "get-path-parameters", "description": "Gets the parameters for a specific path", "parameter": {}}, {"name": "list-components", "description": "Lists all schema components (schemas, responses, parameters, etc.)", "parameter": {}}, {"name": "get-component", "description": "Gets detailed definition for a specific component", "parameter": {}}, {"name": "list-security-schemes", "description": "Lists all available security schemes", "parameter": {}}, {"name": "get-examples", "description": "Gets examples for a specific component or endpoint", "parameter": {}}, {"name": "search-schema", "description": "Searches across paths, operations, and schemas", "parameter": {}}]}
{"name": "OpenCTI", "description": "Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.", "url": "https://github.com/Spathodea-Network/opencti-mcp", "readme_file": "community/OpenCTI.md", "summary": "A Model Context Protocol (MCP) server that integrates with the OpenCTI platform to provide querying and retrieval of threat intelligence data through a standardized interface.", "tools": [{"name": "get_latest_reports", "description": "Retrieves the most recent threat intelligence reports.", "parameter": {"first": "(Optional, number) Number of reports to retrieve, defaults to 10"}}, {"name": "get_report_by_id", "description": "Retrieves a specific report by its ID.", "parameter": {"id": "(string) Report ID"}}, {"name": "search_malware", "description": "Searches for malware information in the OpenCTI database.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}}, {"name": "search_indicators", "description": "Searches for indicators of compromise.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}}, {"name": "search_threat_actors", "description": "Searches for threat actor information.", "parameter": {"query": "(string) Search query", "first": "(Optional, number) Number of results to retrieve, defaults to 10"}}, {"name": "get_user_by_id", "description": "Retrieves user information by ID.", "parameter": {"id": "(string) User ID"}}, {"name": "list_users", "description": "Lists all users in the system.", "parameter": {}}, {"name": "list_groups", "description": "Lists all groups with their members.", "parameter": {"first": "(Optional, number) Number of groups to retrieve, defaults to 10"}}, {"name": "list_attack_patterns", "description": "Lists all attack patterns in the system.", "parameter": {"first": "(Optional, number) Number of attack patterns to retrieve, defaults to 10"}}, {"name": "get_campaign_by_name", "description": "Retrieves campaign information by name.", "parameter": {"name": "(string) Campaign name"}}, {"name": "list_connectors", "description": "Lists all system connectors.", "parameter": {}}, {"name": "list_status_templates", "description": "Lists all status templates.", "parameter": {}}, {"name": "get_file_by_id", "description": "Retrieves file information by ID.", "parameter": {"id": "(string) File ID"}}, {"name": "list_files", "description": "Lists all files in the system.", "parameter": {}}, {"name": "list_marking_definitions", "description": "Lists all marking definitions.", "parameter": {}}, {"name": "list_labels", "description": "Lists all available labels.", "parameter": {}}]}
{"name": "OpenDota", "description": "Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.", "url": "https://github.com/asusevski/opendota-mcp-server", "readme_file": "community/OpenDota.md", "summary": "A Model Context Protocol (MCP) server implementation for accessing OpenDota API data, enabling LLMs and AI assistants to retrieve real-time Dota 2 statistics, match data, player information, and more.", "tools": [{"name": "get_player_by_id", "description": "Retrieve player information by account ID", "parameter": {}}, {"name": "get_player_recent_matches", "description": "Get recent matches for a player", "parameter": {}}, {"name": "get_match_data", "description": "Get detailed data for a specific match", "parameter": {}}, {"name": "get_player_win_loss", "description": "Get win/loss statistics for a player", "parameter": {}}, {"name": "get_player_heroes", "description": "Get a player's most played heroes", "parameter": {}}, {"name": "get_hero_stats", "description": "Get statistics for heroes", "parameter": {}}, {"name": "search_player", "description": "Search for players by name", "parameter": {}}, {"name": "get_pro_players", "description": "Get list of professional players", "parameter": {}}, {"name": "get_pro_matches", "description": "Get recent professional matches", "parameter": {}}, {"name": "get_player_peers", "description": "Get players who have played with a specified player", "parameter": {}}, {"name": "get_heroes", "description": "Get list of all Dota 2 heroes", "parameter": {}}, {"name": "get_player_totals", "description": "Get player's overall stats totals", "parameter": {}}, {"name": "get_player_rankings", "description": "Get player hero rankings", "parameter": {}}, {"name": "get_player_wordcloud", "description": "Get most common words used by player in chat", "parameter": {}}, {"name": "get_team_info", "description": "Get information about a team", "parameter": {}}, {"name": "get_public_matches", "description": "Get recent public matches", "parameter": {}}, {"name": "get_match_heroes", "description": "Get heroes played in a specific match", "parameter": {}}]}
{"name": "OpenRPC", "description": "Interact with and discover JSON-RPC APIs via OpenRPC.", "url": "https://github.com/shanejonas/openrpc-mpc-server", "readme_file": "community/OpenRPC.md", "summary": "A Model Context Protocol (MCP) server that provides JSON-RPC functionality through OpenRPC. It allows calling arbitrary JSON-RPC methods and discovering available methods on a server.", "tools": [{"name": "rpc_call", "description": "Call arbitrary JSON-RPC methods", "parameter": {"server_url": "(string) URL of the JSON-RPC server", "method_name": "(string) Name of the method to call", "parameters": "(object) Parameters to pass to the method"}}, {"name": "rpc_discover", "description": "Discover available JSON-RPC methods", "parameter": {"server_url": "(string) URL of the JSON-RPC server"}}]}
{"name": "Open Strategy Partners Marketing Tools", "description": "Content editing codes, value map, and positioning tools for product marketing.", "url": "https://github.com/open-strategy-partners/osp_marketing_tools", "readme_file": "community/Open_Strategy_Partners_Marketing_Tools.md", "summary": "A comprehensive suite of tools for technical marketing content creation, optimization, and product positioning based on Open Strategy Partners' proven methodologies.", "tools": [{"name": "OSP Product Value Map Generator", "description": "Generates structured OSP product value maps that effectively communicate a product's worth and positioning.", "parameter": {"Product Name": "(string) The name of the product", "Target Audience": "(string) The target audience for the product", "Key Features": "(list of strings) Key features of the product"}}, {"name": "OSP Meta Information Generator", "description": "Creates optimized metadata for web content including article titles, meta titles, meta descriptions, SEO-friendly URL slugs, and more.", "parameter": {"Topic": "(string) The topic of the article", "Primary Keyword": "(string) The primary keyword for SEO", "Audience": "(string) The target audience", "Content Type": "(string) The type of content (e.g., technical guide, tutorial)"}}, {"name": "OSP Content Editing Codes", "description": "Applies OSP's semantic editing codes for comprehensive content review, including scope, flow, style, and technical accuracy.", "parameter": {"Content": "(string) The content to be reviewed"}}, {"name": "OSP Technical Writing Guide", "description": "Provides a systematic approach to creating high-quality technical content, including narrative structure, flow, style, and technical accuracy.", "parameter": {"Document Type": "(string) The type of document (e.g., tutorial, reference doc)", "Topic": "(string) The topic of the document", "Audience": "(string) The target audience"}}]}
{"name": "Outline", "description": "MCP Server to interact with Outline knowledge base to search, read, create, and manage documents and their content, access collections, add comments, and manage document backlinks.", "url": "https://github.com/Vortiago/mcp-outline", "readme_file": "community/Outline.md", "summary": "A Model Context Protocol (MCP) server that enables AI assistants to interact with Outline document services, providing a bridge for document search, management, reading, commenting, creation, editing, and backlink management.", "tools": [{"name": "Search for Documents", "description": "Search for documents by keywords.", "parameter": {}}, {"name": "List Collections", "description": "List all available collections.", "parameter": {}}, {"name": "Read a Document", "description": "Get the content of a document by its ID.", "parameter": {"docId": "(string) The ID of the document to read."}}, {"name": "Create a New Document", "description": "Create a new document in a specified collection with given content.", "parameter": {"title": "(string) The title of the new document.", "collectionId": "(string) The ID of the collection where the document will be created.", "content": "(string) The content of the new document."}}, {"name": "Add a Comment", "description": "Add a comment to a document.", "parameter": {"docId": "(string) The ID of the document to comment on.", "comment": "(string) The text of the comment."}}, {"name": "Move a Document", "description": "Move a document to a different collection.", "parameter": {"docId": "(string) The ID of the document to move.", "newCollectionId": "(string) The ID of the target collection."}}]}
{"name": "Pandoc", "description": "MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.", "url": "https://github.com/vivekVells/mcp-pandoc", "readme_file": "community/Pandoc.md", "summary": "A Model Context Protocol server for document format conversion using pandoc. It provides tools to transform content between different document formats while preserving formatting and structure.", "tools": [{"name": "convert-contents", "description": "Transforms content between supported formats", "parameter": {"contents": "(string) Source content to convert (required if input_file not provided)", "input_file": "(string) Complete path to input file (required if contents not provided)", "input_format": "(string) Source format of the content (defaults to markdown)", "output_format": "(string) Target format (defaults to markdown)", "output_file": "(string) Complete path for output file (required for pdf, docx, rst, latex, epub formats)"}}]}
{"name": "Phone MCP", "description": "📱 A powerful plugin that lets you control your Android phone. Enables AI agents to perform complex tasks like automatically playing music based on weather or making calls and sending texts.", "url": "https://github.com/hao-cyber/phone-mcp", "readme_file": "community/Phone_MCP.md", "summary": "A powerful MCP plugin that enables controlling an Android phone through ADB commands, providing features such as call management, messaging, media control, app management, and UI automation.", "tools": [{"name": "interact_with_screen", "description": "Executes various screen interaction actions such as tapping, swiping, pressing keys, inputting text, finding elements, waiting for elements, and scrolling.", "parameter": {"action": "(str) Type of action ('tap', 'swipe', 'key', 'text', 'find', 'wait', 'scroll')", "params": "(Optional, Dict[str, Any]) Dictionary with parameters specific to each action type"}}, {"name": "analyze_screen", "description": "Analyzes the current screen and provides structured information about UI elements.", "parameter": {"include_screenshot": "(Optional, bool) Whether to include base64-encoded screenshot in result", "max_elements": "(Optional, int) Maximum number of UI elements to process"}}, {"name": "create_contact", "description": "Creates a new contact with the given name and phone number using UI automation.", "parameter": {"name": "(str) The contact's full name", "phone": "(str) The phone number for the contact"}}, {"name": "launch_app_activity", "description": "Launches an app using the package name and optionally an activity name.", "parameter": {"package_name": "(str) The package name of the app to launch", "activity_name": "(Optional, str) The specific activity to launch"}}, {"name": "launch_intent", "description": "Launches an activity using the Android intent system.", "parameter": {"intent_action": "(str) The action to perform", "intent_type": "(Optional, str) The MIME type for the intent", "extras": "(Optional, Dict[str, str]) Extra data to pass with the intent"}}]}
{"name": "PIF", "description": "A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.", "url": "https://github.com/hungryrobot1/MCP-PIF", "readme_file": "community/PIF.md", "summary": "This server implements the Model Context Protocol (MCP) as a practical embodiment of the Personal Intelligence Framework (PIF). It provides a set of core tools designed to support structured interaction between humans and AI, including filesystem operations, reasoning tools, and a journal system.", "tools": [{"name": "pwd", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "cd", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "read", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "write", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "mkdir", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "delete", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "move", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "rename", "description": "Navigate and manage workspace context", "parameter": {}}, {"name": "reason", "description": "Develop connected insights", "parameter": {"thoughts": "(array) An array of thought objects with content and optional relations"}}, {"name": "think", "description": "Create temporal spaces for contemplation", "parameter": {}}, {"name": "journal_create", "description": "Document developments", "parameter": {"title": "(string) Title of the journal entry", "content": "(string) Content of the journal entry", "tags": "(array) Array of tags for the journal entry"}}, {"name": "journal_read", "description": "Explore patterns in journal entries", "parameter": {}}]}
{"name": "Pinecone", "description": "MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.", "url": "https://github.com/sirmews/mcp-pinecone", "readme_file": "community/Pinecone.md", "summary": "A server for interacting with a Pinecone index, providing capabilities to read and write data, perform semantic searches, and manage documents.", "tools": [{"name": "semantic-search", "description": "Search for records in the Pinecone index.", "parameter": {}}, {"name": "read-document", "description": "Read a document from the Pinecone index.", "parameter": {}}, {"name": "list-documents", "description": "List all documents in the Pinecone index.", "parameter": {}}, {"name": "pinecone-stats", "description": "Get stats about the Pinecone index, including the number of records, dimensions, and namespaces.", "parameter": {}}, {"name": "process-document", "description": "Process a document into chunks and upsert them into the Pinecone index. This performs the overall steps of chunking, embedding, and upserting.", "parameter": {}}]}
{"name": "Placid.app", "description": "Generate image and video creatives using Placid.app templates", "url": "https://github.com/felores/placid-mcp-server", "readme_file": "community/Placid.app.md", "summary": "An MCP server implementation for integrating with Placid.app's API, providing tools for listing templates and generating images and videos.", "tools": [{"name": "placid_list_templates", "description": "Lists available Placid templates with filtering options. Each template includes its title, ID, preview image URL, available layers, and tags.", "parameter": {"collection_id": "(Optional, string) Filter templates by collection ID", "custom_data": "(Optional, string) Filter by custom reference data", "tags": "(Optional, array) Array of tags to filter templates by"}}, {"name": "placid_generate_video", "description": "Generate videos by combining Placid templates with dynamic content like videos, images, and text. For longer videos, a job ID is provided to check status.", "parameter": {"template_id": "(string) UUID of the template to use", "layers": "(object) Object containing dynamic content for template layers", "audio": "(Optional, string) URL to an mp3 audio file", "audio_duration": "(Optional, string) Set to 'auto' to trim audio to video length", "audio_trim_start": "(Optional, string) Timestamp of trim start point", "audio_trim_end": "(Optional, string) Timestamp of trim end point"}}, {"name": "placid_generate_image", "description": "Generate static images by combining Placid templates with dynamic content like text and images.", "parameter": {"template_id": "(string) UUID of the template to use", "layers": "(object) Object containing dynamic content for template layers"}}]}
{"name": "Postman", "description": "MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.", "url": "https://github.com/shannonlal/mcp-postman", "readme_file": "community/Postman.md", "summary": "An MCP server that enables running Postman collections using Newman, allowing LLMs to execute API tests and receive detailed results.", "tools": [{"name": "run-collection", "description": "Runs a Postman collection and returns the test results.", "parameter": {"collection": "(required) Path or URL to the Postman collection", "environment": "(optional) Path or URL to environment file", "globals": "(optional) Path or URL to globals file", "iterationCount": "(optional) Number of iterations to run"}}]}
{"name": "Productboard", "description": "Integrate the Productboard API into agentic workflows via MCP.", "url": "https://github.com/kenjihikmatullah/productboard-mcp", "readme_file": "community/Productboard.md", "summary": "Integrates the Productboard API into agentic workflows via MCP, enabling access to various Productboard resources such as companies, components, features, and products.", "tools": [{"name": "get_companies", "description": "Retrieves a list of companies from Productboard.", "parameter": {}}, {"name": "get_company_detail", "description": "Retrieves detailed information about a specific company.", "parameter": {}}, {"name": "get_components", "description": "Retrieves a list of components from Productboard.", "parameter": {}}, {"name": "get_component_detail", "description": "Retrieves detailed information about a specific component.", "parameter": {}}, {"name": "get_features", "description": "Retrieves a list of features from Productboard.", "parameter": {}}, {"name": "get_feature_detail", "description": "Retrieves detailed information about a specific feature.", "parameter": {}}, {"name": "get_feature_statuses", "description": "Retrieves the statuses of features from Productboard.", "parameter": {}}, {"name": "get_notes", "description": "Retrieves notes from Productboard.", "parameter": {}}, {"name": "get_products", "description": "Retrieves a list of products from Productboard.", "parameter": {}}, {"name": "get_product_detail", "description": "Retrieves detailed information about a specific product.", "parameter": {}}]}
{"name": "Prometheus", "description": "Query and analyze Prometheus - open-source monitoring system.", "url": "https://github.com/pab1it0/prometheus-mcp-server", "readme_file": "community/Prometheus.md", "summary": "A Model Context Protocol (MCP) server for Prometheus, providing access to Prometheus metrics and queries through standardized MCP interfaces, enabling AI assistants to execute PromQL queries and analyze metrics data.", "tools": [{"name": "execute_query", "description": "Execute a PromQL instant query against Prometheus", "parameter": {"query": "(string) The PromQL query to execute"}}, {"name": "execute_range_query", "description": "Execute a PromQL range query with start time, end time, and step interval", "parameter": {"query": "(string) The PromQL query to execute", "start_time": "(string) The start time of the range query", "end_time": "(string) The end time of the range query", "step_interval": "(string) The step interval for the range query"}}, {"name": "list_metrics", "description": "List all available metrics in Prometheus", "parameter": {}}, {"name": "get_metric_metadata", "description": "Get metadata for a specific metric", "parameter": {"metric_name": "(string) The name of the metric to get metadata for"}}, {"name": "get_targets", "description": "Get information about all scrape targets", "parameter": {}}]}
{"name": "Pushover", "description": "Send instant notifications to your devices using Pushover.net", "url": "https://github.com/ashiknesin/pushover-mcp", "readme_file": "community/Pushover.md", "summary": "An MCP implementation for sending notifications via Pushover.net, enabling AI agents to integrate seamlessly with MCP-compatible systems.", "tools": [{"name": "send", "description": "Sends a notification via Pushover.", "parameter": {"message": "(string) The message to send", "title": "(Optional, string) Message title", "priority": "(Optional, number) -2 to 2 (-2: lowest, 2: emergency)", "sound": "(Optional, string) Notification sound", "url": "(Optional, string) URL to include", "url_title": "(Optional, string) Title for the URL", "device": "(Optional, string) Target specific device"}}]}
{"name": "Quarkus", "description": "MCP servers for the Quarkus Java framework.", "url": "https://github.com/quarkiverse/quarkus-mcp-servers", "readme_file": "community/Quarkus.md", "summary": "A collection of Model Context Protocol (MCP) servers implemented in Java using the Quarkus MCP server framework. These servers extend the capabilities of MCP-enabled LLM AI applications by providing various functionalities such as database access, JVM inspection, file system interaction, drawing capabilities, Kubernetes interaction, container management, and web search optimization.", "tools": [{"name": "jdbc", "description": "A server for storing and retrieving data from a database via a JDBC URL.", "parameter": {}}, {"name": "jvminsight", "description": "A server for inspecting a running JVM process.", "parameter": {}}, {"name": "filesystem", "description": "A server for serving files from a file system.", "parameter": {"path1": "(Optional, string) Path to serve files from", "path2": "(Optional, string) Additional path to serve files from"}}, {"name": "jfx", "description": "A server that exposes a canvas for making drawings using JavaFX.", "parameter": {}}, {"name": "kubernetes", "description": "A server for interacting with a Kubernetes cluster.", "parameter": {}}, {"name": "containers", "description": "A server for working with Docker/Podman/OCI compatible container engines.", "parameter": {}}, {"name": "wolfram", "description": "A server for performing web searches optimized for use by a large language model through the Wolfram Alpha LLM API.", "parameter": {}}]}
{"name": "QGIS", "description": "connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.", "url": "https://github.com/jjsantos01/qgis_mcp", "readme_file": "community/QGIS.md", "summary": "QGISMCP connects QGIS to Claude AI through the Model Context Protocol (MCP), enabling two-way communication, project manipulation, layer management, processing algorithm execution, and code execution within QGIS.", "tools": [{"name": "ping", "description": "Simple ping command to check server connectivity", "parameter": {}}, {"name": "get_qgis_info", "description": "Get QGIS information about the current installation", "parameter": {}}, {"name": "load_project", "description": "Load a QGIS project from the specified path", "parameter": {"path": "(string) Path to the QGIS project file"}}, {"name": "create_new_project", "description": "Create a new project and save it", "parameter": {"path": "(string) Path to save the new project file"}}, {"name": "get_project_info", "description": "Get current project information", "parameter": {}}, {"name": "add_vector_layer", "description": "Add a vector layer to the project", "parameter": {"path": "(string) Path to the vector layer file", "name": "(string) Name to assign to the layer"}}, {"name": "add_raster_layer", "description": "Add a raster layer to the project", "parameter": {"path": "(string) Path to the raster layer file", "name": "(string) Name to assign to the layer"}}, {"name": "get_layers", "description": "Retrieve all layers in the current project", "parameter": {}}, {"name": "remove_layer", "description": "Remove a layer from the project by its ID", "parameter": {"layer_id": "(string) ID of the layer to remove"}}, {"name": "zoom_to_layer", "description": "Zoom to the extent of a specified layer", "parameter": {"layer_id": "(string) ID of the layer to zoom to"}}, {"name": "get_layer_features", "description": "Retrieve features from a vector layer with an optional limit", "parameter": {"layer_id": "(string) ID of the vector layer", "limit": "(Optional, integer) Maximum number of features to retrieve"}}, {"name": "execute_processing", "description": "Execute a processing algorithm with the given parameters", "parameter": {"algorithm": "(string) Name of the processing algorithm", "parameters": "(dictionary) Parameters for the algorithm"}}, {"name": "save_project", "description": "Save the current project to the given path", "parameter": {"path": "(string) Path to save the project file"}}, {"name": "render_map", "description": "Render the current map view to an image file", "parameter": {"output_path": "(string) Path to save the rendered image"}}, {"name": "execute_code", "description": "Execute arbitrary PyQGIS code provided as a string", "parameter": {"code": "(string) PyQGIS code to execute"}}]}
{"name": "QuickChart", "description": "A Model Context Protocol server for generating charts using QuickChart.io", "url": "https://github.com/GongRzhe/Quickchart-MCP-Server", "readme_file": "community/QuickChart.md", "summary": "A TypeScript-based MCP server that provides chart generation capabilities using QuickChart.io. It allows users to create various types of charts by providing data and styling parameters, which the server converts into chart URLs or downloadable images.", "tools": [{"name": "generate_chart", "description": "Generate a chart URL using QuickChart.io", "parameter": {"type": "(string) The type of chart to generate (e.g., 'bar', 'line', 'pie')", "data": "(object) The data configuration for the chart", "options": "(object, optional) Additional options for the chart"}}, {"name": "download_chart", "description": "Download a chart image to a local file", "parameter": {"config": "(object) The chart configuration", "outputPath": "(string) The path where the chart image will be saved"}}]}
{"name": "Qwen_Max", "description": "A Model Context Protocol (MCP) server implementation for the Qwen models.", "url": "https://github.com/66julienmartin/MCP-server-Qwen_Max", "readme_file": "community/Qwen_Max.md", "summary": "A Model Context Protocol (MCP) server implementation for the Qwen Max language model, providing text generation with configurable parameters, error handling, and support for multiple Qwen commercial models.", "tools": [{"name": "qwen_max", "description": "Generates text using the Qwen Max language model.", "parameter": {"prompt": "(string) The input prompt for the model.", "max_tokens": "(number) The maximum number of tokens to generate in the output.", "temperature": "(number) Controls the randomness of the model's output."}}]}
{"name": "Raindrop.io", "description": "An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).", "url": "https://github.com/hiromitsusasaki/raindrop-io-mcp-server", "readme_file": "community/Raindrop.io.md", "summary": "An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP). It supports creating, searching, and filtering bookmarks by tags.", "tools": [{"name": "create-bookmark", "description": "Creates a new bookmark.", "parameter": {"url": "(string) URL to bookmark (required)", "title": "(Optional, string) Title for the bookmark", "tags": "(Optional, array) Array of tags", "collection": "(Optional, string) Collection ID"}}, {"name": "search-bookmarks", "description": "Searches through bookmarks.", "parameter": {"query": "(string) Search query (required)", "tags": "(Optional, array) Array of tags to filter by"}}]}
{"name": "Reaper", "description": "Interact with your Reaper (Digital Audio Workstation) projects.", "url": "https://github.com/dschuler36/reaper-mcp-server", "readme_file": "community/Reaper.md", "summary": "A simple MCP server that connects a Reaper project to an MCP client like Claude Desktop, enabling users to ask questions about the project.", "tools": [{"name": "find_reaper_projects", "description": "Finds all Reaper projects in the directory specified in the config.", "parameter": {}}, {"name": "parse_reaper_project", "description": "Parses a Reaper project and returns a JSON object.", "parameter": {}}]}
{"name": "Redis", "description": "Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.", "url": "https://github.com/GongRzhe/REDIS-MCP-Server", "readme_file": "community/Redis.md", "summary": "A Redis Model Context Protocol (MCP) server implementation for interacting with Redis databases, enabling LLMs to interact with Redis key-value stores through a set of standardized tools.", "tools": [{"name": "set", "description": "Set a Redis key-value pair with optional expiration", "parameter": {"key": "(string) Redis key", "value": "(string) Value to store", "expireSeconds": "(number, optional) Expiration time in seconds"}}, {"name": "get", "description": "Get value by key from Redis", "parameter": {"key": "(string) Redis key to retrieve"}}, {"name": "delete", "description": "Delete one or more keys from Redis", "parameter": {"key": "(string | string[]) Key or array of keys to delete"}}, {"name": "list", "description": "List Redis keys matching a pattern", "parameter": {"pattern": "(string, optional) Pattern to match keys (default: *)"}}]}
{"name": "Rememberizer AI", "description": "An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.", "url": "https://github.com/skydeckai/mcp-server-rememberizer", "readme_file": "community/Rememberizer_AI.md", "summary": "A Model Context Protocol server for interacting with Rememberizer's document and knowledge management API. It enables Large Language Models to search, retrieve, and manage documents and integrations through Rememberizer.", "tools": [{"name": "retrieve_semantically_similar_internal_knowledge", "description": "Retrieves semantically similar matches from the connected Rememberizer personal/team internal knowledge and memory repository.", "parameter": {"match_this": "(string) Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge", "n_results": "(Optional, integer) Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information", "from_datetime_ISO8601": "(Optional, string) Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date", "to_datetime_ISO8601": "(Optional, string) End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date"}}, {"name": "smart_search_internal_knowledge", "description": "Searches for documents in Rememberizer's personal/team internal knowledge and memory repository using a simple query. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {"query": "(string) Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge", "user_context": "(Optional, string) Additional context for the query. Summarize the conversation up to this point for better context-aware results", "n_results": "(Optional, integer) Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information", "from_datetime_ISO8601": "(Optional, string) Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date", "to_datetime_ISO8601": "(Optional, string) End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date"}}, {"name": "list_internal_knowledge_systems", "description": "Lists the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {}}, {"name": "rememberizer_account_information", "description": "Gets information about the Rememberizer.ai personal/team knowledge repository account, including account holder name and email address.", "parameter": {}}, {"name": "list_personal_team_knowledge_documents", "description": "Retrieves a paginated list of all documents in the personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files.", "parameter": {"page": "(Optional, integer) Page number for pagination, starts at 1 (default: 1)", "page_size": "(Optional, integer) Number of documents per page, range 1-1000 (default: 100)"}}, {"name": "remember_this", "description": "Saves a piece of text information in the Rememberizer.ai knowledge system so that it may be recalled in the future through other tools.", "parameter": {"name": "(string) Name of the information. Used to identify the information in the future", "content": "(string) The information you wish to memorize"}}]}
{"name": "Replicate", "description": "Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.", "url": "https://github.com/deepfates/mcp-replicate", "readme_file": "community/Replicate.md", "summary": "A Model Context Protocol (MCP) server implementation for Replicate, enabling users to run Replicate models through a simple tool-based interface. It supports searching, browsing, and managing models and predictions, as well as handling images.", "tools": [{"name": "search_models", "description": "Find models using semantic search", "parameter": {}}, {"name": "list_models", "description": "Browse available models", "parameter": {}}, {"name": "get_model", "description": "Get details about a specific model", "parameter": {}}, {"name": "list_collections", "description": "Browse model collections", "parameter": {}}, {"name": "get_collection", "description": "Get details about a specific collection", "parameter": {}}, {"name": "create_prediction", "description": "Run a model with your inputs", "parameter": {}}, {"name": "get_prediction", "description": "Check a prediction's status", "parameter": {}}, {"name": "cancel_prediction", "description": "Stop a running prediction", "parameter": {}}, {"name": "list_predictions", "description": "See your recent predictions", "parameter": {}}, {"name": "view_image", "description": "Open an image in your browser", "parameter": {}}, {"name": "clear_image_cache", "description": "Clean up cached images", "parameter": {}}, {"name": "get_image_cache_stats", "description": "Check cache usage", "parameter": {}}]}
{"name": "Rquest", "description": "An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.", "url": "https://github.com/xxxbrian/mcp-rquest", "readme_file": "community/Rquest.md", "summary": "A Model Context Protocol (MCP) server that provides advanced HTTP request capabilities for Claude and other LLMs, enabling realistic browser emulation with accurate TLS/JA3/JA4 fingerprints and support for converting PDF and HTML documents to Markdown.", "tools": [{"name": "http_get", "description": "Perform GET requests with optional parameters", "parameter": {"url": "(string) The URL to send the GET request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "params": "(Optional, dict) Query parameters to include in the request"}}, {"name": "http_post", "description": "Submit data via POST requests", "parameter": {"url": "(string) The URL to send the POST request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}}, {"name": "http_put", "description": "Update resources with PUT requests", "parameter": {"url": "(string) The URL to send the PUT request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}}, {"name": "http_delete", "description": "Remove resources with DELETE requests", "parameter": {"url": "(string) The URL to send the DELETE request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}}, {"name": "http_patch", "description": "Partially update resources", "parameter": {"url": "(string) The URL to send the PATCH request to", "data": "(Optional, dict or string) Data to send in the body of the request", "json": "(Optional, dict) JSON data to send in the body of the request", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request", "files": "(Optional, dict) Files to send in the body of the request"}}, {"name": "http_head", "description": "Retrieve only headers from a resource", "parameter": {"url": "(string) The URL to send the HEAD request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}}, {"name": "http_options", "description": "Retrieve options for a resource", "parameter": {"url": "(string) The URL to send the OPTIONS request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}}, {"name": "http_trace", "description": "Diagnostic request tracing", "parameter": {"url": "(string) The URL to send the TRACE request to", "headers": "(Optional, dict) Additional headers to include in the request", "cookies": "(Optional, dict) Cookies to include in the request"}}, {"name": "get_stored_response", "description": "Retrieve stored large responses, optionally by line range", "parameter": {"response_id": "(string) The ID of the stored response", "start_line": "(Optional, int) The starting line number to retrieve", "end_line": "(Optional, int) The ending line number to retrieve"}}, {"name": "get_stored_response_with_markdown", "description": "Convert HTML or PDF responses to Markdown format for better LLM processing", "parameter": {"response_id": "(string) The ID of the stored response", "start_line": "(Optional, int) The starting line number to retrieve", "end_line": "(Optional, int) The ending line number to retrieve"}}, {"name": "get_model_state", "description": "Get the current state of the PDF models loading process", "parameter": {}}, {"name": "restart_model_loading", "description": "Restart the PDF models loading process if it failed or got stuck", "parameter": {}}]}
{"name": "Rijksmuseum", "description": "Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.", "url": "https://github.com/r-huijts/rijksmuseum-mcp", "readme_file": "community/Rijksmuseum.md", "summary": "A Model Context Protocol (MCP) server that provides access to the Rijksmuseum's collection through natural language interactions, enabling AI models to explore, analyze, and interact with artworks and collections.", "tools": [{"name": "search_artwork", "description": "Search and filter artworks using various criteria including text-based search, artist name, artwork type, materials and techniques, time periods, colors, and more.", "parameter": {}}, {"name": "get_artwork_details", "description": "Retrieve comprehensive information about specific artworks, including basic details, physical properties, historical context, visual information, curatorial information, and exhibition history.", "parameter": {}}, {"name": "get_artwork_image", "description": "Access high-resolution image data with deep zoom capabilities, including multiple zoom levels, tile-based image loading, full resolution support, and position information.", "parameter": {}}, {"name": "get_user_sets", "description": "Explore user-created collections, allowing users to browse curated sets, view thematic groupings, and analyze collection patterns.", "parameter": {}}, {"name": "get_user_set_details", "description": "Access detailed information about specific user-created collections.", "parameter": {}}, {"name": "open_image_in_browser", "description": "Open artwork images directly in the browser for detailed viewing.", "parameter": {}}, {"name": "get_artist_timeline", "description": "Generate chronological timelines of artists' works, tracking artistic development, analyzing periods and styles, and studying career progression.", "parameter": {}}]}
{"name": "Riot Games", "description": "MCP server for League of Legends – fetch player info, ranks, champion stats, and match history via Riot API.", "url": "https://github.com/jifrozen0110/mcp-riot", "readme_file": "community/Riot_Games.md", "summary": "A community-developed MCP server that integrates with the Riot Games API to provide League of Legends data to AI assistants via natural language queries. It enables AI models to retrieve player information, ranked stats, champion mastery, and recent match summaries.", "tools": [{"name": "get_player_summary", "description": "Summarizes level, rank, top champions, and recent matches.", "parameter": {}}, {"name": "get_top_champions_tool", "description": "Returns top champions by mastery points.", "parameter": {}}, {"name": "get_champion_mastery_tool", "description": "Returns mastery details for a specific champion.", "parameter": {}}, {"name": "get_recent_matches_tool", "description": "Returns recent matches for the given summoner.", "parameter": {}}, {"name": "get_match_summary", "description": "Returns match performance stats for a given match ID and puuid.", "parameter": {}}]}
{"name": "Scholarly", "description": "A MCP server to search for scholarly and academic articles.", "url": "https://github.com/adityak74/mcp-scholarly", "readme_file": "community/Scholarly.md", "summary": "A MCP server to search for accurate academic articles. It currently supports searching arXiv and plans to add more scholarly vendors.", "tools": [{"name": "search-arxiv", "description": "Search arXiv for articles related to the given keyword.", "parameter": {"keyword": "(string) The keyword to search for."}}]}
{"name": "scrapling-fetch", "description": "Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.", "url": "https://github.com/cyberchitta/scrapling-fetch-mcp", "readme_file": "community/scrapling-fetch.md", "summary": "An MCP server that helps AI assistants access text content from websites that implement bot detection, specifically optimized for low-volume retrieval of documentation and reference materials.", "tools": [{"name": "s-fetch-page", "description": "Retrieves complete web pages with pagination support.", "parameter": {"url": "(string) The URL of the web page to fetch.", "mode": "(string) The protection level to use ('basic', 'stealth', 'max-stealth').", "start_index": "(Optional, integer) The starting index for pagination.", "max_length": "(Optional, integer) The maximum length of content to retrieve."}}, {"name": "s-fetch-pattern", "description": "Extracts content matching regex patterns with surrounding context.", "parameter": {"url": "(string) The URL of the web page to fetch.", "mode": "(string) The protection level to use ('basic', 'stealth', 'max-stealth').", "search_pattern": "(string) The regex pattern to search for.", "context_chars": "(integer) The number of characters of context to include around matches."}}]}
{"name": "SearXNG", "description": "A Model Context Protocol Server for SearXNG", "url": "https://github.com/ihor-sokoliuk/mcp-searxng", "readme_file": "community/SearXNG.md", "summary": "An MCP server implementation that integrates the SearXNG API, providing web search capabilities with features such as general queries, news, articles, pagination, time filtering, language selection, and safe search.", "tools": [{"name": "searxng_web_search", "description": "Execute web searches with pagination", "parameter": {"query": "(string) The search query. This string is passed to external search services.", "pageno": "(Optional, number) Search page number, starts at 1 (default 1)", "time_range": "(Optional, string) Filter results by time range - one of: 'day', 'month', 'year' (default: none)", "language": "(Optional, string) Language code for results (e.g., 'en', 'fr', 'de') or 'all' (default: 'all')", "safesearch": "(Optional, number) Safe search filter level (0: None, 1: Moderate, 2: Strict) (default: instance setting)"}}, {"name": "web_url_read", "description": "Read and convert the content from a URL to markdown", "parameter": {"url": "(string) The URL to fetch and process"}}]}
{"name": "SEC EDGAR", "description": "(by Stefano Amorelli) A community Model Context Protocol Server to access financial filings and data through the U.S. Securities and Exchange Commission (SEC) `Electronic Data Gathering, Analysis, and Retrieval` (EDGAR) database", "url": "https://github.com/stefanoamorelli/sec-edgar-mcp", "readme_file": "community/SEC_EDGAR.md", "summary": "An open-source MCP server that connects AI models to the SEC EDGAR filings dataset, enabling AI assistants to retrieve financial data for research, investment insights, and corporate transparency use cases.", "tools": [{"name": "get_submissions", "description": "Fetch a company's submissions (filings history) by CIK.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company."}}, {"name": "get_company_concepts", "description": "Get a specific reported concept for a company by CIK, taxonomy, and tag.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company.", "taxonomy": "(string) The accounting taxonomy (e.g., us-gaap).", "tag": "(string) The specific financial concept tag (e.g., AccountsPayableCurrent)."}}, {"name": "get_company_facts", "description": "Retrieve all facts for a company (full XBRL fact set) by CIK.", "parameter": {"cik": "(string) The Central Index Key (CIK) of the company."}}, {"name": "get_xbrl_frames", "description": "Query XBRL frames (data across entities or time) by taxonomy, tag, unit, year, and quarter.", "parameter": {"taxonomy": "(string) The accounting taxonomy (e.g., us-gaap).", "tag": "(string) The specific financial concept tag (e.g., AccountsPayableCurrent).", "unit": "(string) The unit of measurement (e.g., USD).", "year": "(integer) The year of the data.", "quarter": "(integer) The quarter of the data (1-4)."}}]}
{"name": "ServiceNow", "description": "A MCP server to interact with a ServiceNow instance", "url": "https://github.com/osomai/servicenow-mcp", "readme_file": "community/ServiceNow.md", "summary": "An MCP server implementation for ServiceNow, enabling Claude to interact with ServiceNow instances through the ServiceNow API. It facilitates connecting to ServiceNow, querying and managing records, executing scripts, and accessing the Service Catalog.", "tools": [{"name": "create_incident", "description": "Create a new incident in ServiceNow", "parameter": {}}, {"name": "update_incident", "description": "Update an existing incident in ServiceNow", "parameter": {}}, {"name": "add_comment", "description": "Add a comment to an incident in ServiceNow", "parameter": {}}, {"name": "resolve_incident", "description": "Resolve an incident in ServiceNow", "parameter": {}}, {"name": "list_incidents", "description": "List incidents from ServiceNow", "parameter": {}}, {"name": "list_catalog_items", "description": "List service catalog items from ServiceNow", "parameter": {}}, {"name": "get_catalog_item", "description": "Get a specific service catalog item from ServiceNow", "parameter": {}}, {"name": "list_catalog_categories", "description": "List service catalog categories from ServiceNow", "parameter": {}}, {"name": "create_catalog_category", "description": "Create a new service catalog category in ServiceNow", "parameter": {}}, {"name": "update_catalog_category", "description": "Update an existing service catalog category in ServiceNow", "parameter": {}}, {"name": "move_catalog_items", "description": "Move catalog items between categories in ServiceNow", "parameter": {}}, {"name": "create_catalog_item_variable", "description": "Create a new variable (form field) for a catalog item", "parameter": {}}, {"name": "list_catalog_item_variables", "description": "List all variables for a catalog item", "parameter": {}}, {"name": "update_catalog_item_variable", "description": "Update an existing variable for a catalog item", "parameter": {}}, {"name": "list_catalogs", "description": "List service catalogs from ServiceNow", "parameter": {}}, {"name": "get_optimization_recommendations", "description": "Get recommendations for optimizing the service catalog", "parameter": {}}, {"name": "update_catalog_item", "description": "Update a service catalog item", "parameter": {}}, {"name": "create_change_request", "description": "Create a new change request in ServiceNow", "parameter": {}}, {"name": "update_change_request", "description": "Update an existing change request", "parameter": {}}, {"name": "list_change_requests", "description": "List change requests with filtering options", "parameter": {}}, {"name": "get_change_request_details", "description": "Get detailed information about a specific change request", "parameter": {}}, {"name": "add_change_task", "description": "Add a task to a change request", "parameter": {}}, {"name": "submit_change_for_approval", "description": "Submit a change request for approval", "parameter": {}}, {"name": "approve_change", "description": "Approve a change request", "parameter": {}}, {"name": "reject_change", "description": "Reject a change request", "parameter": {}}, {"name": "list_workflows", "description": "List workflows from ServiceNow", "parameter": {}}, {"name": "get_workflow", "description": "Get a specific workflow from ServiceNow", "parameter": {}}, {"name": "create_workflow", "description": "Create a new workflow in ServiceNow", "parameter": {}}, {"name": "update_workflow", "description": "Update an existing workflow in ServiceNow", "parameter": {}}, {"name": "delete_workflow", "description": "Delete a workflow from ServiceNow", "parameter": {}}, {"name": "list_script_includes", "description": "List script includes from ServiceNow", "parameter": {}}, {"name": "get_script_include", "description": "Get a specific script include from ServiceNow", "parameter": {}}, {"name": "create_script_include", "description": "Create a new script include in ServiceNow", "parameter": {}}, {"name": "update_script_include", "description": "Update an existing script include in ServiceNow", "parameter": {}}, {"name": "delete_script_include", "description": "Delete a script include from ServiceNow", "parameter": {}}, {"name": "list_changesets", "description": "List changesets from ServiceNow with filtering options", "parameter": {}}, {"name": "get_changeset_details", "description": "Get detailed information about a specific changeset", "parameter": {}}, {"name": "create_changeset", "description": "Create a new changeset in ServiceNow", "parameter": {}}, {"name": "update_changeset", "description": "Update an existing changeset", "parameter": {}}, {"name": "commit_changeset", "description": "Commit a changeset", "parameter": {}}, {"name": "publish_changeset", "description": "Publish a changeset", "parameter": {}}, {"name": "add_file_to_changeset", "description": "Add a file to a changeset", "parameter": {}}, {"name": "create_knowledge_base", "description": "Create a new knowledge base in ServiceNow", "parameter": {}}, {"name": "list_knowledge_bases", "description": "List knowledge bases with filtering options", "parameter": {}}, {"name": "create_category", "description": "Create a new category in a knowledge base", "parameter": {}}, {"name": "create_article", "description": "Create a new knowledge article in ServiceNow", "parameter": {}}, {"name": "update_article", "description": "Update an existing knowledge article in ServiceNow", "parameter": {}}, {"name": "publish_article", "description": "Publish a knowledge article in ServiceNow", "parameter": {}}, {"name": "list_articles", "description": "List knowledge articles with filtering options", "parameter": {}}, {"name": "get_article", "description": "Get a specific knowledge article by ID", "parameter": {}}, {"name": "create_user", "description": "Create a new user in ServiceNow", "parameter": {}}, {"name": "update_user", "description": "Update an existing user in ServiceNow", "parameter": {}}, {"name": "get_user", "description": "Get a specific user by ID, username, or email", "parameter": {}}, {"name": "list_users", "description": "List users with filtering options", "parameter": {}}, {"name": "create_group", "description": "Create a new group in ServiceNow", "parameter": {}}, {"name": "update_group", "description": "Update an existing group in ServiceNow", "parameter": {}}, {"name": "add_group_members", "description": "Add members to a group in ServiceNow", "parameter": {}}, {"name": "remove_group_members", "description": "Remove members from a group in ServiceNow", "parameter": {}}, {"name": "list_groups", "description": "List groups with filtering options", "parameter": {}}, {"name": "create_ui_policy", "description": "Creates a ServiceNow UI Policy, typically for a Catalog Item", "parameter": {}}, {"name": "create_ui_policy_action", "description": "Creates an action associated with a UI Policy to control variable states (visibility, mandatory, etc.)", "parameter": {}}, {"name": "list_tool_packages", "description": "Lists all available tool package names defined in the configuration and shows the currently loaded package", "parameter": {}}]}
{"name": "Shopify", "description": "MCP to interact with Shopify API including order, product, customers and so on.", "url": "https://github.com/GeLi2001/shopify-mcp", "readme_file": "community/Shopify.md", "summary": "MCP Server for Shopify API, enabling interaction with store data through GraphQL API. Provides tools for managing products, customers, and orders.", "tools": [{"name": "get-products", "description": "Get all products or search by title", "parameter": {"searchTitle": "(optional string) Filter products by title", "limit": "(number) Maximum number of products to return"}}, {"name": "get-product-by-id", "description": "Get a specific product by ID", "parameter": {"productId": "(string) ID of the product to retrieve"}}, {"name": "get-customers", "description": "Get customers or search by name/email", "parameter": {"searchQuery": "(optional string) Filter customers by name or email", "limit": "(optional number, default: 10) Maximum number of customers to return"}}, {"name": "update-customer", "description": "Update a customer's information", "parameter": {"id": "(string, required) Shopify customer ID (numeric ID only, like \"6276879810626\")", "firstName": "(string, optional) Customer's first name", "lastName": "(string, optional) Customer's last name", "email": "(string, optional) Customer's email address", "phone": "(string, optional) Customer's phone number", "tags": "(array of strings, optional) Tags to apply to the customer", "note": "(string, optional) Note about the customer", "taxExempt": "(boolean, optional) Whether the customer is exempt from taxes", "metafields": "(array of objects, optional) Customer metafields for storing additional data"}}, {"name": "get-customer-orders", "description": "Get orders for a specific customer", "parameter": {"customerId": "(string, required) Shopify customer ID (numeric ID only, like \"6276879810626\")", "limit": "(optional number, default: 10) Maximum number of orders to return"}}, {"name": "get-orders", "description": "Get orders with optional filtering", "parameter": {"status": "(optional string) Filter by order status", "limit": "(optional number, default: 10) Maximum number of orders to return"}}, {"name": "get-order-by-id", "description": "Get a specific order by ID", "parameter": {"orderId": "(string, required) Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")"}}, {"name": "update-order", "description": "Update an existing order with new information", "parameter": {"id": "(string, required) Shopify order ID", "tags": "(array of strings, optional) New tags for the order", "email": "(string, optional) Update customer email", "note": "(string, optional) Order notes", "customAttributes": "(array of objects, optional) Custom attributes for the order", "metafields": "(array of objects, optional) Order metafields", "shippingAddress": "(object, optional) Shipping address information"}}]}
{"name": "Siri Shortcuts", "description": "MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.", "url": "https://github.com/dvcrn/mcp-server-siri-shortcuts", "readme_file": "community/Siri_Shortcuts.md", "summary": "This MCP server provides access to Siri shortcuts functionality via the Model Context Protocol (MCP). It allows listing, opening, and running shortcuts from the macOS Shortcuts app.", "tools": [{"name": "list_shortcuts", "description": "Lists all available Siri shortcuts on the system", "parameter": {}}, {"name": "open_shortcut", "description": "Opens a shortcut in the Shortcuts app", "parameter": {"name": "(string) Name of the shortcut to open"}}, {"name": "run_shortcut", "description": "Runs a shortcut with optional input", "parameter": {"name": "(string) Name of the shortcut to run", "input": "(Optional, string) Text input or filepath to pass to the shortcut"}}]}
{"name": "Slack", "description": "The most powerful MCP server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins 😏.", "url": "https://github.com/korotovsky/slack-mcp-server", "readme_file": "community/Slack.md", "summary": "A Model Context Protocol (MCP) server for integrating with Slack Workspaces, supporting Stdio and SSE transports without requiring permissions or bot approvals.", "tools": [{"name": "conversations_history", "description": "Get messages from the channel by channelID", "parameter": {"channel_id": "(string) ID of the channel in format Cxxxxxxxxxx.", "cursor": "(string) Cursor for pagination. Use the value of the last row and column in the response as next_cursor field returned from the previous request.", "limit": "(number, default: 28) Limit of messages to fetch."}}, {"name": "channels_list", "description": "Get list of channels", "parameter": {"channel_types": "(array) Possible channel types. Allowed values: 'mpim', 'im', 'public_channel', 'private_channel'.", "sort": "(string) Type of sorting. Allowed values: 'popularity' - sort by number of members/participants in each channel."}}]}
{"name": "Snowflake", "description": "This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.", "url": "https://github.com/isaacwasserman/mcp-snowflake-server", "readme_file": "community/Snowflake.md", "summary": "A Model Context Protocol (MCP) server implementation that provides database interaction with Snowflake, enabling running SQL queries and exposing data insights and schema context.", "tools": [{"name": "read_query", "description": "Execute SELECT queries to read data from the database.", "parameter": {"query": "(string) The SELECT SQL query to execute"}}, {"name": "write_query", "description": "Execute INSERT, UPDATE, or DELETE queries.", "parameter": {"query": "(string) The SQL modification query"}}, {"name": "create_table", "description": "Create new tables in the database.", "parameter": {"query": "(string) CREATE TABLE SQL statement"}}, {"name": "list_databases", "description": "List all databases in the Snowflake instance.", "parameter": {}}, {"name": "list_schemas", "description": "List all schemas within a specific database.", "parameter": {"database": "(string) Name of the database"}}, {"name": "list_tables", "description": "List all tables within a specific database and schema.", "parameter": {"database": "(string) Name of the database", "schema": "(string) Name of the schema"}}, {"name": "describe_table", "description": "View column information for a specific table.", "parameter": {"table_name": "(string) Fully qualified table name (database.schema.table)"}}, {"name": "append_insight", "description": "Add new data insights to the memo resource.", "parameter": {"insight": "(string) Data insight discovered from analysis"}}]}
{"name": "Solver", "description": "Solves constraint satisfaction and optimization problems .", "url": "https://github.com/szeider/mcp-solver", "readme_file": "community/Solver.md", "summary": "A Model Context Protocol (MCP) server that integrates SAT, SMT, and constraint solving capabilities with Large Language Models, enabling interactive creation, editing, and solving of constraint models in MiniZinc, SAT models in PySAT, and SMT formulas in Z3 Python.", "tools": [{"name": "clear_model", "description": "Remove all items from the model", "parameter": {}}, {"name": "add_item", "description": "Add new item at a specific index", "parameter": {}}, {"name": "delete_item", "description": "Delete item at index", "parameter": {}}, {"name": "replace_item", "description": "Replace item at index", "parameter": {}}, {"name": "get_model", "description": "Get current model content with numbered items", "parameter": {}}, {"name": "solve_model", "description": "Solve the model (with timeout parameter)", "parameter": {"timeout": "(Optional, int) Maximum time allowed for solving the model in seconds"}}]}
{"name": "SoccerDataAPI", "description": "This MCP server provides real-time football match data based on the SoccerDataAPI.", "url": "https://github.com/yeonupark/mcp-soccer-data", "readme_file": "community/SoccerDataAPI.md", "summary": "An open-source MCP server that connects to the SoccerDataAPI to deliver up-to-date football match information via natural language interactions. It provides real-time insights, match listings, detailed match information, key events, team lineups, odds, and league metadata for live, upcoming, and recently finished matches.", "tools": [{"name": "get_livescores", "description": "Returns real-time information about ongoing football matches around the world.", "parameter": {}}]}
{"name": "Solana Agent Kit", "description": "This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing", "url": "https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server", "readme_file": "community/Solana_Agent_Kit.md", "summary": "An open-source toolkit for connecting AI agents to Solana protocols, enabling them to perform a wide range of Solana actions including token operations, NFT management, DeFi integrations, and market data retrieval.", "tools": [{"name": "deployToken", "description": "Deploys a new SPL token.", "parameter": {"name": "(string) Name of the token", "uri": "(string) URI for the token metadata", "symbol": "(string) Symbol of the token", "decimals": "(number) Number of decimal places", "mintAuthority": "(Optional, PublicKey) Mint authority (defaults to deployer account)", "freezeAuthority": "(Optional, PublicKey) Freeze authority (defaults to deployer account)", "updateAuthority": "(Optional, PublicKey) Update authority (defaults to deployer account)", "isMutable": "(Optional, boolean) Whether the metadata is mutable (defaults to true)", "initialSupply": "(number) Initial supply of the token"}}, {"name": "getWormholeSupportedChains", "description": "Gets the list of supported chains using Wormhole.", "parameter": {}}, {"name": "createWrappedToken", "description": "Creates a wrapped token on a target chain using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "tokenAddress": "(string) Original token address", "network": "(string) Network type (Testnet or Mainnet)"}}, {"name": "cctpTransfer", "description": "Performs a CCTP transfer using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "transferAmount": "(string) Amount to transfer", "network": "(string) Network type (Testnet or Mainnet)"}}, {"name": "tokenTransfer", "description": "Transfers an SPL token using Wormhole.", "parameter": {"destinationChain": "(string) Target chain", "tokenAddress": "(string) Original token address or leave it empty to transfer Native SOL", "network": "(string) Network type (Testnet or Mainnet)"}}, {"name": "create3LandCollection", "description": "Creates a new NFT collection on 3Land.", "parameter": {"collectionOpts": "(CreateCollectionOptions) Options for the collection", "isDevnet": "(Optional, boolean) Whether to use devnet (defaults to false)", "priorityFeeParam": "(Optional, number) Priority fee (defaults to 50000)"}}, {"name": "create3LandNft", "description": "Creates a new NFT on 3Land.", "parameter": {"collectionAccount": "(string) Hash for the collection", "createItemOptions": "(CreateSingleOptions) Options for the NFT", "isDevnet": "(Optional, boolean) Whether to use devnet (defaults to false)", "withPool": "(Optional, boolean) Whether to create with a liquidity pool", "priorityFeeParam": "(Optional, number) Priority fee (defaults to 50000)"}}, {"name": "deployCollection", "description": "Deploys a new NFT collection.", "parameter": {"name": "(string) Name of the collection", "uri": "(string) URI for the collection metadata", "royaltyBasisPoints": "(number) Royalty basis points", "creators": "(Creator[]) Array of creator objects"}}, {"name": "trade", "description": "Swaps tokens using a DEX.", "parameter": {"targetTokenMint": "(PublicKey) Target token mint", "amount": "(number) Amount to trade", "sourceTokenMint": "(PublicKey) Source token mint", "slippage": "(number) Slippage tolerance"}}, {"name": "lendAssets", "description": "Lends assets to a lending protocol.", "parameter": {"amount": "(number) Amount of USDC to lend"}}, {"name": "stake", "description": "Stakes SOL.", "parameter": {"amount": "(number) Amount in SOL to stake"}}, {"name": "restake", "description": "Restakes SOL on Solayer.", "parameter": {"amount": "(number) Amount in SOL to stake"}}, {"name": "sendCompressedAirdrop", "description": "Sends a compressed airdrop using ZK compression.", "parameter": {"mint": "(PublicKey) Token mint", "amountPerRecipient": "(number) Amount per recipient", "recipients": "(PublicKey[]) Array of recipient public keys", "priorityFee": "(number) Priority fee in lamports"}}, {"name": "getPythPriceFeedID", "description": "Gets the Pyth price feed ID for a given asset.", "parameter": {"asset": "(string) Asset symbol"}}, {"name": "getPythPrice", "description": "Fetches the price from a Pyth price feed.", "parameter": {"priceFeedID": "(string) Pyth price feed ID"}}, {"name": "openPerpTradeLong", "description": "Opens a long perpetual trade.", "parameter": {"price": "(number) Maximum price", "collateralAmount": "(number) Collateral amount", "collateralMint": "(PublicKey) Collateral mint", "leverage": "(number) Leverage", "tradeMint": "(PublicKey) Trade mint", "slippage": "(number) Slippage tolerance"}}, {"name": "closePerpTradeLong", "description": "Closes a long perpetual trade.", "parameter": {"price": "(number) Price", "tradeMint": "(PublicKey) Trade mint"}}, {"name": "closeEmptyTokenAccounts", "description": "Closes empty token accounts.", "parameter": {}}, {"name": "createDriftUserAccount", "description": "Creates a new Drift user account.", "parameter": {}}, {"name": "createDriftVault", "description": "Creates a new Drift vault.", "parameter": {"name": "(string) Name of the vault", "marketName": "(string) Market name", "redeemPeriod": "(number) Redemption period in days", "maxTokens": "(number) Maximum tokens", "minDepositAmount": "(number) Minimum deposit amount", "managementFee": "(number) Management fee in percentage", "profitShare": "(number) Profit share in percentage", "hurdleRate": "(number) Hurdle rate in percentage", "permissioned": "(boolean) Whether the vault is permissioned"}}, {"name": "depositIntoDriftVault", "description": "Deposits tokens into a Drift vault.", "parameter": {"amount": "(number) Amount to deposit", "vaultAddress": "(string) Vault address"}}, {"name": "depositToDriftUserAccount", "description": "Deposits tokens into a Drift user account.", "parameter": {"amount": "(number) Amount to deposit", "token": "(string) Token symbol", "isLoan": "(Optional, boolean) Whether the deposit is a loan (defaults to false)"}}, {"name": "deriveDriftVaultAddress", "description": "Derives the address of a Drift vault.", "parameter": {"name": "(string) Name of the vault"}}, {"name": "doesUserHaveDriftAccount", "description": "Checks if the user has a Drift account.", "parameter": {}}, {"name": "driftUserAccountInfo", "description": "Gets information about the Drift user account.", "parameter": {}}, {"name": "requestWithdrawalFromDriftVault", "description": "Requests a withdrawal from a Drift vault.", "parameter": {"amount": "(number) Amount to withdraw", "vaultAddress": "(string) Vault address"}}, {"name": "tradeUsingDelegatedDriftVault", "description": "Executes a trade using a delegated Drift vault.", "parameter": {"vault": "(string) Vault address", "amount": "(number) Trade amount", "symbol": "(string) Trade symbol", "action": "(string) Action (long or short)", "type": "(string) Order type (limit or market)", "price": "(number) Price"}}, {"name": "tradeUsingDriftPerpAccount", "description": "Executes a trade using the user's Drift perpetual account.", "parameter": {"amount": "(number) Trade amount", "symbol": "(string) Trade symbol", "action": "(string) Action (long or short)", "type": "(string) Order type (limit or market)", "price": "(number) Price"}}, {"name": "updateDriftVault", "description": "Updates the parameters of a Drift vault.", "parameter": {"name": "(string) Name of the vault", "marketName": "(string) Market name", "redeemPeriod": "(number) Redemption period in days", "maxTokens": "(number) Maximum tokens", "minDepositAmount": "(number) Minimum deposit amount", "managementFee": "(number) Management fee in percentage", "profitShare": "(number) Profit share in percentage", "hurdleRate": "(number) Hurdle rate in percentage", "permissioned": "(boolean) Whether the vault is permissioned"}}, {"name": "withdrawFromDriftAccount", "description": "Withdraws tokens from the Drift user account.", "parameter": {"amount": "(number) Amount to withdraw", "token": "(string) Token symbol"}}, {"name": "withdrawFromDriftAccount", "description": "Withdraws tokens from the Drift user account.", "parameter": {"amount": "(number) Amount to withdraw", "token": "(string) Token symbol", "isLoan": "(Optional, boolean) Whether the withdrawal is a loan repayment (defaults to false)"}}, {"name": "withdrawFromDriftVault", "description": "Withdraws tokens from a Drift vault.", "parameter": {"vaultAddress": "(string) Vault address"}}, {"name": "updateDriftVaultDelegate", "description": "Updates the delegate address for a Drift vault.", "parameter": {"vaultAddress": "(string) Vault address", "newDelegate": "(string) New delegate address"}}, {"name": "voltrGetPositionValues", "description": "Gets the current position values and total value of assets in a Voltr vault.", "parameter": {"vaultAddress": "(string) Vault address"}}, {"name": "voltrDepositStrategy", "description": "Deposits assets into a specific strategy within a Voltr vault.", "parameter": {"amount": "(BN) Amount in base units", "vault": "(string) Vault address", "strategy": "(string) Strategy address"}}, {"name": "voltrWithdrawStrategy", "description": "Withdraws assets from a specific strategy within a Voltr vault.", "parameter": {"amount": "(BN) Amount in base units", "vault": "(string) Vault address", "strategy": "(string) Strategy address"}}, {"name": "getAsset", "description": "Gets a Solana asset by its ID.", "parameter": {"assetId": "(string) Asset ID"}}, {"name": "getPriceInference", "description": "Gets the price inference for a given token and timeframe from Allora.", "parameter": {"token": "(string) Token symbol", "timeframe": "(string) Timeframe (e.g., 5m, 1h)"}}, {"name": "getAllTopics", "description": "Lists all topics from Allora.", "parameter": {}}, {"name": "getInferenceByTopicId", "description": "Gets an inference for a specific topic from Allora.", "parameter": {"topicId": "(number) Topic ID"}}, {"name": "simulateSwitchboardFeed", "description": "Simulates a given Switchboard feed.", "parameter": {"feed": "(string) Feed ID", "oracleUrl": "(string) Oracle URL"}}, {"name": "swap", "description": "Executes a cross-chain token swap.", "parameter": {"amount": "(string) Amount to swap", "fromChain": "(string) Source chain", "fromToken": "(string) Source token address", "toChain": "(string) Destination chain", "toToken": "(string) Destination token address", "dstAddr": "(string) Destination address"}}, {"name": "getDebridgeSupportedChains", "description": "Gets the list of supported chains using deBridge.", "parameter": {}}, {"name": "getDebridgeTokensInfo", "description": "Gets information about tokens on a specific chain using deBridge.", "parameter": {"chainId": "(string) Chain ID", "token": "(string) Token symbol"}}, {"name": "createDebridgeOrder", "description": "Creates a deBridge order.", "parameter": {"srcChainId": "(string) Source chain ID", "srcChainTokenIn": "(string) Source token mint", "srcChainTokenInAmount": "(string) Amount of source token", "dstChainId": "(string) Destination chain ID", "dstChainTokenOut": "(string) Destination token mint", "dstChainTokenOutRecipient": "(string) Recipient address on destination chain"}}, {"name": "executeDebridgeOrder", "description": "Executes a deBridge order.", "parameter": {"txData": "(string) Transaction data"}}, {"name": "checkDebridgeTransactionStatus", "description": "Checks the status of a deBridge transaction.", "parameter": {"signature": "(string) Transaction signature"}}, {"name": "getTokenPriceData", "description": "Gets the price data for a list of tokens from CoinGecko.", "parameter": {"tokens": "(string[]) Array of token addresses"}}, {"name": "getTrendingTokens", "description": "Gets the list of trending tokens.", "parameter": {}}, {"name": "getLatestPools", "description": "Gets the list of latest pools.", "parameter": {}}, {"name": "getTokenInfo", "description": "Gets information about a specific token.", "parameter": {"tokenAddress": "(string) Token address"}}, {"name": "getTopGainers", "description": "Gets the list of top gainers for a given timeframe.", "parameter": {"timeframe": "(string) Timeframe (e.g., 24h, 7d)", "category": "(string) Category (e.g., all, stablecoins)"}}, {"name": "getTrendingPools", "description": "Gets the list of trending pools for a given timeframe.", "parameter": {"timeframe": "(string) Timeframe (e.g., 24h, 7d)"}}, {"name": "getTokens", "description": "Gets the list of supported tokens on OKX DEX.", "parameter": {}}, {"name": "getQuote", "description": "Gets a quote for a token swap on OKX DEX.", "parameter": {"fromTokenAddress": "(string) Source token address", "toTokenAddress": "(string) Destination token address", "amount": "(string) Amount to swap", "slippage": "(Optional, string) Slippage tolerance (defaults to 0.5%)"}}, {"name": "executeSwap", "description": "Executes a token swap on OKX DEX.", "parameter": {"fromTokenAddress": "(string) Source token address", "toTokenAddress": "(string) Destination token address", "amount": "(string) Amount to swap", "autoSlippage": "(Optional, boolean) Use auto slippage (defaults to false)", "slippage": "(Optional, string) Custom slippage (defaults to 0.1%)", "maxAutoSlippageBps": "(Optional, string) Maximum auto slippage in basis points (defaults to 100)", "userAddress": "(Optional, string) User wallet address"}}]}
{"name": "Starwind UI", "description": "This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.", "url": "https://github.com/Boston343/starwind-ui-mcp/", "readme_file": "community/Starwind_UI.md", "summary": "A TypeScript implementation of a Model Context Protocol (MCP) server for Starwind UI, providing tools to help developers work with Starwind UI components.", "tools": [{"name": "init_project", "description": "Initializes a new Starwind UI project", "parameter": {}}, {"name": "install_component", "description": "Generates installation commands for Starwind UI components", "parameter": {}}, {"name": "update_component", "description": "Generates update commands for Starwind UI components", "parameter": {}}, {"name": "get_documentation", "description": "Returns documentation links for Starwind UI components and guides", "parameter": {}}, {"name": "fetch_llm_data", "description": "Fetches LLM data from starwind.dev (rate limited, with caching)", "parameter": {}}, {"name": "get_package_manager", "description": "Detects and returns the current package manager information", "parameter": {}}]}
{"name": "Strava", "description": "Connect to the Strava API to access activity data, athlete profiles, segments, and routes, enabling fitness tracking and analysis with Claude.", "url": "https://github.com/r-huijts/strava-mcp", "readme_file": "community/Strava.md", "summary": "A Model Context Protocol (MCP) server implemented in TypeScript that acts as a bridge to the Strava API, exposing Strava data and functionalities for use by Large Language Models (LLMs).", "tools": [{"name": "get-recent-activities", "description": "Fetches the authenticated user's recent activities.", "parameter": {"perPage": "(Optional, number) Number of activities to retrieve. Default: 30"}}, {"name": "get-athlete-profile", "description": "Fetches the profile information for the authenticated athlete.", "parameter": {}}, {"name": "get-athlete-stats", "description": "Fetches activity statistics (recent, YTD, all-time) for the authenticated athlete.", "parameter": {}}, {"name": "get-activity-details", "description": "Fetches detailed information about a specific activity using its ID.", "parameter": {"activityId": "(Required, number) The unique identifier of the activity."}}, {"name": "list-athlete-clubs", "description": "Lists the clubs the authenticated athlete is a member of.", "parameter": {}}, {"name": "list-starred-segments", "description": "Lists the segments starred by the authenticated athlete.", "parameter": {}}, {"name": "get-segment", "description": "Fetches detailed information about a specific segment using its ID.", "parameter": {"segmentId": "(Required, number) The unique identifier of the segment."}}, {"name": "explore-segments", "description": "Searches for popular segments within a given geographical area (bounding box).", "parameter": {"bounds": "(Required, string) Comma-separated: south_west_lat,south_west_lng,north_east_lat,north_east_lng.", "activityType": "(Optional, string) Filter by activity type ('running' or 'riding').", "minCat": "(Optional, number) Minimum climb category. Requires activityType: 'riding'.", "maxCat": "(Optional, number) Maximum climb category. Requires activityType: 'riding'."}}, {"name": "star-segment", "description": "Stars or unstars a specific segment for the authenticated athlete.", "parameter": {"segmentId": "(Required, number) The unique identifier of the segment.", "starred": "(Required, boolean) true to star, false to unstar."}}, {"name": "get-segment-effort", "description": "Fetches detailed information about a specific segment effort using its ID.", "parameter": {"effortId": "(Required, number) The unique identifier of the segment effort."}}, {"name": "list-segment-efforts", "description": "Lists the authenticated athlete's efforts on a given segment, optionally filtered by date.", "parameter": {"segmentId": "(Required, number) The ID of the segment.", "startDateLocal": "(Optional, string) Filter efforts starting after this date-time (ISO 8601 format).", "endDateLocal": "(Optional, string) Filter efforts ending before this date-time (ISO 8601 format).", "perPage": "(Optional, number) Number of results per page. Default: 30"}}, {"name": "list-athlete-routes", "description": "Lists the routes created by the authenticated athlete.", "parameter": {"page": "(Optional, number) Page number for pagination.", "perPage": "(Optional, number) Number of routes per page. Default: 30"}}, {"name": "get-route", "description": "Fetches detailed information for a specific route using its ID.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}}, {"name": "export-route-gpx", "description": "Exports a specific route in GPX format and saves it locally.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}}, {"name": "export-route-tcx", "description": "Exports a specific route in TCX format and saves it locally.", "parameter": {"routeId": "(Required, number) The unique identifier of the route."}}, {"name": "get-activity-streams", "description": "Retrieves detailed time-series data streams from a Strava activity.", "parameter": {"id": "(Required, number | string) The Strava activity identifier to fetch streams for.", "types": "(Optional, array) Types of streams to fetch. Default: ['time', 'distance', 'heartrate', 'cadence', 'watts'].", "resolution": "(Optional, string) Data resolution/density. Values: 'low', 'medium', 'high'.", "series_type": "(Optional, string) Base series type for data point indexing. Default: 'distance'.", "page": "(Optional, number) Page number for paginated results. Default: 1.", "points_per_page": "(Optional, number) Number of data points per page. Default: 100. Special value: -1 returns ALL data points split into multiple messages."}}, {"name": "get-activity-laps", "description": "Retrieves the laps recorded for a specific Strava activity.", "parameter": {"id": "(Required, number | string) The unique identifier of the Strava activity."}}, {"name": "get-athlete-zones", "description": "Retrieves the authenticated athlete's configured heart rate and power zones.", "parameter": {}}]}
{"name": "Stripe", "description": "This MCP allows integration with Stripe for handling payments, customers, and refunds.", "url": "https://github.com/atharvagupta2003/mcp-stripe", "readme_file": "community/Stripe.md", "summary": "A Model Context Protocol (MCP) server implementation that integrates with Stripe for handling payments, customers, and refunds. It provides a structured API to manage financial transactions securely and includes features like secure payments, audit logging, comprehensive error handling, and MCP integration.", "tools": [{"name": "customer_create", "description": "Create a new customer", "parameter": {"email": "(string) The email address of the customer", "name": "(string) The name of the customer"}}, {"name": "customer_retrieve", "description": "Retrieve a customer's details", "parameter": {"customer_id": "(string) The ID of the customer to retrieve"}}, {"name": "customer_update", "description": "Update customer information", "parameter": {}}, {"name": "payment_intent_create", "description": "Create a payment intent for processing payments", "parameter": {"amount": "(integer) The amount to charge in the smallest currency unit", "currency": "(string) The currency code (e.g., 'usd')", "customer": "(string) The ID of the customer to associate with the payment intent"}}, {"name": "charge_list", "description": "List recent charges", "parameter": {}}, {"name": "refund_create", "description": "Create a refund for a charge", "parameter": {"charge_id": "(string) The ID of the charge to refund"}}]}
{"name": "ShaderToy", "description": "This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.", "url": "https://github.com/wilsonchenghy/ShaderToy-MCP", "readme_file": "community/ShaderToy.md", "summary": "MCP Server for ShaderToy that connects LLMs like Claude with ShaderToy, enabling them to query and read the entire web page to generate complex shaders.", "tools": [{"name": "get_shader_info", "description": "Retrieves information on any shader on ShaderToy.", "parameter": {}}, {"name": "search_shader", "description": "Searches for shaders available on ShaderToy through a search prompt.", "parameter": {}}]}
{"name": "Talk To Figma", "description": "This MCP server enables LLMs to interact with Figma, allowing them to read and modify designs programmatically.", "url": "https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp", "readme_file": "community/Talk_To_Figma.md", "summary": "A Model Context Protocol (MCP) integration between Cursor AI and Figma, enabling Cursor to communicate with Figma for reading designs and modifying them programmatically.", "tools": [{"name": "get_document_info", "description": "Get information about the current Figma document", "parameter": {}}, {"name": "get_selection", "description": "Get information about the current selection", "parameter": {}}, {"name": "read_my_design", "description": "Get detailed node information about the current selection without parameters", "parameter": {}}, {"name": "get_node_info", "description": "Get detailed information about a specific node", "parameter": {}}, {"name": "get_nodes_info", "description": "Get detailed information about multiple nodes by providing an array of node IDs", "parameter": {}}, {"name": "get_annotations", "description": "Get all annotations in the current document or specific node", "parameter": {}}, {"name": "set_annotation", "description": "Create or update an annotation with markdown support", "parameter": {}}, {"name": "set_multiple_annotations", "description": "Batch create/update multiple annotations efficiently", "parameter": {}}, {"name": "scan_nodes_by_types", "description": "Scan for nodes with specific types (useful for finding annotation targets)", "parameter": {}}, {"name": "get_reactions", "description": "Get all prototype reactions from nodes with visual highlight animation", "parameter": {}}, {"name": "set_default_connector", "description": "Set a copied FigJam connector as the default connector style for creating connections (must be set before creating connections)", "parameter": {}}, {"name": "create_connections", "description": "Create FigJam connector lines between nodes, based on prototype flows or custom mapping", "parameter": {}}, {"name": "create_rectangle", "description": "Create a new rectangle with position, size, and optional name", "parameter": {}}, {"name": "create_frame", "description": "Create a new frame with position, size, and optional name", "parameter": {}}, {"name": "create_text", "description": "Create a new text node with customizable font properties", "parameter": {}}, {"name": "scan_text_nodes", "description": "Scan text nodes with intelligent chunking for large designs", "parameter": {}}, {"name": "set_text_content", "description": "Set the text content of a single text node", "parameter": {}}, {"name": "set_multiple_text_contents", "description": "Batch update multiple text nodes efficiently", "parameter": {}}, {"name": "set_layout_mode", "description": "Set the layout mode and wrap behavior of a frame (NONE, HORIZONTAL, VERTICAL)", "parameter": {}}, {"name": "set_padding", "description": "Set padding values for an auto-layout frame (top, right, bottom, left)", "parameter": {}}, {"name": "set_axis_align", "description": "Set primary and counter axis alignment for auto-layout frames", "parameter": {}}, {"name": "set_layout_sizing", "description": "Set horizontal and vertical sizing modes for auto-layout frames (FIXED, HUG, FILL)", "parameter": {}}, {"name": "set_item_spacing", "description": "Set distance between children in an auto-layout frame", "parameter": {}}, {"name": "set_fill_color", "description": "Set the fill color of a node (RGBA)", "parameter": {}}, {"name": "set_stroke_color", "description": "Set the stroke color and weight of a node", "parameter": {}}, {"name": "set_corner_radius", "description": "Set the corner radius of a node with optional per-corner control", "parameter": {}}, {"name": "move_node", "description": "Move a node to a new position", "parameter": {}}, {"name": "resize_node", "description": "Resize a node with new dimensions", "parameter": {}}, {"name": "delete_node", "description": "Delete a node", "parameter": {}}, {"name": "delete_multiple_nodes", "description": "Delete multiple nodes at once efficiently", "parameter": {}}, {"name": "clone_node", "description": "Create a copy of an existing node with optional position offset", "parameter": {}}, {"name": "get_styles", "description": "Get information about local styles", "parameter": {}}, {"name": "get_local_components", "description": "Get information about local components", "parameter": {}}, {"name": "create_component_instance", "description": "Create an instance of a component", "parameter": {}}, {"name": "get_instance_overrides", "description": "Extract override properties from a selected component instance", "parameter": {}}, {"name": "set_instance_overrides", "description": "Apply extracted overrides to target instances", "parameter": {}}, {"name": "export_node_as_image", "description": "Export a node as an image (PNG, JPG, SVG, or PDF) - limited support on image currently returning base64 as text", "parameter": {}}, {"name": "join_channel", "description": "Join a specific channel to communicate with Figma", "parameter": {}}]}
{"name": "TMDB", "description": "This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.", "url": "https://github.com/Laksh-star/mcp-server-tmdb", "readme_file": "community/TMDB.md", "summary": "This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.", "tools": [{"name": "search_movies", "description": "Search for movies by title or keywords", "parameter": {"query": "(string) Search query"}}, {"name": "get_recommendations", "description": "Get movie recommendations based on a movie ID", "parameter": {"movieId": "(string) TMDB movie ID"}}, {"name": "get_trending", "description": "Get trending movies for a specified time window", "parameter": {"timeWindow": "(string) Either 'day' or 'week'"}}]}
{"name": "Tavily search", "description": "An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions", "url": "https://github.com/RamXX/mcp-tavily", "readme_file": "community/Tavily_search.md", "summary": "A Model Context Protocol server that provides AI-powered web search capabilities using Tavily's search API. It enables LLMs to perform sophisticated web searches, get direct answers to questions, and search recent news articles with AI-extracted relevant content.", "tools": [{"name": "tavily_web_search", "description": "Performs comprehensive web searches with AI-powered content extraction.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "search_depth": "(string, optional) Either 'basic' or 'advanced' search depth (default: 'basic')", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}}, {"name": "tavily_answer_search", "description": "Performs web searches and generates direct answers with supporting evidence.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "search_depth": "(string, optional) Either 'basic' or 'advanced' search depth (default: 'advanced')", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}}, {"name": "tavily_news_search", "description": "Searches recent news articles with publication dates.", "parameter": {"query": "(string, required) Search query", "max_results": "(integer, optional) Maximum number of results to return (default: 5, max: 20)", "days": "(integer, optional) Number of days back to search (default: 3)", "include_domains": "(list or string, optional) List of domains to specifically include in results", "exclude_domains": "(list or string, optional) List of domains to exclude from results"}}]}
{"name": "Telegram", "description": "An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.", "url": "https://github.com/chigwell/telegram-mcp", "readme_file": "community/Telegram.md", "summary": "A full-featured Telegram integration for Claude, Cursor, and any MCP-compatible client, powered by Telethon and the Model Context Protocol (MCP). This project allows you to interact with your Telegram account programmatically, automating tasks from messaging to group management.", "tools": [{"name": "get_chats", "description": "Get a paginated list of chats.", "parameter": {"page": "(int) Page number (1-indexed)", "page_size": "(int) Number of chats per page"}}, {"name": "list_chats", "description": "List chats with metadata and filtering.", "parameter": {"chat_type": "(str) Type of chat (e.g., 'private', 'group', 'channel')", "limit": "(int) Maximum number of chats to return"}}, {"name": "get_chat", "description": "Get detailed info about a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "create_group", "description": "Create a new group.", "parameter": {"title": "(str) Title of the group", "user_ids": "(list of int) List of user IDs to add to the group"}}, {"name": "create_channel", "description": "Create a channel or supergroup.", "parameter": {"title": "(str) Title of the channel/supergroup", "about": "(str) Description of the channel/supergroup", "megagroup": "(bool) Whether to create a supergroup"}}, {"name": "edit_chat_title", "description": "Change chat/group/channel title.", "parameter": {"chat_id": "(int) ID of the chat", "title": "(str) New title"}}, {"name": "delete_chat_photo", "description": "Remove chat/group/channel photo.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "leave_chat", "description": "Leave a group or channel.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "get_participants", "description": "List all participants in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "get_admins", "description": "List all admins in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "get_banned_users", "description": "List all banned users in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "promote_admin", "description": "Promote user to admin.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to promote"}}, {"name": "demote_admin", "description": "Demote admin to user.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to demote"}}, {"name": "ban_user", "description": "Ban user from a chat.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to ban"}}, {"name": "unban_user", "description": "Unban user from a chat.", "parameter": {"chat_id": "(int) ID of the chat", "user_id": "(int) ID of the user to unban"}}, {"name": "get_invite_link", "description": "Get invite link for a group or channel.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "export_chat_invite", "description": "Export invite link for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "import_chat_invite", "description": "Join chat by invite hash.", "parameter": {"hash": "(str) Invite hash"}}, {"name": "join_chat_by_link", "description": "Join chat by invite link.", "parameter": {"link": "(str) Invite link"}}, {"name": "get_messages", "description": "Get paginated messages.", "parameter": {"chat_id": "(int) ID of the chat", "page": "(int) Page number (1-indexed)", "page_size": "(int) Number of messages per page"}}, {"name": "list_messages", "description": "List filtered messages.", "parameter": {"chat_id": "(int) ID of the chat", "limit": "(int) Maximum number of messages to return", "search_query": "(Optional, str) Search query", "from_date": "(Optional, datetime) Start date", "to_date": "(Optional, datetime) End date"}}, {"name": "send_message", "description": "Send a message to a specific chat.", "parameter": {"chat_id": "(int) ID of the chat", "message": "(str) Message content to send"}}, {"name": "reply_to_message", "description": "Reply to a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to reply to", "text": "(str) Reply text"}}, {"name": "edit_message", "description": "Edit a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to edit", "new_text": "(str) New message text"}}, {"name": "delete_message", "description": "Delete a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to delete"}}, {"name": "forward_message", "description": "Forward a message.", "parameter": {"from_chat_id": "(int) ID of the chat to forward from", "message_id": "(int) ID of the message to forward", "to_chat_id": "(int) ID of the chat to forward to"}}, {"name": "pin_message", "description": "Pin a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to pin"}}, {"name": "unpin_message", "description": "Unpin a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message to unpin"}}, {"name": "mark_as_read", "description": "Mark all messages as read in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "get_message_context", "description": "Get context around a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message", "context_size": "(int) Number of messages before and after the message"}}, {"name": "get_history", "description": "Get full chat history.", "parameter": {"chat_id": "(int) ID of the chat", "limit": "(int) Maximum number of messages to return"}}, {"name": "get_pinned_messages", "description": "List pinned messages in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "get_last_interaction", "description": "Get the most recent message with a contact.", "parameter": {"contact_id": "(int) ID of the contact"}}, {"name": "list_contacts", "description": "List all contacts.", "parameter": {}}, {"name": "search_contacts", "description": "Search contacts.", "parameter": {"query": "(str) Search query"}}, {"name": "add_contact", "description": "Add a contact.", "parameter": {"phone": "(str) Phone number of the contact", "first_name": "(str) First name of the contact", "last_name": "(Optional, str) Last name of the contact"}}, {"name": "delete_contact", "description": "Delete a contact.", "parameter": {"user_id": "(int) ID of the contact"}}, {"name": "block_user", "description": "Block a user.", "parameter": {"user_id": "(int) ID of the user to block"}}, {"name": "unblock_user", "description": "Unblock a user.", "parameter": {"user_id": "(int) ID of the user to unblock"}}, {"name": "import_contacts", "description": "Bulk import contacts.", "parameter": {"contacts": "(list of dict) List of contact dictionaries"}}, {"name": "export_contacts", "description": "Export all contacts as JSON.", "parameter": {}}, {"name": "get_blocked_users", "description": "List blocked users.", "parameter": {}}, {"name": "get_contact_ids", "description": "List all contact IDs.", "parameter": {}}, {"name": "get_direct_chat_by_contact", "description": "Find direct chat with a contact.", "parameter": {"contact_query": "(str) Name, username, or phone number to search for"}}, {"name": "get_contact_chats", "description": "List all chats with a contact.", "parameter": {"contact_id": "(int) ID of the contact"}}, {"name": "get_me", "description": "Get your user info.", "parameter": {}}, {"name": "update_profile", "description": "Update your profile.", "parameter": {"first_name": "(str) New first name", "last_name": "(Optional, str) New last name", "about": "(Optional, str) New about text"}}, {"name": "delete_profile_photo", "description": "Remove your profile photo.", "parameter": {}}, {"name": "get_user_photos", "description": "Get a user's profile photos.", "parameter": {"user_id": "(int) ID of the user", "limit": "(int) Maximum number of photos to return"}}, {"name": "get_user_status", "description": "Get a user's online status.", "parameter": {"user_id": "(int) ID of the user"}}, {"name": "get_media_info", "description": "Get info about media in a message.", "parameter": {"chat_id": "(int) ID of the chat", "message_id": "(int) ID of the message"}}, {"name": "search_public_chats", "description": "Search public chats, channels, or bots by username or title.", "parameter": {"query": "(str) Search query"}}, {"name": "search_messages", "description": "Search messages in a chat.", "parameter": {"chat_id": "(int) ID of the chat", "query": "(str) Search query", "limit": "(int) Maximum number of messages to return"}}, {"name": "resolve_username", "description": "Resolve a username to ID.", "parameter": {"username": "(str) Username to resolve"}}, {"name": "get_sticker_sets", "description": "List sticker sets.", "parameter": {}}, {"name": "get_bot_info", "description": "Get info about a bot.", "parameter": {"bot_username": "(str) Username of the bot"}}, {"name": "set_bot_commands", "description": "Set bot commands (bot accounts only).", "parameter": {"bot_username": "(str) Username of the bot", "commands": "(list of dict) List of command dictionaries"}}, {"name": "get_privacy_settings", "description": "Get privacy settings.", "parameter": {}}, {"name": "set_privacy_settings", "description": "Set privacy settings.", "parameter": {"key": "(str) Setting key", "allow_users": "(list of int) List of user IDs to allow", "disallow_users": "(list of int) List of user IDs to disallow"}}, {"name": "mute_chat", "description": "Mute notifications for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "unmute_chat", "description": "Unmute notifications for a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "archive_chat", "description": "Archive a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "unarchive_chat", "description": "Unarchive a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}, {"name": "get_recent_actions", "description": "Get recent admin actions in a chat.", "parameter": {"chat_id": "(int) ID of the chat"}}]}
{"name": "Telegram-Client", "description": "A Telegram API bridge that manages user data, dialogs, messages, drafts, read status, and more for seamless interactions.", "url": "https://github.com/chaindead/telegram-mcp", "readme_file": "community/Telegram-Client.md", "summary": "A bridge between the Telegram API and AI assistants, enabling interaction with Telegram through the Model Context Protocol (MCP).", "tools": [{"name": "tg_me", "description": "Get current account information.", "parameter": {}}, {"name": "tg_dialogs", "description": "List dialogs with optional unread filter.", "parameter": {}}, {"name": "tg_read", "description": "Mark dialog as read.", "parameter": {}}, {"name": "tg_dialog", "description": "Retrieve messages from specific dialog.", "parameter": {}}, {"name": "tg_send", "description": "Send draft messages to any dialog.", "parameter": {}}]}
{"name": "Terminal-Control", "description": "A MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.", "url": "https://github.com/GongRzhe/terminal-controller-mcp", "readme_file": "community/Terminal-Control.md", "summary": "A Model Context Protocol (MCP) server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.", "tools": [{"name": "execute_command", "description": "Execute a terminal command and return its results.", "parameter": {"command": "(string) The command line command to execute", "timeout": "(Optional, int) Command timeout in seconds (default: 30)"}}, {"name": "get_command_history", "description": "Get recent command execution history.", "parameter": {"count": "(Optional, int) Number of recent commands to return (default: 10)"}}, {"name": "get_current_directory", "description": "Get the current working directory.", "parameter": {}}, {"name": "change_directory", "description": "Change the current working directory.", "parameter": {"path": "(string) Directory path to switch to"}}, {"name": "list_directory", "description": "List files and subdirectories in the specified directory.", "parameter": {"path": "(Optional, string) Directory path to list contents (default: current directory)"}}, {"name": "write_file", "description": "Write content to a file with overwrite or append options.", "parameter": {"path": "(string) Path to the file", "content": "(string) Content to write", "mode": "(Optional, string) Write mode ('overwrite' or 'append', default: 'overwrite')"}}, {"name": "read_file", "description": "Read content from a file with optional row selection.", "parameter": {"path": "(string) Path to the file", "start_row": "(Optional, int) Starting row to read from (0-based)", "end_row": "(Optional, int) Ending row to read to (0-based, inclusive)"}}, {"name": "insert_file_content", "description": "Insert content at specific row(s) in a file.", "parameter": {"path": "(string) Path to the file", "content": "(string) Content to insert", "row": "(Optional, int) Row number to insert at (0-based)", "rows": "(Optional, list) List of row numbers to insert at (0-based)"}}, {"name": "delete_file_content", "description": "Delete content at specific row(s) from a file.", "parameter": {"path": "(string) Path to the file", "row": "(Optional, int) Row number to delete (0-based)", "rows": "(Optional, list) List of row numbers to delete (0-based)"}}, {"name": "update_file_content", "description": "Update content at specific row(s) in a file.", "parameter": {"path": "(string) Path to the file", "content": "(string) New content to place at the specified row(s)", "row": "(Optional, int) Row number to update (0-based)", "rows": "(Optional, list) List of row numbers to update (0-based)"}}]}
{"name": "TFT-Match-Analyzer", "description": "MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.", "url": "https://github.com/GeLi2001/tft-mcp-server", "readme_file": "community/TFT-Match-Analyzer.md", "summary": "A Model Context Protocol (MCP) server for Team Fight Tactics (TFT) that provides access to TFT game data through various tools.", "tools": [{"name": "tft_match_history", "description": "Get TFT match history for the current player.", "parameter": {"count": "(Optional, number) Number of matches to retrieve. Defaults to 20", "start": "(Optional, number) Start index for pagination. Defaults to 0"}}, {"name": "tft_match_details", "description": "Get detailed information about a specific TFT match.", "parameter": {"matchId": "(required, string) The match ID to get details for"}}]}
{"name": "Ticketmaster", "description": "Search for events, venues, and attractions through the Ticketmaster Discovery API", "url": "https://github.com/delorenj/mcp-server-ticketmaster", "readme_file": "community/Ticketmaster.md", "summary": "A Model Context Protocol server that provides tools for discovering events, venues, and attractions through the Ticketmaster Discovery API. It supports flexible filtering and outputs structured JSON data or human-readable text.", "tools": [{"name": "search_ticketmaster", "description": "Searches for events, venues, or attractions using various filters.", "parameter": {"type": "(string) Type of search ('event', 'venue', or 'attraction')", "keyword": "(Optional, string) Search term", "startDate": "(Optional, string) Start date in YYYY-MM-DD format (for events)", "endDate": "(Optional, string) End date in YYYY-MM-DD format (for events)", "city": "(Optional, string) City name", "stateCode": "(Optional, string) State code (e.g., 'NY')", "countryCode": "(Optional, string) Country code (e.g., 'US')", "venueId": "(Optional, string) Specific venue ID", "attractionId": "(Optional, string) Specific attraction ID", "classificationName": "(Optional, string) Event category (e.g., 'Sports', 'Music')", "format": "(Optional, string) Output format ('json' or 'text', defaults to 'json')"}}]}
{"name": "TickTick", "description": "A Model Context Protocol (MCP) server designed to integrate with the TickTick task management platform, enabling intelligent context-aware task operations and automation.", "url": "https://github.com/alexarevalo9/ticktick-mcp-server", "readme_file": "community/TickTick.md", "summary": "MCP Server for the TickTick API, enabling task management, project organization, habit tracking, and more.", "tools": [{"name": "get_task_by_ids", "description": "Get a specific task by project ID and task ID", "parameter": {"projectId": "(string) Project identifier", "taskId": "(string) Task identifier"}}, {"name": "create_task", "description": "Create a new task in a project", "parameter": {"title": "(string) Task title", "projectId": "(string) Project id", "content": "(optional string) Task content", "desc": "(optional string) Task description", "isAllDay": "(optional boolean) Is all day task", "startDate": "(optional string) Task start date in 'yyyy-MM-dd'T'HH:mm:ssZ' format", "dueDate": "(optional string) Task due date in 'yyyy-MM-dd'T'HH:mm:ssZ' format", "timeZone": "(optional string) Task time zone (e.g., 'America/Los_Angeles')", "reminders": "(optional string[]) List of reminder triggers in iCalendar format", "repeatFlag": "(optional string) Task repeat flag in iCalendar format", "priority": "(optional number) Task priority (None: 0, Low: 1, Medium: 3, High: 5)", "sortOrder": "(optional string) Task sort order", "items": "(optional array) List of subtasks with:"}}, {"name": "update_task", "description": "Update an existing task", "parameter": {"taskId": "(string) Task identifier - Path", "id": "(string) Task identifier - Body", "projectId": "(string) Project id"}}, {"name": "complete_task", "description": "Mark a task as completed", "parameter": {"taskId": "(string) Task identifier", "projectId": "(string) Project identifier"}}, {"name": "delete_task", "description": "Delete a task from a project", "parameter": {"taskId": "(string) Task identifier", "projectId": "(string) Project identifier"}}, {"name": "get_user_projects", "description": "Get all projects for the authenticated user", "parameter": {}}, {"name": "get_project_by_id", "description": "Get a specific project by ID", "parameter": {"projectId": "(string) Project identifier"}}, {"name": "get_project_with_data", "description": "Get project details along with tasks and columns", "parameter": {"projectId": "(string) Project identifier"}}, {"name": "create_project", "description": "Create a new project", "parameter": {"name": "(string) Project name", "color": "(optional string) Project color (default: '#4772FA')", "viewMode": "(optional string) View mode ('list', 'kanban', 'timeline') (default: 'list')", "kind": "(optional string) Project kind ('TASK', 'NOTE') (default: 'TASK')"}}, {"name": "update_project", "description": "Update an existing project", "parameter": {"projectId": "(string) Project identifier", "name": "(optional string) Project name", "color": "(optional string) Project color", "sortOrder": "(optional number) Project sort order", "viewMode": "(optional string) View mode ('list', 'kanban', 'timeline')", "kind": "(optional string) Project kind ('TASK', 'NOTE')"}}, {"name": "delete_project", "description": "Delete a project", "parameter": {"projectId": "(string) Project identifier"}}]}
{"name": "Todoist", "description": "Interact with Todoist to manage your tasks.", "url": "https://github.com/abhiz123/todoist-mcp-server", "readme_file": "community/Todoist.md", "summary": "An MCP server that integrates Claude with Todoist, enabling natural language task management including creating, updating, completing, and deleting tasks, as well as smart task search and flexible filtering.", "tools": [{"name": "todoist_create_task", "description": "Create new tasks with various attributes.", "parameter": {"content": "(string) task title", "description": "(Optional, string) task description", "due date": "(Optional, string) due date", "priority level": "(Optional, number) priority level (1-4)"}}, {"name": "todoist_get_tasks", "description": "Retrieve and filter tasks.", "parameter": {"due date": "(Optional, string) filter by due date", "priority": "(Optional, number) filter by priority", "project": "(Optional, string) filter by project", "result limit": "(Optional, number) limit the number of results"}}, {"name": "todoist_update_task", "description": "Update existing tasks using natural language search.", "parameter": {"task name": "(string) partial name match to find the task", "content": "(Optional, string) new task title", "description": "(Optional, string) new task description", "due date": "(Optional, string) new due date", "priority": "(Optional, number) new priority level (1-4)"}}, {"name": "todoist_complete_task", "description": "Mark tasks as complete using natural language search.", "parameter": {"task name": "(string) partial name match to find the task"}}, {"name": "todoist_delete_task", "description": "Remove tasks using natural language search.", "parameter": {"task name": "(string) partial name match to find the task"}}]}
{"name": "Typesense", "description": "A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.", "url": "https://github.com/suhail-ak-s/mcp-typesense-server", "readme_file": "community/Typesense.md", "summary": "A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities, enabling LLMs to discover, search, and analyze data stored in Typesense collections.", "tools": [{"name": "typesense_query", "description": "Search for documents in Typesense collections with powerful filtering", "parameter": {"query_text": "(string) The query text to search for", "collection_name": "(string) The name of the collection to search", "search_fields": "(array) Fields to search within", "filters": "(object, optional) Filters to apply to the search", "sort_options": "(object, optional) Options for sorting results", "limit": "(number, optional) Maximum number of results to return"}}, {"name": "typesense_get_document", "description": "Retrieve specific documents by ID from collections", "parameter": {"collection_name": "(string) The name of the collection", "document_id": "(string) The ID of the document to retrieve"}}, {"name": "typesense_collection_stats", "description": "Get statistics about a Typesense collection", "parameter": {"collection_name": "(string) The name of the collection"}}, {"name": "analyze_collection", "description": "Analyze collection structure and contents", "parameter": {"collection_name": "(string) The name of the collection"}}, {"name": "search_suggestions", "description": "Get suggestions for effective search queries for a collection", "parameter": {"collection_name": "(string) The name of the collection"}}]}
{"name": "Travel Planner", "description": "Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.", "url": "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server", "readme_file": "community/Travel_Planner.md", "summary": "A Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. It enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.", "tools": [{"name": "searchPlaces", "description": "Search for places using Google Places API", "parameter": {"query": "(string) Search query for places", "location": "(optional) Latitude and longitude to bias results", "radius": "(optional) Search radius in meters"}}, {"name": "getPlaceDetails", "description": "Get detailed information about a specific place", "parameter": {"placeId": "(string) Google Place ID to retrieve details for"}}, {"name": "calculateRoute", "description": "Calculate route between two locations", "parameter": {"origin": "(string) Starting location", "destination": "(string) Ending location", "mode": "(optional) Travel mode (driving, walking, bicycling, transit)"}}, {"name": "getTimeZone", "description": "Get timezone information for a location", "parameter": {"location": "(string) Latitude and longitude coordinates", "timestamp": "(optional) Timestamp for time zone calculation"}}]}
{"name": "Unity Catalog", "description": "An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.", "url": "https://github.com/ognis1205/mcp-server-unitycatalog", "readme_file": "community/Unity_Catalog.md", "summary": "An MCP server for Unity Catalog that provides Unity Catalog Functions as MCP tools, enabling users to manage functions within catalogs and schemas.", "tools": [{"name": "uc_list_functions", "description": "Lists functions within the specified parent catalog and schema.", "parameter": {}}, {"name": "uc_get_function", "description": "Gets a function within a parent catalog and schema.", "parameter": {"name": "(string) The name of the function (not fully-qualified)."}}, {"name": "uc_create_function", "description": "Creates a function within a parent catalog and schema. WARNING: This API is experimental and will change in future versions.", "parameter": {"name": "(string) The name of the function (not fully-qualified).", "script": "(string) The Python script including the function to be registered."}}, {"name": "uc_delete_function", "description": "Deletes a function within a parent catalog and schema.", "parameter": {"name": "(string) The name of the function (not fully-qualified)."}}]}
{"name": "Unity3d Game Engine", "description": "An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.", "url": "https://github.com/CoderGamester/mcp-unity", "readme_file": "community/Unity3d_Game_Engine.md", "summary": "An implementation of the Model Context Protocol for Unity Editor, allowing AI assistants to interact with Unity projects. It provides a bridge between Unity and a Node.js server, enabling AI agents to execute various operations within the Unity Editor.", "tools": [{"name": "execute_menu_item", "description": "Executes Unity menu items (functions tagged with the MenuItem attribute)", "parameter": {"menuItemName": "(string) The name of the menu item to execute"}}, {"name": "select_gameobject", "description": "Selects game objects in the Unity hierarchy by path or instance ID", "parameter": {"pathOrId": "(string) The path or instance ID of the game object to select"}}, {"name": "update_component", "description": "Updates component fields on a GameObject or adds it to the GameObject if it does not contain the component", "parameter": {"gameObjectPath": "(string) The path of the GameObject", "componentType": "(string) The type of the component to update or add", "fields": "(object) A dictionary of field names and values to update"}}, {"name": "add_package", "description": "Installs new packages in the Unity Package Manager", "parameter": {"packageName": "(string) The name of the package to install"}}, {"name": "run_tests", "description": "Runs tests using the Unity Test Runner", "parameter": {"testMode": "(string) The test mode to run (e.g., 'EditMode', 'PlayMode')"}}, {"name": "send_console_log", "description": "Sends a console log to Unity", "parameter": {"message": "(string) The message to send to the Unity console"}}, {"name": "add_asset_to_scene", "description": "Adds an asset from the AssetDatabase to the Unity scene", "parameter": {"assetPath": "(string) The path of the asset to add"}}]}
{"name": "Unity Integration (Advanced)", "description": "Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.", "url": "https://github.com/quazaai/UnityMCPIntegration", "readme_file": "community/Unity_Integration_(Advanced).md", "summary": "A package that integrates Model Context Protocol (MCP) with Unity Editor, enabling AI assistants to interact with Unity projects in real-time. It provides tools for browsing and manipulating project files, accessing real-time information, executing C# code, monitoring logs, controlling play mode, and more.", "tools": [{"name": "get_editor_state", "description": "Get comprehensive information about the Unity project and editor state", "parameter": {}}, {"name": "get_current_scene_info", "description": "Get detailed information about the current scene", "parameter": {}}, {"name": "get_game_objects_info", "description": "Get information about specific GameObjects in the scene", "parameter": {}}, {"name": "execute_editor_command", "description": "Execute C# code directly in the Unity Editor", "parameter": {}}, {"name": "get_logs", "description": "Retrieve and filter Unity console logs", "parameter": {}}, {"name": "verify_connection", "description": "Check if there's an active connection to Unity Editor", "parameter": {}}, {"name": "read_file", "description": "Read contents of a file in your Unity project", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder"}}, {"name": "read_multiple_files", "description": "Read multiple files at once", "parameter": {}}, {"name": "write_file", "description": "Create or overwrite a file with new content", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder", "content": "(string) Content to write to the file"}}, {"name": "edit_file", "description": "Make targeted edits to existing files with diff preview", "parameter": {"path": "(string) Path to the file, can be absolute or relative to the Unity project's Assets folder", "edits": "(array) Array of edit objects, each containing oldText and newText", "dryRun": "(Optional, boolean) Whether to perform a dry run without applying changes"}}, {"name": "list_directory", "description": "Get a listing of files and folders in a directory", "parameter": {"path": "(string) Path to the directory, can be absolute or relative to the Unity project's Assets folder"}}, {"name": "directory_tree", "description": "Get a hierarchical view of directories and files", "parameter": {}}, {"name": "search_files", "description": "Find files matching a search pattern", "parameter": {"pattern": "(string) Search pattern to match file names"}}, {"name": "get_file_info", "description": "Get metadata about a specific file or directory", "parameter": {"path": "(string) Path to the file or directory, can be absolute or relative to the Unity project's Assets folder"}}, {"name": "find_assets_by_type", "description": "Find all assets of a specific type (e.g., Material, Prefab)", "parameter": {"assetType": "(string) Type of asset to find"}}, {"name": "list_scripts", "description": "Get a listing of all C# scripts in the project", "parameter": {}}]}
{"name": "Vega-Lite", "description": "Generate visualizations from fetched data using the VegaLite format and renderer.", "url": "https://github.com/isaacwasserman/mcp-vegalite-server", "readme_file": "community/Vega-Lite.md", "summary": "A Model Context Protocol (MCP) server that provides an interface for visualizing data using Vega-Lite syntax.", "tools": [{"name": "save_data", "description": "Save a table of data aggregations to the server for later visualization.", "parameter": {"name": "(string) Name of the data table to be saved", "data": "(array) Array of objects representing the data table"}}, {"name": "visualize_data", "description": "Visualize a table of data using Vega-Lite syntax.", "parameter": {"data_name": "(string) Name of the data table to be visualized", "vegalite_specification": "(string) JSON string representing the Vega-Lite specification"}}]}
{"name": "Video Editor", "description": "A Model Context Protocol Server to add, edit, and search videos with Video Jungle.", "url": "https://github.com/burningion/video-editing-mcp", "readme_file": "community/Video_Editor.md", "summary": "A server that provides an interface to upload, generate, and edit videos, including custom URI schemes, project management, and search functionalities using embeddings and keywords.", "tools": [{"name": "add-video", "description": "Adds a video from a URL to the user's library and analyzes it for retrieval.", "parameter": {"url": "(string) The URL of the video to add", "name": "(Optional, string) The name to assign to the video"}}, {"name": "search-videos", "description": "Searches videos using embeddings and keywords to find relevant matches.", "parameter": {"query": "(string) The search query to use"}}, {"name": "generate-edit-from-videos", "description": "Generates a rendered video edit from a set of video files based on specified criteria.", "parameter": {}}, {"name": "generate-edit-from-single-video", "description": "Generates an edit from a single input video file based on specified criteria.", "parameter": {}}]}
{"name": "Virtual location (Google Street View,etc.)", "description": "Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)", "url": "https://github.com/mfukushim/map-traveler-mcp", "readme_file": "community/Virtual_location_(Google_Street_View,etc.).md", "summary": "An MCP server that creates an environment for an avatar to virtually travel on Google Maps. Users can give instructions to the avatar and receive updates on its journey, including photos.", "tools": [{"name": "get_traveler_view_info", "description": "Gets information about the current travel avatar's location, optionally including nearby Google Street View photos and information about nearby facilities.", "parameter": {"includePhoto": "(boolean) Gets nearby Google Street View photos. If you have set up an image generation AI, it will synthesize the avatar.", "includeNearbyFacilities": "(boolean) Gets information about nearby facilities."}}, {"name": "get_traveler_location", "description": "Gets information about the current travel avatar's address and nearby facilities.", "parameter": {}}, {"name": "reach_a_percentage_of_destination", "description": "Reaches a specified percentage of the destination (moveMode=skip only).", "parameter": {"timeElapsedPercentage": "(number) Percent progress towards destination (0~100)."}}, {"name": "set_traveler_location", "description": "Sets the current travel avatar's location.", "parameter": {"address": "(string) Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)."}}, {"name": "get_traveler_destination_address", "description": "Gets the destination of the travel avatar you set.", "parameter": {}}, {"name": "set_traveler_destination_address", "description": "Sets the destination of the travel avatar.", "parameter": {"address": "(string) Address information (exact address, or general name that Google Maps or Claude can recognize, etc.)."}}, {"name": "start_traveler_journey", "description": "Starts the journey at the destination (moveMode=realtime only).", "parameter": {}}, {"name": "stop_traveler_journey", "description": "Stops the journey (moveMode=realtime only).", "parameter": {}}, {"name": "set_traveler_info", "description": "Sets the traveler's attributes, such as name and personality.", "parameter": {"settings": "(string) Setting information such as name and personality."}}, {"name": "get_traveler_info", "description": "Gets the traveler's attributes, such as name and personality.", "parameter": {}}, {"name": "set_avatar_prompt", "description": "Sets the prompt when generating the travel avatar image. The default is an anime-style woman.", "parameter": {"prompt": "(string) Prompt for avatar generation."}}, {"name": "reset_avatar_prompt", "description": "Resets avatar generation prompts to default.", "parameter": {}}, {"name": "get_sns_feeds", "description": "Gets Bluesky SNS articles for the specified custom feed (feeds containing a specific tag).", "parameter": {}}, {"name": "get_sns_mentions", "description": "Gets recent mentions (likes, replies) to Bluesky SNS posts that you made yourself.", "parameter": {}}, {"name": "post_sns_writer", "description": "Posts an article to Bluesky SNS with the specified custom feed. Sets a specific tag so that it can be determined that the post was generated by the travel bot.", "parameter": {"message": "(string) Article to post."}}, {"name": "reply_sns_writer", "description": "Replies to the article with the specified id. Sets a specific tag so that it can be determined that the post was generated by the travel bot.", "parameter": {"message": "(string) Reply to post.", "id": "(string) The ID of the post to reply to."}}, {"name": "add_like", "description": "Adds a like to the specified post.", "parameter": {"id": "(string) The ID of the post to like."}}, {"name": "tips", "description": "Guides you on how to set up features that have not yet been set.", "parameter": {}}, {"name": "get_setting", "description": "Gets environment and image settings.", "parameter": {}}]}
{"name": "VolcEngine TOS", "description": "A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.", "url": "https://github.com/dinghuazhou/sample-mcp-server-tos", "readme_file": "community/VolcEngine_TOS.md", "summary": "An MCP server implementation for retrieving data from TOS, including listing buckets, listing objects within a bucket, and retrieving specific objects.", "tools": [{"name": "list_buckets", "description": "Returns a list of all buckets owned by the authenticated sender of the request", "parameter": {}}, {"name": "list_objects", "description": "Returns some or all (up to 1,000) of the objects in a bucket with each request", "parameter": {}}, {"name": "get_object", "description": "Retrieves an object from volcengine TOS. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported", "parameter": {}}]}
{"name": "Webflow", "description": "Interfact with the Webflow APIs", "url": "https://github.com/kapilduraphe/webflow-mcp-server", "readme_file": "community/Webflow.md", "summary": "This MCP server enables Claude to interact with Webflow's APIs, providing tools to retrieve information about Webflow sites.", "tools": [{"name": "get_sites", "description": "Retrieves a list of all Webflow sites accessible to the authenticated user, returning detailed information such as display name, site ID, creation date, and more.", "parameter": {}}, {"name": "get_site", "description": "Retrieves detailed information about a specific Webflow site by ID, returning the same detailed information as get_sites for a single site.", "parameter": {"siteId": "(string) The ID of the Webflow site to retrieve."}}]}
{"name": "whale-tracker-mcp", "description": "A mcp server for tracking cryptocurrency whale transactions.", "url": "https://github.com/kukapay/whale-tracker-mcp", "readme_file": "community/whale-tracker-mcp.md", "summary": "A Python-based MCP server that integrates with the Whale Alert API to enable real-time tracking and analysis of large cryptocurrency transactions ('whale' movements). It provides tools, resources, and prompts for monitoring whale activity within LLM-powered workflows.", "tools": [{"name": "get_recent_transactions", "description": "Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.", "parameter": {"blockchain": "(string) The blockchain to filter transactions by.", "min_value": "(Optional, float) The minimum value of the transactions to fetch.", "limit": "(Optional, int) The maximum number of transactions to return."}}, {"name": "get_transaction_details", "description": "Retrieve detailed information about a specific transaction by its ID.", "parameter": {"transaction_id": "(string) The ID of the transaction to retrieve details for."}}]}
{"name": "Whois MCP", "description": "MCP server that performs whois lookup against domain, IP, ASN and TLD.", "url": "https://github.com/bharathvaj-ganesan/whois-mcp", "readme_file": "community/Whois_MCP.md", "summary": "An MCP server that allows AI agents to perform WHOIS lookups and retrieve domain details, including ownership, registration dates, and more.", "tools": [{"name": "whois_domain", "description": "Looks up WHOIS information about the specified domain.", "parameter": {}}, {"name": "whois_tld", "description": "Looks up WHOIS information about the specified Top Level Domain (TLD).", "parameter": {}}, {"name": "whois_ip", "description": "Looks up WHOIS information about the specified IP address.", "parameter": {}}, {"name": "whois_as", "description": "Looks up WHOIS information about the specified Autonomous System Number (ASN).", "parameter": {}}]}
{"name": "Wikidata MCP", "description": "Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.", "url": "https://github.com/zzaebok/mcp-wikidata", "readme_file": "community/Wikidata_MCP.md", "summary": "A server implementation for interacting with the Wikidata API using the Model Context Protocol (MCP). It provides tools for searching identifiers, extracting metadata, and executing SPARQL queries.", "tools": [{"name": "search_entity", "description": "Search for a Wikidata entity ID by its query.", "parameter": {"query": "(str) The query to search for the entity."}}, {"name": "search_property", "description": "Search for a Wikidata property ID by its query.", "parameter": {"query": "(str) The query to search for the property."}}, {"name": "get_properties", "description": "Get the properties associated with a given Wikidata entity ID.", "parameter": {"entity_id": "(str) The ID of the entity to get properties for."}}, {"name": "execute_sparql", "description": "Execute a SPARQL query on Wikidata.", "parameter": {"sparql_query": "(str) The SPARQL query to execute."}}, {"name": "get_metadata", "description": "Retrieve the label and description for a given Wikidata entity ID in a specified language.", "parameter": {"entity_id": "(str) The ID of the entity to retrieve metadata for.", "language": "(Optional, str) The language for the metadata, default is 'en'."}}]}
{"name": "Windows CLI", "description": "MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.", "url": "https://github.com/SimonB97/win-cli-mcp-server", "readme_file": "community/Windows_CLI.md", "summary": "An MCP server for secure command-line interactions on Windows systems, supporting PowerShell, CMD, Git Bash shells, and remote systems via SSH. It enables controlled access to command execution and resource management.", "tools": [{"name": "execute_command", "description": "Execute a command in the specified shell", "parameter": {"shell": "(string) Shell to use ('powershell', 'cmd', or 'gitbash')", "command": "(string) Command to execute", "workingDir": "(Optional, string) Working directory"}}, {"name": "get_command_history", "description": "Get the history of executed commands", "parameter": {"limit": "(Optional, number)"}}, {"name": "ssh_execute", "description": "Execute a command on a remote system via SSH", "parameter": {"connectionId": "(string) ID of the SSH connection to use", "command": "(string) Command to execute"}}, {"name": "ssh_disconnect", "description": "Disconnect from an SSH server", "parameter": {"connectionId": "(string) ID of the SSH connection to disconnect"}}, {"name": "create_ssh_connection", "description": "Create a new SSH connection", "parameter": {"connectionId": "(string) ID for the new SSH connection", "connectionConfig": "(object) Connection configuration details including host, port, username, and either password or privateKeyPath"}}, {"name": "read_ssh_connections", "description": "Read all configured SSH connections", "parameter": {}}, {"name": "update_ssh_connection", "description": "Update an existing SSH connection", "parameter": {"connectionId": "(string) ID of the SSH connection to update", "connectionConfig": "(object) New connection configuration details"}}, {"name": "delete_ssh_connection", "description": "Delete an SSH connection", "parameter": {"connectionId": "(string) ID of the SSH connection to delete"}}, {"name": "get_current_directory", "description": "Get the current working directory of the server", "parameter": {}}]}
{"name": "World Bank data API", "description": "A server that fetches data indicators available with the World Bank as part of their data API", "url": "https://github.com/anshumax/world_bank_mcp_server", "readme_file": "community/World_Bank_data_API.md", "summary": "A Model Context Protocol (MCP) server that enables interaction with the open World Bank data API, allowing AI assistants to list available countries and indicators, and analyse various indicators for those countries.", "tools": [{"name": "list_countries", "description": "Lists available countries in the World Bank open data API", "parameter": {}}, {"name": "list_indicators", "description": "Lists available indicators in the World Bank open data API", "parameter": {}}, {"name": "analyse_indicators", "description": "Analyses indicators, such as population segments, poverty numbers, etc., for countries", "parameter": {}}]}
{"name": "xcodebuild", "description": "🍎 Build iOS Xcode workspace/project and feed back errors to llm.", "url": "https://github.com/ShenghaiWang/xcodebuild", "readme_file": "community/xcodebuild.md", "summary": "A Model Context Protocol server that builds iOS workspace/projects, enabling seamless workflow integration with iOS projects in Visual Studio Code using extensions like Cline or Roo Code.", "tools": [{"name": "build", "description": "Build iOS Xcode workspace/project", "parameter": {"folder": "(string, required) The full path of the current folder that the iOS Xcode workspace/project sits"}}, {"name": "test", "description": "Run test for iOS Xcode workspace/project", "parameter": {"folder": "(string, required) The full path of the current folder that the iOS Xcode workspace/project sits"}}]}
{"name": "Xero-mcp-server", "description": "Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.", "url": "https://github.com/john-zhang-dev/xero-mcp", "readme_file": "community/Xero-mcp-server.md", "summary": "This MCP server enables clients to interact with Xero Accounting Software, providing functionalities such as authentication, creating and listing various financial transactions, and retrieving organizational details.", "tools": [{"name": "authenticate", "description": "Authenticate with Xero using OAuth2", "parameter": {}}, {"name": "create_bank_transactions", "description": "Creates one or more spent or received money transactions", "parameter": {}}, {"name": "create_contacts", "description": "Creates one or multiple contacts in a Xero organisation", "parameter": {}}, {"name": "get_balance_sheet", "description": "Retrieves report for balance sheet", "parameter": {}}, {"name": "list_accounts", "description": "Retrieves the full chart of accounts", "parameter": {}}, {"name": "list_bank_transactions", "description": "Retrieves any spent or received money transactions", "parameter": {}}, {"name": "list_contacts", "description": "Retrieves all contacts in a Xero organisation", "parameter": {}}, {"name": "list_invoices", "description": "Retrieves sales invoices or purchase bills", "parameter": {}}, {"name": "list_journals", "description": "Retrieves journals", "parameter": {}}, {"name": "list_organisations", "description": "Retrieves Xero organisation details", "parameter": {}}, {"name": "list_payments", "description": "Retrieves payments for invoices and credit notes", "parameter": {}}, {"name": "list_quotes", "description": "Retrieves sales quotes", "parameter": {}}]}
{"name": "XiYan", "description": "🗄️ An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.", "url": "https://github.com/XGenerationLab/xiyan_mcp_server", "readme_file": "community/XiYan.md", "summary": "A Model Context Protocol (MCP) server that enables natural language queries to databases, powered by XiYan-SQL, a state-of-the-art text-to-sql model. It supports general LLMs, a text-to-sql SOTA model, and operates in both remote and local modes for enhanced security. The server supports MySQL and PostgreSQL databases, listing available tables and reading table contents.", "tools": [{"name": "get_data", "description": "Provides a natural language interface for retrieving data from a database. Converts the input natural language into SQL using a built-in model and calls the database to return the query results.", "parameter": {}}]}
{"name": "XMind", "description": "Read and search through your XMind directory containing XMind files.", "url": "https://github.com/apeyroux/mcp-xmind", "readme_file": "community/XMind.md", "summary": "A Model Context Protocol server for analyzing and querying XMind mind maps, providing capabilities for smart fuzzy search, task management, hierarchical content navigation, link and reference extraction, multi-file analysis, label and tag support, directory scanning, and secure directory access.", "tools": [{"name": "read_xmind", "description": "Parse and analyze XMind files, extracting the complete mind map structure.", "parameter": {}}, {"name": "get_todo_tasks", "description": "Extract and analyze TODO tasks, including task context and hierarchy.", "parameter": {}}, {"name": "list_xmind_directory", "description": "Recursively scan for XMind files, filtering and organizing results.", "parameter": {}}, {"name": "read_multiple_xmind_files", "description": "Process multiple files simultaneously, comparing and analyzing across files.", "parameter": {}}, {"name": "search_xmind_files", "description": "Search files by name patterns, with recursive directory scanning.", "parameter": {}}, {"name": "extract_node", "description": "Perform smart fuzzy path matching, returning ranked search results and complete subtree extraction.", "parameter": {"path": "(string) Path to the XMind file.", "searchQuery": "(string) Fuzzy path query to match nodes."}}, {"name": "extract_node_by_id", "description": "Directly access a node by its ID for fast and precise retrieval.", "parameter": {"path": "(string) Path to the XMind file.", "nodeId": "(string) ID of the node to extract."}}, {"name": "search_nodes", "description": "Perform multi-criteria content search with configurable search fields.", "parameter": {"path": "(string) Path to the XMind file.", "query": "(string) Search query.", "searchIn": "(array) Fields to search in (e.g., ['title', 'notes']).", "caseSensitive": "(boolean, optional) Whether the search should be case-sensitive."}}]}
{"name": "YouTube", "description": "Comprehensive YouTube API integration for video management, Shorts creation, and analytics.", "url": "https://github.com/ZubeidHendricks/youtube-mcp-server", "readme_file": "community/YouTube_2.md", "summary": "A Model Context Protocol (MCP) server implementation for YouTube, enabling AI language models to interact with YouTube content through a standardized interface. It provides features for managing videos, transcripts, channels, and playlists.", "tools": [{"name": "videos.getVideo", "description": "Get video details such as title, description, and duration.", "parameter": {"videoId": "(string) The ID of the video."}}, {"name": "transcripts.getTranscript", "description": "Retrieve the transcript of a video, supporting multiple languages.", "parameter": {"videoId": "(string) The ID of the video.", "language": "(string) The language of the transcript (default is 'en')."}}, {"name": "videos.searchVideos", "description": "Search for videos across YouTube.", "parameter": {"query": "(string) The search term.", "maxResults": "(number) The maximum number of results to return."}}, {"name": "channels.getChannel", "description": "Get details of a YouTube channel.", "parameter": {"channelId": "(string) The ID of the channel."}}, {"name": "channels.listVideos", "description": "List videos from a specific channel.", "parameter": {"channelId": "(string) The ID of the channel.", "maxResults": "(number) The maximum number of results to return."}}, {"name": "playlists.getPlaylistItems", "description": "Get items from a playlist.", "parameter": {"playlistId": "(string) The ID of the playlist.", "maxResults": "(number) The maximum number of results to return."}}, {"name": "playlists.getPlaylist", "description": "Get details of a playlist.", "parameter": {"playlistId": "(string) The ID of the playlist."}}]}
{"name": "mcp_weather", "description": "Get weather information from https://api.open-meteo.com API.", "url": "https://github.com/isdaniel/mcp_weather_server", "readme_file": "community/mcp_weather.md", "summary": "A Model Context Protocol (MCP) server that provides weather information using the Open-Meteo API.", "tools": [{"name": "get_weather", "description": "Retrieves the current weather information for a given city.", "parameter": {"city": "(string, required) The name of the city."}}, {"name": "get_weather_by_datetime_range", "description": "Retrieves weather information for a specified city between start and end dates.", "parameter": {"city": "(string, required) The name of the city.", "start_date": "(string, required) Start date in format YYYY-MM-DD (ISO 8601).", "end_date": "(string, required) End date in format YYYY-MM-DD (ISO 8601)."}}, {"name": "get_current_datetime", "description": "Retrieves the current time in a specified timezone.", "parameter": {"timezone_name": "(string, required) IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user."}}]}
{"name": "AWS KB Retrieval", "description": "Retrieval from AWS Knowledge Base using Bedrock Agent Runtime", "url": "src/aws-kb-retrieval-server", "readme_file": "reference/aws-kb-retrieval-server.md", "summary": "An MCP server for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime. It supports RAG (Retrieval-Augmented Generation) and allows for customizable result retrieval.", "tools": [{"name": "retrieve_from_aws_kb", "description": "Perform retrieval operations using the AWS Knowledge Base.", "parameter": {"query": "(string) The search query for retrieval.", "knowledgeBaseId": "(string) The ID of the AWS Knowledge Base.", "n": "(number, optional) Number of results to retrieve (default: 3)."}}]}
{"name": "Brave Search", "description": "Web and local search using Brave's Search API", "url": "src/brave-search", "readme_file": "reference/brave-search.md", "summary": "An MCP server implementation that integrates the Brave Search API, providing both web and local search capabilities with features like pagination, flexible filtering, and smart fallbacks.", "tools": [{"name": "brave_web_search", "description": "Execute web searches with pagination and filtering", "parameter": {"query": "(string) Search terms", "count": "(Optional, number) Results per page (max 20)", "offset": "(Optional, number) Pagination offset (max 9)"}}, {"name": "brave_local_search", "description": "Search for local businesses and services", "parameter": {"query": "(string) Local search terms", "count": "(Optional, number) Number of results (max 20)"}}]}
{"name": "EverArt", "description": "AI image generation using various models", "url": "src/everart", "readme_file": "reference/everart.md", "summary": "Image generation server for Claude Desktop using EverArt's API. It provides a tool to generate images with multiple model options, opening the result in a browser and returning the URL.", "tools": [{"name": "generate_image", "description": "Generates images with multiple model options. Opens result in browser and returns URL.", "parameter": {"prompt": "(string) Image description", "model": "(Optional, string) Model ID (default: \"207910310772879360\")", "image_count": "(Optional, number) Number of images (default: 1)"}}]}
{"name": "Everything", "description": "Reference / test server with prompts, resources, and tools", "url": "src/everything", "readme_file": "reference/everything.md", "summary": "A test server designed to showcase all features of the MCP protocol, including prompts, tools, resources, and sampling. It is not intended for production use but for testing MCP clients.", "tools": [{"name": "echo", "description": "Simple tool to echo back input messages", "parameter": {"message": "(string) Message to echo back"}}, {"name": "add", "description": "Adds two numbers together", "parameter": {"a": "(number) First number", "b": "(number) Second number"}}, {"name": "longRunningOperation", "description": "Demonstrates progress notifications for long operations", "parameter": {"duration": "(number, default: 10) Duration in seconds", "steps": "(number, default: 5) Number of progress steps"}}, {"name": "sampleLLM", "description": "Demonstrates LLM sampling capability using MCP sampling feature", "parameter": {"prompt": "(string) The prompt to send to the LLM", "maxTokens": "(number, default: 100) Maximum tokens to generate"}}, {"name": "getTinyImage", "description": "Returns a small test image", "parameter": {}}, {"name": "printEnv", "description": "Prints all environment variables", "parameter": {}}, {"name": "annotatedMessage", "description": "Demonstrates how annotations can be used to provide metadata about content", "parameter": {"messageType": "(enum: 'error' | 'success' | 'debug') Type of message to demonstrate different annotation patterns", "includeImage": "(boolean, default: false) Whether to include an example image"}}, {"name": "getResourceReference", "description": "Returns a resource reference that can be used by MCP clients", "parameter": {"resourceId": "(number, 1-100) ID of the resource to reference"}}]}
{"name": "Fetch", "description": "Web content fetching and conversion for efficient LLM usage", "url": "src/fetch", "readme_file": "reference/fetch.md", "summary": "A Model Context Protocol server that provides web content fetching capabilities, enabling LLMs to retrieve and process content from web pages, converting HTML to markdown for easier consumption.", "tools": [{"name": "fetch", "description": "Fetches a URL from the internet and extracts its contents as markdown.", "parameter": {"url": "(string, required) URL to fetch", "max_length": "(integer, optional) Maximum number of characters to return (default: 5000)", "start_index": "(integer, optional) Start content from this character index (default: 0)", "raw": "(boolean, optional) Get raw content without markdown conversion (default: false)"}}]}
{"name": "Filesystem", "description": "Secure file operations with configurable access controls", "url": "src/filesystem", "readme_file": "reference/filesystem.md", "summary": "Node.js server implementing Model Context Protocol (MCP) for filesystem operations, including read/write files, create/list/delete directories, move files/directories, search files, and get file metadata.", "tools": [{"name": "read_file", "description": "Read complete contents of a file", "parameter": {"path": "(string) File path"}}, {"name": "read_multiple_files", "description": "Read multiple files simultaneously", "parameter": {"paths": "(string[]) Array of file paths"}}, {"name": "write_file", "description": "Create new file or overwrite existing", "parameter": {"path": "(string) File location", "content": "(string) File content"}}, {"name": "edit_file", "description": "Make selective edits using advanced pattern matching and formatting", "parameter": {"path": "(string) File to edit", "edits": "(array) List of edit operations", "dryRun": "(boolean) Preview changes without applying (default: false)"}}, {"name": "create_directory", "description": "Create new directory or ensure it exists", "parameter": {"path": "(string) Directory path"}}, {"name": "list_directory", "description": "List directory contents with [FILE] or [DIR] prefixes", "parameter": {"path": "(string) Directory path"}}, {"name": "move_file", "description": "Move or rename files and directories", "parameter": {"source": "(string) Source path", "destination": "(string) Destination path"}}, {"name": "search_files", "description": "Recursively search for files/directories", "parameter": {"path": "(string) Starting directory", "pattern": "(string) Search pattern", "excludePatterns": "(string[]) Array of exclude patterns"}}, {"name": "get_file_info", "description": "Get detailed file/directory metadata", "parameter": {"path": "(string) File or directory path"}}, {"name": "list_allowed_directories", "description": "List all directories the server is allowed to access", "parameter": {}}]}
{"name": "Git", "description": "Tools to read, search, and manipulate Git repositories", "url": "src/git", "readme_file": "reference/git.md", "summary": "A Model Context Protocol server for Git repository interaction and automation. It provides tools to read, search, and manipulate Git repositories via Large Language Models.", "tools": [{"name": "git_status", "description": "Shows the working tree status", "parameter": {"repo_path": "(string) Path to Git repository"}}, {"name": "git_diff_unstaged", "description": "Shows changes in working directory not yet staged", "parameter": {"repo_path": "(string) Path to Git repository"}}, {"name": "git_diff_staged", "description": "Shows changes that are staged for commit", "parameter": {"repo_path": "(string) Path to Git repository"}}, {"name": "git_diff", "description": "Shows differences between branches or commits", "parameter": {"repo_path": "(string) Path to Git repository", "target": "(string) Target branch or commit to compare with"}}, {"name": "git_commit", "description": "Records changes to the repository", "parameter": {"repo_path": "(string) Path to Git repository", "message": "(string) Commit message"}}, {"name": "git_add", "description": "Adds file contents to the staging area", "parameter": {"repo_path": "(string) Path to Git repository", "files": "(string[]) Array of file paths to stage"}}, {"name": "git_reset", "description": "Unstages all staged changes", "parameter": {"repo_path": "(string) Path to Git repository"}}, {"name": "git_log", "description": "Shows the commit logs", "parameter": {"repo_path": "(string) Path to Git repository", "max_count": "(number, optional) Maximum number of commits to show (default: 10)"}}, {"name": "git_create_branch", "description": "Creates a new branch", "parameter": {"repo_path": "(string) Path to Git repository", "branch_name": "(string) Name of the new branch", "start_point": "(string, optional) Starting point for the new branch"}}, {"name": "git_checkout", "description": "Switches branches", "parameter": {"repo_path": "(string) Path to Git repository", "branch_name": "(string) Name of branch to checkout"}}, {"name": "git_show", "description": "Shows the contents of a commit", "parameter": {"repo_path": "(string) Path to Git repository", "revision": "(string) The revision (commit hash, branch name, tag) to show"}}, {"name": "git_init", "description": "Initializes a Git repository", "parameter": {"repo_path": "(string) Path to directory to initialize git repo"}}]}
{"name": "GitHub", "description": "Repository management, file operations, and GitHub API integration", "url": "src/github", "readme_file": "reference/github.md", "summary": "MCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.", "tools": [{"name": "create_or_update_file", "description": "Create or update a single file in a repository", "parameter": {"owner": "(string) Repository owner (username or organization)", "repo": "(string) Repository name", "path": "(string) Path where to create/update the file", "content": "(string) Content of the file", "message": "(string) Commit message", "branch": "(string) Branch to create/update the file in", "sha": "(optional string) SHA of file being replaced (for updates)"}}, {"name": "push_files", "description": "Push multiple files in a single commit", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "branch": "(string) Branch to push to", "files": "(array) Files to push, each with `path` and `content`", "message": "(string) Commit message"}}, {"name": "search_repositories", "description": "Search for GitHub repositories", "parameter": {"query": "(string) Search query", "page": "(optional number) Page number for pagination", "perPage": "(optional number) Results per page (max 100)"}}, {"name": "create_repository", "description": "Create a new GitHub repository", "parameter": {"name": "(string) Repository name", "description": "(optional string) Repository description", "private": "(optional boolean) Whether repo should be private", "autoInit": "(optional boolean) Initialize with README"}}, {"name": "get_file_contents", "description": "Get contents of a file or directory", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "path": "(string) Path to file/directory", "branch": "(optional string) Branch to get contents from"}}, {"name": "create_issue", "description": "Create a new issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "title": "(string) Issue title", "body": "(optional string) Issue description", "assignees": "(optional string[]) Usernames to assign", "labels": "(optional string[]) Labels to add", "milestone": "(optional number) Milestone number"}}, {"name": "create_pull_request", "description": "Create a new pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "title": "(string) PR title", "body": "(optional string) PR description", "head": "(string) Branch containing changes", "base": "(string) Branch to merge into", "draft": "(optional boolean) Create as draft PR", "maintainer_can_modify": "(optional boolean) Allow maintainer edits"}}, {"name": "fork_repository", "description": "Fork a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "organization": "(optional string) Organization to fork to"}}, {"name": "create_branch", "description": "Create a new branch", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "branch": "(string) Name for new branch", "from_branch": "(optional string) Source branch (defaults to repo default)"}}, {"name": "list_issues", "description": "List and filter repository issues", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "state": "(optional string) Filter by state ('open', 'closed', 'all')", "labels": "(optional string[]) Filter by labels", "sort": "(optional string) Sort by ('created', 'updated', 'comments')", "direction": "(optional string) Sort direction ('asc', 'desc')", "since": "(optional string) Filter by date (ISO 8601 timestamp)", "page": "(optional number) Page number", "per_page": "(optional number) Results per page"}}, {"name": "update_issue", "description": "Update an existing issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to update", "title": "(optional string) New title", "body": "(optional string) New description", "state": "(optional string) New state ('open' or 'closed')", "labels": "(optional string[]) New labels", "assignees": "(optional string[]) New assignees", "milestone": "(optional number) New milestone number"}}, {"name": "add_issue_comment", "description": "Add a comment to an issue", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to comment on", "body": "(string) Comment text"}}, {"name": "search_code", "description": "Search for code across GitHub repositories", "parameter": {"q": "(string) Search query using GitHub code search syntax", "sort": "(optional string) Sort field ('indexed' only)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}}, {"name": "search_issues", "description": "Search for issues and pull requests", "parameter": {"q": "(string) Search query using GitHub issues search syntax", "sort": "(optional string) Sort field (comments, reactions, created, etc.)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}}, {"name": "search_users", "description": "Search for GitHub users", "parameter": {"q": "(string) Search query using GitHub users search syntax", "sort": "(optional string) Sort field (followers, repositories, joined)", "order": "(optional string) Sort order ('asc' or 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}}, {"name": "list_commits", "description": "Gets commits of a branch in a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "page": "(optional string) page number", "per_page": "(optional string) number of record per page", "sha": "(optional string) branch name"}}, {"name": "get_issue", "description": "Gets the contents of an issue within a repository", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "issue_number": "(number) Issue number to retrieve"}}, {"name": "get_pull_request", "description": "Get details of a specific pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}}, {"name": "list_pull_requests", "description": "List and filter repository pull requests", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "state": "(optional string) Filter by state ('open', 'closed', 'all')", "head": "(optional string) Filter by head user/org and branch", "base": "(optional string) Filter by base branch", "sort": "(optional string) Sort by ('created', 'updated', 'popularity', 'long-running')", "direction": "(optional string) Sort direction ('asc', 'desc')", "per_page": "(optional number) Results per page (max 100)", "page": "(optional number) Page number"}}, {"name": "create_pull_request_review", "description": "Create a review on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "body": "(string) Review comment text", "event": "(string) Review action ('APPROVE', 'REQUEST_CHANGES', 'COMMENT')", "commit_id": "(optional string) SHA of commit to review", "comments": "(optional array) Line-specific comments, each with:"}}, {"name": "merge_pull_request", "description": "Merge a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "commit_title": "(optional string) Title for merge commit", "commit_message": "(optional string) Extra detail for merge commit", "merge_method": "(optional string) Merge method ('merge', 'squash', 'rebase')"}}, {"name": "get_pull_request_files", "description": "Get the list of files changed in a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}}, {"name": "get_pull_request_status", "description": "Get the combined status of all status checks for a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}}, {"name": "update_pull_request_branch", "description": "Update a pull request branch with the latest changes from the base branch (equivalent to GitHub's 'Update branch' button)", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number", "expected_head_sha": "(optional string) The expected SHA of the pull request's HEAD ref"}}, {"name": "get_pull_request_comments", "description": "Get the review comments on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}}, {"name": "get_pull_request_reviews", "description": "Get the reviews on a pull request", "parameter": {"owner": "(string) Repository owner", "repo": "(string) Repository name", "pull_number": "(number) Pull request number"}}]}
{"name": "GitLab", "description": "GitLab API, enabling project management", "url": "src/gitlab", "readme_file": "reference/gitlab.md", "summary": "MCP Server for the GitLab API, enabling project management, file operations, and more. It supports automatic branch creation, comprehensive error handling, Git history preservation, and batch operations.", "tools": [{"name": "create_or_update_file", "description": "Create or update a single file in a project", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "file_path": "(string) Path where to create/update the file", "content": "(string) Content of the file", "commit_message": "(string) Commit message", "branch": "(string) Branch to create/update the file in", "previous_path": "(Optional, string) Path of the file to move/rename"}}, {"name": "push_files", "description": "Push multiple files in a single commit", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "branch": "(string) Branch to push to", "files": "(array) Files to push, each with `file_path` and `content`", "commit_message": "(string) Commit message"}}, {"name": "search_repositories", "description": "Search for GitLab projects", "parameter": {"search": "(string) Search query", "page": "(Optional, number) Page number for pagination", "per_page": "(Optional, number) Results per page (default 20)"}}, {"name": "create_repository", "description": "Create a new GitLab project", "parameter": {"name": "(string) Project name", "description": "(Optional, string) Project description", "visibility": "(Optional, string) 'private', 'internal', or 'public'", "initialize_with_readme": "(Optional, boolean) Initialize with README"}}, {"name": "get_file_contents", "description": "Get contents of a file or directory", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "file_path": "(string) Path to file/directory", "ref": "(Optional, string) Branch/tag/commit to get contents from"}}, {"name": "create_issue", "description": "Create a new issue", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "title": "(string) Issue title", "description": "(Optional, string) Issue description", "assignee_ids": "(Optional, number[]) User IDs to assign", "labels": "(Optional, string[]) Labels to add", "milestone_id": "(Optional, number) Milestone ID"}}, {"name": "create_merge_request", "description": "Create a new merge request", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "title": "(string) MR title", "description": "(Optional, string) MR description", "source_branch": "(string) Branch containing changes", "target_branch": "(string) Branch to merge into", "draft": "(Optional, boolean) Create as draft MR", "allow_collaboration": "(Optional, boolean) Allow commits from upstream members"}}, {"name": "fork_repository", "description": "Fork a project", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "namespace": "(Optional, string) Namespace to fork to"}}, {"name": "create_branch", "description": "Create a new branch", "parameter": {"project_id": "(string) Project ID or URL-encoded path", "branch": "(string) Name for new branch", "ref": "(Optional, string) Source branch/commit for new branch"}}]}
{"name": "Google Drive", "description": "File access and search capabilities for Google Drive", "url": "src/gdrive", "readme_file": "reference/gdrive.md", "summary": "This MCP server integrates with Google Drive to allow listing, reading, and searching over files. It supports accessing various file types, including automatic export of Google Workspace files to common formats.", "tools": [{"name": "search", "description": "Search for files in Google Drive", "parameter": {"query": "(string) Search query"}}]}
{"name": "Google Maps", "description": "Location services, directions, and place details", "url": "src/google-maps", "readme_file": "reference/google-maps.md", "summary": "MCP Server for the Google Maps API, providing various tools for geocoding, reverse geocoding, place searching, detailed place information, distance matrix calculation, elevation data retrieval, and route directions.", "tools": [{"name": "maps_geocode", "description": "Convert address to coordinates", "parameter": {"address": "(string) Address to be converted"}}, {"name": "maps_reverse_geocode", "description": "Convert coordinates to address", "parameter": {"latitude": "(number) Latitude coordinate", "longitude": "(number) Longitude coordinate"}}, {"name": "maps_search_places", "description": "Search for places using text query", "parameter": {"query": "(string) Text query for place search", "location": "(Optional, object) { latitude: number, longitude: number }", "radius": "(Optional, number) Radius in meters (max 50000)"}}, {"name": "maps_place_details", "description": "Get detailed information about a place", "parameter": {"place_id": "(string) Place ID to get details for"}}, {"name": "maps_distance_matrix", "description": "Calculate distances and times between points", "parameter": {"origins": "(string[]) List of origin addresses", "destinations": "(string[]) List of destination addresses", "mode": "(Optional, string) Travel mode: 'driving', 'walking', 'bicycling', 'transit'"}}, {"name": "maps_elevation", "description": "Get elevation data for locations", "parameter": {"locations": "(array of objects) [{latitude, longitude}]"}}, {"name": "maps_directions", "description": "Get directions between points", "parameter": {"origin": "(string) Origin address", "destination": "(string) Destination address", "mode": "(Optional, string) Travel mode: 'driving', 'walking', 'bicycling', 'transit'"}}]}
{"name": "Memory", "description": "Knowledge graph-based persistent memory system", "url": "src/memory", "readme_file": "reference/memory.md", "summary": "A basic implementation of persistent memory using a local knowledge graph, allowing Claude to remember information about users across different chat sessions.", "tools": [{"name": "create_entities", "description": "Create multiple new entities in the knowledge graph.", "parameter": {"entities": "(array of objects) Each object contains: `name` (string): Entity identifier, `entityType` (string): Type classification, `observations` (string[]): Associated observations"}}, {"name": "create_relations", "description": "Create multiple new relations between entities.", "parameter": {"relations": "(array of objects) Each object contains: `from` (string): Source entity name, `to` (string): Target entity name, `relationType` (string): Relationship type in active voice"}}, {"name": "add_observations", "description": "Add new observations to existing entities.", "parameter": {"observations": "(array of objects) Each object contains: `entityName` (string): Target entity, `contents` (string[]): New observations to add"}}, {"name": "delete_entities", "description": "Remove entities and their relations.", "parameter": {"entityNames": "(string[]) List of entity names to delete"}}, {"name": "delete_observations", "description": "Remove specific observations from entities.", "parameter": {"deletions": "(array of objects) Each object contains: `entityName` (string): Target entity, `observations` (string[]): Observations to remove"}}, {"name": "delete_relations", "description": "Remove specific relations from the graph.", "parameter": {"relations": "(array of objects) Each object contains: `from` (string): Source entity name, `to` (string): Target entity name, `relationType` (string): Relationship type"}}, {"name": "read_graph", "description": "Read the entire knowledge graph.", "parameter": {}}, {"name": "search_nodes", "description": "Search for nodes based on a query.", "parameter": {"query": "(string) Search term to match against entity names, types, and observation content"}}, {"name": "open_nodes", "description": "Retrieve specific nodes by name.", "parameter": {"names": "(string[]) List of node names to retrieve"}}]}
{"name": "PostgreSQL", "description": "Read-only database access with schema inspection", "url": "src/postgres", "readme_file": "reference/postgres.md", "summary": "A Model Context Protocol server that provides read-only access to PostgreSQL databases, enabling LLMs to inspect database schemas and execute read-only queries.", "tools": [{"name": "query", "description": "Execute read-only SQL queries against the connected database", "parameter": {"sql": "(string): The SQL query to execute"}}]}
{"name": "Puppeteer", "description": "Browser automation and web scraping", "url": "src/puppeteer", "readme_file": "reference/puppeteer.md", "summary": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer. It enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.", "tools": [{"name": "puppeteer_navigate", "description": "Navigate to any URL in the browser", "parameter": {"url": "(string, required): URL to navigate to", "launchOptions": "(object, optional): PuppeteerJS LaunchOptions. Default null. If changed and not null, browser restarts. Example: { headless: true, args: ['--user-data-dir=\"C:/Data\"'] }", "allowDangerous": "(boolean, optional): Allow dangerous LaunchOptions that reduce security. When false, dangerous args like --no-sandbox, --disable-web-security will throw errors. Default false."}}, {"name": "puppeteer_screenshot", "description": "Capture screenshots of the entire page or specific elements", "parameter": {"name": "(string, required): Name for the screenshot", "selector": "(string, optional): CSS selector for element to screenshot", "width": "(number, optional, default: 800): Screenshot width", "height": "(number, optional, default: 600): Screenshot height", "encoded": "(boolean, optional): If true, capture the screenshot as a base64-encoded data URI (as text) instead of binary image content. Default false."}}, {"name": "puppeteer_click", "description": "Click elements on the page", "parameter": {"selector": "(string): CSS selector for element to click"}}, {"name": "puppeteer_hover", "description": "Hover elements on the page", "parameter": {"selector": "(string): CSS selector for element to hover"}}, {"name": "puppeteer_fill", "description": "Fill out input fields", "parameter": {"selector": "(string): CSS selector for input field", "value": "(string): Value to fill"}}, {"name": "puppeteer_select", "description": "Select an element with SELECT tag", "parameter": {"selector": "(string): CSS selector for element to select", "value": "(string): Value to select"}}, {"name": "puppeteer_evaluate", "description": "Execute JavaScript in the browser console", "parameter": {"script": "(string): JavaScript code to execute"}}]}
{"name": "Redis", "description": "Interact with Redis key-value stores", "url": "src/redis", "readme_file": "reference/redis.md", "summary": "A Model Context Protocol server that provides access to Redis databases, enabling LLMs to interact with Redis key-value stores.", "tools": [{"name": "set", "description": "Set a Redis key-value pair with optional expiration", "parameter": {"key": "(string) Redis key", "value": "(string) Value to store", "expireSeconds": "(Optional, number) Expiration time in seconds"}}, {"name": "get", "description": "Get value by key from Redis", "parameter": {"key": "(string) Redis key to retrieve"}}, {"name": "delete", "description": "Delete one or more keys from Redis", "parameter": {"key": "(string | string[]) Key or array of keys to delete"}}, {"name": "list", "description": "List Redis keys matching a pattern", "parameter": {"pattern": "(Optional, string) Pattern to match keys (default: *)"}}]}
{"name": "Sentry", "description": "Retrieving and analyzing issues from Sentry.io", "url": "src/sentry", "readme_file": "reference/sentry.md", "summary": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io. It provides tools to inspect error reports, stacktraces, and other debugging information from your Sentry account.", "tools": [{"name": "get_sentry_issue", "description": "Retrieve and analyze a Sentry issue by ID or URL", "parameter": {"issue_id_or_url": "(string) Sentry issue ID or URL to analyze"}}, {"name": "sentry-issue", "description": "Retrieve issue details from Sentry", "parameter": {"issue_id_or_url": "(string) Sentry issue ID or URL"}}]}
{"name": "Sequential Thinking", "description": "Dynamic and reflective problem-solving through thought sequences", "url": "src/sequentialthinking", "readme_file": "reference/sequentialthinking.md", "summary": "An MCP server implementation that provides a tool for dynamic and reflective problem-solving through a structured thinking process. It helps break down complex problems into manageable steps, revise and refine thoughts, branch into alternative paths of reasoning, adjust the total number of thoughts dynamically, and generate and verify solution hypotheses.", "tools": [{"name": "sequential_thinking", "description": "Facilitates a detailed, step-by-step thinking process for problem-solving and analysis.", "parameter": {"thought": "(string) The current thinking step", "nextThoughtNeeded": "(boolean) Whether another thought step is needed", "thoughtNumber": "(integer) Current thought number", "totalThoughts": "(integer) Estimated total thoughts needed", "isRevision": "(boolean, optional) Whether this revises previous thinking", "revisesThought": "(integer, optional) Which thought is being reconsidered", "branchFromThought": "(integer, optional) Branching point thought number", "branchId": "(string, optional) Branch identifier", "needsMoreThoughts": "(boolean, optional) If more thoughts are needed"}}]}
{"name": "Slack", "description": "Channel management and messaging capabilities", "url": "src/slack", "readme_file": "reference/slack.md", "summary": "MCP Server for the Slack API, enabling Claude to interact with Slack workspaces. It provides various tools for managing channels, posting messages, reacting to messages, and retrieving user and message data.", "tools": [{"name": "slack_list_channels", "description": "List public or pre-defined channels in the workspace", "parameter": {"limit": "(Optional, number) Maximum number of channels to return (default: 100, max: 200)", "cursor": "(Optional, string) Pagination cursor for next page"}}, {"name": "slack_post_message", "description": "Post a new message to a Slack channel", "parameter": {"channel_id": "(string) The ID of the channel to post to", "text": "(string) The message text to post"}}, {"name": "slack_reply_to_thread", "description": "Reply to a specific message thread", "parameter": {"channel_id": "(string) The channel containing the thread", "thread_ts": "(string) Timestamp of the parent message", "text": "(string) The reply text"}}, {"name": "slack_add_reaction", "description": "Add an emoji reaction to a message", "parameter": {"channel_id": "(string) The channel containing the message", "timestamp": "(string) Message timestamp to react to", "reaction": "(string) Emoji name without colons"}}, {"name": "slack_get_channel_history", "description": "Get recent messages from a channel", "parameter": {"channel_id": "(string) The channel ID", "limit": "(Optional, number) Number of messages to retrieve (default: 10)"}}, {"name": "slack_get_thread_replies", "description": "Get all replies in a message thread", "parameter": {"channel_id": "(string) The channel containing the thread", "thread_ts": "(string) Timestamp of the parent message"}}, {"name": "slack_get_users", "description": "Get list of workspace users with basic profile information", "parameter": {"cursor": "(Optional, string) Pagination cursor for next page", "limit": "(Optional, number) Maximum users to return (default: 100, max: 200)"}}, {"name": "slack_get_user_profile", "description": "Get detailed profile information for a specific user", "parameter": {"user_id": "(string) The user's ID"}}]}
{"name": "Sqlite", "description": "Database interaction and business intelligence capabilities", "url": "src/sqlite", "readme_file": "reference/sqlite.md", "summary": "A Model Context Protocol (MCP) server implementation that provides database interaction and business intelligence capabilities through SQLite. It enables running SQL queries, analyzing business data, and automatically generating business insight memos.", "tools": [{"name": "read_query", "description": "Execute SELECT queries to read data from the database", "parameter": {"query": "(string) The SELECT SQL query to execute"}}, {"name": "write_query", "description": "Execute INSERT, UPDATE, or DELETE queries", "parameter": {"query": "(string) The SQL modification query"}}, {"name": "create_table", "description": "Create new tables in the database", "parameter": {"query": "(string) CREATE TABLE SQL statement"}}, {"name": "list_tables", "description": "Get a list of all tables in the database", "parameter": {}}, {"name": "describe-table", "description": "View schema information for a specific table", "parameter": {"table_name": "(string) Name of table to describe"}}, {"name": "append_insight", "description": "Add new business insights to the memo resource", "parameter": {"insight": "(string) Business insight discovered from data analysis"}}]}
{"name": "Time", "description": "Time and timezone conversion capabilities", "url": "src/time", "readme_file": "reference/time.md", "summary": "A Model Context Protocol server that provides time and timezone conversion capabilities, enabling LLMs to get current time information and perform timezone conversions using IANA timezone names.", "tools": [{"name": "get_current_time", "description": "Get current time in a specific timezone or system timezone.", "parameter": {"timezone": "(string) IANA timezone name (e.g., 'America/New_York', 'Europe/London')"}}, {"name": "convert_time", "description": "Convert time between timezones.", "parameter": {"source_timezone": "(string) Source IANA timezone name", "time": "(string) Time in 24-hour format (HH:MM)", "target_timezone": "(string) Target IANA timezone name"}}]}
